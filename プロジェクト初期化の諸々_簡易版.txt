# グローバルインストール済
# npm install --save dotenv
# npm install --save mysql2
# npm install axios
# npm install -g eslint prettier --save-dev
# npm install -g xmlhttprequest


mkdir プロジェクト名
cd プロジェクト名

npm init -y



# tsconfig.json 生成

npx tsc --init

新しめのtsconfig.jsonのサンプル
{
	"compilerOptions": {
		"target": "ES2019",
		"module": "commonjs",
		"sourceMap": true,
		"outDir": "./dist",
		"strict": true,
		"esModuleInterop": true,
		"skipLibCheck": true,
		"forceConsistentCasingInFileNames": true
	},
	"include": ["src/**/*"]
}

# package.jsonのサンプル
{
	"name": "プロジェクト名",
	"version": "0.1.0",
	"main": "dist/index.js",
	"scripts": {
		"dev": "ts-node src/index.ts",
		"dev:watch": "ts-node-dev --respawn src/index.ts" /* 対象が常駐プログラムの場合は --respawn 不要 */
		"clean": "rimraf dist/*",
		"tsc": "tsc",
		"build": "npm-run-all clean tsc",
		"start": "node ."
	}
}


# ソース変更を検知してコンパイル
npm run dev			#一回実行
npm run dev:watch	#変更検知(自動ビルド)


# TypeScript -> JavaScript に変換
npm run build


# 生成されたJavaScriptを実行
npm run start
## または
npm start


# 生成されたファイルを削除
npm run clean


# 以下、package.jsonを作成後に行う

npm install typescript --save-dev
npm install @types/node --save-dev
npm install ts-node -D
npm install ts-node-dev -D
npm install rimraf npm-run-all -D
npm install webpack webpack-cli --save-dev
npm install dotenv --save
npm install mysql2 --save
npm install @types/mysql --save-dev
npm install axios
npm install @types/axios --save-dev


# Webpackの設定
# touch webpack.config.js


#webpack(webpack.config.js)の設定例
>>>
const path = require('path');

module.exports = {
	mode: 'development',
	entry: './src/index.ts', //ファイルをまとめる際のエントリーポイント
	devtool: 'inline-source-map',
	output: {
		filename: 'bundle.js', //まとめた結果出力されるファイル名
		path: path.resolve(__dirname, 'dist')
	},
	resolve: {
		extensions: ['.tsx', '.ts', '.js'] //拡張子がtsだったらTypescirptでコンパイルする
	},
	module: {
		rules: [
			{
				test: /\.ts$/,
				loader: 'ts-loader' //ts-loader使うよ
				// use: 'ts-loader',
				exclude: /node_modules/
			}
		]
	}
};
<<<


# VS Codeを使用してデバッグする場合は、次のような構成のデバッグ設定を
# .vscode/launch.jsonファイルに追加しましょう。
>>>
{
	"version": "0.2.0",
	"configurations": [
		{
			"name": "Launch Program",
			"type": "node",
			"request": "launch",
			"program": "${workspaceFolder}/src/index.ts",
			"preLaunchTask": "tsc: build - tsconfig.json",
			"outFiles": ["${workspaceFolder}/dist/**/*.js"]
		}
	]
}
<<<


# Gitの設定
git init


# .gitignore の生成
echo > .gitignore

>>>
# Linux
### https://raw.github.com/github/gitignore/07c730e1fccfe0f92b29e039ba149d20bfb332e7/Global/Linux.gitignore
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# Windows
### https://raw.github.com/github/gitignore/07c730e1fccfe0f92b29e039ba149d20bfb332e7/Global/Windows.gitignore
Thumbs.db
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msm
*.msp
*.lnk

# node.js
### https://raw.github.com/github/gitignore/07c730e1fccfe0f92b29e039ba149d20bfb332e7/Node.gitignore
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pids
*.pid
*.seed
*.pid.lock
lib-cov
coverage
.nyc_output
.grunt
bower_components
.lock-wscript
build/Release
node_modules/
jspm_packages/
typings/
.npm
.eslintcache
.node_repl_history
*.tgz
.yarn-integrity
.env
.next

# 共通
/dist
/html
<<<


git status
git add .
git commit -m "First commit"

