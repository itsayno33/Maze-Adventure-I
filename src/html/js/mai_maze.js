/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/d_cmn/C_AlertLog.ts":
/*!*********************************!*\
  !*** ./src/d_cmn/C_AlertLog.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_AlertLog = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_Dialog_1 = __webpack_require__(/*! ./C_Dialog */ "./src/d_cmn/C_Dialog.ts");
class C_AlertLog extends C_Dialog_1.C_Dialog {
    static getObj(target) {
        var _a, _b;
        var _c, _d;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = {});
        if (target === undefined) {
            target = document.createElement('dialog');
            target.id = 'dialog_' + (0, F_Rand_1._get_uuid)();
            document.body.appendChild(target);
        }
        return (_b = (_c = this.me)[_d = target.id]) !== null && _b !== void 0 ? _b : (_c[_d] = new C_AlertLog(target));
    }
    constructor(target) {
        super(target);
        this.msg = {};
        this.__clearDialog();
        this.__makeDialog();
    }
    __clearDialog() {
        const ctx = super.getWindow();
        while (ctx.firstChild)
            ctx.removeChild(ctx.firstChild);
    }
    __makeDialog() {
        const ctx = super.getWindow();
        try {
            this.pane = this.__makeWindow('pane');
            this.logs = this.__makePanel('logs', this.pane);
            this.btns = this.__makePanel('btns', this.pane);
            this.upd = this.__makeButton('update', '更新', this.btns);
            this.clr = this.__makeButton('clear', '消去', this.btns);
            this.cls = this.__makeButton('close', '閉じる', this.btns);
            this.upd.addEventListener('click', () => { this.update(); }, false);
            this.clr.addEventListener('click', () => { this.clear(); }, false);
            this.cls.addEventListener('click', () => { this.hide(); }, false);
            this.logs.style.setProperty('user-select', 'text');
            this.logs.style.setProperty('max-width', '90dvw');
            this.logs.style.setProperty('min-height', '3.0rem');
            this.logs.style.setProperty('max-height', '80dvh');
            this.logs.style.setProperty('overflow-x', 'auto');
            this.logs.style.setProperty('overflow-y', 'auto');
            this.setZoomElm(this.logs);
        }
        catch (err) { }
    }
    __makeWindow(id) {
        const div = document.createElement('div');
        div.id = `${this.id}_${id}`;
        this.setWindow(div);
        return div;
    }
    __makePanel(id, parent) {
        const div = document.createElement('div');
        div.id = `${this.id}_${id}`;
        parent.appendChild(div);
        return div;
    }
    __makeButton(id, name, parent) {
        const btn = document.createElement('button');
        btn.id = `${this.id}_${id}`;
        btn.innerHTML = name;
        parent.appendChild(btn);
        return btn;
    }
    set_message(ttl, msg) {
        var _a;
        var _b;
        ((_a = (_b = this.msg)[ttl]) !== null && _a !== void 0 ? _a : (_b[ttl] = [])).push(msg);
        this.__dom_update();
    }
    clr_message(ttl) {
        if (ttl !== undefined) {
            this.msg[ttl] = [];
            return;
        }
        for (const ii in this.msg)
            this.msg[ii] = [];
        this.__dom_clear();
        return;
    }
    update() { this.__dom_update(); }
    __dom_update() {
        var _a;
        this.__dom_clear();
        for (const title in this.msg) {
            for (let msg of this.msg[title]) {
                const fs = document.createElement('fieldset');
                const lg = document.createElement('legend');
                lg.innerHTML = `${title} (${Date.now().toString()})`;
                fs.appendChild(lg);
                const pr = document.createElement('pre');
                fs.appendChild(pr);
                const pg = document.createElement('p');
                pg.innerHTML = msg;
                pr.appendChild(pg);
                (_a = this.logs) === null || _a === void 0 ? void 0 : _a.appendChild(fs);
            }
        }
    }
    clear() { this.clr_message(); }
    __dom_clear() {
        var _a;
        while ((_a = this.logs) === null || _a === void 0 ? void 0 : _a.firstChild)
            this.logs.removeChild(this.logs.firstChild);
    }
    show() {
        this.update();
        try {
            super.show();
        }
        catch (err) { }
    }
    hide() {
        try {
            super.hide();
        }
        catch (err) { }
    }
    display(yn) {
        yn ? this.show() : this.hide();
    }
}
exports.C_AlertLog = C_AlertLog;


/***/ }),

/***/ "./src/d_cmn/C_Dialog.ts":
/*!*******************************!*\
  !*** ./src/d_cmn/C_Dialog.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Dialog = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_Dialog {
    constructor(target) {
        this.__mop = { x: 0, y: 0 };
        if (target === undefined) {
            target = document.createElement('dialog');
            document.body.appendChild(target);
        }
        if (target.id === undefined || target.id === '')
            target.id = 'dialog_' + (0, F_Rand_1._get_uuid)();
        this.id = target.id;
        target.style.margin = '0';
        target.style.padding = '0';
        this.__dia = target;
        this.__pan = document.createElement('div');
        this.__set_dialog_style();
        this.__ctx = document.createElement('div');
        this.__ctx.style.gridArea = 'mm';
        this.__pan.appendChild(this.__ctx);
        this.__rsz = {};
        this.__set_bar_style('tm');
        this.__set_bar_style('ml');
        this.__set_bar_style('mr');
        this.__set_bar_style('bm');
        this.__set_corner_style('tl');
        this.__set_corner_style('tr');
        this.__set_corner_style('bl');
        this.__set_corner_style('br');
        this.__dia.appendChild(this.__pan);
    }
    __set_dialog_style() {
        this.__dia.style.border = 'none';
        this.__dia.style.borderRadius = '10px';
        this.__dia.style.userSelect = 'auto';
        this.__dia.style.margin = '0';
        this.__dia.style.padding = '0';
        this.__pan.style.display = 'grid';
        this.__pan.style.gridTemplateColumns = `
            [tl-start ml-start bl-start]
            20px
            [tl-end ml-end bl-end tm-start mm-start bm-start]
            1fr
            [tm-end mm-end bm-end tr-start mr-start br-start]
            20px
            [tr-end mr-end br-end]
        `;
        this.__pan.style.gridTemplateRows = `
            [tl-start tm-start tr-start]
            20px
            [tl-end tm-end tr-end ml-start mm-start mr-start]
            1fr
            [ml-end mm-end mr-end bl-start bm-start br-start]
            20px
            [bl-end bm-end br-end]
        `;
    }
    __set_bar_style(area) {
        const elm = document.createElement('div');
        elm.style.backgroundColor = 'lightcyan';
        elm.style.userSelect = 'none';
        elm.style.gridArea = area;
        this.__set_move_dialog(elm);
        this.__pan.appendChild(elm);
        return elm;
    }
    __set_corner_style(area) {
        const elm = document.createElement('div');
        elm.style.backgroundColor = 'cyan';
        elm.style.userSelect = 'none';
        elm.style.gridArea = area;
        if (elm.id === undefined || elm.id === '')
            elm.id = area;
        this.__rsz[elm.id] = new resizeDom(elm, this.__dia);
        this.__set_zoom_dialog(elm);
        this.__pan.appendChild(elm);
        return elm;
    }
    __set_zoom_dialog(elm) {
        elm.setAttribute('draggable', 'true');
        elm.addEventListener('dragstart', (ev) => {
            this.__mop = { x: 0, y: 0 };
            this.__mop.x = ev.pageX;
            this.__mop.y = ev.pageY;
            if (elm.id in this.__rsz)
                this.__rsz[elm.id].reset();
        });
        elm.addEventListener('drag', (ev) => {
            if (ev.pageX === this.__mop.x && ev.pageY === this.__mop.y)
                return;
            const resizeX = ev.pageX - this.__mop.x;
            const resizeY = ev.pageY - this.__mop.y;
            if (elm.id in this.__rsz)
                this.__rsz[elm.id].resize(resizeX, resizeY);
        });
        elm.addEventListener('dragend', (ev) => {
            const resizeX = ev.pageX - this.__mop.x;
            const resizeY = ev.pageY - this.__mop.y;
            if (elm.id in this.__rsz)
                this.__rsz[elm.id].resize(resizeX, resizeY);
        });
    }
    __set_move_dialog(elm) {
        elm.setAttribute('draggable', 'true');
        elm.addEventListener('dragstart', (ev) => {
            this.__mop = { x: 0, y: 0 };
            this.__mop.y = this.__dia.offsetTop - ev.pageY;
            this.__mop.x = this.__dia.offsetLeft - ev.pageX;
        });
        elm.addEventListener('drag', (ev) => {
            if (ev.x === 0 && ev.y === 0)
                return;
            const top = ev.pageY + this.__mop.y;
            const left = ev.pageX + this.__mop.x;
            this.__dia.style.top = top + 'px';
            this.__dia.style.left = left + 'px';
        });
        elm.addEventListener('dragend', (ev) => {
            this.__mop = { x: 0, y: 0 };
        });
    }
    getWindow() {
        return this.__ctx;
    }
    setWindow(ctx) {
        try {
            this.__pan.removeChild(this.__ctx);
            this.__pan.appendChild(ctx);
            return this.__ctx = ctx;
        }
        catch (err) { }
        return ctx;
    }
    setZoomElm(elm) {
        for (const ii in this.__rsz)
            this.__rsz[ii].setZoomElm(elm);
    }
    clrZoom() {
        for (const ii in this.__rsz)
            this.__rsz[ii].clrZoomElm();
    }
    show() {
        try {
            this.__dia.show();
        }
        catch (err) { }
    }
    hide() {
        try {
            this.__dia.close();
        }
        catch (err) { }
    }
    display(yn) {
        yn ? this.show() : this.hide();
    }
}
exports.C_Dialog = C_Dialog;
class resizeDom {
    constructor(cnr, dia) {
        this.__dia = dia;
        this.__cnr = cnr;
        this.__can = { x: false, y: false };
        this.__top = { x: 0, y: 0 };
        this.__siz = { x: 0, y: 0 };
    }
    setZoomElm(trg) {
        this.__trg = trg;
    }
    clrZoomElm() {
        this.__trg = undefined;
    }
    reset() {
        if (this.__trg === undefined)
            return;
        try {
            const parent = this.__cnr.offsetParent;
            this.__can.x = this.__cnr.offsetLeft < ((parent === null || parent === void 0 ? void 0 : parent.offsetWidth) / 2);
            this.__can.y = this.__cnr.offsetTop < ((parent === null || parent === void 0 ? void 0 : parent.offsetHeight) / 2);
        }
        catch (err) {
            this.__can.x = this.__can.y = false;
        }
        this.__top.x = this.__dia.offsetLeft;
        this.__top.y = this.__dia.offsetTop;
        this.__siz.x = this.__trg.offsetWidth;
        this.__siz.y = this.__trg.offsetHeight;
    }
    resize(resizeX, resizeY) {
        if (this.__trg === undefined)
            return;
        if (this.__can.x) {
            resizeX = -resizeX;
            this.__dia.style.left = this.__top.x - resizeX + 'px';
        }
        if (this.__can.y) {
            resizeY = -resizeY;
            this.__dia.style.top = this.__top.y - resizeY + 'px';
        }
        this.__trg.style.width = this.__siz.x + resizeX + 'px';
        this.__trg.style.height = this.__siz.y + resizeY + 'px';
    }
}


/***/ }),

/***/ "./src/d_cmn/F_POST.ts":
/*!*****************************!*\
  !*** ./src/d_cmn/F_POST.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.POST_and_get_JSON = POST_and_get_JSON;
exports.POST_and_get_JSON3 = POST_and_get_JSON3;
exports.POST_and_get_JSON2 = POST_and_get_JSON2;
exports.POST_and_move_page = POST_and_move_page;
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
function POST_and_get_JSON(url, opt) {
    return __awaiter(this, void 0, void 0, function* () {
        const form_data = opt.toFormData();
        if (form_data === undefined)
            return undefined;
        var res;
        try {
            res = yield fetch(url, {
                method: 'POST',
                cache: 'no-cache',
                headers: {},
                body: opt.toFormData()
            });
            if (!res.ok) {
                throw new Error(`レスポンスステータス (${res.status})`);
            }
        }
        catch (err) {
            global_1.g_mes.warning_message('通信エラー: ' + err);
            return undefined;
        }
        const monitor = true;
        return res.text()
            .then(txt => {
            const tx = txt.slice();
            if (monitor) {
                global_1.g_alert.set_message(`POST URL:`, url);
                global_1.g_alert.set_message(`POST OPT:`, opt.toString());
                global_1.g_alert.set_message(`POST DATA:`, tx);
            }
            try {
                return JSON.parse(txt);
            }
            catch (err) {
                global_1.g_mes.warning_message('JSON形式のデコードエラー');
                (0, global_1._alert)(tx);
                return undefined;
            }
        });
    });
}
function POST_and_get_JSON3(url, opt) {
    return __awaiter(this, void 0, void 0, function* () {
        const form_data = opt.toFormData();
        if (form_data === undefined)
            return undefined;
        var res;
        try {
            res = yield fetch(url, {
                method: 'POST',
                cache: 'no-cache',
                headers: {
                    "Content-Type": "application/json"
                },
                body: opt.toJSON()
            });
            if (!res.ok) {
                throw new Error(`レスポンスステータス (${res.status})`);
            }
        }
        catch (err) {
            global_1.g_mes.warning_message('通信エラー: ' + err);
            return undefined;
        }
        const monitor = true;
        return res.text()
            .then(txt => {
            const tx = txt.slice();
            if (monitor) {
                global_1.g_alert.set_message(`POST URL:`, url);
                global_1.g_alert.set_message(`POST OPT:`, opt.toString());
                global_1.g_alert.set_message(`POST DATA:`, tx);
            }
            try {
                return JSON.parse(txt);
            }
            catch (err) {
                global_1.g_mes.warning_message('JSON形式のデコードエラー');
                (0, global_1._alert)(tx);
                return undefined;
            }
        });
    });
}
function POST_and_get_JSON2(url, opt) {
    return __awaiter(this, void 0, void 0, function* () {
        const reqObj = new XMLHttpRequest();
        try {
            reqObj.open("POST", url, false);
            reqObj.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            reqObj.send(opt.toFormData());
        }
        catch (err) {
            global_1.g_mes.warning_message(`通信エラー: ${reqObj.status}`);
            return undefined;
        }
        const txt = reqObj.responseText;
        const monitor = true;
        if (monitor) {
            global_1.g_alert.set_message(`POST URL:`, url);
            global_1.g_alert.set_message(`POST OPT:`, opt.toString());
            global_1.g_alert.set_message(`POST DATA:`, txt);
        }
        if (Number(reqObj.status) > 399) {
            global_1.g_mes.warning_message(`レスポンスステータス: ${reqObj.status}`);
            return undefined;
        }
        try {
            return JSON.parse(txt);
        }
        catch (err) {
            global_1.g_mes.warning_message('JSON形式のデコードエラー: ' + err);
            (0, global_1._alert)(txt);
            return undefined;
        }
    });
}
function POST_and_move_page(url, opt) {
    create_form(url, opt).submit();
}
function create_form(url, opt) {
    const form = document.createElement('form');
    form.id = 'dummy_form_' + new Date().valueOf().toString();
    form.method = 'POST';
    form.action = url;
    form.style.display = 'none';
    for (var key of opt.get_keys()) {
        create_input(form, form.id, key, opt.get(key));
    }
    document.body.appendChild(form);
    return form;
}
function create_input(form, fid, name, value) {
    const i = document.createElement('input');
    i.type = 'hidden';
    i.name = name;
    i.value = value;
    i.style.display = 'none';
    i.setAttribute('for', fid);
    form.appendChild(i);
    return i;
}


/***/ }),

/***/ "./src/d_cmn/F_load_and_save.ts":
/*!**************************************!*\
  !*** ./src/d_cmn/F_load_and_save.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.get_mai_maze = get_mai_maze;
exports.get_mai_guld = get_mai_guld;
exports.get_new_maze = get_new_maze;
exports.get_save_info = get_save_info;
exports.get_maze_info = get_maze_info;
exports.get_new_hero = get_new_hero;
exports.tmp_load = tmp_load;
exports.instant_load = instant_load;
exports.UD_load = UD_load;
exports.before_load = before_load;
exports.general_load = general_load;
exports.tmp_save = tmp_save;
exports.instant_save = instant_save;
exports.UD_save = UD_save;
exports.before_save = before_save;
exports.general_save = general_save;
const C_SaveData_1 = __webpack_require__(/*! ../d_mdl/C_SaveData */ "./src/d_mdl/C_SaveData.ts");
const C_Maze_1 = __webpack_require__(/*! ../d_mdl/C_Maze */ "./src/d_mdl/C_Maze.ts");
const C_Hero_1 = __webpack_require__(/*! ../d_mdl/C_Hero */ "./src/d_mdl/C_Hero.ts");
const C_PointDir_1 = __webpack_require__(/*! ../d_mdl/C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_MazeInfo_1 = __webpack_require__(/*! ../d_mdl/C_MazeInfo */ "./src/d_mdl/C_MazeInfo.ts");
const C_UrlOpt_1 = __webpack_require__(/*! ../d_utl/C_UrlOpt */ "./src/d_utl/C_UrlOpt.ts");
const F_POST_1 = __webpack_require__(/*! ../d_cmn/F_POST */ "./src/d_cmn/F_POST.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
function get_mai_maze(callback) {
    return __awaiter(this, void 0, void 0, function* () {
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'new_game');
        opt.set('pid', global_1.g_start_env.pid);
        return yield _get_new_game(global_1.g_url[global_1.g_url_new_maze], opt, callback);
    });
}
function get_mai_guld(callback) {
    return __awaiter(this, void 0, void 0, function* () {
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'new_game');
        opt.set('pid', global_1.g_start_env.pid.toString());
        return yield _get_new_game(global_1.g_url[global_1.g_url_new_guld], opt, callback);
    });
}
function _get_new_game(url, opt, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        return yield ((_a = (0, F_POST_1.POST_and_get_JSON3)(url, opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
            var _a, _b, _c;
            if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
                global_1.g_mes.normal_message('正常にロードされました');
                if (jsonObj.save === undefined) {
                    global_1.g_mes.warning_message("保存データが不正な形式でした\n" + jsonObj.emsg);
                    (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
                    return undefined;
                }
                const monitor = false;
                if (monitor) {
                    if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) !== undefined) {
                        (0, C_SaveData_1.alert_save_info)(jsonObj.save);
                        (0, C_SaveData_1.alert_save_detail)(jsonObj.save);
                    }
                }
                if (callback !== undefined)
                    callback(jsonObj);
                return jsonObj;
            }
            else {
                global_1.g_mes.warning_message("ロードできませんでした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_c = jsonObj.emsg) !== null && _c !== void 0 ? _c : '??? 不明なエラー ???'));
                return undefined;
            }
        }));
    });
}
function get_new_maze(maze_name, callback) {
    var _a;
    const opt = new C_UrlOpt_1.C_UrlOpt();
    opt.set('mode', 'new_maze');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('maze_name', maze_name);
    return (_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_get_maze], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
        var _a, _b, _c, _d, _e, _f;
        if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) !== 0) {
            global_1.g_mes.warning_message("新迷宮データを受信できませんでした\n" + jsonObj.emsg);
            (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
            return undefined;
        }
        if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === undefined) {
            global_1.g_mes.warning_message("受信データが不正な形式でした\n" + jsonObj.emsg);
            (0, global_1._alert)(jsonObj.emsg);
            return undefined;
        }
        if (((_c = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _c === void 0 ? void 0 : _c.maze) === undefined) {
            global_1.g_mes.warning_message("新迷宮データが不正な形式でした\n" + jsonObj.emsg);
            (0, global_1._alert)(jsonObj.emsg);
            return undefined;
        }
        if (((_d = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _d === void 0 ? void 0 : _d.pos) === undefined) {
            global_1.g_mes.warning_message("新迷宮の位置データが不正な形式でした\n" + jsonObj.emsg);
            (0, global_1._alert)(jsonObj.emsg);
            return undefined;
        }
        const monitor = false;
        if (monitor) {
            if (((_e = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _e === void 0 ? void 0 : _e.maze) !== undefined)
                (0, C_Maze_1.alert_maze_info)(jsonObj.data.maze);
            if (((_f = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _f === void 0 ? void 0 : _f.pos) !== undefined)
                (0, C_PointDir_1.alert_PD_info)(jsonObj.data.pos);
        }
        if (callback !== undefined)
            callback(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data);
        return jsonObj;
    });
}
function get_save_info(callback) {
    var _a;
    const opt = new C_UrlOpt_1.C_UrlOpt();
    opt.set('mode', 'save_info');
    opt.set('pid', global_1.g_start_env.pid);
    return (_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_get_info], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
        var _a, _b;
        if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
            global_1.g_mes.normal_message('正常にロードされました');
            if (jsonObj.save_info === undefined) {
                global_1.g_mes.warning_message("保存データが不正な形式でした\n" + jsonObj.emsg);
                (0, global_1._alert)(jsonObj.emsg);
                return undefined;
            }
            const monitor = false;
            if (monitor) {
                for (let save of jsonObj.save_info) {
                    if (save !== undefined) {
                        (0, C_SaveData_1.alert_save_info)(save);
                    }
                }
            }
            if (callback !== undefined)
                callback(jsonObj);
            return jsonObj;
        }
        else {
            global_1.g_mes.warning_message("ロードできませんでした\n" + jsonObj.emsg);
            (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
            return undefined;
        }
    });
}
function get_maze_info(callback) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'maze_info');
        return yield ((_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_all_maze], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
            var _a, _b, _c, _d, _e, _f;
            if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
                global_1.g_mes.normal_message('正常にロードされました');
                if (((_b = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _b === void 0 ? void 0 : _b.mazeinfo) === undefined) {
                    global_1.g_mes.warning_message("迷宮情報が不正な形式でした\n" + jsonObj.emsg);
                    (0, global_1._alert)(jsonObj.emsg);
                    return undefined;
                }
                const monitor = false;
                if (monitor) {
                    if (((_c = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _c === void 0 ? void 0 : _c.mazeinfo) !== undefined) {
                        for (const mazeinfo of jsonObj.data.mazeinfo) {
                            (0, C_MazeInfo_1.alert_mazeinfo_info)(mazeinfo);
                        }
                    }
                }
                if (callback !== undefined)
                    callback((_d = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _d === void 0 ? void 0 : _d.mazeinfo);
                return (_e = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _e === void 0 ? void 0 : _e.mazeinfo;
            }
            else {
                global_1.g_mes.warning_message("ロードできませんでした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_f = jsonObj.emsg) !== null && _f !== void 0 ? _f : '??? 不明なエラー ???'));
                return undefined;
            }
        }));
    });
}
function get_new_hero() {
    return __awaiter(this, arguments, void 0, function* (num = 20, callback) {
        var _a;
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'new_hero');
        opt.set('nmbr', num.toString());
        return yield ((_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_all_hres], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
            var _a, _b, _c, _d;
            if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
                global_1.g_mes.normal_message('正常にロードされました');
                if (((_b = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _b === void 0 ? void 0 : _b.hres) === undefined) {
                    global_1.g_mes.warning_message("ヒーロー・データが不正な形式でした\n" + jsonObj.emsg);
                    (0, global_1._alert)(jsonObj.emsg);
                    return;
                }
                const monitor = false;
                if (monitor) {
                    if (((_c = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _c === void 0 ? void 0 : _c.hres) !== undefined)
                        (0, C_Hero_1.alert_hres_info)(jsonObj.data.hres);
                }
                if (callback !== undefined)
                    callback(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data);
                return jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data;
            }
            else {
                global_1.g_mes.warning_message("ロードできませんでした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_d = jsonObj.emsg) !== null && _d !== void 0 ? _d : '??? 不明なエラー ???'));
                return undefined;
            }
        }));
    });
}
function tmp_load(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'tmp_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 100);
    return __auto_load(opt, callback);
}
function instant_load(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'instant_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 101);
    return __auto_load(opt, callback);
}
function UD_load(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'UD_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 102);
    return __auto_load(opt, callback);
}
function before_load(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'before_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 103);
    return __auto_load(opt, callback);
}
function general_load(uniq_no, opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'general_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', uniq_no);
    return __auto_load(opt, callback);
}
function __auto_load(opt, callback) {
    var _a;
    return (_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_get_data], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
        var _a, _b, _c;
        if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
            global_1.g_mes.normal_message('正常にロードされました');
            if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) === undefined) {
                global_1.g_mes.warning_message("受信した保存データが不正な形式でした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
                return undefined;
            }
            const monitor = false;
            if (monitor) {
                if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) !== undefined) {
                    (0, C_SaveData_1.alert_save_info)(jsonObj.save);
                    (0, C_SaveData_1.alert_save_detail)(jsonObj.save);
                }
            }
            if (callback !== undefined)
                callback(jsonObj);
            return jsonObj;
        }
        else {
            global_1.g_mes.warning_message(`ロードできませんでした${jsonObj.ecode}\n` + jsonObj.emsg);
            (0, global_1._alert)(((_c = jsonObj.emsg) !== null && _c !== void 0 ? _c : '??? 不明なエラー ???'));
            return undefined;
        }
    });
}
function tmp_save(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'tmp_save');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 100);
    return __auto_save(opt, callback);
}
function instant_save(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'instant_save');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 101);
    return __auto_save(opt, callback);
}
function UD_save(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'UD_save');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 102);
    return __auto_save(opt, callback);
}
function before_save(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'before_save');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 103);
    return __auto_save(opt, callback);
}
function general_save(opt, callback) {
    global_1.g_save.auto_mode = false;
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'general_save');
    opt.set('pid', global_1.g_start_env.pid);
    return __save(opt, callback);
}
function __auto_save(opt, callback) {
    global_1.g_save.auto_mode = true;
    return __save(opt, callback);
}
function __save(opt, callback) {
    var _a;
    if (!opt.isset('save')) {
        opt.set('save', JSON.stringify(global_1.g_save.encode(), null, "\t"));
    }
    const move_page = false;
    if (move_page) {
        (0, F_POST_1.POST_and_move_page)(global_1.g_url[global_1.g_url_check_JSON], opt);
    }
    return (_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_put_data], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
        var _a, _b, _c;
        if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
            if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) === undefined) {
                global_1.g_mes.warning_message("受信した保存データが不正な形式でした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
                return undefined;
            }
            const monitor = false;
            if (monitor) {
                if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) !== undefined) {
                    (0, C_SaveData_1.alert_save_info)(jsonObj.save);
                    (0, C_SaveData_1.alert_save_detail)(jsonObj.save);
                }
            }
            if (callback !== undefined)
                callback(jsonObj);
            global_1.g_mes.normal_message('正常にセーブされました');
            return jsonObj;
        }
        else {
            global_1.g_mes.warning_message("セーブできませんでした\n" + jsonObj.emsg);
            (0, global_1._alert)(((_c = jsonObj.emsg) !== null && _c !== void 0 ? _c : '??? 不明なエラー ???'));
            return undefined;
        }
    }).catch(err => {
        global_1.g_mes.warning_message('POST読み込みに失敗しました(POST_AND_JSON3)');
        return undefined;
    });
}


/***/ }),

/***/ "./src/d_cmn/global.ts":
/*!*****************************!*\
  !*** ./src/d_cmn/global.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.g_save = exports.g_mes = exports.g_start_env = exports.g_ready_games = exports.g_alert = exports.g_debug = exports.g_my_url = exports.g_url = exports.g_url_gt2_save = exports.g_url_gt2_maze = exports.g_url_gt2_guld = exports.g_url_rcd_save = exports.g_url_rcd_load = exports.g_url_rcd_list = exports.g_url_check_JSON = exports.g_url_put_data = exports.g_url_get_data = exports.g_url_get_info = exports.g_url_mai_guld = exports.g_url_mai_maze = exports.g_url_all_save = exports.g_url_put_save = exports.g_url_get_save = exports.g_url_all_hres = exports.g_url_new_guld = exports.g_url_all_maze = exports.g_url_new_maze = exports.g_url_get_maze = void 0;
exports.init_after_loaded_DOM_in_common = init_after_loaded_DOM_in_common;
exports._alert = _alert;
exports.g_url_get_maze = 0;
exports.g_url_new_maze = 1;
exports.g_url_all_maze = 2;
exports.g_url_new_guld = 5;
exports.g_url_all_hres = 6;
exports.g_url_get_save = 7;
exports.g_url_put_save = 8;
exports.g_url_all_save = 9;
exports.g_url_mai_maze = 10;
exports.g_url_mai_guld = 11;
exports.g_url_get_info = 12;
exports.g_url_get_data = 13;
exports.g_url_put_data = 15;
exports.g_url_check_JSON = 16;
exports.g_url_rcd_list = 17;
exports.g_url_rcd_load = 18;
exports.g_url_rcd_save = 19;
exports.g_url_gt2_guld = 20;
exports.g_url_gt2_maze = 21;
exports.g_url_gt2_save = 22;
exports.g_url = new Array(23);
const C_OnOffButton_1 = __webpack_require__(/*! ../d_ctl/C_OnOffButton */ "./src/d_ctl/C_OnOffButton.ts");
const C_AlertLog_1 = __webpack_require__(/*! ../d_cmn/C_AlertLog */ "./src/d_cmn/C_AlertLog.ts");
class C_ReadyGames {
    constructor() {
        this.flgs = {};
        this.flgs.loadedDOM = false;
        this.flgs.getWindow = false;
        this.func = () => { };
    }
    setLoadedDOM() {
        this.flgs.loadedDOM = true;
        this.check_and_do();
    }
    setGetWindow() {
        this.flgs.getWindow = true;
        this.check_and_do();
    }
    setFunction(func) {
        this.func = func;
        this.check_and_do();
    }
    check_and_do() {
        if (this.func === undefined)
            return;
        for (let ii in this.flgs)
            if (!this.flgs[ii])
                return;
        this.func();
    }
}
exports.g_ready_games = new C_ReadyGames();
exports.g_start_env = { mode: '', pid: -1, opt: '' };
const C_DisplayMessage_1 = __webpack_require__(/*! ../d_vie/C_DisplayMessage */ "./src/d_vie/C_DisplayMessage.ts");
const C_SaveData_1 = __webpack_require__(/*! ../d_mdl/C_SaveData */ "./src/d_mdl/C_SaveData.ts");
exports.g_save = new C_SaveData_1.C_SaveData();
function init_after_loaded_DOM_in_common(debug_id = 'debug_mode', msg_id = 'pane_sytm_logs') {
    const con = document.getElementById(msg_id);
    exports.g_mes = C_DisplayMessage_1.C_DisplayMessage.getObj(con, 'client_message');
    exports.g_alert = C_AlertLog_1.C_AlertLog.getObj();
    const btn = document.getElementById(debug_id);
    exports.g_debug = C_OnOffButton_1.C_OnOffButton.getObj(btn, {});
}
function _alert(txt, page_size = 250) {
    for (let i = 0; i < txt.length; i += page_size) {
        if (!window.confirm(txt.substring(i, i + page_size)))
            break;
    }
}
const tsCaller = (() => {
    return {
        get_init_data: (my_url) => {
            exports.g_my_url = my_url;
            const url_top = parent_url(my_url);
            const exp_top = parent_url(url_top) + "/maiex";
            exports.g_url[exports.g_url_gt2_save] = url_top + "/_JSON_mai_save.php";
            exports.g_url[exports.g_url_gt2_maze] = url_top + "/_JSON_mai_maze.php";
            exports.g_url[exports.g_url_gt2_guld] = url_top + "/_JSON_mai_guld.php";
            exports.g_url[exports.g_url_mai_maze] = url_top + "/mai_maze.php";
            exports.g_url[exports.g_url_mai_guld] = url_top + "/mai_guld.php";
            exports.g_url[exports.g_url_new_maze] = exp_top + "/maze/newMaze";
            exports.g_url[exports.g_url_get_maze] = exp_top + "/maze/getMaze";
            exports.g_url[exports.g_url_all_maze] = exp_top + "/maze/allMaze";
            exports.g_url[exports.g_url_new_guld] = exp_top + "/guld/newGuld";
            exports.g_url[exports.g_url_all_hres] = exp_top + "/guld/allHres";
            exports.g_url[exports.g_url_get_info] = exp_top + "/ldsv/_info";
            exports.g_url[exports.g_url_get_data] = exp_top + "/ldsv/_load";
            exports.g_url[exports.g_url_put_data] = exp_top + "/ldsv/_save";
            exports.g_url[exports.g_url_check_JSON] = url_top + "/check_JSON.php";
        },
        start_game: (mode, my_url, player_id, opt) => {
            tsCaller.get_init_data(my_url);
            exports.g_start_env.mode = mode;
            exports.g_start_env.pid = player_id;
            exports.g_start_env.opt = opt;
            exports.g_ready_games.setGetWindow();
        }
    };
})();
function parent_url(url) {
    let re = /\/[^\/]+?$/;
    return url.replace(re, '');
}
window.tsCall = tsCaller;


/***/ }),

/***/ "./src/d_ctl/C_CtlCursor.ts":
/*!**********************************!*\
  !*** ./src/d_ctl/C_CtlCursor.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_CtlCursor = void 0;
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
class C_CtlCursor {
    constructor(list) {
        var _a;
        (_a = C_CtlCursor.me) !== null && _a !== void 0 ? _a : (C_CtlCursor.me = {});
        this._id = '__dmy__';
        this._list = undefined;
        this._leng = 0;
        this._cols = 1;
        this._indx = 0;
        C_CtlCursor.me[this._id] = this;
    }
    static getObj(list) {
        var _a, _b;
        var _c;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = {});
        const id = list !== undefined ? list.id : '__dmy__';
        (_b = (_c = this.me)[id]) !== null && _b !== void 0 ? _b : (_c[id] = new C_CtlCursor(list));
        if (list !== undefined)
            this.me[id].set(list);
        return this.me[id];
    }
    set(list) {
        this._id = list.id;
        this._list = list;
        this._leng = this.__get_leng();
        this._cols = this.__get_cols();
        this._indx = 0;
        this.high_light_on();
        return this;
    }
    uid() {
        return this._id;
    }
    leng() {
        return this._leng;
    }
    rows() {
        return this.__get_rows();
    }
    cols() {
        return this._cols;
    }
    pos() {
        return this._indx;
    }
    set_pos(indx) {
        if (indx < 0)
            indx = 0;
        if (indx >= this._leng)
            indx = this._leng - 1;
        this._indx = indx;
        this.high_light_on();
        return this;
    }
    pos_U() {
        if (this._list === undefined)
            return 0;
        let indx = this._indx;
        const rows = this.__get_rows();
        const cur_row = indx % rows;
        if (cur_row !== 0) {
            --indx;
        }
        else {
            indx += rows - 1;
            while (indx > this._leng - 1) {
                --indx;
            }
        }
        this._indx = indx;
        this.high_light_on();
        return this._indx;
    }
    pos_D() {
        if (this._list === undefined)
            return 0;
        let indx = this._indx;
        const rows = this.__get_rows();
        const cur_row = indx % rows;
        if (cur_row !== rows - 1 && indx !== this._leng - 1) {
            ++indx;
        }
        else {
            indx -= rows - 1;
            while (indx % rows !== 0 && indx < this._leng - 1) {
                ++indx;
            }
        }
        this._indx = indx;
        this.high_light_on();
        return this._indx;
    }
    pos_L() {
        if (this._list === undefined)
            return 0;
        let indx = this._indx;
        const rows = this.__get_rows();
        if (indx > rows - 1) {
            indx -= rows;
        }
        else {
            const vurtual_list_leng = this._cols * rows;
            indx += vurtual_list_leng - rows;
            while (indx > this._leng - 1) {
                indx -= rows;
                if (indx < 0) {
                    indx = 0;
                    break;
                }
            }
        }
        this._indx = indx;
        this.high_light_on();
        return this._indx;
    }
    pos_R() {
        if (this._list === undefined)
            return 0;
        let indx = this._indx;
        const rows = this.__get_rows();
        if (indx < this._leng - rows) {
            indx += rows;
        }
        else {
            const old_indx = indx;
            const vurtual_list_leng = this._cols * rows;
            indx -= vurtual_list_leng - rows;
            if (indx < 0) {
                indx += rows;
                if (indx < 0 || indx > this._leng - 1)
                    indx = (0, F_Math_1._floor)((old_indx + 1) / this._cols, 0);
            }
        }
        this._indx = indx;
        this.high_light_on();
        return this._indx;
    }
    __get_rows() {
        return (0, F_Math_1._ceil)(this._leng / this._cols, 0);
    }
    __get_leng() {
        if (this._list === undefined)
            return 0;
        try {
            return this._list.children.length;
        }
        catch (err) {
            return 1;
        }
    }
    __get_cols() {
        if (this._list === undefined)
            return 0;
        try {
            let cols = window.getComputedStyle(this._list).columnCount;
            return (0, F_Math_1._isNum)(cols) ? Number(cols) : 1;
        }
        catch (err) {
            return 1;
        }
    }
    high_light_on() {
        if (this._list === undefined)
            return;
        const children = this._list.children;
        const len = children.length;
        if (this._indx < 0 || this._indx > len - 1)
            return;
        for (let i = 0; i < len; i++) {
            const li = children.item(i);
            this.__high_light_on(li, false);
        }
        const li = children.item(this._indx);
        this.__high_light_on(li, true);
    }
    high_light_off() {
        if (this._list === undefined)
            return;
        const children = this._list.children;
        const len = children.length;
        for (var i = 0; i < len; i++) {
            const li = children.item(i);
            this.__high_light_on(li, false);
        }
    }
    __high_light_on(elm, isOn) {
        var _a;
        if (elm === null)
            return;
        const perentStyle = window.getComputedStyle((_a = elm.parentElement) !== null && _a !== void 0 ? _a : elm);
        const fw_color = perentStyle.color;
        const bg_color = perentStyle.backgroundColor;
        elm.style.color = isOn ? bg_color : fw_color;
        elm.style.backgroundColor = isOn ? fw_color : bg_color;
        elm.style.fontWeight = isOn ? 'bold' : 'normal';
        for (var j = 0; j < elm.children.length; j++) {
            const p = elm.children.item(j);
            if (isOn) {
                p.style.fontWeight = 'normal';
                p.style.color = fw_color;
                p.style.backgroundColor = bg_color;
                p.style.display = 'block';
            }
            else {
                p.style.display = 'none';
            }
        }
    }
    alert() {
        (0, global_1._alert)("CtlCursor: "
            + "\nid   = " + this._id
            + "\nindx = " + this._indx
            + "\nleng = " + this._leng
            + "\ncols = " + this._cols);
    }
    ;
}
exports.C_CtlCursor = C_CtlCursor;


/***/ }),

/***/ "./src/d_ctl/C_CycleButton.ts":
/*!************************************!*\
  !*** ./src/d_ctl/C_CycleButton.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_CycleButton = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_CycleButton {
    static getObj(elm, cco) {
        var _a, _b;
        var _c, _d;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = {});
        (_b = (_c = this.me)[_d = elm.id]) !== null && _b !== void 0 ? _b : (_c[_d] = new C_CycleButton(elm, cco));
        return this.me[elm.id];
    }
    constructor(elm, cco) {
        this.seq = 0;
        this.def_cco = {
            ccName: ['one', 'two', 'three'],
            ccClass: ['_cycle_one', '_cycle_two', '_cycle_three'],
        };
        this.fnc = {};
        this.cco = this.def_cco;
        this.seq = 0;
        if (elm.name === undefined || elm.name === null || elm.name === '')
            elm.name = elm.id;
        this.elm = elm;
        this.elm.addEventListener("click", (event) => { this.cycle(); }, false);
        if (cco !== undefined)
            this.setObj(cco);
    }
    setObj(cco) {
        var _a;
        try {
            this.seq = (_a = cco.at) !== null && _a !== void 0 ? _a : 0;
            if (cco.ccName !== undefined)
                this.cco.ccName = [...cco.ccName];
            else
                this.cco.ccName = [...this.def_cco.ccName];
            if (cco.ccClass !== undefined)
                this.cco.ccClass = [...cco.ccClass];
            else
                this.cco.ccClass = [...this.def_cco.ccClass];
            if (cco.fnc !== undefined) {
                for (const i in cco.fnc) {
                    if (cco.fnc[i] === undefined)
                        continue;
                    if (typeof cco.fnc[i] === 'function')
                        this.fnc[i] = cco.fnc[i];
                }
            }
            this._setStyle(this.seq);
        }
        catch (_b) { }
        return this;
    }
    _setStyle(seq) {
        const old_seq = this.seq;
        this.seq = seq;
        const cco = this.cco;
        this.elm.value = cco.ccName[seq];
        this.elm.innerHTML = cco.ccName[seq];
        this.elm.classList.remove(cco.ccClass[old_seq]);
        this.elm.classList.add(cco.ccClass[this.seq]);
    }
    cycle() {
        let seq = this.seq + 1;
        return this._shift(seq);
    }
    reverce() {
        let seq = this.seq - 1;
        return this._shift(seq);
    }
    _shift(seq) {
        if (seq >= this.cco.ccName.length)
            seq = 0;
        if (seq < 0)
            seq = this.cco.ccName.length - 1;
        this._setStyle(seq);
        let rslt = true;
        for (const i in this.fnc)
            rslt && (rslt = this.fnc[i](this.seq));
        return rslt;
    }
    id() { return this.elm.id; }
    ;
    at() { return this.seq; }
    addFnc(fnc) {
        const id = 'ccfunc_' + (0, F_Rand_1._get_uuid)();
        this.fnc[id] = fnc;
        return id;
    }
    rmvFnc(fnc) {
        if (typeof fnc === 'string') {
            try {
                delete this.fnc[fnc];
                return true;
            }
            catch (err) {
                return false;
            }
        }
        for (const i in this.fnc)
            if (fnc === this.fnc[i]) {
                delete this.fnc[i];
                return true;
            }
        return false;
    }
}
exports.C_CycleButton = C_CycleButton;


/***/ }),

/***/ "./src/d_ctl/C_OnOffButton.ts":
/*!************************************!*\
  !*** ./src/d_ctl/C_OnOffButton.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_OnOffButton = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_OnOffButton {
    static getObj(elm, ooo) {
        var _a, _b;
        var _c, _d;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = {});
        (_b = (_c = this.me)[_d = elm.id]) !== null && _b !== void 0 ? _b : (_c[_d] = new C_OnOffButton(elm, ooo));
        return this.me[elm.id];
    }
    constructor(elm, ooo) {
        this.def_ooo = {
            onName: 'ON',
            offName: 'off',
            onClass: '_toggle_on',
            offClass: '_toggle_off',
        };
        this.fnc = {};
        this.ooo = this.def_ooo;
        this.yn = false;
        if (elm.name === undefined || elm.name === '')
            elm.name = elm.id;
        this.elm = elm;
        this.elm.addEventListener("click", (event) => { this.toggle(); }, false);
        if (ooo !== undefined)
            this.setObj(ooo);
    }
    setObj(ooo) {
        var _a, _b, _c, _d, _e;
        var _f, _g, _h, _j;
        try {
            this.yn = (_a = ooo.yn) !== null && _a !== void 0 ? _a : false;
            this.ooo = ooo;
            (_b = (_f = this.ooo).onName) !== null && _b !== void 0 ? _b : (_f.onName = this.def_ooo.onName);
            (_c = (_g = this.ooo).offName) !== null && _c !== void 0 ? _c : (_g.offName = this.def_ooo.offName);
            (_d = (_h = this.ooo).onClass) !== null && _d !== void 0 ? _d : (_h.onClass = this.def_ooo.onClass);
            (_e = (_j = this.ooo).offClass) !== null && _e !== void 0 ? _e : (_j.offClass = this.def_ooo.offClass);
            this._setStyle(this.yn);
        }
        catch (_k) { }
        return this;
    }
    _setStyle(yn) {
        this.yn = yn;
        const ooo = this.ooo;
        this.elm.value = yn ? 'on' : 'off';
        this.elm.innerHTML = yn ? ooo.onName : ooo.offName;
        this.elm.classList.remove(yn ? ooo.offClass : ooo.onClass);
        this.elm.classList.add(yn ? ooo.onClass : ooo.offClass);
    }
    setON() { var _a; return (_a = this._setYN(true)) !== null && _a !== void 0 ? _a : false; }
    ;
    setOFF() { var _a; return (_a = this._setYN(false)) !== null && _a !== void 0 ? _a : false; }
    ;
    toggle() { var _a; return (_a = this._setYN(!this.yn)) !== null && _a !== void 0 ? _a : false; }
    _setYN(yn) {
        this._setStyle(yn);
        let tf = true;
        for (const i in this.fnc)
            tf && (tf = this.fnc[i](yn));
        return tf;
    }
    id() { return this.elm.id; }
    ;
    isON() { return this.yn; }
    addFnc(fnc) {
        const id = 'oofunc_' + (0, F_Rand_1._get_uuid)();
        this.fnc[id] = fnc;
        return id;
    }
    rmvFnc(fnc) {
        if (typeof fnc === 'string') {
            try {
                delete this.fnc[fnc];
                return true;
            }
            catch (err) {
                return false;
            }
        }
        for (const i in this.fnc)
            if (fnc === this.fnc[i]) {
                delete this.fnc[i];
                return true;
            }
        return false;
    }
}
exports.C_OnOffButton = C_OnOffButton;


/***/ }),

/***/ "./src/d_mdl/C_Guild.ts":
/*!******************************!*\
  !*** ./src/d_mdl/C_Guild.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Guild = void 0;
exports.alert_guld_info = alert_guld_info;
const C_Location_1 = __webpack_require__(/*! ./C_Location */ "./src/d_mdl/C_Location.ts");
const C_Hero_1 = __webpack_require__(/*! ./C_Hero */ "./src/d_mdl/C_Hero.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
function alert_guld_info(a) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (a === undefined)
        return;
    alert("Guild Info:"
        + "\nid:       " + ((_a = a.id) !== null && _a !== void 0 ? _a : '?')
        + "\nuniq_id:  " + ((_b = a.uniq_id) !== null && _b !== void 0 ? _b : '?')
        + "\nsave_id:  " + ((_c = a.save_id) !== null && _c !== void 0 ? _c : '?')
        + "\nname:     " + ((_d = a.name) !== null && _d !== void 0 ? _d : '?')
        + "\ngold:     " + ((_e = a.gold) !== null && _e !== void 0 ? _e : 0)
        + "\nheroes:   " + ((_g = (_f = a.heroes) === null || _f === void 0 ? void 0 : _f.length) !== null && _g !== void 0 ? _g : '?')
        + "\n");
}
class C_Guild {
    constructor(a) {
        this.id = -1;
        this.uniq_id = 'mai_guld#' + (0, F_Rand_1._get_uuid)();
        this.save_id = -1;
        this.name = '';
        this.gold = 0;
        this.heroes = {};
        if (a !== undefined)
            this.decode(a);
    }
    uid() { return this.uniq_id; }
    get_lckd() { return C_Location_1.T_Lckd.Maze; }
    get_name() { return this.name; }
    hres() {
        const hres = [];
        for (let ii in this.heroes)
            hres.push(this.heroes[ii]);
        return hres;
    }
    clear_hres() {
        this.heroes = {};
    }
    add_hero(hero) {
        this.heroes[hero.uid()] = hero;
    }
    rmv_hero(hero) {
        delete this.heroes[hero.uid()];
    }
    encode() {
        const json_heroes = [];
        for (let ii in this.heroes)
            json_heroes.push(this.heroes[ii].encode());
        return {
            id: this.id,
            uniq_id: this.uniq_id,
            save_id: this.save_id,
            gold: this.gold,
            heroes: json_heroes,
            name: this.name,
        };
    }
    decode(a) {
        if (a === undefined)
            return this;
        if (a.id !== undefined)
            this.id = a.id;
        if (a.uniq_id !== undefined)
            this.uniq_id = a.uniq_id;
        if (a.save_id !== undefined)
            this.save_id = a.save_id;
        if (a.name !== undefined)
            this.name = a.name;
        if (a.gold !== undefined)
            this.gold;
        if (a.heroes !== undefined) {
            this.heroes = {};
            for (const json_hero of a.heroes) {
                const hero = new C_Hero_1.C_Hero(json_hero);
                this.heroes[hero.uid()] = hero;
            }
        }
        return this;
    }
    static encode_all(all_guld) {
        const all_guld_data = [];
        for (let guld of all_guld) {
            all_guld_data.push(guld.encode());
        }
        return all_guld_data;
    }
    static decode_all(all_guld_data) {
        const all_guld = [];
        for (let guld_data of all_guld_data) {
            all_guld.push((new C_Guild()).decode(guld_data));
        }
        return all_guld;
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g;
        alert("Guild Info:"
            + "\nid:       " + ((_a = this.id) !== null && _a !== void 0 ? _a : '?')
            + "\nuniq_id:  " + ((_b = this.uniq_id) !== null && _b !== void 0 ? _b : '?')
            + "\nsave_id:  " + ((_c = this.save_id) !== null && _c !== void 0 ? _c : '?')
            + "\nname:     " + ((_d = this.name) !== null && _d !== void 0 ? _d : '?')
            + "\ngold:     " + ((_e = this.gold) !== null && _e !== void 0 ? _e : 0)
            + "\nheroes:   " + ((_g = (_f = this.heroes) === null || _f === void 0 ? void 0 : _f.length) !== null && _g !== void 0 ? _g : '?')
            + "\n");
    }
}
exports.C_Guild = C_Guild;


/***/ }),

/***/ "./src/d_mdl/C_Hero.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Hero.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Hero = void 0;
exports.alert_hres_info = alert_hres_info;
exports.alert_hero_info = alert_hero_info;
const C_HeroAbility_1 = __webpack_require__(/*! ./C_HeroAbility */ "./src/d_mdl/C_HeroAbility.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
function alert_hres_info(a) {
    if (a === undefined)
        return;
    alert('Number of Hero = ' + a.length.toString());
    for (var i in a) {
        if (a[i] === undefined)
            continue;
        alert_hero_info(a[i]);
    }
}
function alert_hero_info(a) {
    var _a, _b, _c, _d, _e;
    if (a === undefined)
        return;
    alert("Hero Info:\n"
        + "\nid:       " + ((_a = a === null || a === void 0 ? void 0 : a.id) !== null && _a !== void 0 ? _a : '?')
        + "\nuniq_id   " + ((_b = a === null || a === void 0 ? void 0 : a.uniq_id) !== null && _b !== void 0 ? _b : '?')
        + "\nname:     " + ((_c = a === null || a === void 0 ? void 0 : a.name) !== null && _c !== void 0 ? _c : '?')
        + "\nsave_id:  " + ((_d = a === null || a === void 0 ? void 0 : a.save_id) !== null && _d !== void 0 ? _d : '?')
        + "\nis_alive: " + ((_e = a === null || a === void 0 ? void 0 : a.is_alive) !== null && _e !== void 0 ? _e : '?')
        + "\n");
}
class C_Hero {
    constructor(a) {
        this.my_id = 0;
        this.my_name = 'No Name Hero';
        this.uniq_id = 'mai_hero#' + (0, F_Rand_1._get_uuid)();
        this.save_id = 0;
        this.sex = 0;
        this.age = 0;
        this.gold = 0;
        this.state = 0;
        this.lv = 0;
        this.val = {};
        this.abi_p = { bsc: new C_HeroAbility_1.C_HeroAbility(), ttl: new C_HeroAbility_1.C_HeroAbility(), now: new C_HeroAbility_1.C_HeroAbility() };
        this.abi_m = { bsc: new C_HeroAbility_1.C_HeroAbility(), ttl: new C_HeroAbility_1.C_HeroAbility(), now: new C_HeroAbility_1.C_HeroAbility() };
        if (a !== undefined)
            this.__init(a);
    }
    free() {
        this.val = undefined;
        this.abi_p = undefined;
        const a = { bsc: new C_HeroAbility_1.C_HeroAbility(), ttl: new C_HeroAbility_1.C_HeroAbility(), now: new C_HeroAbility_1.C_HeroAbility() };
        this.abi_m = undefined;
        const b = { bsc: new C_HeroAbility_1.C_HeroAbility(), ttl: new C_HeroAbility_1.C_HeroAbility(), now: new C_HeroAbility_1.C_HeroAbility() };
    }
    set_prp(arg) {
        this.decode(arg);
    }
    get_uniq_id() { return this.uniq_id; }
    id() {
        return 'Hero_' + this.my_id.toString(16).padStart(5, '0');
    }
    uid() { return this.uniq_id; }
    name() {
        return this.my_name;
    }
    set_name(name) {
        this.my_name = name;
    }
    is_alive() {
        var _a, _b, _c, _d;
        const hp = (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get('xp')) !== null && _b !== void 0 ? _b : 0;
        const hd = (_d = (_c = this.abi_p) === null || _c === void 0 ? void 0 : _c.now.get('xd')) !== null && _d !== void 0 ? _d : 0;
        return hp - hd > 0;
    }
    get_gold() {
        return this.gold;
    }
    set_gold(gold) {
        this.gold = gold;
    }
    sub_gold(gold) {
        if (gold > this.gold)
            return false;
        this.gold -= gold;
        return true;
    }
    get_abi_p_bsc(key) { var _a, _b; return (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_p_ttl(key) { var _a, _b; return (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.ttl.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_p_now(key) { var _a, _b; return (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_m_bsc(key) { var _a, _b; return (_b = (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.bsc.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_m_ttl(key) { var _a, _b; return (_b = (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.ttl.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_m_now(key) { var _a, _b; return (_b = (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.now.get(key)) !== null && _b !== void 0 ? _b : 0; }
    set_abi_p_all(key, val) {
        var _a, _b, _c;
        (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc.set(key, val);
        (_b = this.abi_p) === null || _b === void 0 ? void 0 : _b.ttl.set(key, val);
        (_c = this.abi_p) === null || _c === void 0 ? void 0 : _c.now.set(key, val);
    }
    set_abi_p_bsc(key, val) { var _a; (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc.set(key, val); }
    set_abi_p_ttl(key, val) { var _a; (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.ttl.set(key, val); }
    set_abi_p_now(key, val) { var _a; (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.set(key, val); }
    set_abi_m_all(key, val) {
        var _a, _b, _c;
        (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.bsc.set(key, val);
        (_b = this.abi_m) === null || _b === void 0 ? void 0 : _b.ttl.set(key, val);
        (_c = this.abi_m) === null || _c === void 0 ? void 0 : _c.now.set(key, val);
    }
    set_abi_m_bsc(key, val) { var _a; (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.bsc.set(key, val); }
    set_abi_m_ttl(key, val) { var _a; (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.ttl.set(key, val); }
    set_abi_m_now(key, val) { var _a; (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.now.set(key, val); }
    hero_bonus(n) {
        return n * (this.lv + 1);
    }
    hp_damage(dmg) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const xp_now = (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get('xp')) !== null && _b !== void 0 ? _b : 0;
        let xd_now = (_d = (_c = this.abi_p) === null || _c === void 0 ? void 0 : _c.now.get('xd')) !== null && _d !== void 0 ? _d : 0;
        xd_now += dmg - Math.round(this.hero_bonus(((_f = (_e = this.abi_p) === null || _e === void 0 ? void 0 : _e.now.get('vit')) !== null && _f !== void 0 ? _f : 0) / 10.0));
        const d = xd_now > xp_now ? xp_now : xd_now;
        (_g = this.abi_p) === null || _g === void 0 ? void 0 : _g.now.set('xd', d);
        (_h = this.abi_p) === null || _h === void 0 ? void 0 : _h.ttl.set('xd', d);
        (_j = this.abi_p) === null || _j === void 0 ? void 0 : _j.bsc.set('xd', d);
        return d;
    }
    hp_heal(heal) {
        var _a, _b, _c, _d, _e;
        let xd_now = (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get('xd')) !== null && _b !== void 0 ? _b : 0;
        if (xd_now <= 0)
            return 0;
        xd_now -= heal;
        const d = xd_now < 0 ? 0 : xd_now;
        (_c = this.abi_p) === null || _c === void 0 ? void 0 : _c.now.set('xd', d);
        (_d = this.abi_p) === null || _d === void 0 ? void 0 : _d.ttl.set('xd', d);
        (_e = this.abi_p) === null || _e === void 0 ? void 0 : _e.bsc.set('xd', d);
        return d;
    }
    hp_auto_heal() {
        var _a, _b;
        const heal = Math.ceil(this.hero_bonus(((_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get('vit')) !== null && _b !== void 0 ? _b : 0) / 10.0));
        return this.hp_heal(heal);
    }
    copy_bsc_to_ttl() {
        var _a, _b, _c, _d, _e, _f;
        (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.ttl.decode((_c = (_b = this.abi_p) === null || _b === void 0 ? void 0 : _b.bsc.encode()) !== null && _c !== void 0 ? _c : {});
        (_d = this.abi_m) === null || _d === void 0 ? void 0 : _d.ttl.decode((_f = (_e = this.abi_m) === null || _e === void 0 ? void 0 : _e.bsc.encode()) !== null && _f !== void 0 ? _f : {});
    }
    copy_ttl_to_now() {
        var _a, _b, _c, _d, _e, _f;
        (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.decode((_c = (_b = this.abi_p) === null || _b === void 0 ? void 0 : _b.ttl.encode()) !== null && _c !== void 0 ? _c : {});
        (_d = this.abi_m) === null || _d === void 0 ? void 0 : _d.now.decode((_f = (_e = this.abi_m) === null || _e === void 0 ? void 0 : _e.ttl.encode()) !== null && _f !== void 0 ? _f : {});
    }
    random_make(hero_level = 0) {
        var _a, _b;
        this.my_id = 0;
        this.my_name = "冒険者 " + (0, F_Rand_1._random_str)(5);
        this.sex = (0, F_Rand_1._irand)(0, 1);
        this.age = (0, F_Rand_1._irand)(15, 25);
        this.state = 0;
        this.lv = hero_level;
        this.gold = (0, F_Rand_1._irand)(500, 1000);
        this.val = {
            skp: { ttl: 0, now: 0 },
            exp: { ttl: 0, now: 0 },
            'nxe': 1000
        };
        const abi_p_bsc = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc;
        abi_p_bsc === null || abi_p_bsc === void 0 ? void 0 : abi_p_bsc.random_make(hero_level);
        const abi_m_bsc = (_b = this.abi_m) === null || _b === void 0 ? void 0 : _b.bsc;
        abi_m_bsc === null || abi_m_bsc === void 0 ? void 0 : abi_m_bsc.random_make(hero_level);
        this.copy_bsc_to_ttl();
        this.copy_ttl_to_now();
        return this;
    }
    encode() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const ret = {
            id: this.my_id,
            uniq_id: this.uniq_id,
            name: this.my_name,
            save_id: this.save_id,
            sex: this.sex,
            age: this.age,
            state: this.state,
            lv: this.lv,
            gold: this.gold,
            val: this.val,
            abi_p_bsc: (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc.encode()) !== null && _b !== void 0 ? _b : {},
            abi_m_bsc: (_d = (_c = this.abi_m) === null || _c === void 0 ? void 0 : _c.bsc.encode()) !== null && _d !== void 0 ? _d : {},
            abi_p_ttl: (_f = (_e = this.abi_p) === null || _e === void 0 ? void 0 : _e.ttl.encode()) !== null && _f !== void 0 ? _f : {},
            abi_m_ttl: (_h = (_g = this.abi_m) === null || _g === void 0 ? void 0 : _g.ttl.encode()) !== null && _h !== void 0 ? _h : {},
            abi_p_now: (_k = (_j = this.abi_p) === null || _j === void 0 ? void 0 : _j.now.encode()) !== null && _k !== void 0 ? _k : {},
            abi_m_now: (_m = (_l = this.abi_m) === null || _l === void 0 ? void 0 : _l.now.encode()) !== null && _m !== void 0 ? _m : {},
        };
        return ret;
    }
    decode(a) { return this.__init(a); }
    __init(a) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (a === undefined)
            return this;
        if (a.id !== undefined)
            this.my_id = a.id;
        if (a.name !== undefined)
            this.my_name = a.name;
        if (a.uniq_id !== undefined)
            this.uniq_id = a.uniq_id;
        if (a.save_id !== undefined)
            this.save_id = a.save_id;
        if (a.sex !== undefined)
            this.sex = a.sex;
        if (a.age !== undefined)
            this.age = a.age;
        if (a.state !== undefined)
            this.state = a.state;
        if (a.lv !== undefined)
            this.lv = a.lv;
        if (a.gold !== undefined)
            this.gold = a.gold;
        if (a.val !== undefined) {
            this.__decode_val((_a = this.val) !== null && _a !== void 0 ? _a : {}, a.val);
        }
        if (a.abi_p_bsc !== undefined)
            (_b = this.abi_p) === null || _b === void 0 ? void 0 : _b.bsc.decode(a.abi_p_bsc);
        if (a.abi_m_bsc !== undefined)
            (_c = this.abi_m) === null || _c === void 0 ? void 0 : _c.bsc.decode(a.abi_m_bsc);
        if (a.abi_p_ttl !== undefined)
            (_d = this.abi_p) === null || _d === void 0 ? void 0 : _d.ttl.decode(a.abi_p_ttl);
        if (a.abi_m_ttl !== undefined)
            (_e = this.abi_m) === null || _e === void 0 ? void 0 : _e.ttl.decode(a.abi_m_ttl);
        if (a.abi_p_now !== undefined)
            (_f = this.abi_p) === null || _f === void 0 ? void 0 : _f.now.decode(a.abi_p_now);
        if (a.abi_m_now !== undefined)
            (_g = this.abi_m) === null || _g === void 0 ? void 0 : _g.now.decode(a.abi_m_now);
        return this;
    }
    __decode_val(d, s) {
        if (s.skp !== undefined)
            d.skp = this.__decode_skex(d.skp, s.skp);
        if (s.exp !== undefined)
            d.exp = this.__decode_skex(d.exp, s.exp);
        if (s.nxe !== undefined)
            d.nxe = s.nxe;
    }
    __decode_skex(a, s) {
        var _a, _b, _c, _d, _e;
        var d;
        if (a === undefined)
            d = { ttl: 0, now: 0 };
        else
            d = { ttl: (_a = a === null || a === void 0 ? void 0 : a.ttl) !== null && _a !== void 0 ? _a : 0, now: (_b = a === null || a === void 0 ? void 0 : a.now) !== null && _b !== void 0 ? _b : 0 };
        d.ttl = (_c = s.ttl) !== null && _c !== void 0 ? _c : d.ttl;
        d.now = (_e = (_d = s.now) !== null && _d !== void 0 ? _d : s.ttl) !== null && _e !== void 0 ? _e : d.now;
        return d;
    }
    static encode_heroes(heroes) {
        const heroes_data = [];
        for (var hero of heroes) {
            heroes_data.push(hero.encode());
        }
        return heroes_data;
    }
    static decode_heroes(heroes_data) {
        const heroes = [];
        if (heroes_data !== undefined) {
            for (var hero_data of heroes_data) {
                if (hero_data !== undefined)
                    heroes.push(new C_Hero().decode(hero_data));
            }
        }
        return heroes;
    }
    alert() {
        var _a, _b, _c, _d, _e;
        alert("Hero Info:\n"
            + "\nid:       " + ((_a = this.id) !== null && _a !== void 0 ? _a : '?')
            + "\nuniq_id   " + ((_b = this.uniq_id) !== null && _b !== void 0 ? _b : '?')
            + "\nname:     " + ((_c = this.name) !== null && _c !== void 0 ? _c : '?')
            + "\nsave_id:  " + ((_d = this.save_id) !== null && _d !== void 0 ? _d : '?')
            + "\nis_alive: " + ((_e = this.is_alive) !== null && _e !== void 0 ? _e : '?')
            + "\n");
    }
    static alert_hres(a) {
        var _a;
        if (a === undefined)
            return;
        alert('Number of Hero = ' + a.length.toString());
        for (var i in a)
            (_a = a[i]) === null || _a === void 0 ? void 0 : _a.alert();
    }
}
exports.C_Hero = C_Hero;


/***/ }),

/***/ "./src/d_mdl/C_HeroAbility.ts":
/*!************************************!*\
  !*** ./src/d_mdl/C_HeroAbility.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_HeroAbility = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_HeroAbility {
    constructor(a) {
        this.v = {
            xp: 0,
            xd: 0,
            atk: 0,
            def: 0,
            quc: 0,
            cnc: 0,
            str: 0,
            pwr: 0,
            vit: 0,
            dex: 0,
            agi: 0,
            tec: 0,
            luk: 0,
        };
        for (let idx in this.v) {
            this.v[idx] = 0;
        }
        if (a !== undefined)
            this.decode(a);
    }
    get(key) {
        if (!(key in this.v))
            return undefined;
        return this.v[key];
    }
    set(key, val) {
        if (!(key in this.v))
            return undefined;
        this.v[key] = val;
        return this.v[key];
    }
    setAny(key, s) {
        for (let idx in s) {
            if (!(idx in this.v))
                continue;
            this.v[key] = s[key];
        }
    }
    add(a) {
        for (let key in a) {
            this.v[key] += a[key];
        }
    }
    calc_xp() {
        this.v.xp = Math.ceil(20 * this.v.str + 20 * this.v.vit + 5 * this.v.tec + 5 * this.v.luk);
    }
    calc_el() {
        this.v.atk = Math.ceil(2 * this.v.str + 2 * this.v.pwr + 1 * this.v.tec);
        this.v.def = Math.ceil(2 * this.v.str + 2 * this.v.vit + 1 * this.v.tec);
        this.v.quc = Math.ceil(2 * this.v.dex + 2 * this.v.agi + 1 * this.v.tec);
        this.v.cnc = Math.ceil(3 * this.v.luk + 2 * this.v.tec);
    }
    random_make(hero_level = 0) {
        const hl = hero_level + 1;
        this.v.str += (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.pwr += (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.vit += (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.dex += (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.agi += (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.tec += (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.luk += (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.xd = 0;
        this.calc_xp();
        this.calc_el();
        return this;
    }
    encode() {
        const a = {};
        for (let key in this.v)
            a[key] = this.v[key];
        return a;
    }
    decode(a) {
        for (let key in a) {
            if (key in this.v && a[key] !== undefined)
                this.v[key] = a[key];
        }
        return this;
    }
    static clone(s) {
        return new C_HeroAbility(s.encode());
    }
}
exports.C_HeroAbility = C_HeroAbility;


/***/ }),

/***/ "./src/d_mdl/C_Hope.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Hope.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_HopeAction = exports.C_HasHope = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_HasHope {
    constructor(j) {
        var _a, _b;
        this.has_hope = false;
        this.hope = 'Wait';
        if (j) {
            this.has_hope = (_a = j.has_hope) !== null && _a !== void 0 ? _a : false;
            this.hope = (_b = j.hope) !== null && _b !== void 0 ? _b : 'Wait';
        }
    }
}
exports.C_HasHope = C_HasHope;
class C_HopeAction {
    constructor(j) {
        var _a, _b;
        this.has_hope = false;
        this.hope = 'Wait';
        this.has_hope = (_a = j === null || j === void 0 ? void 0 : j.has_hope) !== null && _a !== void 0 ? _a : false;
        this.hope = (_b = j === null || j === void 0 ? void 0 : j.hope) !== null && _b !== void 0 ? _b : 'Wait';
        this.subj = (j === null || j === void 0 ? void 0 : j.subj) !== undefined ? new C_PointDir_1.C_PointDir(j.subj) : new C_PointDir_1.C_PointDir();
    }
}
exports.C_HopeAction = C_HopeAction;


/***/ }),

/***/ "./src/d_mdl/C_Location.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_Location.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Location = exports.T_Lckd = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
exports.T_Lckd = {
    Unkn: 0,
    Maze: 1,
    Guld: 2,
};
function _lckd_key(lckd) {
    var _a;
    return (_a = Object.keys(exports.T_Lckd).find(key => exports.T_Lckd[key] === lckd)) !== null && _a !== void 0 ? _a : "????";
}
class C_Location {
    constructor(json) {
        this.loc_kind = exports.T_Lckd.Unkn;
        this.loc_name = '';
        this.loc_uid = '';
        this.loc_pos = new C_PointDir_1.C_PointDir();
        if (json !== undefined)
            this.__init(json);
    }
    __init(j) {
        if (j === undefined)
            return this;
        if (j.kind === undefined || !(j.kind in exports.T_Lckd))
            return this;
        if (j.kind !== undefined)
            this.loc_kind = exports.T_Lckd[j.kind];
        if (j.name !== undefined)
            this.loc_name = j.name;
        if (j.loc_uid !== undefined)
            this.loc_uid = j.loc_uid;
        if (j.loc_pos !== undefined)
            this.loc_pos.decode(j.loc_pos);
        return this;
    }
    get_lckd_str() { return _lckd_key(this.loc_kind); }
    get_lckd() { return this.loc_kind; }
    get_name() { return this.loc_name; }
    get_uid() { return this.loc_uid; }
    set_lckd(lckd) {
        if (!(_lckd_key(lckd) in exports.T_Lckd))
            return undefined;
        this.loc_kind = lckd;
        return this;
    }
    set_name(name) { this.loc_name = name; }
    set_uid(uid) { this.loc_uid = uid; }
    set_lckd_str(lckd) {
        if (!(lckd in exports.T_Lckd))
            return undefined;
        this.loc_kind = exports.T_Lckd[lckd];
        return this;
    }
    get_p() {
        return this.loc_pos.get_p();
    }
    get_d() {
        return this.loc_pos.get_d();
    }
    get_pd() {
        return this.loc_pos.get_pd();
    }
    set_p(p) {
        if (this.loc_kind !== exports.T_Lckd.Maze)
            return undefined;
        if (this.loc_pos.set_p(p) === undefined)
            return undefined;
        return this.loc_pos;
    }
    set_d(d) {
        if (this.loc_kind !== exports.T_Lckd.Maze)
            return undefined;
        if (this.loc_pos.set_d(d) === undefined)
            return undefined;
        return this.loc_pos.d;
    }
    set_pd(pd) {
        if (this.loc_pos.set_pd(pd) === undefined)
            return undefined;
        return this.loc_pos;
    }
    encode() {
        return {
            kind: _lckd_key(this.loc_kind),
            name: this.loc_name,
            loc_uid: this.loc_uid,
            loc_pos: this.loc_pos.encode(),
        };
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_Location = C_Location;


/***/ }),

/***/ "./src/d_mdl/C_Maze.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Maze.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Maze = void 0;
exports.alert_maze_info = alert_maze_info;
const T_MzKind_1 = __webpack_require__(/*! ./T_MzKind */ "./src/d_mdl/T_MzKind.ts");
const C_MazeCell_1 = __webpack_require__(/*! ./C_MazeCell */ "./src/d_mdl/C_MazeCell.ts");
const C_Point_1 = __webpack_require__(/*! ./C_Point */ "./src/d_mdl/C_Point.ts");
const C_Location_1 = __webpack_require__(/*! ./C_Location */ "./src/d_mdl/C_Location.ts");
const C_Range_1 = __webpack_require__(/*! ./C_Range */ "./src/d_mdl/C_Range.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const T_Direction_1 = __webpack_require__(/*! ./T_Direction */ "./src/d_mdl/T_Direction.ts");
const C_PointSet2D_1 = __webpack_require__(/*! ./C_PointSet2D */ "./src/d_mdl/C_PointSet2D.ts");
const F_new_MazeObj_1 = __webpack_require__(/*! ./F_new_MazeObj */ "./src/d_mdl/F_new_MazeObj.ts");
function alert_maze_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    if (a === undefined)
        return;
    alert("Maze Info:"
        + "\nmaze id :" + ((_a = a.id) !== null && _a !== void 0 ? _a : '?')
        + "\nfloor: " + ((_b = a.floor) !== null && _b !== void 0 ? _b : '?')
        + "\nuniq id :" + ((_c = a.uniq_id) !== null && _c !== void 0 ? _c : '?')
        + "\nsave id :" + ((_d = a.save_id) !== null && _d !== void 0 ? _d : '?')
        + "\nname:   " + ((_e = a.name) !== null && _e !== void 0 ? _e : '?')
        + "\nsize_x: " + ((_f = a.size_x) !== null && _f !== void 0 ? _f : '?')
        + "\nsize_y: " + ((_g = a.size_y) !== null && _g !== void 0 ? _g : '?')
        + "\nsize_z: " + ((_h = a.size_z) !== null && _h !== void 0 ? _h : '?')
        + "maze:\n" + ((_j = a.maze) !== null && _j !== void 0 ? _j : '?')
        + "mask:\n" + ((_k = a.mask) !== null && _k !== void 0 ? _k : '?')
        + "\n");
}
class C_Maze {
    constructor(a) {
        this.my_layer = 0;
        this.num_of_room = 5;
        this.max_size_of_room = 3;
        this.maze_id = -1;
        this.save_id = -1;
        this.uniq_id = 'mai_maze#' + (0, F_Rand_1._get_uuid)();
        this.floor = 0;
        this.name = '';
        this.size = new C_Range_1.C_Range(new C_Point_1.C_Point(0, 0, 0), new C_Point_1.C_Point(2, 2, 2));
        this.cells = this.__init_maze(T_MzKind_1.T_MzKind.Stone);
        this.masks = this.__init_mask(true);
        this.unclear = [];
        this.__init_unclear();
        this.objs = {};
        if (a !== undefined)
            this.decode(a);
    }
    __init_maze(kind = T_MzKind_1.T_MzKind.Stone) {
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        const cells = Array(size_z);
        for (var z = 0; z < size_z; z++) {
            cells[z] = Array(size_y);
            for (var y = 0; y < size_y; y++) {
                cells[z][y] = Array(size_x);
                for (var x = 0; x < size_x; x++) {
                    cells[z][y][x] = C_MazeCell_1.C_MazeCell.newObj({ kind: kind, pos: { x: x, y: y, z: z } });
                }
            }
        }
        return cells;
    }
    __init_mask(YN) {
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        this.masks = Array(size_z);
        for (var z = 0; z < size_z; z++) {
            this.masks[z] = Array(size_y);
            for (var y = 0; y < size_y; y++) {
                this.masks[z][y] = Array(size_x);
                for (var x = 0; x < size_x; x++) {
                    this.masks[z][y][x] = YN;
                }
            }
        }
        return this.masks;
    }
    __init_unclear() {
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        this.unclear = Array(size_z);
        for (var z = 0; z < size_z; z++) {
            this.unclear[z] = 0;
            for (var y = 0; y < size_y; y++) {
                for (var x = 0; x < size_x; x++) {
                    if (this.masks[z][y][x])
                        this.unclear[z]++;
                }
            }
        }
        return;
    }
    uid() { return this.uniq_id; }
    get_lckd() { return C_Location_1.T_Lckd.Maze; }
    get_name() { return this.name; }
    within(p) {
        return this.size.within(p);
    }
    add_obj(obj) {
        if (obj === undefined)
            return;
        this.objs[obj.uid()] = obj;
    }
    rmv_obj(obj) {
        if (obj === undefined)
            return;
        delete this.objs[obj.uid()];
    }
    get_obj_array() {
        const obj_array = [];
        for (const id in this.objs)
            obj_array.push(this.objs[id]);
        return obj_array;
    }
    get_obj_xyz(x, y, z) {
        return this.get_obj(new C_Point_1.C_Point(x, y, z));
    }
    get_obj(p) {
        var _a, _b, _c;
        var layer = -1;
        var obj = null;
        for (const id in this.objs) {
            const exist = this.objs[id];
            if (exist.view() === undefined)
                continue;
            if (exist.within(p) && ((_a = exist.view()) === null || _a === void 0 ? void 0 : _a.letter(exist.get_pd().d)) !== null) {
                const exist_layer = (_c = (_b = exist.view()) === null || _b === void 0 ? void 0 : _b.layer()) !== null && _c !== void 0 ? _c : -99;
                if (exist_layer > layer) {
                    layer = exist_layer;
                    obj = exist;
                }
            }
        }
        return obj;
    }
    get_any_obj(p) {
        var _a;
        var obje = [];
        for (const id in this.objs) {
            const exist = this.objs[id];
            if (exist.view() === undefined)
                continue;
            if (exist.within(p) && ((_a = exist.view()) === null || _a === void 0 ? void 0 : _a.letter(exist.get_pd().d)) !== null) {
                obje.push(exist);
            }
        }
        return obje;
    }
    exist_obj(p) {
        var _a;
        for (const id in this.objs) {
            const exist = this.objs[id];
            if (exist === undefined)
                continue;
            if (exist.within(p) && ((_a = exist.view()) === null || _a === void 0 ? void 0 : _a.letter(exist.get_pd().d)) !== null)
                return true;
        }
        return false;
    }
    change_unexp_to_floor(p) {
        if (this.get_kind(p) == T_MzKind_1.T_MzKind.Unexp) {
            this.set_cell(p, T_MzKind_1.T_MzKind.Floor);
        }
    }
    clear_mask_around_the_team(team) {
        this.__clear_mask(team.getWalker().get_around(0, -1));
        this.__clear_mask(team.getWalker().get_around(0, 0));
        this.__clear_mask(team.getWalker().get_around(0, 1));
        const depth = 5;
        for (var d = 1; d < depth; d++) {
            const front_pos = team.getWalker().get_around(d, 0);
            if (this.is_movable(front_pos)) {
                this.__clear_mask(team.getWalker().get_around(d, -1));
                this.__clear_mask(team.getWalker().get_around(d, 0));
                this.__clear_mask(team.getWalker().get_around(d, 1));
            }
            else {
                this.__clear_mask(team.getWalker().get_around(d, -1));
                this.__clear_mask(team.getWalker().get_around(d, 0));
                this.__clear_mask(team.getWalker().get_around(d, 1));
                break;
            }
        }
    }
    __clear_mask(clr_pos) {
        if (!this.size.within(clr_pos))
            return;
        if (this.masks[clr_pos.z][clr_pos.y][clr_pos.x]) {
            this.masks[clr_pos.z][clr_pos.y][clr_pos.x] = false;
            this.unclear[clr_pos.z]--;
        }
    }
    is_floor_cleared(clr_pos) {
        return this.unclear[clr_pos.z] < 1;
    }
    is_maze_cleared() {
        for (const clr of this.unclear)
            if (clr > 0)
                return false;
        return true;
    }
    is_masked(p) { return this.is_masked_xyz(p.x, p.y, p.z); }
    is_masked_xyz(x, y, z) {
        return this.masks[z][y][x];
    }
    is_movable(p) {
        if (!this.size.within(p))
            return false;
        switch (this.get_kind(p)) {
            case T_MzKind_1.T_MzKind.Floor:
            case T_MzKind_1.T_MzKind.Unexp:
            case T_MzKind_1.T_MzKind.StrUp:
            case T_MzKind_1.T_MzKind.StrDn:
            case T_MzKind_1.T_MzKind.StrUD:
                return true;
        }
        return false;
    }
    get_x_max() { return this.size.size_x(); }
    get_y_max() { return this.size.size_y(); }
    get_z_max() { return this.size.size_z(); }
    get_kind(p) {
        if (this.size.within(p))
            return this.cells[p.z][p.y][p.x].getKind();
        return T_MzKind_1.T_MzKind.NoDef;
    }
    get_kind_xyz(x, y, z) {
        if (this.size.within(x, y, z))
            return this.cells[z][y][x].getKind();
        return T_MzKind_1.T_MzKind.NoDef;
    }
    get_cell_xyz(x, y, z) {
        if (this.size.within(x, y, z))
            return this.cells[z][y][x];
        return undefined;
    }
    get_cell(p) {
        if (this.size.within(p))
            return this.cells[p.z][p.y][p.x];
        return undefined;
    }
    set_cell(p, k) {
        if (this.size.within(p)) {
            this.cells[p.z][p.y][p.x] = C_MazeCell_1.C_MazeCell.newObj({ kind: k, pos: p });
        }
    }
    set_cell_xyz(x, y, z, k) {
        if (this.size.within(x, y, z)) {
            this.cells[z][y][x] = C_MazeCell_1.C_MazeCell.newObj({ kind: k, pos: { x: x, y: y, z: z } });
        }
    }
    can_move(p) {
        return this.size.within(p);
    }
    can_UD(p) {
        return this.is_movable(p);
    }
    fill_cell(kind, floor) {
        for (let h = 0; h < this.size.size_y(); h++)
            for (let w = 0; w < this.size.size_x(); w++)
                this.set_cell_xyz(w, h, floor, kind);
        return;
    }
    set_box(kind, top_x, top_y, size_x, size_y, floor) {
        if (top_x + size_x > this.size.size_x())
            size_x = this.size.size_x() - top_x + 1;
        if (top_y + size_y > this.size.size_y())
            size_y = this.size.size_y() - top_y + 1;
        const top = top_y;
        const btm = top + size_y - 1;
        const lft = top_x;
        const rgt = lft + size_x - 1;
        for (let x = 0; x < size_x; x++) {
            this.set_cell_xyz(x, top, floor, kind);
            this.set_cell_xyz(x, btm, floor, kind);
        }
        for (let y = 0; y < size_y; y++) {
            this.set_cell_xyz(lft, y, floor, kind);
            this.set_cell_xyz(rgt, y, floor, kind);
        }
        return;
    }
    create_stair2(floor) {
        var _a, _b;
        const H_size_x = (this.size.size_x() - 1) / 2;
        const H_size_y = (this.size.size_y() - 1) / 2;
        const pos_x = 2 * (0, F_Rand_1._irand)(0, H_size_x - 1) + 1;
        const pos_y = 2 * (0, F_Rand_1._irand)(0, H_size_y - 1) + 1;
        const pos_d = 1 * (0, F_Rand_1._irand)(0, T_Direction_1.T_Direction.MAX);
        if (((_a = this.get_cell_xyz(pos_x, pos_y, floor)) === null || _a === void 0 ? void 0 : _a.getKind()) !== T_MzKind_1.T_MzKind.StrUp) {
            this.set_cell_xyz(pos_x, pos_y, floor, T_MzKind_1.T_MzKind.StrDn);
        }
        else {
            this.set_cell_xyz(pos_x, pos_y, floor, T_MzKind_1.T_MzKind.StrUD);
        }
        if (floor < this.get_z_max()) {
            if (((_b = this.get_cell_xyz(pos_x, pos_y, floor + 1)) === null || _b === void 0 ? void 0 : _b.getKind()) !== T_MzKind_1.T_MzKind.StrDn) {
                this.set_cell_xyz(pos_x, pos_y, floor + 1, T_MzKind_1.T_MzKind.StrUp);
            }
            else {
                this.set_cell_xyz(pos_x, pos_y, floor + 1, T_MzKind_1.T_MzKind.StrUD);
            }
        }
        return new C_PointDir_1.C_PointDir({ x: pos_x, y: pos_y, z: floor, d: pos_d });
    }
    create_stair(floor) {
        var _a, _b;
        const H_size_x = (this.size.size_x() - 1) / 2;
        const H_size_y = (this.size.size_y() - 1) / 2;
        const pos_x = 2 * (0, F_Rand_1._irand)(0, H_size_x - 1) + 1;
        const pos_y = 2 * (0, F_Rand_1._irand)(0, H_size_y - 1) + 1;
        const pos_d = 1 * (0, F_Rand_1._irand)(0, T_Direction_1.T_Direction.MAX);
        if (floor >= 1) {
            if (((_a = this.get_cell_xyz(pos_x, pos_y, floor - 1)) === null || _a === void 0 ? void 0 : _a.getKind()) !== T_MzKind_1.T_MzKind.StrUp) {
                this.set_cell_xyz(pos_x, pos_y, floor - 1, T_MzKind_1.T_MzKind.StrDn);
            }
            else {
                this.set_cell_xyz(pos_x, pos_y, floor - 1, T_MzKind_1.T_MzKind.StrUD);
            }
        }
        if (floor < this.get_z_max()) {
            if (((_b = this.get_cell_xyz(pos_x, pos_y, floor)) === null || _b === void 0 ? void 0 : _b.getKind()) !== T_MzKind_1.T_MzKind.StrDn) {
                this.set_cell_xyz(pos_x, pos_y, floor, T_MzKind_1.T_MzKind.StrUp);
            }
            else {
                this.set_cell_xyz(pos_x, pos_y, floor, T_MzKind_1.T_MzKind.StrUD);
            }
        }
        return {
            up: new C_PointDir_1.C_PointDir({ x: pos_x, y: pos_y, z: floor, d: pos_d }),
            dn: floor >= 1 ? new C_PointDir_1.C_PointDir({ x: pos_x, y: pos_y, z: floor - 1, d: pos_d }) : undefined,
        };
    }
    create_maze(floor) {
        var _a, _b;
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        this.fill_cell(T_MzKind_1.T_MzKind.Unexp, floor);
        this.set_box(T_MzKind_1.T_MzKind.Stone, 0, 0, size_x, size_y, floor);
        const points = new C_PointSet2D_1.C_PointSet2D();
        for (let h = 2; h < size_y - 2; h += 2) {
            for (let w = 2; w < size_x - 2; w += 2) {
                const di = (0, F_Rand_1._irand)(0, T_Direction_1.T_Direction.MAX);
                points.push(new C_PointSet2D_1.C_PointLink2D(w, h, di));
            }
        }
        const rooms_array = [];
        const num_of_room = (0, F_Rand_1._irand)(0, this.num_of_room);
        for (let cnt = 0; cnt < num_of_room; cnt++) {
            const leng_x = (0, F_Rand_1._irand)(1, this.max_size_of_room) * 2 + 1;
            const leng_y = (0, F_Rand_1._irand)(1, this.max_size_of_room) * 2 + 1;
            const room_x = (0, F_Rand_1._irand)(0, (size_x - leng_x) / 2) * 2;
            const room_y = (0, F_Rand_1._irand)(0, (size_y - leng_y) / 2) * 2;
            rooms_array.push({ tx: room_x, ty: room_y, sx: leng_x, sy: leng_y });
        }
        for (const room of rooms_array) {
            for (let ii = 0; ii < points.set.length; ii++) {
                const p = points.set[ii];
                if (p === undefined)
                    continue;
                if ((p.x >= room.tx)
                    && (p.x <= room.tx + room.sx)
                    && (p.y >= room.ty)
                    && (p.y <= room.ty + room.sy)) {
                    points.remove(p);
                }
            }
        }
        for (const p of points.set) {
            if (p === undefined)
                continue;
            this.set_cell_xyz(p.x, p.y, floor, T_MzKind_1.T_MzKind.Stone);
            const direction = [0, 0, 0, 0];
            const di = (_b = (_a = C_PointSet2D_1.C_PointLink2D.cast(p)) === null || _a === void 0 ? void 0 : _a.di) !== null && _b !== void 0 ? _b : T_Direction_1.T_Direction.X;
            if (di === T_Direction_1.T_Direction.X)
                continue;
            direction[di] = 1;
            this.set_cell_xyz(p.x - direction[T_Direction_1.T_Direction.W] + direction[T_Direction_1.T_Direction.E], p.y - direction[T_Direction_1.T_Direction.N] + direction[T_Direction_1.T_Direction.S], floor, T_MzKind_1.T_MzKind.Stone);
        }
        for (const set of points.set) {
            if (set === undefined)
                continue;
            const [yn, trace_set] = this.check_close(set.x, set.y, points, new C_PointSet2D_1.C_PointSet2D());
            if (yn) {
                this.open_exit(trace_set, T_MzKind_1.T_MzKind.Unexp, floor);
                if (trace_set !== undefined)
                    for (const t of trace_set.set)
                        points.remove(t);
            }
        }
        return;
    }
    check_close(x, y, point_set, trace_set) {
        var _a, _b;
        if (x < 2 || y < 2 || x > this.size.size_x() - 2 || y > this.size.size_y() - 2)
            return [false, undefined];
        if (point_set === undefined)
            return [false, undefined];
        if ((point_set === null || point_set === void 0 ? void 0 : point_set.is_exist(x, y)) === false)
            return [false, undefined];
        if (trace_set !== undefined && (trace_set === null || trace_set === void 0 ? void 0 : trace_set.is_exist(x, y)) === true)
            return [true, trace_set];
        const p = point_set.get_point(x, y);
        trace_set !== null && trace_set !== void 0 ? trace_set : (trace_set = new C_PointSet2D_1.C_PointSet2D());
        trace_set === null || trace_set === void 0 ? void 0 : trace_set.push(new C_PointSet2D_1.C_PointLink2D(x, y, (_a = C_PointSet2D_1.C_PointLink2D.cast(p)) === null || _a === void 0 ? void 0 : _a.di));
        let next_x = 0, next_y = 0;
        switch ((_b = C_PointSet2D_1.C_PointLink2D.cast(p)) === null || _b === void 0 ? void 0 : _b.di) {
            case T_Direction_1.T_Direction.N:
                next_x = x;
                next_y = y - 2;
                break;
            case T_Direction_1.T_Direction.E:
                next_x = x + 2;
                next_y = y;
                break;
            case T_Direction_1.T_Direction.S:
                next_x = x;
                next_y = y + 2;
                break;
            case T_Direction_1.T_Direction.W:
                next_x = x - 2;
                next_y = y;
                break;
        }
        return this.check_close(next_x, next_y, point_set, trace_set);
    }
    open_exit(p, kind, floor) {
        var _a, _b;
        if (p === undefined)
            return;
        const cnt = (0, F_Rand_1._irand)(0, p.set.length - 1);
        const pp = p.set[cnt];
        let direction = [0, 0, 0, 0];
        const di = (_b = (_a = C_PointSet2D_1.C_PointLink2D.cast(pp)) === null || _a === void 0 ? void 0 : _a.di) !== null && _b !== void 0 ? _b : T_Direction_1.T_Direction.N;
        direction[di] = 1;
        this.set_cell_xyz(pp.x - direction[T_Direction_1.T_Direction.W] + direction[T_Direction_1.T_Direction.E], pp.y - direction[T_Direction_1.T_Direction.N] + direction[T_Direction_1.T_Direction.S], floor, kind);
        return;
    }
    to_letter(p) {
        return this.cells[p.z][p.y][p.x].to_letter();
    }
    to_string(floor = 0, debug_mode = false) {
        var _a, _b;
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        var ret_str = '';
        for (var y = 0; y < size_y; y++) {
            for (var x = 0; x < size_x; x++) {
                const obj = this.get_obj_xyz(x, y, floor);
                if (!debug_mode && this.masks[floor][y][x]) {
                    ret_str += 'Ｘ';
                }
                else {
                    const obj_c = (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.view()) === null || _a === void 0 ? void 0 : _a.letter(obj.get_pd().d)) !== null && _b !== void 0 ? _b : null;
                    if (obj === null || obj_c === null) {
                        ret_str += this.cells[floor][y][x].to_letter();
                    }
                    else {
                        ret_str += obj_c;
                    }
                }
            }
            ret_str += "\n";
        }
        return ret_str;
    }
    encode() {
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        var z_array = [];
        for (var z = 0; z < size_z; z++) {
            var y_array = [];
            for (var y = 0; y < size_y; y++) {
                var x_array = [];
                for (var x = 0; x < size_x; x++) {
                    x_array.push(this.cells[z][y][x].encode());
                }
                y_array.push(x_array.join('X'));
            }
            z_array.push(y_array.join('Y'));
        }
        const maze_str = z_array.join('Z');
        var z_array = [];
        for (var z = 0; z < size_z; z++) {
            var y_array = [];
            for (var y = 0; y < size_y; y++) {
                var x_array = [];
                for (var x = 0; x < size_x; x++) {
                    x_array.push(this.masks[z][y][x] ? '1' : '0');
                }
                y_array.push(x_array.join('X'));
            }
            z_array.push(y_array.join('Y'));
        }
        const mask_str = z_array.join('Z');
        let objs = [];
        for (const ii in this.objs)
            objs.push(this.objs[ii].encode());
        return {
            id: this.maze_id,
            uniq_id: this.uniq_id,
            save_id: this.save_id,
            floor: this.floor,
            name: this.name,
            objs: objs,
            size_x: this.size.size_x(),
            size_y: this.size.size_y(),
            size_z: this.size.size_z(),
            maze: maze_str,
            mask: mask_str,
        };
    }
    decode(a) {
        if (a === undefined)
            return this;
        if (a.id !== undefined)
            this.maze_id = a.id;
        if (a.uniq_id !== undefined)
            this.uniq_id = a.uniq_id;
        if (a.save_id !== undefined)
            this.save_id = a.save_id;
        if (a.floor !== undefined)
            this.floor = a.floor;
        if (a.name !== undefined)
            this.name = a.name;
        if (a.objs !== undefined) {
            this.objs = {};
            for (const json_obj of a.objs) {
                const new_obj = (0, F_new_MazeObj_1.new_mazeObj)(json_obj);
                this.objs[new_obj.uid()] = new_obj;
            }
        }
        if (a.size_x !== undefined && a.size_y !== undefined && a.size_z !== undefined) {
            this.size = new C_Range_1.C_Range(new C_Point_1.C_Point(0, 0, 0), new C_Point_1.C_Point(a.size_x - 1, a.size_y - 1, a.size_z - 1));
            this.cells = this.__init_maze(T_MzKind_1.T_MzKind.Stone);
            this.masks = this.__init_mask(true);
            this.__init_unclear();
        }
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        if (a.maze !== undefined) {
            const z_array = a.maze.split('Z');
            const z_max = (0, F_Math_1._min)([size_z, z_array.length]);
            for (var z = 0; z < z_max; z++) {
                const y_array = z_array[z].split('Y');
                const y_max = (0, F_Math_1._min)([size_y, y_array.length]);
                for (var y = 0; y < y_max; y++) {
                    const x_array = y_array[y].split('X');
                    const x_max = (0, F_Math_1._min)([size_x, x_array.length]);
                    for (var x = 0; x < x_max; x++) {
                        let kind = parseInt(x_array[x], 16);
                        this.cells[z][y][x] = C_MazeCell_1.C_MazeCell.newObj({ kind: kind, pos: { x: x, y: y, z: z } });
                    }
                }
            }
        }
        if (a.mask !== undefined) {
            this.__init_mask(true);
            const z_array = a.mask.split('Z');
            const z_max = (0, F_Math_1._min)([size_z, z_array.length]);
            for (var z = 0; z < z_max; z++) {
                const y_array = z_array[z].split('Y');
                const y_max = (0, F_Math_1._min)([size_y, y_array.length]);
                for (var y = 0; y < y_max; y++) {
                    const x_array = y_array[y].split('X');
                    const x_max = (0, F_Math_1._min)([size_x, x_array.length]);
                    for (var x = 0; x < x_max; x++) {
                        if (x_array[x] !== '0') {
                            this.masks[z][y][x] = true;
                        }
                        else {
                            this.masks[z][y][x] = false;
                        }
                    }
                }
            }
            this.__init_unclear();
        }
        return this;
    }
    static encode_all(all_maze) {
        const all_maze_data = [];
        for (let maze of all_maze) {
            all_maze_data.push(maze.encode());
        }
        return all_maze_data;
    }
    static decode_all(all_maze_data) {
        const all_maze = [];
        for (let maze_data of all_maze_data) {
            all_maze.push((new C_Maze({})).decode(maze_data));
        }
        return all_maze;
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        alert("Maze Info:"
            + "\nmaze id :" + ((_a = this.maze_id) !== null && _a !== void 0 ? _a : '?')
            + "\nfloor: " + ((_b = this.floor) !== null && _b !== void 0 ? _b : '?')
            + "\nuniq id :" + ((_c = this.uniq_id) !== null && _c !== void 0 ? _c : '?')
            + "\nsave id :" + ((_d = this.save_id) !== null && _d !== void 0 ? _d : '?')
            + "\nname:   " + ((_e = this.name) !== null && _e !== void 0 ? _e : '?')
            + "\nsize_x: " + ((_f = this.size.size_x()) !== null && _f !== void 0 ? _f : '?')
            + "\nsize_y: " + ((_g = this.size.size_y()) !== null && _g !== void 0 ? _g : '?')
            + "\nsize_z: " + ((_h = this.size.size_z()) !== null && _h !== void 0 ? _h : '?')
            + "\n");
    }
    alert_maze(floor = 0) {
        var _a;
        alert("Maze Map:"
            + "maze:\n" + ((_a = this.to_string(floor, true)) !== null && _a !== void 0 ? _a : '?')
            + "\n");
    }
    alert_mask(floor = 0) {
        var _a;
        alert("Mask Map:"
            + "mask:\n" + ((_a = this.to_string(floor, false)) !== null && _a !== void 0 ? _a : '?')
            + "\n");
    }
}
exports.C_Maze = C_Maze;


/***/ }),

/***/ "./src/d_mdl/C_MazeCell.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_MazeCell.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeCell = void 0;
const T_MzKind_1 = __webpack_require__(/*! ./T_MzKind */ "./src/d_mdl/T_MzKind.ts");
const F_new_MazeObj_1 = __webpack_require__(/*! ./F_new_MazeObj */ "./src/d_mdl/F_new_MazeObj.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_MazeCell {
    static newObj(j) {
        switch (j.kind) {
            case T_MzKind_1.T_MzKind.NoDef: return new C_MazeCellNoDef(j);
            case T_MzKind_1.T_MzKind.Unkwn: return new C_MazeCellUnkwn(j);
            case T_MzKind_1.T_MzKind.Empty: return new C_MazeCellEmpty(j);
            case T_MzKind_1.T_MzKind.Floor: return new C_MazeCellFloor(j);
            case T_MzKind_1.T_MzKind.Unexp: return new C_MazeCellUnexp(j);
            case T_MzKind_1.T_MzKind.Stone: return new C_MazeCellStone(j);
            case T_MzKind_1.T_MzKind.StrUp: return new C_MazeCellStrUp(j);
            case T_MzKind_1.T_MzKind.StrDn: return new C_MazeCellStrDn(j);
            case T_MzKind_1.T_MzKind.StrUD: return new C_MazeCellStrUD(j);
        }
        return new C_MazeCellNoDef(j);
    }
    constructor(j) {
        var _a, _b, _c;
        var _d;
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        (_b = (_d = j.obj).clname) !== null && _b !== void 0 ? _b : (_d.clname = this.constructor.name);
        this.kind = (_c = j.kind) !== null && _c !== void 0 ? _c : T_MzKind_1.T_MzKind.NoDef;
        this.my_obj = (0, F_new_MazeObj_1.new_mazeObj)(j.obj);
    }
    getObj() { return this.my_obj; }
    getKind() {
        return this.kind;
    }
    to_letter() {
        var _a, _b;
        return (_b = (_a = this.my_obj.view()) === null || _a === void 0 ? void 0 : _a.letter(0)) !== null && _b !== void 0 ? _b : 'Ｘ';
    }
    static from_letter(letter) {
        for (const key of Object.keys(T_MzKind_1.T_MzKind)) {
            if (letter === key)
                return T_MzKind_1.T_MzKind[key];
        }
        return T_MzKind_1.T_MzKind.NoDef;
    }
    drow2D(rect, dir = 0) {
        var _a;
        (_a = this.my_obj.view()) === null || _a === void 0 ? void 0 : _a.drow2D(rect, dir);
    }
    drow3D(frot, back, o_dir = C_PointDir_1.T_Direction.N, t_dir = C_PointDir_1.T_Direction.N) {
        var _a;
        (_a = this.my_obj.view()) === null || _a === void 0 ? void 0 : _a.drow3D(frot, back, o_dir, t_dir);
    }
    encode() {
        return this.kind.toString(16).padStart(2, "0");
    }
    static decode(str, j) {
        const kind = parseInt(str, 16);
        return C_MazeCell.newObj({ kind: kind, pos: j === null || j === void 0 ? void 0 : j.pos });
    }
}
exports.C_MazeCell = C_MazeCell;
class C_MazeCellNoDef extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.NoDef });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '0';
        j.obj.hit_dmg = 100;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '疑',
            show3D: '0',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '', col_d: '',
            col_l: '', col_2: '',
        };
        super(j);
    }
}
class C_MazeCellUnkwn extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Unkwn });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '0';
        j.obj.hit_dmg = 100;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '謎',
            show3D: '0',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '', col_d: '',
            col_l: '', col_2: '', col_L: '',
        };
        super(j);
    }
}
class C_MazeCellEmpty extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Empty });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '無',
            show3D: '0',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '', col_d: '',
            col_l: '', col_2: '', col_L: '',
        };
        super(j);
    }
}
class C_MazeCellFloor extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Floor });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '　',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '#6666ff', col_d: '',
            col_l: '#9999ff', col_2: '#3333ff', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellUnexp extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Unexp });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '・',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '#66ffff', col_d: '',
            col_l: '#9999ff', col_2: '#66ffff', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellStone extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Stone });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '0';
        j.obj.hit_dmg = 10;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '＃',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '#00ff00', col_b: '', col_s: '#00ee00', col_t: '', col_d: '',
            col_l: '#0000ff', col_2: '#00cc00', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellStrUp extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.StrUp });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '上',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '', col_d: '#ffffcc',
            col_l: '#0000ff', col_2: '#ffff66', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellStrDn extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.StrDn });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '下',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '#ffffcc', col_d: '',
            col_l: '#0000ff', col_2: '#ffff66', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellStrUD extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.StrUD });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '段',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '#ffffcc', col_d: '#ffffcc',
            col_l: '#0000ff', col_2: '#ffff66', col_L: '#6666ff',
        };
        super(j);
    }
}


/***/ }),

/***/ "./src/d_mdl/C_MazeInfo.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_MazeInfo.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeInfo = void 0;
exports.alert_mazeinfo_info = alert_mazeinfo_info;
function alert_mazeinfo_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (a === undefined)
        return;
    alert("MazeInfo Data:"
        + "\nname : " + ((_a = a.name) !== null && _a !== void 0 ? _a : '?')
        + "\nmbname: " + ((_b = a.mbname) !== null && _b !== void 0 ? _b : '?')
        + "\nlv :" + ((_c = a.lv) !== null && _c !== void 0 ? _c : '?')
        + "\nsize_x: " + ((_d = a.size_x) !== null && _d !== void 0 ? _d : '?')
        + "\nsize_y: " + ((_e = a.size_y) !== null && _e !== void 0 ? _e : '?')
        + "\nsize_z: " + ((_f = a.size_z) !== null && _f !== void 0 ? _f : '?')
        + "\nmax_of_room: " + ((_g = a.max_room) !== null && _g !== void 0 ? _g : '?')
        + "\nroom_size: " + ((_h = a.room_size) !== null && _h !== void 0 ? _h : '?')
        + "\n");
}
class C_MazeInfo {
    static get_tbl_all() {
        const mazeinfo = [];
        mazeinfo.push(new C_MazeInfo().decode({
            name: 'maze010',
            mbname: '教練場',
            lv: 1,
            size_x: 11,
            size_y: 11,
            size_z: 3,
            max_room: 2,
            room_size: 3
        }));
        mazeinfo.push(new C_MazeInfo().decode({
            name: 'maze011',
            mbname: '始まりの迷宮',
            lv: 1,
            size_x: 21,
            size_y: 21,
            size_z: 5,
            max_room: 3,
            room_size: 3
        }));
        mazeinfo.push(new C_MazeInfo().decode({
            name: 'maze012',
            mbname: '暗き森の迷宮',
            lv: 1,
            size_x: 25,
            size_y: 25,
            size_z: 7,
            max_room: 5,
            room_size: 3
        }));
        mazeinfo.push(new C_MazeInfo().decode({
            name: 'maze013',
            mbname: '黒魔の地下墓地',
            lv: 1,
            size_x: 31,
            size_y: 31,
            size_z: 10,
            max_room: 5,
            room_size: 5
        }));
        return mazeinfo;
    }
    constructor(j) {
        this.name = '';
        this.mbname = '';
        this.lv = 0;
        this.size_x = 3;
        this.size_y = 3;
        this.size_z = 3;
        this.max_room = 1;
        this.room_size = 1;
        if (j !== undefined)
            this.decode(j);
    }
    encode() {
        return {
            name: this.name,
            mbname: this.mbname,
            lv: this.lv,
            size_x: this.size_x,
            size_y: this.size_y,
            size_z: this.size_z,
            max_room: this.max_room,
            room_size: this.room_size,
        };
    }
    decode(j) {
        if (j === undefined)
            return this;
        if (j.name !== undefined)
            this.name = j.name;
        if (j.mbname !== undefined)
            this.mbname = j.mbname;
        if (j.lv !== undefined)
            this.lv = j.lv;
        if (j.size_x !== undefined)
            this.size_x = j.size_x;
        if (j.size_y !== undefined)
            this.size_y = j.size_y;
        if (j.size_z !== undefined)
            this.size_z = j.size_z;
        if (j.max_room !== undefined)
            this.max_room = j.max_room;
        if (j.room_size !== undefined)
            this.room_size = j.room_size;
        return this;
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        alert("MazeInfo Data:"
            + "\nname : " + ((_a = this.name) !== null && _a !== void 0 ? _a : '?')
            + "\nmbname: " + ((_b = this.mbname) !== null && _b !== void 0 ? _b : '?')
            + "\nlv :" + ((_c = this.lv) !== null && _c !== void 0 ? _c : '?')
            + "\nsize_x: " + ((_d = this.size_x) !== null && _d !== void 0 ? _d : '?')
            + "\nsize_y: " + ((_e = this.size_y) !== null && _e !== void 0 ? _e : '?')
            + "\nsize_z: " + ((_f = this.size_z) !== null && _f !== void 0 ? _f : '?')
            + "\nmax_of_room: " + ((_g = this.max_room) !== null && _g !== void 0 ? _g : '?')
            + "\nroom_size: " + ((_h = this.room_size) !== null && _h !== void 0 ? _h : '?')
            + "\n");
    }
}
exports.C_MazeInfo = C_MazeInfo;


/***/ }),

/***/ "./src/d_mdl/C_MazeObj.ts":
/*!********************************!*\
  !*** ./src/d_mdl/C_MazeObj.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeObj = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_MazeObjView_1 = __webpack_require__(/*! ./C_MazeObjView */ "./src/d_mdl/C_MazeObjView.ts");
const C_MazeObjView2X_1 = __webpack_require__(/*! ./C_MazeObjView2X */ "./src/d_mdl/C_MazeObjView2X.ts");
class C_MazeObj {
    constructor(j) {
        this.clname = 'C_MazeObj';
        this.clname = 'C_MazeObj';
        if ((j === null || j === void 0 ? void 0 : j.clname) !== undefined)
            this.clname = j.clname;
        this.uniq_id = this.clname + '_' + (0, F_Rand_1._get_uuid)();
        this.pos = new C_PointDir_1.C_PointDir({ x: 0, y: 0, z: 0, d: 0 });
        this.my_view = undefined;
        this.my_view2D = undefined;
        this.my_view2M = undefined;
        this.my_walker = undefined;
        this.my_wres = undefined;
        this.can_thr = true;
        this.hit_dmg = 0;
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        var _a, _b, _c;
        if (j === undefined)
            return this;
        if (j.uniq_id !== undefined)
            this.uniq_id = j.uniq_id;
        if (j.clname !== undefined)
            this.clname = j.clname;
        if (j.pos !== undefined)
            (_a = this.pos) === null || _a === void 0 ? void 0 : _a.decode(j.pos);
        if (j.view !== undefined) {
            this.my_view = C_MazeObjView_1.C_MazeObjView.newObj(j.view);
            this.my_view2D = C_MazeObjView2X_1.C_MazeObjView2X.newObj(j.view);
            this.my_view2M = C_MazeObjView2X_1.C_MazeObjView2X.newObj(j.view);
        }
        ;
        if (j.stat !== undefined) {
            if (((_b = j === null || j === void 0 ? void 0 : j.stat) === null || _b === void 0 ? void 0 : _b.can_thr) !== undefined)
                this.can_thr = j.stat.can_thr !== '0' ? true : false;
            if (((_c = j === null || j === void 0 ? void 0 : j.stat) === null || _c === void 0 ? void 0 : _c.hit_dmg) !== undefined)
                this.hit_dmg = j.stat.hit_dmg;
        }
        if (j.can_thr !== undefined)
            this.can_thr = j.can_thr !== '0' ? true : false;
        if (j.hit_dmg !== undefined)
            this.hit_dmg = j.hit_dmg;
        return this;
    }
    free() {
        var _a, _b, _c, _d;
        this.pos = undefined;
        (_a = this.my_view) === null || _a === void 0 ? void 0 : _a.free();
        this.my_view = undefined;
        (_b = this.my_view2D) === null || _b === void 0 ? void 0 : _b.free();
        this.my_view2D = undefined;
        (_c = this.my_view2M) === null || _c === void 0 ? void 0 : _c.free();
        this.my_view2M = undefined;
        (_d = this.my_walker) === null || _d === void 0 ? void 0 : _d.free();
        this.my_walker = undefined;
        this.my_wres = undefined;
    }
    uid() { return this.uniq_id; }
    className() { return this.clname; }
    view() { return this.my_view; }
    setView(view) { this.my_view = view; }
    view2D() { return this.my_view2D; }
    setView2D(view2D) { this.my_view2D = view2D; }
    view2M() { return this.my_view2M; }
    setView2M(view2M) { this.my_view2M = view2M; }
    walker() { return this.my_walker; }
    set_walker(walker) {
        this.my_walker = walker;
    }
    wres() { return this.my_wres; }
    set_wres(wres) {
        this.my_wres = wres;
    }
    add_wndr(wndr) {
        var _a;
        (_a = this.my_wres) !== null && _a !== void 0 ? _a : (this.my_wres = []);
        this.my_wres.push(wndr);
    }
    canThrough() { return this.can_thr; }
    setThrough(thr) { return this.can_thr = thr; }
    get_pd() {
        return new C_PointDir_1.C_PointDir(this.pos);
    }
    set_pd(p) {
        this.pos = p;
    }
    within(p) {
        var _a, _b;
        return (_b = (_a = this.pos) === null || _a === void 0 ? void 0 : _a.within(p)) !== null && _b !== void 0 ? _b : false;
    }
    hitDamage() {
        return this.hit_dmg;
    }
    encode() {
        var _a, _b, _c, _d;
        const stat = {
            can_thr: this.can_thr ? '1' : '0',
            hit_dmg: this.hit_dmg,
        };
        return {
            uniq_id: this.uniq_id,
            clname: this.clname,
            pos: (_b = (_a = this.pos) === null || _a === void 0 ? void 0 : _a.encode()) !== null && _b !== void 0 ? _b : { x: 0, y: 0, z: 0, d: 99 },
            view: (_d = (_c = this.my_view) === null || _c === void 0 ? void 0 : _c.encode()) !== null && _d !== void 0 ? _d : {},
            can_thr: this.can_thr ? '1' : '0',
            hit_dmg: this.hit_dmg,
            stat: stat,
        };
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_MazeObj = C_MazeObj;


/***/ }),

/***/ "./src/d_mdl/C_MazeObjEtc.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_MazeObjEtc.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeObjShogai = exports.C_MazeObjShadow = void 0;
const C_MazeObj_1 = __webpack_require__(/*! ./C_MazeObj */ "./src/d_mdl/C_MazeObj.ts");
class C_MazeObjShadow extends C_MazeObj_1.C_MazeObj {
    constructor(j) {
        super(j);
        const jj = {
            clname: this.constructor.name,
            can_thr: '1',
            h_w_dmg: 0,
            view: {
                layer: 2,
                letter: '影',
            },
        };
        this.decode(jj);
    }
}
exports.C_MazeObjShadow = C_MazeObjShadow;
class C_MazeObjShogai extends C_MazeObj_1.C_MazeObj {
    constructor(j) {
        super(j);
        const jj = {
            clname: this.constructor.name,
            can_thr: '0',
            h_w_dmg: 100,
            view: {
                layer: 2,
                letter: '障',
                show3D: '1',
                col_2: '#9999cc', col_L: '#6666ff',
            }
        };
        this.decode(jj);
    }
}
exports.C_MazeObjShogai = C_MazeObjShogai;


/***/ }),

/***/ "./src/d_mdl/C_MazeObjView.ts":
/*!************************************!*\
  !*** ./src/d_mdl/C_MazeObjView.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeObjView = void 0;
const T_Orientation_1 = __webpack_require__(/*! ./T_Orientation */ "./src/d_mdl/T_Orientation.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_MazeObjView {
    static get_context3D() { return this === null || this === void 0 ? void 0 : this.con3D; }
    static set_context3D(con3D) { this.con3D = con3D; }
    static get_context2D() { return this === null || this === void 0 ? void 0 : this.con2D; }
    static set_context2D(con2D) { this.con2D = con2D; }
    static newObj(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = {});
        (_a = j.clname) !== null && _a !== void 0 ? _a : (j.clname = 'C_MazeObjView');
        switch (j.clname) {
            case C_MazeObjView.constructor.name: return new C_MazeObjView(j);
        }
        return new C_MazeObjView(j);
    }
    newObj(j) {
        return C_MazeObjView.newObj(j);
    }
    constructor(j) {
        this.clname = 'C_MazeObjView';
        this.my_obje = undefined;
        this.my_dir = C_PointDir_1.T_Direction.N;
        this.clname = 'C_MazeObjView';
        this.my_layer = -2;
        this.my_letter = null;
        this.my_dir = C_PointDir_1.T_Direction.N;
        this.my_pad_t = 0.0;
        this.my_pad_d = 0.0;
        this.my_pad_s = 0.0;
        this.my_show = true;
        this.my_col_f = '#f8f8f8';
        this.my_col_b = '#aaaaaa';
        this.my_col_s = '#dddddd';
        this.my_col_t = '#ffffff';
        this.my_col_d = '#cccccc';
        this.my_col_l = '#333333';
        this.my_col_2 = '#cccccc';
        this.my_col_L = '#9999ff';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        if (j === undefined)
            return this;
        if (j.clname !== undefined)
            this.clname = j.clname;
        if (j.layer !== undefined)
            this.my_layer = j.layer;
        if (j.letter !== undefined)
            this.my_letter = j.letter !== '' ? j.letter : null;
        if (j.dir !== undefined)
            this.my_dir = j.dir !== '' ? j.dir : null;
        if (j.pad_t !== undefined)
            this.my_pad_t = j.pad_t;
        if (j.pad_d !== undefined)
            this.my_pad_d = j.pad_d;
        if (j.pad_s !== undefined)
            this.my_pad_s = j.pad_s;
        if (j.show !== undefined)
            this.my_show = j.show !== '0' ? true : false;
        if (j.col_f !== undefined)
            this.my_col_f = j.col_f !== '' ? j.col_f : null;
        if (j.col_b !== undefined)
            this.my_col_b = j.col_b !== '' ? j.col_b : null;
        if (j.col_s !== undefined)
            this.my_col_s = j.col_s !== '' ? j.col_s : null;
        if (j.col_t !== undefined)
            this.my_col_t = j.col_t !== '' ? j.col_t : null;
        if (j.col_d !== undefined)
            this.my_col_d = j.col_d !== '' ? j.col_d : null;
        if (j.col_l !== undefined)
            this.my_col_l = j.col_l !== '' ? j.col_l : null;
        if (j.col_2 !== undefined)
            this.my_col_2 = j.col_2 !== '' ? j.col_2 : null;
        if (j.col_L !== undefined)
            this.my_col_L = j.col_L !== '' ? j.col_L : null;
        return this;
    }
    free() { }
    get_obje() {
        return this.my_obje;
    }
    set_obje(obje) {
        this.my_obje = obje;
        return this.my_obje;
    }
    layer() { return this.my_layer; }
    set_layer(layer) { this.my_layer = layer; }
    letter(dir = 0) { return this.my_letter; }
    set_letter(letter) { return this.my_letter = letter; }
    dir() { return this.my_dir; }
    set_dir(dir) { return this.my_dir = dir; }
    canShow() { return this.my_show; }
    ;
    setShow(can_show) { return this.my_show = can_show; }
    ;
    pad_t() { return this.my_pad_t; }
    pad_d() { return this.my_pad_d; }
    pad_s() { return this.my_pad_s; }
    set_pad_t(pad_t) { return this.my_pad_t = this.my_pad_d + pad_t < 1.0 ? pad_t : 0.99 - this.my_pad_d; }
    set_pad_d(pad_d) { return this.my_pad_d = this.my_pad_t + pad_d < 1.0 ? pad_d : 0.99 - this.my_pad_t; }
    set_pad_s(pad_s) { return this.my_pad_s = pad_s; }
    col_f() { return this.my_col_f; }
    col_b() { return this.my_col_b; }
    col_s() { return this.my_col_s; }
    col_t() { return this.my_col_t; }
    col_d() { return this.my_col_d; }
    col_l() { return this.my_col_l; }
    set_col_f(col_f) { return this.my_col_f = col_f; }
    set_col_b(col_b) { return this.my_col_b = col_b; }
    set_col_s(col_s) { return this.my_col_s = col_s; }
    set_col_t(col_t) { return this.my_col_t = col_t; }
    set_col_d(col_d) { return this.my_col_d = col_d; }
    set_col_l(col_l) { return this.my_col_l = col_l; }
    col_2() { return this.my_col_2; }
    col_L() { return this.my_col_L; }
    set_col_2(col_2) { return this.my_col_2 = col_2; }
    set_col_L(col_L) { return this.my_col_L = col_L; }
    drow2D(rect, dir = 0) {
        var _a;
        drow2D_cell(rect, this.col_2(), (_a = this.col_L()) !== null && _a !== void 0 ? _a : '#9999ff');
    }
    drow3D(frot, back, obje_dir = C_PointDir_1.T_Direction.N, team_dir = C_PointDir_1.T_Direction.N) {
        this.drow3D_obj_back(frot, back);
        this.drow3D_obj_down(frot, back);
        this.drow3D_obj_top(frot, back);
        this.drow3D_obj_right_side(frot, back);
        this.drow3D_obj_left_side(frot, back);
        this.drow3D_obj_front(frot, back, obje_dir, team_dir);
    }
    drow3D_obj_down(frot, back) {
        var _a, _b;
        if (!this.canShow() || this.col_t() === null)
            return;
        if (this.pad_s() <= 0.0 && this.pad_t() >= 1.0) {
            drow3D_cell_floor(frot, back, (_a = this.col_t()) !== null && _a !== void 0 ? _a : '#6666ff', (_b = this.col_l()) !== null && _b !== void 0 ? _b : '#9999ff');
            return;
        }
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.fdl,
            tr: o.fdr,
            dr: o.bdr,
            dl: o.bdl,
        };
        drow3D_cell(rect, this.col_t(), this.col_l());
    }
    drow3D_obj_top(frot, back) {
        var _a, _b;
        if (!this.canShow() || this.col_d() === null)
            return;
        if (this.pad_s() <= 0.0 && this.pad_d() >= 1.0) {
            drow3D_cell_ceiling(frot, back, (_a = this.col_d()) !== null && _a !== void 0 ? _a : '#aaaaaa', (_b = this.col_l()) !== null && _b !== void 0 ? _b : '#9999ff');
            return;
        }
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.ftl,
            tr: o.ftr,
            dr: o.btr,
            dl: o.btl,
        };
        drow3D_cell(rect, this.col_d(), this.col_l());
    }
    drow3D_obj_front(frot, back, obje_dir = C_PointDir_1.T_Direction.N, team_dir = C_PointDir_1.T_Direction.N) {
        var _a;
        if (!this.canShow() || this.col_f() === null)
            return undefined;
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.ftl,
            tr: o.ftr,
            dr: o.fdr,
            dl: o.fdl,
        };
        drow3D_cell(rect, this.col_f(), this.col_l());
        this._drow3D_textTOP((_a = this.my_letter) !== null && _a !== void 0 ? _a : '', rect, "#333333", "#000000");
        this._drow3D_textBTM((0, T_Orientation_1.relativeOrientationDir)(obje_dir, team_dir), rect, "#333333", "#000000");
        return rect;
    }
    drow3D_obj_back(frot, back) {
        if (!this.canShow() || this.col_b() === null)
            return;
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.btl,
            tr: o.btr,
            dr: o.bdr,
            dl: o.bdl,
        };
        drow3D_cell(rect, this.col_b(), this.col_l());
    }
    drow3D_obj_left_side(frot, back) {
        if (!this.canShow() || this.col_s() === null)
            return;
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.btl,
            tr: o.ftl,
            dr: o.fdl,
            dl: o.bdl,
        };
        drow3D_cell(rect, this.col_s(), this.col_l());
    }
    drow3D_obj_right_side(frot, back) {
        if (!this.canShow() || this.col_s() === null)
            return;
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.ftr,
            tr: o.btr,
            dr: o.bdr,
            dl: o.fdr,
        };
        drow3D_cell(rect, this.col_s(), this.col_l());
    }
    _drow3D_textTOP(text, r, fill, line) { }
    _drow3D_textBTM(dir, r, fill, line) { }
    encode() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return {
            clname: this.clname,
            layer: this.my_layer,
            letter: (_a = this.my_letter) !== null && _a !== void 0 ? _a : '',
            dir: (_b = this.my_dir) !== null && _b !== void 0 ? _b : C_PointDir_1.T_Direction.N,
            pad_t: this.my_pad_t,
            pad_d: this.my_pad_d,
            pad_s: this.my_pad_s,
            show: this.canShow() ? '1' : '0',
            col_f: (_c = this.my_col_f) !== null && _c !== void 0 ? _c : '',
            col_b: (_d = this.my_col_b) !== null && _d !== void 0 ? _d : '',
            col_s: (_e = this.my_col_s) !== null && _e !== void 0 ? _e : '',
            col_t: (_f = this.my_col_t) !== null && _f !== void 0 ? _f : '',
            col_d: (_g = this.my_col_d) !== null && _g !== void 0 ? _g : '',
            col_l: (_h = this.my_col_l) !== null && _h !== void 0 ? _h : '',
            col_2: (_j = this.my_col_2) !== null && _j !== void 0 ? _j : '',
            col_L: (_k = this.my_col_L) !== null && _k !== void 0 ? _k : '',
        };
    }
    decode(j) {
        return this.__init(j);
    }
    static decode(j) {
        return C_MazeObjView.newObj(j);
    }
}
exports.C_MazeObjView = C_MazeObjView;
function __calc_padding_obj(obj, frot, back) {
    const rect_frot = frot;
    const rect_back = back;
    const ratio_X = obj.pad_s() / 2.0;
    const ratio_T = obj.pad_t();
    const ratio_D = obj.pad_d();
    const frot_pad_X = Math.abs(rect_frot.max_x - rect_frot.min_x) * ratio_X;
    const back_pad_X = Math.abs(rect_back.max_x - rect_back.min_x) * ratio_X;
    const frot_pad_T = Math.abs(rect_frot.max_y - rect_frot.min_y) * ratio_T;
    const back_pad_T = Math.abs(rect_back.max_y - rect_back.min_y) * ratio_T;
    const frot_pad_D = Math.abs(rect_frot.max_y - rect_frot.min_y) * ratio_D;
    const back_pad_D = Math.abs(rect_back.max_y - rect_back.min_y) * ratio_D;
    const frot_top_lft = { x: rect_frot.min_x + frot_pad_X, y: rect_frot.min_y + frot_pad_T };
    const frot_top_rgt = { x: rect_frot.max_x - frot_pad_X, y: rect_frot.min_y + frot_pad_T };
    const frot_dwn_lft = { x: rect_frot.min_x + frot_pad_X, y: rect_frot.max_y - frot_pad_D };
    const frot_dwn_rgt = { x: rect_frot.max_x - frot_pad_X, y: rect_frot.max_y - frot_pad_D };
    const back_top_lft = { x: rect_back.min_x + back_pad_X, y: rect_back.min_y + back_pad_T };
    const back_top_rgt = { x: rect_back.max_x - back_pad_X, y: rect_back.min_y + back_pad_T };
    const back_dwn_lft = { x: rect_back.min_x + back_pad_X, y: rect_back.max_y - back_pad_D };
    const back_dwn_rgt = { x: rect_back.max_x - back_pad_X, y: rect_back.max_y - back_pad_D };
    let ftl = __calc_padding_xy(frot_top_lft, back_top_lft, ratio_X);
    let ftr = __calc_padding_xy(frot_top_rgt, back_top_rgt, ratio_X);
    let fdl = __calc_padding_xy(frot_dwn_lft, back_dwn_lft, ratio_X);
    let fdr = __calc_padding_xy(frot_dwn_rgt, back_dwn_rgt, ratio_X);
    let btl = __calc_padding_xy(back_top_lft, frot_top_lft, ratio_X);
    let btr = __calc_padding_xy(back_top_rgt, frot_top_rgt, ratio_X);
    let bdl = __calc_padding_xy(back_dwn_lft, frot_dwn_lft, ratio_X);
    let bdr = __calc_padding_xy(back_dwn_rgt, frot_dwn_rgt, ratio_X);
    return {
        ftl: ftl, ftr: ftr,
        fdl: fdl, fdr: fdr,
        btl: btl, btr: btr,
        bdl: bdl, bdr: bdr,
    };
}
function __calc_padding_xy(frot, back, ratio) {
    const A = (frot.y - back.y) / (frot.x - back.x);
    const B = frot.y - A * frot.x;
    const p_frot_x = frot.x + (back.x - frot.x) * ratio;
    const p_frot_y = A * p_frot_x + B;
    return { x: p_frot_x, y: p_frot_y };
}
function drow3D_cell_floor(rect_frot, rect_back, fill = '#6666ff', line = '#9999ff') {
    const rect = {
        tl: { x: rect_frot.min_x, y: rect_frot.max_y },
        tr: { x: rect_frot.max_x, y: rect_frot.max_y },
        dr: { x: rect_back.max_x, y: rect_back.max_y },
        dl: { x: rect_back.min_x, y: rect_back.max_y }
    };
    drow3D_cell(rect, fill, line);
}
function drow3D_cell_ceiling(rect_frot, rect_back, fill = '#aaaaaa', line = '#9999ff') {
    const rect = {
        tl: { x: rect_frot.min_x, y: rect_frot.min_y },
        tr: { x: rect_frot.max_x, y: rect_frot.min_y },
        dr: { x: rect_back.max_x, y: rect_back.min_y },
        dl: { x: rect_back.min_x, y: rect_back.min_y }
    };
    drow3D_cell(rect, fill, line);
}
function drow2D_cell(r, fill, line) {
    const con = C_MazeObjView.get_context2D();
    if (con === undefined)
        return;
    con.beginPath();
    con.moveTo(r.tl.x, r.tl.y);
    con.lineTo(r.tr.x, r.tr.y);
    con.lineTo(r.dr.x, r.dr.y);
    con.lineTo(r.dl.x, r.dl.y);
    con.closePath();
    if (fill != null) {
        con.fillStyle = fill;
        con.fill();
    }
    if (line !== null) {
        con.strokeStyle = line;
        con.lineWidth = 1;
        con.stroke();
    }
}
function drow3D_cell(r, fill, line) {
    const con = C_MazeObjView.get_context3D();
    if (con === undefined)
        return;
    con.beginPath();
    con.moveTo(r.tl.x, r.tl.y);
    con.lineTo(r.tr.x, r.tr.y);
    con.lineTo(r.dr.x, r.dr.y);
    con.lineTo(r.dl.x, r.dl.y);
    con.closePath();
    if (fill != null) {
        con.fillStyle = fill;
        con.fill();
    }
    if (line !== null) {
        con.strokeStyle = line;
        con.lineWidth = 1;
        con.stroke();
    }
}


/***/ }),

/***/ "./src/d_mdl/C_MazeObjView2X.ts":
/*!**************************************!*\
  !*** ./src/d_mdl/C_MazeObjView2X.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeObjView2X = void 0;
class C_MazeObjView2X {
    static newObj(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = {});
        (_a = j.clname) !== null && _a !== void 0 ? _a : (j.clname = 'C_MazeObjView2X');
        switch (j.clname) {
            case C_MazeObjView2X.constructor.name: return new C_MazeObjView2X(j);
        }
        return new C_MazeObjView2X(j);
    }
    newObj(j) {
        return C_MazeObjView2X.newObj(j);
    }
    constructor(j) {
        this.clname = 'C_MazeObjView2X';
        this.clname = 'C_MazeObjView2X';
        this.my_layer = -2;
        this.my_letter = null;
        this.my_show = true;
        this.my_col_2 = '#cccccc';
        this.my_col_L = '#9999ff';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        if (j === undefined)
            return this;
        if (j.clname !== undefined)
            this.clname = j.clname;
        if (j.layer !== undefined)
            this.my_layer = j.layer;
        if (j.letter !== undefined)
            this.my_letter = j.letter !== '' ? j.letter : null;
        if (j.show !== undefined)
            this.my_show = j.show !== '0' ? true : false;
        if (j.col_2 !== undefined)
            this.my_col_2 = j.col_2 !== '' ? j.col_2 : null;
        if (j.col_L !== undefined)
            this.my_col_L = j.col_L !== '' ? j.col_L : null;
        return this;
    }
    free() { }
    layer() { return this.my_layer; }
    set_layer(layer) { this.my_layer = layer; }
    letter(dir = 0) { return this.my_letter; }
    set_letter(letter) { return this.my_letter = letter; }
    canShow() { return this.my_show; }
    ;
    setShow(can_show) { return this.my_show = can_show; }
    ;
    col_2() { return this.my_col_2; }
    col_L() { return this.my_col_L; }
    set_col_2(col_2) { return this.my_col_2 = col_2; }
    set_col_L(col_L) { return this.my_col_L = col_L; }
    drow2X(ctx, rect, dir = 0) {
        var _a;
        if (ctx === undefined || ctx === null)
            return;
        drow2X_cell(ctx, rect, this.col_2(), (_a = this.col_L()) !== null && _a !== void 0 ? _a : '#9999ff');
    }
    encode() {
        var _a, _b, _c;
        return {
            clname: this.clname,
            layer: this.my_layer,
            letter: (_a = this.my_letter) !== null && _a !== void 0 ? _a : '',
            show: this.canShow() ? '1' : '0',
            col_2: (_b = this.my_col_2) !== null && _b !== void 0 ? _b : '',
            col_L: (_c = this.my_col_L) !== null && _c !== void 0 ? _c : '',
        };
    }
    decode(j) {
        return this.__init(j);
    }
    static decode(j) {
        return C_MazeObjView2X.newObj(j);
    }
}
exports.C_MazeObjView2X = C_MazeObjView2X;
function drow2X_cell(ctx, r, fill, line) {
    if (ctx === undefined || ctx === null)
        return;
    ctx.beginPath();
    ctx.moveTo(r.tl.x, r.tl.y);
    ctx.lineTo(r.tr.x, r.tr.y);
    ctx.lineTo(r.dr.x, r.dr.y);
    ctx.lineTo(r.dl.x, r.dl.y);
    ctx.closePath();
    if (fill != null) {
        ctx.fillStyle = fill;
        ctx.fill();
    }
    if (line !== null) {
        ctx.strokeStyle = line;
        ctx.lineWidth = 1;
        ctx.stroke();
    }
}


/***/ }),

/***/ "./src/d_mdl/C_MovablePoint.ts":
/*!*************************************!*\
  !*** ./src/d_mdl/C_MovablePoint.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MovablePoint = void 0;
exports.alert_mvpt_info = alert_mvpt_info;
const C_Location_1 = __webpack_require__(/*! ./C_Location */ "./src/d_mdl/C_Location.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
function alert_mvpt_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    if (a === undefined)
        return;
    alert("MvPt Info:"
        + "\nuniq_id:  " + ((_a = a.uniq_id) !== null && _a !== void 0 ? _a : '?')
        + "\ncur_url:  " + ((_b = a.cur_url) !== null && _b !== void 0 ? _b : '?')
        + "\nteam_uid: " + ((_c = a.team_uid) !== null && _c !== void 0 ? _c : '?')
        + "\nlckd: " + ((_d = a.kind) !== null && _d !== void 0 ? _d : '?')
        + "\nlcnm: " + ((_e = a.name) !== null && _e !== void 0 ? _e : '?')
        + "\nlcid: " + ((_f = a.loc_uid) !== null && _f !== void 0 ? _f : '?')
        + "\ncur_x: " + ((_h = (_g = a.loc_pos) === null || _g === void 0 ? void 0 : _g.x) !== null && _h !== void 0 ? _h : '?')
        + "\ncur_y: " + ((_k = (_j = a.loc_pos) === null || _j === void 0 ? void 0 : _j.y) !== null && _k !== void 0 ? _k : '?')
        + "\ncur_z: " + ((_m = (_l = a.loc_pos) === null || _l === void 0 ? void 0 : _l.z) !== null && _m !== void 0 ? _m : '?')
        + "\ncur_d: " + ((_p = (_o = a.loc_pos) === null || _o === void 0 ? void 0 : _o.d) !== null && _p !== void 0 ? _p : '?')
        + "\n");
}
class C_MovablePoint extends C_Location_1.C_Location {
    constructor(json) {
        super(json);
        this.loc_kind = C_Location_1.T_Lckd.Maze;
        this.uniq_id = 'MvPoint#' + (0, F_Rand_1._get_uuid)();
        this.cur_url = '';
        this.team_uid = undefined;
        if (json !== undefined && json !== null)
            this.__init(json);
    }
    __init(j) {
        super.__init(j);
        if (j === undefined)
            return this;
        if (j.uniq_id !== undefined)
            this.uniq_id = j.uniq_id;
        if (j.cur_url !== undefined)
            this.cur_url = j.cur_url;
        if (j.team_uid !== undefined)
            this.team_uid = j.team_uid;
        if (this.team_uid === '')
            this.team_uid = undefined;
        return this;
    }
    uid() { return this.uniq_id; }
    url() { return this.cur_url; }
    tid() { return this.team_uid; }
    new_uid() { this.uniq_id = 'MvPoint#' + (0, F_Rand_1._get_uuid)(); }
    set_url(url) { this.cur_url = url; }
    set_tid(tid) { this.team_uid = tid; }
    clone() {
        const mvpt = new C_MovablePoint(this.encode());
        mvpt.new_uid();
        return mvpt;
    }
    fromJSON(txt) {
        try {
            const j = JSON.parse(txt);
            return this.decode(j);
        }
        catch (err) {
            return this;
        }
        // removed by dead control flow
{}
    }
    toJSON() {
        return JSON.stringify(this.encode(), null, "\t");
    }
    static from_obj_to_string(oa) {
        return JSON.stringify(oa.encode());
    }
    static from_objArray_to_string(oaa) {
        const oa = [];
        for (const ii in oaa)
            oa.push(oaa[ii].encode());
        return JSON.stringify(oa);
    }
    static from_string_to_obj(txt) {
        try {
            const j = JSON.parse(txt);
            return new C_MovablePoint().decode(j);
        }
        catch (err) {
            return new C_MovablePoint();
        }
        // removed by dead control flow
{}
    }
    static from_string_to_objArray(txt) {
        try {
            const j = JSON.parse(txt);
            const mpa = {};
            for (const jj of j) {
                const aaa = new C_MovablePoint().decode(jj);
                mpa[aaa.uid()] = aaa;
            }
            return mpa;
        }
        catch (err) {
            return {};
        }
        // removed by dead control flow
{}
    }
    encode() {
        var _a;
        const j = super.encode();
        j.uniq_id = this.uniq_id;
        j.cur_url = this.cur_url;
        j.team_uid = (_a = this.team_uid) !== null && _a !== void 0 ? _a : '';
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        alert("MvPt Info:"
            + "\nuniq_id:  " + ((_a = this.uniq_id) !== null && _a !== void 0 ? _a : '?')
            + "\ncur_url:  " + ((_b = this.cur_url) !== null && _b !== void 0 ? _b : '?')
            + "\nteam_uid: " + ((_c = this.team_uid) !== null && _c !== void 0 ? _c : '?')
            + "\nlckd: " + ((_d = this.loc_kind) !== null && _d !== void 0 ? _d : '?')
            + "\nlcnm: " + ((_e = this.loc_name) !== null && _e !== void 0 ? _e : '?')
            + "\nlcid: " + ((_f = this.loc_uid) !== null && _f !== void 0 ? _f : '?')
            + "\ncur_x: " + ((_h = (_g = this.loc_pos) === null || _g === void 0 ? void 0 : _g.x) !== null && _h !== void 0 ? _h : '?')
            + "\ncur_y: " + ((_k = (_j = this.loc_pos) === null || _j === void 0 ? void 0 : _j.y) !== null && _k !== void 0 ? _k : '?')
            + "\ncur_z: " + ((_m = (_l = this.loc_pos) === null || _l === void 0 ? void 0 : _l.z) !== null && _m !== void 0 ? _m : '?')
            + "\ncur_d: " + ((_p = (_o = this.loc_pos) === null || _o === void 0 ? void 0 : _o.d) !== null && _p !== void 0 ? _p : '?')
            + "\n");
    }
}
exports.C_MovablePoint = C_MovablePoint;


/***/ }),

/***/ "./src/d_mdl/C_Point.ts":
/*!******************************!*\
  !*** ./src/d_mdl/C_Point.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Point = void 0;
class C_Point {
    constructor(x, y, z) {
        this.x = this.y = this.z = -3;
        if (x === undefined) {
            this.x = 0;
            this.y = 0;
            this.z = 0;
            return;
        }
        if (typeof x === "number" && typeof y === "number" && typeof z === "number") {
            this.x = x;
            this.y = y;
            this.z = z;
            return;
        }
        if (typeof x === "object") {
            if (x instanceof C_Point) {
                this.x = x.x;
                this.y = x.y;
                this.z = x.z;
                return;
            }
            else {
                this.decode(x);
                return;
            }
        }
        this.x = this.y = this.z = -2;
        return;
    }
    get_p() { return new C_Point(this); }
    set_p(p) {
        this.x = p.x;
        this.y = p.y;
        this.z = p.z;
        return this;
    }
    is_exist(x, y, z) {
        return (x == this.x && y == this.y && z == this.z);
    }
    within(p) {
        return (p.x == this.x && p.y == this.y && p.z == this.z);
    }
    encode() {
        return { x: this.x, y: this.y, z: this.z };
    }
    decode(a) {
        if (a === undefined)
            return this;
        if (a.x === undefined || a.y === undefined || a.z === undefined)
            return this;
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        return this;
    }
}
exports.C_Point = C_Point;


/***/ }),

/***/ "./src/d_mdl/C_PointDir.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_PointDir.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_PointDir = exports.T_Direction = void 0;
exports.alert_PD_info = alert_PD_info;
const C_Point_1 = __webpack_require__(/*! ./C_Point */ "./src/d_mdl/C_Point.ts");
exports.T_Direction = {
    N: 0,
    E: 1,
    S: 2,
    W: 3,
    X: 99
};
function _dir_key(dir) {
    var _a;
    return (_a = Object.keys(exports.T_Direction).find(key => exports.T_Direction[key] === dir)) !== null && _a !== void 0 ? _a : "????";
}
function alert_PD_info(a) {
    var _a, _b, _c, _d;
    if (a === undefined)
        return;
    alert("PointData Info:"
        + "\nx: " + ((_a = a === null || a === void 0 ? void 0 : a.x) !== null && _a !== void 0 ? _a : '?')
        + "\ny: " + ((_b = a === null || a === void 0 ? void 0 : a.y) !== null && _b !== void 0 ? _b : '?')
        + "\nz: " + ((_c = a === null || a === void 0 ? void 0 : a.z) !== null && _c !== void 0 ? _c : '?')
        + "\nd: " + ((_d = a === null || a === void 0 ? void 0 : a.d) !== null && _d !== void 0 ? _d : '?')
        + "\n");
}
class C_PointDir extends C_Point_1.C_Point {
    constructor(d) {
        super(d);
        this.d = exports.T_Direction.X;
        if (d === undefined) {
            return;
        }
        if (typeof d === "number") {
            this.d = d;
            return;
        }
        if (typeof d === "object") {
            if (d instanceof C_PointDir) {
                this.d = d.d;
            }
            else {
                this.decode(d);
            }
            return;
        }
        this.d = exports.T_Direction.X;
        return;
    }
    get_d_mb_name() {
        switch (this.d) {
            case 0: return '北';
            case 1: return '東';
            case 2: return '南';
            case 3: return '西';
            default: return '謎';
        }
    }
    get_d() {
        return this.d;
    }
    set_d(d) {
        if (!(_dir_key(d) in exports.T_Direction))
            return undefined;
        this.d = d;
        return this;
    }
    get_pd() {
        return this;
    }
    set_pd(d) {
        if (d instanceof C_PointDir) {
            if (!(_dir_key(d.d) in exports.T_Direction))
                return undefined;
            super.set_p(d);
            this.d = d.d;
            return this;
        }
        if (!(_dir_key(d.d) in exports.T_Direction))
            return undefined;
        this.decode(d);
        return this;
    }
    encode() {
        const j = super.encode();
        j.d = this.d;
        return j;
    }
    decode(j) {
        if (j === undefined)
            return this;
        if (!(_dir_key(j.d) in exports.T_Direction))
            return this;
        super.decode(j);
        this.d = j.d;
        return this;
    }
    alert() {
        var _a, _b, _c, _d;
        alert("PointData Info:"
            + "\nx: " + ((_a = this.x) !== null && _a !== void 0 ? _a : '?')
            + "\ny: " + ((_b = this.y) !== null && _b !== void 0 ? _b : '?')
            + "\nz: " + ((_c = this.z) !== null && _c !== void 0 ? _c : '?')
            + "\nd: " + ((_d = this.d) !== null && _d !== void 0 ? _d : '?')
            + "\n");
    }
}
exports.C_PointDir = C_PointDir;


/***/ }),

/***/ "./src/d_mdl/C_PointSet2D.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_PointSet2D.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_PointSet2D = exports.C_PointLink2D = void 0;
class C_Point2D {
    constructor(x = 0, y = 0) {
        this.x = x;
        this.y = y;
    }
    is_exist(x, y) {
        return (this.x == x) && (this.y == y);
    }
}
class C_PointLink2D extends C_Point2D {
    constructor(x = 0, y = 0, di = -1) {
        super(x, y);
        this.di = di;
    }
    static cast(p) {
        if ((p === null || p === void 0 ? void 0 : p.x) === undefined)
            return undefined;
        if ((p === null || p === void 0 ? void 0 : p.y) === undefined)
            return undefined;
        return p instanceof C_PointLink2D ? p : new C_PointLink2D(p.x, p.y);
    }
}
exports.C_PointLink2D = C_PointLink2D;
class C_PointSet2D {
    constructor() {
        this.set = [];
    }
    push(p) {
        this.set.push(p);
        return;
    }
    get_point(x, y) {
        for (const p of this.set) {
            if (p === null || p === void 0 ? void 0 : p.is_exist(x, y))
                return p;
        }
        return undefined;
    }
    remove(p) {
        this.remove_xy(p.x, p.y);
        return;
    }
    remove_xy(x, y) {
        var _a;
        for (const i in this.set) {
            if ((_a = this.set[i]) === null || _a === void 0 ? void 0 : _a.is_exist(x, y)) {
                delete this.set[i];
                this.set = [...this.set];
                break;
            }
        }
        return;
    }
    is_exist(x, y) {
        for (const p of this.set)
            if (p === null || p === void 0 ? void 0 : p.is_exist(x, y))
                return true;
        return false;
    }
}
exports.C_PointSet2D = C_PointSet2D;


/***/ }),

/***/ "./src/d_mdl/C_Range.ts":
/*!******************************!*\
  !*** ./src/d_mdl/C_Range.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Range = void 0;
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const C_Point_1 = __webpack_require__(/*! ./C_Point */ "./src/d_mdl/C_Point.ts");
class C_Range {
    constructor(p1, p2) {
        this.min = new C_Point_1.C_Point(0, 0, 0);
        this.max = new C_Point_1.C_Point(0, 0, 0);
        this._init(p1, p2);
    }
    _init(p1, p2) {
        const min_x = (0, F_Math_1._min)([p1.x, p2.x]);
        const max_x = (0, F_Math_1._max)([p1.x, p2.x]);
        const min_y = (0, F_Math_1._min)([p1.y, p2.y]);
        const max_y = (0, F_Math_1._max)([p1.y, p2.y]);
        const min_z = (0, F_Math_1._min)([p1.z, p2.z]);
        const max_z = (0, F_Math_1._max)([p1.z, p2.z]);
        this.min = new C_Point_1.C_Point(min_x, min_y, min_z);
        this.max = new C_Point_1.C_Point(max_x, max_y, max_z);
        return this;
    }
    within(a, y, z) {
        if (typeof a === "number" && typeof y === "number" && typeof z === "number") {
            if (a < this.min.x || a > this.max.x)
                return false;
            if (y < this.min.y || y > this.max.y)
                return false;
            if (z < this.min.z || z > this.max.z)
                return false;
            return true;
        }
        if (typeof a === "object" && a instanceof C_Point_1.C_Point) {
            const p = a;
            if (p.x < this.min.x || p.x > this.max.x)
                return false;
            if (p.y < this.min.y || p.y > this.max.y)
                return false;
            if (p.z < this.min.z || p.z > this.max.z)
                return false;
            return true;
        }
        if (typeof a === "object" && a instanceof C_Range) {
            const p = a;
            if (p.min_x() < this.min.x || p.max_x() > this.max.x)
                return false;
            if (p.min_y() < this.min.y || p.max_y() > this.max.y)
                return false;
            if (p.min_z() < this.min.z || p.max_z() > this.max.z)
                return false;
            return true;
        }
        return false;
    }
    min_x() { return this.min.x; }
    max_x() { return this.max.x; }
    min_y() { return this.min.y; }
    max_y() { return this.max.y; }
    min_z() { return this.min.z; }
    max_z() { return this.max.z; }
    size_x() {
        return this.max.x - this.min.x + 1;
    }
    size_y() {
        return this.max.y - this.min.y + 1;
    }
    size_z() {
        return this.max.z - this.min.z + 1;
    }
    do_all_xyz(fn) {
        for (var z = this.min.z; z <= this.max.z; z++) {
            for (var y = this.min.y; y <= this.max.y; y++) {
                for (var x = this.min.x; y <= this.max.x; x++) {
                    if (!fn(x, y, z))
                        return false;
                }
            }
        }
        return true;
    }
    do_all_p(fn) {
        for (var z = this.min.z; z <= this.max.z; z++) {
            for (var y = this.min.y; y <= this.max.y; y++) {
                for (var x = this.min.x; y <= this.max.x; x++) {
                    if (!fn(new C_Point_1.C_Point(x, y, z)))
                        return false;
                }
            }
        }
        return true;
    }
    encode() {
        return {
            min: this.min.encode(),
            max: this.min.encode(),
        };
    }
    decode(j) {
        if (j === undefined)
            return this;
        if (j.min === undefined)
            return this;
        if (j.max === undefined)
            return this;
        const p1 = new C_Point_1.C_Point(j.min);
        const p2 = new C_Point_1.C_Point(j.max);
        return this._init(p1, p2);
    }
}
exports.C_Range = C_Range;


/***/ }),

/***/ "./src/d_mdl/C_SaveData.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_SaveData.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_SaveData = void 0;
exports.alert_save_info = alert_save_info;
exports.alert_save_detail = alert_save_detail;
const C_Maze_1 = __webpack_require__(/*! ./C_Maze */ "./src/d_mdl/C_Maze.ts");
const C_Guild_1 = __webpack_require__(/*! ./C_Guild */ "./src/d_mdl/C_Guild.ts");
const C_MovablePoint_1 = __webpack_require__(/*! ./C_MovablePoint */ "./src/d_mdl/C_MovablePoint.ts");
const C_Team_1 = __webpack_require__(/*! ./C_Team */ "./src/d_mdl/C_Team.ts");
const C_SaveInfo_1 = __webpack_require__(/*! ./C_SaveInfo */ "./src/d_mdl/C_SaveInfo.ts");
function alert_save_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    if (a === undefined)
        return;
    alert("Save Info:"
        + "\nsave_id:    " + ((_a = a.save_id) !== null && _a !== void 0 ? _a : '?')
        + "\nplayer_id:  " + ((_b = a.player_id) !== null && _b !== void 0 ? _b : '?')
        + "\nuniq_no:    " + ((_c = a.uniq_no) !== null && _c !== void 0 ? _c : '?')
        + "\ntitle:      " + ((_d = a.title) !== null && _d !== void 0 ? _d : '?')
        + "\ndetail:     " + ((_e = a.detail) !== null && _e !== void 0 ? _e : '?')
        + "\npoint:      " + ((_f = a.point) !== null && _f !== void 0 ? _f : '?')
        + "\nauto_mode:  " + ((_g = a.auto_mode) !== null && _g !== void 0 ? _g : '?')
        + "\nis_active:  " + ((_h = a.is_active) !== null && _h !== void 0 ? _h : '?')
        + "\nis_delete:  " + ((_j = a.is_delete) !== null && _j !== void 0 ? _j : '?')
        + "\nmvpt_count: " + ((_l = (_k = a.all_mvpt) === null || _k === void 0 ? void 0 : _k.length) !== null && _l !== void 0 ? _l : '?')
        + "\nmaze_count: " + ((_o = (_m = a.all_maze) === null || _m === void 0 ? void 0 : _m.length) !== null && _o !== void 0 ? _o : '?')
        + "\nguld_count: " + ((_q = (_p = a.all_guld) === null || _p === void 0 ? void 0 : _p.length) !== null && _q !== void 0 ? _q : '?')
        + "\nteam_count: " + ((_s = (_r = a.all_team) === null || _r === void 0 ? void 0 : _r.length) !== null && _s !== void 0 ? _s : '?')
        + "\n");
}
function alert_save_detail(a) {
    var _a, _b, _c, _d;
    if (a === undefined)
        return;
    try {
        for (const mvpt of (_a = a.all_mvpt) !== null && _a !== void 0 ? _a : [])
            (0, C_MovablePoint_1.alert_mvpt_info)(mvpt);
    }
    catch (err) {
        alert('alert mvpt error: ' + err);
    }
    try {
        for (const team of (_b = a.all_team) !== null && _b !== void 0 ? _b : [])
            (0, C_Team_1.alert_team_info)(team);
    }
    catch (err) {
        alert('alert team error: ' + err);
    }
    try {
        for (const maze of (_c = a.all_maze) !== null && _c !== void 0 ? _c : [])
            (0, C_Maze_1.alert_maze_info)(maze);
    }
    catch (err) {
        alert('alert maze error: ' + err);
    }
    try {
        for (const guld of (_d = a.all_guld) !== null && _d !== void 0 ? _d : [])
            (0, C_Guild_1.alert_guld_info)(guld);
    }
    catch (err) {
        alert('alert guld error: ' + err);
    }
}
class C_SaveData extends C_SaveInfo_1.C_SaveInfo {
    constructor(a) {
        super(a);
        this.all_mvpt = {};
        this.all_maze = {};
        this.all_team = {};
        this.all_guld = {};
        if (a !== undefined)
            this.__init(a);
    }
    __init(s) {
        super.__init(s);
        if (s.all_mvpt !== undefined) {
            this.all_mvpt = {};
            for (const json_mvpt of s.all_mvpt) {
                const mvpt = (new C_MovablePoint_1.C_MovablePoint()).decode(json_mvpt);
                this.all_mvpt[mvpt.uid()] = mvpt;
            }
        }
        if (s.all_maze !== undefined) {
            this.all_maze = {};
            for (const json_maze of s.all_maze) {
                const maze = (new C_Maze_1.C_Maze()).decode(json_maze);
                this.all_maze[maze.uid()] = maze;
            }
        }
        if (s.all_team !== undefined) {
            this.all_team = {};
            for (const json_team of s.all_team) {
                const team = (new C_Team_1.C_Team()).decode(json_team);
                this.all_team[team.uid()] = team;
            }
        }
        if (s.all_guld !== undefined) {
            this.all_guld = {};
            for (const json_guld of s.all_guld) {
                const guld = (new C_Guild_1.C_Guild()).decode(json_guld);
                this.all_guld[guld.uid()] = guld;
            }
        }
        return this;
    }
    static new(a) {
        return new C_SaveData(a);
    }
    encode() {
        let save_date;
        try {
            const save_data = super.encode();
            save_data.all_mvpt = this._encode_all_data(this.all_mvpt);
            save_data.all_maze = this._encode_all_data(this.all_maze);
            save_data.all_team = this._encode_all_data(this.all_team);
            save_data.all_guld = this._encode_all_data(this.all_guld);
            return save_data;
        }
        catch (err) {
            alert('SaveData Encode Error: ' + err);
            return {};
        }
    }
    _encode_all_data(all_data) {
        const all_JSON = [];
        for (let i in all_data)
            all_JSON.push(all_data[i].encode());
        return all_JSON;
    }
    decode(s) {
        return this.__init(s);
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        alert("Save Info:"
            + "\nsave_id:    " + ((_a = this.save_id) !== null && _a !== void 0 ? _a : '?')
            + "\nplayer_id:  " + ((_b = this.player_id) !== null && _b !== void 0 ? _b : '?')
            + "\nuniq_no:    " + ((_c = this.uniq_no) !== null && _c !== void 0 ? _c : '?')
            + "\ntitle:      " + ((_d = this.title) !== null && _d !== void 0 ? _d : '?')
            + "\ndetail:     " + ((_e = this.detail) !== null && _e !== void 0 ? _e : '?')
            + "\npoint:      " + ((_f = this.point) !== null && _f !== void 0 ? _f : '?')
            + "\nauto_mode:  " + (this.auto_mode ? 'Y' : 'N')
            + "\nis_active:  " + (this.is_active ? 'Y' : 'N')
            + "\nis_delete:  " + (this.is_delete ? 'Y' : 'N')
            + "\nmvpt_count: " + ((_h = (_g = this.all_mvpt) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : '?')
            + "\nmaze_count: " + ((_k = (_j = this.all_maze) === null || _j === void 0 ? void 0 : _j.length) !== null && _k !== void 0 ? _k : '?')
            + "\nguld_count: " + ((_m = (_l = this.all_guld) === null || _l === void 0 ? void 0 : _l.length) !== null && _m !== void 0 ? _m : '?')
            + "\nteam_count: " + ((_p = (_o = this.all_team) === null || _o === void 0 ? void 0 : _o.length) !== null && _p !== void 0 ? _p : '?')
            + "\n");
    }
    alert_detail() {
        try {
            for (const ii in this.all_mvpt)
                this.all_mvpt[ii].alert();
        }
        catch (err) {
            alert('alert mvpt error: ' + err);
        }
        try {
            for (const ii in this.all_team)
                this.all_team[ii].alert();
        }
        catch (err) {
            alert('alert team error: ' + err);
        }
        try {
            for (const ii in this.all_maze)
                this.all_maze[ii].alert();
        }
        catch (err) {
            alert('alert maze error: ' + err);
        }
        try {
            for (const ii in this.all_guld)
                this.all_guld[ii].alert();
        }
        catch (err) {
            alert('alert guld error: ' + err);
        }
    }
}
exports.C_SaveData = C_SaveData;


/***/ }),

/***/ "./src/d_mdl/C_SaveInfo.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_SaveInfo.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_SaveInfo = void 0;
exports.alert_saveinfo_info = alert_saveinfo_info;
const C_MovablePoint_1 = __webpack_require__(/*! ./C_MovablePoint */ "./src/d_mdl/C_MovablePoint.ts");
function alert_saveinfo_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    if (a === undefined)
        return;
    alert("Save Info:"
        + "\nsave_id:    " + ((_a = a.save_id) !== null && _a !== void 0 ? _a : '?')
        + "\nplayer_id:  " + ((_b = a.player_id) !== null && _b !== void 0 ? _b : '?')
        + "\nuniq_no:    " + ((_c = a.uniq_no) !== null && _c !== void 0 ? _c : '?')
        + "\ntitle:      " + ((_d = a.title) !== null && _d !== void 0 ? _d : '?')
        + "\ndetail:     " + ((_e = a.detail) !== null && _e !== void 0 ? _e : '?')
        + "\npoint:      " + ((_f = a.point) !== null && _f !== void 0 ? _f : '?')
        + "\nauto_mode:  " + ((_g = a.auto_mode) !== null && _g !== void 0 ? _g : '?')
        + "\nis_active:  " + ((_h = a.is_active) !== null && _h !== void 0 ? _h : '?')
        + "\nis_delete:  " + ((_j = a.is_delete) !== null && _j !== void 0 ? _j : '?')
        + "\nsave_time:  " + ((_k = a.save_time) !== null && _k !== void 0 ? _k : '?')
        + "\nmyurl:      " + ((_m = (_l = a.mypos) === null || _l === void 0 ? void 0 : _l.cur_url) !== null && _m !== void 0 ? _m : '?')
        + "\nteam_uid:   " + ((_p = (_o = a.mypos) === null || _o === void 0 ? void 0 : _o.team_uid) !== null && _p !== void 0 ? _p : '?')
        + "\nloc_kind:   " + ((_r = (_q = a.mypos) === null || _q === void 0 ? void 0 : _q.kind) !== null && _r !== void 0 ? _r : '?')
        + "\nloc_name:   " + ((_t = (_s = a.mypos) === null || _s === void 0 ? void 0 : _s.name) !== null && _t !== void 0 ? _t : '?')
        + "\nloc_uid:    " + ((_v = (_u = a.mypos) === null || _u === void 0 ? void 0 : _u.loc_uid) !== null && _v !== void 0 ? _v : '?')
        + "\n");
}
class C_SaveInfo {
    constructor(a) {
        this.save_id = -1;
        this.player_id = -1;
        this.uniq_no = -1;
        this.title = '';
        this.detail = '';
        this.point = '';
        this.auto_mode = false;
        this.is_active = true;
        this.is_delete = false;
        this.save_time = new Date();
        this.mypos = new C_MovablePoint_1.C_MovablePoint();
        if (a !== undefined)
            this.__init(a);
    }
    __init(s) {
        var _a, _b, _c, _d, _e, _f;
        this.save_id = (_a = s.save_id) !== null && _a !== void 0 ? _a : this.save_id;
        this.player_id = (_b = s.player_id) !== null && _b !== void 0 ? _b : this.player_id;
        this.uniq_no = (_c = s.uniq_no) !== null && _c !== void 0 ? _c : this.uniq_no;
        this.title = (_d = s.title) !== null && _d !== void 0 ? _d : this.title;
        this.detail = (_e = s.detail) !== null && _e !== void 0 ? _e : this.detail;
        this.point = (_f = s.point) !== null && _f !== void 0 ? _f : this.point;
        if (s.auto_mode === undefined)
            this.auto_mode;
        else
            s.auto_mode !== '0' ? true : false;
        if (s.is_active === undefined)
            this.is_active;
        else
            s.is_active !== '0' ? true : false;
        if (s.is_delete === undefined)
            this.is_delete;
        else
            s.is_delete !== '0' ? true : false;
        if (s.save_time !== undefined)
            this.save_time = new Date(s.save_time);
        if (s.mypos !== undefined)
            this.mypos.decode(s.mypos);
        return this;
    }
    static new(a) {
        return new C_SaveInfo(a);
    }
    encode() {
        let save_date;
        try {
            save_date = this.save_time.toISOString();
        }
        catch (err) {
            save_date = new Date().toISOString();
        }
        try {
            return {
                save_id: this.save_id,
                player_id: this.player_id,
                uniq_no: this.uniq_no,
                title: this.title,
                detail: this.detail,
                point: this.point,
                auto_mode: this.auto_mode ? '1' : '0',
                is_active: this.is_active ? '1' : '0',
                is_delete: this.is_delete ? '1' : '0',
                save_time: save_date,
                mypos: this.mypos.encode(),
            };
        }
        catch (err) {
            alert('SaveData Encode Error: ' + err);
            return {};
        }
    }
    decode(s) {
        return this.__init(s);
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        alert("SaveInfo DATA:"
            + "\nsave_id:    " + ((_a = this.save_id) !== null && _a !== void 0 ? _a : '?')
            + "\nplayer_id:  " + ((_b = this.player_id) !== null && _b !== void 0 ? _b : '?')
            + "\nuniq_no:    " + ((_c = this.uniq_no) !== null && _c !== void 0 ? _c : '?')
            + "\ntitle:      " + ((_d = this.title) !== null && _d !== void 0 ? _d : '?')
            + "\ndetail:     " + ((_e = this.detail) !== null && _e !== void 0 ? _e : '?')
            + "\npoint:      " + ((_f = this.point) !== null && _f !== void 0 ? _f : '?')
            + "\nauto_mode:  " + (this.auto_mode ? 'Y' : 'N')
            + "\nis_active:  " + (this.is_active ? 'Y' : 'N')
            + "\nis_delete:  " + (this.is_delete ? 'Y' : 'N')
            + "\nmyurl:      " + ((_g = this.mypos.url()) !== null && _g !== void 0 ? _g : '?')
            + "\nteam_uid:   " + ((_h = this.mypos.tid()) !== null && _h !== void 0 ? _h : '?')
            + "\nloc_kind:   " + ((_j = this.mypos.get_lckd()) !== null && _j !== void 0 ? _j : '?')
            + "\nloc_name:   " + ((_k = this.mypos.get_name()) !== null && _k !== void 0 ? _k : '?')
            + "\nloc_uid:    " + ((_l = this.mypos.get_uid()) !== null && _l !== void 0 ? _l : '?')
            + "\n");
    }
}
exports.C_SaveInfo = C_SaveInfo;


/***/ }),

/***/ "./src/d_mdl/C_Team.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Team.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Team = void 0;
exports.alert_team_info = alert_team_info;
const C_Walker_1 = __webpack_require__(/*! ./C_Walker */ "./src/d_mdl/C_Walker.ts");
const C_Hero_1 = __webpack_require__(/*! ./C_Hero */ "./src/d_mdl/C_Hero.ts");
const C_TeamView_1 = __webpack_require__(/*! ./C_TeamView */ "./src/d_mdl/C_TeamView.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_TeamView2X_1 = __webpack_require__(/*! ./C_TeamView2X */ "./src/d_mdl/C_TeamView2X.ts");
function alert_team_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
    if (a === undefined)
        return;
    alert("Team Info:"
        + "\nid:    " + ((_a = a.id) !== null && _a !== void 0 ? _a : '?')
        + "\nuniq_id:  " + ((_b = a.uniq_id) !== null && _b !== void 0 ? _b : '?')
        + "\nname:  " + ((_c = a.name) !== null && _c !== void 0 ? _c : '?')
        + "\nsave_id: " + ((_d = a.save_id) !== null && _d !== void 0 ? _d : '?')
        + "\nurl:  " + ((_f = (_e = a.locate) === null || _e === void 0 ? void 0 : _e.cur_url) !== null && _f !== void 0 ? _f : '?')
        + "\nlckd: " + ((_h = (_g = a.locate) === null || _g === void 0 ? void 0 : _g.kind) !== null && _h !== void 0 ? _h : '?')
        + "\nlcnm: " + ((_k = (_j = a.locate) === null || _j === void 0 ? void 0 : _j.name) !== null && _k !== void 0 ? _k : '?')
        + "\nlcid: " + ((_m = (_l = a.locate) === null || _l === void 0 ? void 0 : _l.loc_uid) !== null && _m !== void 0 ? _m : '?')
        + "\ncur_x: " + ((_q = (_p = (_o = a.locate) === null || _o === void 0 ? void 0 : _o.loc_pos) === null || _p === void 0 ? void 0 : _p.x) !== null && _q !== void 0 ? _q : '?')
        + "\ncur_y: " + ((_t = (_s = (_r = a.locate) === null || _r === void 0 ? void 0 : _r.loc_pos) === null || _s === void 0 ? void 0 : _s.y) !== null && _t !== void 0 ? _t : '?')
        + "\ncur_z: " + ((_w = (_v = (_u = a.locate) === null || _u === void 0 ? void 0 : _u.loc_pos) === null || _v === void 0 ? void 0 : _v.z) !== null && _w !== void 0 ? _w : '?')
        + "\ncur_d: " + ((_z = (_y = (_x = a.locate) === null || _x === void 0 ? void 0 : _x.loc_pos) === null || _y === void 0 ? void 0 : _y.d) !== null && _z !== void 0 ? _z : '?')
        + "\ngold: " + ((_0 = a.gold) !== null && _0 !== void 0 ? _0 : 0)
        + "\nheroes: " + ((_2 = (_1 = a.heroes) === null || _1 === void 0 ? void 0 : _1.length) !== null && _2 !== void 0 ? _2 : '?')
        + "\n");
}
class C_Team {
    constructor(j) {
        this.my_id = 0;
        this.my_name = 'Neo Team?';
        this.uniq_id = 'mai_team#' + (0, F_Rand_1._get_uuid)();
        this.save_id = 0;
        this.myView = new C_TeamView_1.C_CurrentTeamView(this);
        this.myView2D = new C_TeamView2X_1.C_CurrentTeamView2X(this);
        this.myView2M = new C_TeamView2X_1.C_CurrentTeamView2X(this);
        this.myWalker = new C_Walker_1.C_Walker();
        this.myWalker.set_tid(this.uid());
        this.gold = 0;
        this.heroes = {};
        this.hope_motion = 'NOP';
        if (j !== undefined)
            this.decode(j);
    }
    free() { }
    ;
    set_prp(arg) {
        this.decode(arg);
    }
    uid() { return this.uniq_id; }
    within(p) {
        var _a, _b;
        const here = (_a = this.myWalker) === null || _a === void 0 ? void 0 : _a.get_p();
        return (_b = here === null || here === void 0 ? void 0 : here.within(p)) !== null && _b !== void 0 ? _b : false;
    }
    view() { return this.myView; }
    setView(view) { this.myView = view; }
    view2D() { return this.myView2D; }
    setView2D(view2D) { this.myView2D = view2D; }
    view2M() { return this.myView2M; }
    setView2M(view2M) { this.myView2M = view2M; }
    getWalker() {
        return this.myWalker;
    }
    walker() { return this.myWkWalker; }
    set_walker(wdwalker) { this.myWkWalker = wdwalker; }
    wres() { return undefined; }
    set_wres(wres) { return; }
    add_wndr(wndr) { return; }
    canThrough() { return true; }
    hitDamage() { return 0; }
    hres() {
        const hres = [];
        for (let ii in this.heroes)
            hres.push(this.heroes[ii]);
        return hres;
    }
    clear_hres() {
        this.heroes = {};
    }
    add_hero(hero) {
        this.heroes[hero.uid()] = hero;
    }
    rmv_hero(hero) {
        delete this.heroes[hero.uid()];
    }
    get_loc() {
        return this.myWalker;
    }
    set_loc(loc) {
        var _a;
        ((_a = this.myWalker) !== null && _a !== void 0 ? _a : (this.myWalker = new C_Walker_1.C_Walker())).decode(loc.encode());
    }
    get_pd() {
        return this.myWalker.get_pd();
    }
    set_pd(pd) {
        this.myWalker.set_pd(pd);
    }
    encode() {
        var _a, _b, _c, _d, _e, _f;
        this.get_loc();
        const json_heroes = [];
        for (let ii in this.heroes)
            json_heroes.push(this.heroes[ii].encode());
        return {
            id: this.my_id,
            name: this.my_name,
            uniq_id: this.uniq_id,
            save_id: this.save_id,
            locate: this.myWalker.encode(),
            gold: this.gold,
            heroes: json_heroes,
            motion: this.hope_motion,
            view: (_b = (_a = this.myView) === null || _a === void 0 ? void 0 : _a.encode()) !== null && _b !== void 0 ? _b : {},
            view2D: (_d = (_c = this.myView2D) === null || _c === void 0 ? void 0 : _c.encode()) !== null && _d !== void 0 ? _d : {},
            view2M: (_f = (_e = this.myView2M) === null || _e === void 0 ? void 0 : _e.encode()) !== null && _f !== void 0 ? _f : {},
        };
    }
    decode(a) {
        if (a === undefined)
            return this;
        if (a.id !== undefined)
            this.my_id = a.id;
        if (a.name !== undefined)
            this.my_name = a.name;
        if (a.uniq_id !== undefined)
            this.uniq_id = a.uniq_id;
        if (a.save_id !== undefined)
            this.save_id = a.save_id;
        if (a.motion !== undefined)
            this.hope_motion = a.motion;
        if (a.locate !== undefined)
            this.myWalker.decode(a.locate);
        if (a.gold !== undefined)
            this.gold = a.gold;
        if (a.heroes !== undefined) {
            this.heroes = {};
            for (const json_hero of a.heroes) {
                const hero = new C_Hero_1.C_Hero(json_hero);
                this.heroes[hero.uid()] = hero;
            }
        }
        return this;
    }
    static encode_all(all_team) {
        const all_team_data = [];
        for (let team of all_team) {
            all_team_data.push(team.encode());
        }
        return all_team_data;
    }
    static decode_all(all_team_data) {
        const all_team = [];
        for (let team_data of all_team_data) {
            all_team.push((new C_Team()).decode(team_data));
        }
        return all_team;
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        alert("Team Info:"
            + "\nid:    " + ((_a = this.my_id) !== null && _a !== void 0 ? _a : '?')
            + "\nuniq_id:  " + ((_b = this.uniq_id) !== null && _b !== void 0 ? _b : '?')
            + "\nname:  " + ((_c = this.my_name) !== null && _c !== void 0 ? _c : '?')
            + "\nsave_id: " + ((_d = this.save_id) !== null && _d !== void 0 ? _d : '?')
            + "\nurl:  " + ((_e = this.myWalker.url()) !== null && _e !== void 0 ? _e : '?')
            + "\nlckd: " + ((_f = this.myWalker.get_lckd_str()) !== null && _f !== void 0 ? _f : '?')
            + "\nlcnm: " + ((_g = this.myWalker.get_name()) !== null && _g !== void 0 ? _g : '?')
            + "\nlcid: " + ((_h = this.myWalker.get_uid()) !== null && _h !== void 0 ? _h : '?')
            + "\ncur_x: " + ((_j = this.myWalker.get_p().x) !== null && _j !== void 0 ? _j : '?')
            + "\ncur_y: " + ((_k = this.myWalker.get_p().y) !== null && _k !== void 0 ? _k : '?')
            + "\ncur_z: " + ((_l = this.myWalker.get_p().z) !== null && _l !== void 0 ? _l : '?')
            + "\ncur_d: " + ((_m = this.myWalker.get_d()) !== null && _m !== void 0 ? _m : '?')
            + "\ngold: " + (Object.keys((_o = this.gold) !== null && _o !== void 0 ? _o : {}).length)
            + "\nheroes: " + ((_q = (_p = this.heroes) === null || _p === void 0 ? void 0 : _p.length) !== null && _q !== void 0 ? _q : '?')
            + "\n");
    }
    alert_hres() {
        for (const ii in this.heroes)
            this.heroes[ii].alert();
    }
}
exports.C_Team = C_Team;


/***/ }),

/***/ "./src/d_mdl/C_TeamView.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_TeamView.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_CurrentTeamView = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_MazeObjView_1 = __webpack_require__(/*! ./C_MazeObjView */ "./src/d_mdl/C_MazeObjView.ts");
class C_CurrentTeamView {
    constructor(team) {
        this.my_layer = 99;
        this.my_team = team;
    }
    free() { }
    layer() { return this.my_layer; }
    set_layer(layer) { this.my_layer = layer; }
    letter() {
        switch (this.my_team.getWalker().get_d()) {
            case C_PointDir_1.T_Direction.N: return '↑';
            case C_PointDir_1.T_Direction.E: return '→';
            case C_PointDir_1.T_Direction.S: return '↓';
            case C_PointDir_1.T_Direction.W: return '←';
            default: return '🌀';
        }
    }
    dir() {
        var _a;
        return (_a = this.my_team.getWalker().get_d()) !== null && _a !== void 0 ? _a : C_PointDir_1.T_Direction.N;
    }
    set_dir(d) {
        this.my_team.getWalker().set_d(d);
    }
    canShow() { return false; }
    pad_t() { return 0.0; }
    pad_d() { return 0.0; }
    pad_s() { return 0.0; }
    col_f() { return null; }
    col_b() { return null; }
    col_s() { return null; }
    col_t() { return null; }
    col_d() { return null; }
    col_l() { return null; }
    col_2() { return null; }
    col_L() { return null; }
    drow3D(frot, back) { }
    drow2D(r) {
        const con = C_MazeObjView_1.C_MazeObjView.get_context2D();
        if (con === undefined)
            return;
        switch (this.my_team.getWalker().get_d()) {
            case C_PointDir_1.T_Direction.N:
                this.drow2D_arrow({ x: (r.tl.x + r.tr.x) / 2, y: r.tl.y }, r.dl, r.dr);
                break;
            case C_PointDir_1.T_Direction.E:
                this.drow2D_arrow({ y: (r.tr.y + r.dr.y) / 2, x: r.tr.x }, r.tl, r.dl);
                break;
            case C_PointDir_1.T_Direction.S:
                this.drow2D_arrow({ x: (r.dl.x + r.dr.x) / 2, y: r.dl.y }, r.tr, r.tl);
                break;
            case C_PointDir_1.T_Direction.W:
                this.drow2D_arrow({ y: (r.tl.y + r.dl.y) / 2, x: r.tl.x }, r.dr, r.tr);
                break;
        }
    }
    drow2D_arrow(top, left, right) {
        const con = C_MazeObjView_1.C_MazeObjView.get_context2D();
        if (con === undefined)
            return;
        con.beginPath();
        con.moveTo(top.x, top.y);
        con.lineTo(right.x, right.y);
        con.lineTo(left.x, left.y);
        con.closePath();
        con.fillStyle = "#ff6666";
        con.fill();
        con.strokeStyle = "#ff3333";
        con.lineWidth = 2;
        con.stroke();
    }
    encode() { return { cname: 'CurrentTeamView' }; }
    decode(j) { return this; }
}
exports.C_CurrentTeamView = C_CurrentTeamView;


/***/ }),

/***/ "./src/d_mdl/C_TeamView2X.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_TeamView2X.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_CurrentTeamView2X = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_CurrentTeamView2X {
    constructor(team) {
        this.my_layer = 99;
        this.my_team = team;
    }
    free() { }
    layer() { return this.my_layer; }
    set_layer(layer) { this.my_layer = layer; }
    letter() {
        switch (this.my_team.getWalker().get_d()) {
            case C_PointDir_1.T_Direction.N: return '↑';
            case C_PointDir_1.T_Direction.E: return '→';
            case C_PointDir_1.T_Direction.S: return '↓';
            case C_PointDir_1.T_Direction.W: return '←';
            default: return '🌀';
        }
    }
    canShow() { return false; }
    col_2() { return null; }
    col_L() { return null; }
    drow2X(ctx, r, dir) {
        if (ctx === undefined)
            return;
        switch (this.my_team.getWalker().get_d()) {
            case C_PointDir_1.T_Direction.N:
                this.drow2X_arrow(ctx, { x: (r.tl.x + r.tr.x) / 2, y: r.tl.y }, r.dl, r.dr);
                break;
            case C_PointDir_1.T_Direction.E:
                this.drow2X_arrow(ctx, { y: (r.tr.y + r.dr.y) / 2, x: r.tr.x }, r.tl, r.dl);
                break;
            case C_PointDir_1.T_Direction.S:
                this.drow2X_arrow(ctx, { x: (r.dl.x + r.dr.x) / 2, y: r.dl.y }, r.tr, r.tl);
                break;
            case C_PointDir_1.T_Direction.W:
                this.drow2X_arrow(ctx, { y: (r.tl.y + r.dl.y) / 2, x: r.tl.x }, r.dr, r.tr);
                break;
        }
    }
    drow2X_arrow(ctx, top, left, right) {
        if (ctx === undefined || ctx === null)
            return;
        ctx.beginPath();
        ctx.moveTo(top.x, top.y);
        ctx.lineTo(right.x, right.y);
        ctx.lineTo(left.x, left.y);
        ctx.closePath();
        ctx.fillStyle = "#ff6666";
        ctx.fill();
        ctx.strokeStyle = "#ff3333";
        ctx.lineWidth = 2;
        ctx.stroke();
    }
    encode() { return { cname: 'CurrentTeamView' }; }
    decode(j) { return this; }
}
exports.C_CurrentTeamView2X = C_CurrentTeamView2X;


/***/ }),

/***/ "./src/d_mdl/C_Walker.ts":
/*!*******************************!*\
  !*** ./src/d_mdl/C_Walker.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Walker = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_MovablePoint_1 = __webpack_require__(/*! ./C_MovablePoint */ "./src/d_mdl/C_MovablePoint.ts");
class C_Walker extends C_MovablePoint_1.C_MovablePoint {
    constructor(j) {
        super(j);
    }
    get_x() { return this.loc_pos.x; }
    get_y() { return this.loc_pos.y; }
    get_z() { return this.loc_pos.z; }
    set_x(x) { this.loc_pos.x = x; }
    set_y(y) { this.loc_pos.y = y; }
    set_z(z) { this.loc_pos.z = z; }
    set_place(place, url, pos) {
        this.set_uid(place.uid());
        this.set_lckd(place.get_lckd());
        this.set_name(place.get_name());
        if (url !== undefined)
            this.set_url(url);
        if (pos !== undefined) {
            this.set_pd(pos);
        }
    }
    hope_p_fwd() {
        return {
            has_hope: true,
            hope: "Move",
            subj: this.get_p_fwd(),
        };
    }
    hope_p_bak() {
        return {
            has_hope: true,
            hope: "Move",
            subj: this.get_p_bak(),
        };
    }
    hope_p_lft() {
        return {
            has_hope: true,
            hope: "Move",
            subj: this.get_p_lft(),
        };
    }
    hope_p_rgt() {
        return {
            has_hope: true,
            hope: "Move",
            subj: this.get_p_rgt(),
        };
    }
    hope_turn_r() {
        return {
            has_hope: true,
            hope: "Turn",
            subj: this.get_t_rgt(),
        };
    }
    hope_turn_l() {
        return {
            has_hope: true,
            hope: "Turn",
            subj: this.get_t_lft(),
        };
    }
    hope_p_up() {
        return {
            has_hope: true,
            hope: "Up",
            subj: this.get_p_up(),
        };
    }
    hope_p_down() {
        return {
            has_hope: true,
            hope: "Down",
            subj: this.get_p_down(),
        };
    }
    get_p_fwd() {
        return this.__get_p_move(1, 0);
    }
    get_p_bak() {
        return this.__get_p_move(-1, 0);
    }
    get_p_lft() {
        return this.__get_p_move(0, -1);
    }
    get_p_rgt() {
        return this.__get_p_move(0, 1);
    }
    get_t_rgt() {
        const pd = new C_PointDir_1.C_PointDir(this.loc_pos);
        switch (this.loc_pos.d) {
            case C_PointDir_1.T_Direction.N:
                pd.d = C_PointDir_1.T_Direction.E;
                break;
            case C_PointDir_1.T_Direction.E:
                pd.d = C_PointDir_1.T_Direction.S;
                break;
            case C_PointDir_1.T_Direction.S:
                pd.d = C_PointDir_1.T_Direction.W;
                break;
            case C_PointDir_1.T_Direction.W:
                pd.d = C_PointDir_1.T_Direction.N;
                break;
        }
        return pd;
    }
    get_t_lft() {
        const pd = new C_PointDir_1.C_PointDir(this.loc_pos);
        switch (this.loc_pos.d) {
            case C_PointDir_1.T_Direction.N:
                pd.d = C_PointDir_1.T_Direction.W;
                break;
            case C_PointDir_1.T_Direction.E:
                pd.d = C_PointDir_1.T_Direction.N;
                break;
            case C_PointDir_1.T_Direction.S:
                pd.d = C_PointDir_1.T_Direction.E;
                break;
            case C_PointDir_1.T_Direction.W:
                pd.d = C_PointDir_1.T_Direction.S;
                break;
        }
        return pd;
    }
    get_p_up() {
        const p = new C_PointDir_1.C_PointDir(this.loc_pos);
        p.z--;
        return p;
    }
    get_p_down() {
        const p = new C_PointDir_1.C_PointDir(this.loc_pos);
        p.z++;
        return p;
    }
    __get_p_move(offsetFB, offsetLR) {
        const p = new C_PointDir_1.C_PointDir(this.loc_pos);
        if (offsetFB !== 0) {
            switch (this.loc_pos.d) {
                case C_PointDir_1.T_Direction.N:
                    p.y -= offsetFB;
                    break;
                case C_PointDir_1.T_Direction.E:
                    p.x += offsetFB;
                    break;
                case C_PointDir_1.T_Direction.S:
                    p.y += offsetFB;
                    break;
                case C_PointDir_1.T_Direction.W:
                    p.x -= offsetFB;
                    break;
            }
        }
        if (offsetLR !== 0) {
            switch (this.loc_pos.d) {
                case C_PointDir_1.T_Direction.N:
                    p.x += offsetLR;
                    break;
                case C_PointDir_1.T_Direction.E:
                    p.y += offsetLR;
                    break;
                case C_PointDir_1.T_Direction.S:
                    p.x -= offsetLR;
                    break;
                case C_PointDir_1.T_Direction.W:
                    p.y -= offsetLR;
                    break;
            }
        }
        return p;
    }
    get_around(front, right, up = 0) {
        var target_x = this.loc_pos.x;
        var target_y = this.loc_pos.y;
        var target_z = this.loc_pos.z - up;
        switch (this.loc_pos.d) {
            case C_PointDir_1.T_Direction.N:
                target_x += right;
                target_y -= front;
                break;
            case C_PointDir_1.T_Direction.E:
                target_x += front;
                target_y += right;
                break;
            case C_PointDir_1.T_Direction.S:
                target_x -= right;
                target_y += front;
                break;
            case C_PointDir_1.T_Direction.W:
                target_x -= front;
                target_y -= right;
                break;
        }
        return new C_PointDir_1.C_PointDir({ x: target_x, y: target_y, z: target_z, d: this.loc_pos.d });
    }
    encode() {
        const j = super.encode();
        return j;
    }
    decode(a) {
        if (a === undefined)
            return this;
        super.decode(a);
        return this;
    }
}
exports.C_Walker = C_Walker;


/***/ }),

/***/ "./src/d_mdl/C_Wall.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Wall.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Wall = void 0;
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
class C_Wall {
    constructor(depth = 5, size) {
        if (depth < 3)
            depth = 5;
        if (depth % 2 !== 1)
            depth++;
        const min_x = size.min_x();
        const min_y = size.min_y();
        const max_x = size.max_x();
        const max_y = size.max_y();
        const center_x = (max_x - min_x) / 2;
        const front_wall_size_x = (max_x - min_x) / depth;
        const side_wall_size_x = (center_x - front_wall_size_x / 2) / depth;
        const front_wall_H_size_x = new Array(depth + 1);
        front_wall_H_size_x[depth] = front_wall_size_x / 2;
        for (let i = depth - 1; i >= 0; i--) {
            front_wall_H_size_x[i] = front_wall_H_size_x[i + 1] + side_wall_size_x;
        }
        const front_wall_size_y = (max_y - min_y) / depth;
        const side_wall_size_T = (max_y - min_y - front_wall_size_y) / (depth * 2);
        const side_wall_size_B = (max_y - min_y - front_wall_size_y) / (depth * 2);
        const wall = new Array(depth + 1);
        for (let j = 0; j < depth + 1; j++) {
            wall[j] = new Array(depth + 1);
            for (let k = 0; k < depth + 1; k++) {
                const wk_x = center_x - front_wall_H_size_x[j] * (depth - 2 * k);
                wall[j][k] = {
                    min_x: (0, F_Math_1._round)(wk_x, 0),
                    max_x: (0, F_Math_1._round)(wk_x + front_wall_H_size_x[j] * 2, 0),
                    min_y: (0, F_Math_1._round)(min_y + side_wall_size_T * j, 0),
                    max_y: (0, F_Math_1._round)(max_y - side_wall_size_B * j, 0),
                };
            }
        }
        this.d = depth;
        this.w = wall;
    }
    get_depth() {
        return this.d;
    }
    get(depth, offset) {
        const H_dept = (this.d - 1) / 2;
        return this.w[depth][H_dept + offset];
    }
}
exports.C_Wall = C_Wall;


/***/ }),

/***/ "./src/d_mdl/C_Wndr.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Wndr.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Wndr = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_Hero_1 = __webpack_require__(/*! ./C_Hero */ "./src/d_mdl/C_Hero.ts");
class C_Wndr extends C_Hero_1.C_Hero {
    constructor(j) {
        super(j);
        this._boss_level = 0;
        this._family = '放浪者';
        this.my_name = 'No Name Wonder';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        super.__init(j);
        if ((j === null || j === void 0 ? void 0 : j.boss_level) !== undefined)
            this._boss_level = j.boss_level;
        if ((j === null || j === void 0 ? void 0 : j.family) !== undefined)
            this._family = j.family;
        return this;
    }
    free() {
        super.free();
    }
    boss_level() {
        return this._boss_level;
    }
    set_boss_level(n) {
        if (n < 0 || n > 3) {
            n = 0;
        }
        this._boss_level = n;
        return this;
    }
    hero_bonus(n) {
        return n * (this.lv + this._boss_level + 1);
    }
    random_make(hero_level = 0) {
        super.random_make(hero_level);
        this.my_name = this._family + (0, F_Rand_1._random_str)(5);
        return this;
    }
    encode() {
        const j = super.encode();
        j.boss_level = this._boss_level;
        j.family = this._family;
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_Wndr = C_Wndr;


/***/ }),

/***/ "./src/d_mdl/C_WndrObj.ts":
/*!********************************!*\
  !*** ./src/d_mdl/C_WndrObj.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrObj = void 0;
const C_MazeObj_1 = __webpack_require__(/*! ./C_MazeObj */ "./src/d_mdl/C_MazeObj.ts");
const C_WndrView_1 = __webpack_require__(/*! ./C_WndrView */ "./src/d_mdl/C_WndrView.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_WndrView2X_1 = __webpack_require__(/*! ./C_WndrView2X */ "./src/d_mdl/C_WndrView2X.ts");
const F_new_Walker_1 = __webpack_require__(/*! ./F_new_Walker */ "./src/d_mdl/F_new_Walker.ts");
const C_Wndr_1 = __webpack_require__(/*! ./C_Wndr */ "./src/d_mdl/C_Wndr.ts");
class C_WndrObj extends C_MazeObj_1.C_MazeObj {
    constructor(j) {
        var _a, _b, _c, _d;
        super(j);
        this.clname = 'C_WndrObj';
        this.walk = undefined;
        this.my_wres = undefined;
        this.dmy = 'ダミー';
        this.clname = 'C_WndrObj';
        this.can_thr = true;
        this.hit_dmg = 0;
        if (j === undefined)
            return;
        if (j.pos === undefined)
            (_a = j.pos) !== null && _a !== void 0 ? _a : (j.pos = (_c = (_b = j.walk) === null || _b === void 0 ? void 0 : _b.loc_pos) !== null && _c !== void 0 ? _c : { x: 1, y: 1, z: 0, d: 0 });
        (_d = j.view) !== null && _d !== void 0 ? _d : (j.view = {
            layer: 0, letter: '漂',
            show3D: '1',
            pad_t: 0.2, pad_d: 0.0, pad_s: 0.38,
            col_f: '#ff99ff', col_b: '#dd88dd', col_s: '#dd88dd', col_t: '#dd88dd', col_d: '#dd88dd',
            col_l: '#9999ff', col_2: '', col_L: '#6666ff',
            col_2_arw: '#ffffff', col_2_tri: '#cc6666',
        });
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var _j;
        super.__init(j);
        if (j === undefined)
            return this;
        if ((j === null || j === void 0 ? void 0 : j.clname) !== undefined)
            this.clname = j.clname;
        if ((j === null || j === void 0 ? void 0 : j.pos) === undefined && ((_a = j.walk) === null || _a === void 0 ? void 0 : _a.loc_pos) !== undefined)
            j.pos = j.walk.loc_pos;
        if ((j === null || j === void 0 ? void 0 : j.pos) !== undefined)
            this.set_pd(new C_PointDir_1.C_PointDir(j.pos));
        if ((j === null || j === void 0 ? void 0 : j.view) !== undefined) {
            this.setView(new C_WndrView_1.C_WndrView(j.view));
            this.setView2D(new C_WndrView2X_1.C_WndrView2X(j.view));
            this.setView2M(new C_WndrView2X_1.C_WndrView2X(j.view));
        }
        if ((j === null || j === void 0 ? void 0 : j.walk) !== undefined) {
            (_b = (_j = j.walk).loc_pos) !== null && _b !== void 0 ? _b : (_j.loc_pos = (_c = j === null || j === void 0 ? void 0 : j.pos) !== null && _c !== void 0 ? _c : { x: 1, y: 1, z: 0, d: 0 });
            this.walk = (0, F_new_Walker_1.new_walker)(j.walk);
            (_d = this.walk) === null || _d === void 0 ? void 0 : _d.set_mazeObj(this);
        }
        if ((j === null || j === void 0 ? void 0 : j.wres) !== undefined && ((_f = (_e = j.wres) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 0) > 0) {
            this.my_wres = [];
            for (const jw of j.wres) {
                if (jw === undefined)
                    continue;
                if (jw.name === "No Name Wonder")
                    continue;
                const wndr = new C_Wndr_1.C_Wndr(jw);
                this.my_wres.push(wndr);
            }
        }
        if (((_g = j === null || j === void 0 ? void 0 : j.stat) === null || _g === void 0 ? void 0 : _g.wo) !== undefined) {
            this.dmy = (_h = j.stat.wo.dmy) !== null && _h !== void 0 ? _h : '';
        }
        return this;
    }
    free() {
        var _a, _b;
        (_a = this.walk) === null || _a === void 0 ? void 0 : _a.free();
        this.walk = undefined;
        for (const wndr of (_b = this.my_wres) !== null && _b !== void 0 ? _b : []) {
            if (wndr === undefined)
                continue;
            wndr.free();
        }
    }
    walker() { return this.walk; }
    set_walker(walk) { this.walk = walk; }
    wres() { var _a; return (_a = this.my_wres) !== null && _a !== void 0 ? _a : undefined; }
    set_wres(wres) { this.my_wres = wres; }
    add_wndr(wndr) {
        var _a;
        (_a = this.my_wres) !== null && _a !== void 0 ? _a : (this.my_wres = []);
        this.my_wres.push(wndr);
    }
    encode() {
        var _a, _b, _c, _d;
        const wres = (_a = this.my_wres) === null || _a === void 0 ? void 0 : _a.map((wndr) => wndr.encode());
        const j = super.encode();
        j.clname = this.clname;
        j.walk = (_c = (_b = this.walk) === null || _b === void 0 ? void 0 : _b.encode()) !== null && _c !== void 0 ? _c : undefined;
        j.wres = wres;
        (_d = j.stat) !== null && _d !== void 0 ? _d : (j.stat = {});
        j.stat.wo = { dmy: this.dmy };
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_WndrObj = C_WndrObj;


/***/ }),

/***/ "./src/d_mdl/C_WndrObjBoss.ts":
/*!************************************!*\
  !*** ./src/d_mdl/C_WndrObjBoss.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrObjBoss3 = exports.C_WndrObjBoss2 = void 0;
const C_WndrObj_1 = __webpack_require__(/*! ./C_WndrObj */ "./src/d_mdl/C_WndrObj.ts");
class C_WndrObjBoss2 extends C_WndrObj_1.C_WndrObj {
    constructor(j) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        super(undefined);
        this.clname = 'C_WndrObjBoss2';
        this.clname = 'C_WndrObjBoss2';
        if (j === undefined)
            return;
        (_a = j.pos) !== null && _a !== void 0 ? _a : (j.pos = (_c = (_b = j.walk) === null || _b === void 0 ? void 0 : _b.loc_pos) !== null && _c !== void 0 ? _c : { x: 1, y: 1, z: 0, d: 0 });
        const new_view = {
            layer: 0, letter: 'ボ',
            show3D: '1',
            pad_t: 0.1, pad_d: 0.0, pad_s: 0.3,
            col_f: '#B9C3C9', col_b: '#DCDDDD', col_s: '#9EACB3', col_t: '#DCDDDD', col_d: '#9EACB3',
            col_l: '#9999ff', col_2: '#B9C3C9', col_L: '#6666ff',
            col_2_arw: '#9EACB3', col_2_tri: '#DCDDDD',
        };
        (_d = j.view) !== null && _d !== void 0 ? _d : (j.view = {});
        for (const key in new_view) {
            if (j.view[key] !== undefined)
                continue;
            j.view[key] = new_view[key];
        }
        const new_walk = {
            cond: { canMove: '0', canSlid: "0", canUpDn: "0", canThru: "1" },
            loc_pos: (_g = (_f = (_e = j === null || j === void 0 ? void 0 : j.walk) === null || _e === void 0 ? void 0 : _e.loc_pos) !== null && _f !== void 0 ? _f : j === null || j === void 0 ? void 0 : j.pos) !== null && _g !== void 0 ? _g : { x: 1, y: 1, z: 0, d: 0 },
        };
        (_h = j.walk) !== null && _h !== void 0 ? _h : (j.walk = {});
        for (const key in new_walk) {
            if (j.walk[key] !== undefined)
                continue;
            j.walk[key] = new_walk[key];
        }
        const new_wres = [
            {
                boss_level: 2,
                family: '中ボス',
            },
        ];
        (_j = j.wres) !== null && _j !== void 0 ? _j : (j.wres = []);
        for (const new_wndr of new_wres) {
            if (((_l = (_k = j.wres) === null || _k === void 0 ? void 0 : _k.length) !== null && _l !== void 0 ? _l : 4) > 3)
                break;
            j.wres.push(new_wndr);
        }
        this.__init(j);
    }
    __init(j) {
        super.__init(j);
        return this;
    }
}
exports.C_WndrObjBoss2 = C_WndrObjBoss2;
class C_WndrObjBoss3 extends C_WndrObj_1.C_WndrObj {
    constructor(j) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        super(undefined);
        this.clname = 'C_WndrObjBoss3';
        this.clname = 'C_WndrObjBoss3';
        if (j === undefined)
            return;
        (_a = j.pos) !== null && _a !== void 0 ? _a : (j.pos = (_c = (_b = j.walk) === null || _b === void 0 ? void 0 : _b.loc_pos) !== null && _c !== void 0 ? _c : { x: 1, y: 1, z: 0, d: 0 });
        const new_view = {
            layer: 0, letter: 'ボ',
            show3D: '1',
            pad_t: 0.1, pad_d: 0.0, pad_s: 0.3,
            col_f: '#F5D100', col_b: '#BF9223', col_s: '#DBB300', col_t: '#F5D100', col_d: '#F5D100',
            col_l: '#9999ff', col_2: '#F5D100', col_L: '#6666ff',
            col_2_arw: '#BF9223', col_2_tri: '#F5D100',
        };
        (_d = j.view) !== null && _d !== void 0 ? _d : (j.view = {});
        for (const key in new_view) {
            if (j.view[key] !== undefined)
                continue;
            j.view[key] = new_view[key];
        }
        const new_walk = {
            cond: { canMove: '0', canSlid: "0", canUpDn: "0", canThru: "1" },
            loc_pos: (_g = (_f = (_e = j === null || j === void 0 ? void 0 : j.walk) === null || _e === void 0 ? void 0 : _e.loc_pos) !== null && _f !== void 0 ? _f : j === null || j === void 0 ? void 0 : j.pos) !== null && _g !== void 0 ? _g : { x: 1, y: 1, z: 0, d: 0 },
        };
        (_h = j.walk) !== null && _h !== void 0 ? _h : (j.walk = {});
        for (const key in new_walk) {
            if (j.walk[key] !== undefined)
                continue;
            j.walk[key] = new_walk[key];
        }
        const new_wres = [
            {
                boss_level: 3,
                family: '大ボス',
            },
        ];
        (_j = j.wres) !== null && _j !== void 0 ? _j : (j.wres = []);
        for (const new_wndr of new_wres) {
            if (((_l = (_k = j.wres) === null || _k === void 0 ? void 0 : _k.length) !== null && _l !== void 0 ? _l : 4) > 3)
                break;
            j.wres.push(new_wndr);
        }
        this.__init(j);
    }
    __init(j) {
        super.__init(j);
        return this;
    }
}
exports.C_WndrObjBoss3 = C_WndrObjBoss3;


/***/ }),

/***/ "./src/d_mdl/C_WndrView.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_WndrView.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrView = void 0;
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const C_MazeObjView_1 = __webpack_require__(/*! ./C_MazeObjView */ "./src/d_mdl/C_MazeObjView.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const T_Orientation_1 = __webpack_require__(/*! ./T_Orientation */ "./src/d_mdl/T_Orientation.ts");
class C_WndrView extends C_MazeObjView_1.C_MazeObjView {
    constructor(j) {
        super(j);
        this.clname = 'WndrView';
        this.col_2_arw = null;
        this.col_2_tri = null;
        this.clname = 'WndrView';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        if (j === undefined)
            return this;
        super.__init(j);
        if ((j === null || j === void 0 ? void 0 : j.clname) !== undefined)
            this.clname = j.clname;
        if ((j === null || j === void 0 ? void 0 : j.col_2_arw) !== undefined)
            this.col_2_arw = j.col_2_arw;
        if ((j === null || j === void 0 ? void 0 : j.col_2_tri) !== undefined)
            this.col_2_tri = j.col_2_tri;
        return this;
    }
    free() { }
    letter(dir = 0) {
        switch (dir) {
            case C_PointDir_1.T_Direction.N: return '👆';
            case C_PointDir_1.T_Direction.E: return '👉';
            case C_PointDir_1.T_Direction.S: return '👇';
            case C_PointDir_1.T_Direction.W: return '👈';
            default: return '🌀';
        }
    }
    drow3D_obj_front(frot, back, obje_dir = C_PointDir_1.T_Direction.N, team_dir = C_PointDir_1.T_Direction.N) {
        const rect = super.drow3D_obj_front(frot, back, obje_dir, team_dir);
        if (rect === undefined)
            return undefined;
        return rect;
    }
    _drow3D_textTOP(text, r, fill, line) {
        const size_x = (r.tr.x - r.tl.x);
        const size_y = (r.dl.y - r.tl.y) / 2;
        this._drow3D_text(text, {
            x: r.tl.x + (size_x / 2),
            y: (r.tl.y + 0 * size_y) + (size_y / 2)
        }, (0, F_Math_1._min)([size_x, size_y]), fill, line);
    }
    _drow3D_textBTM(ori, r, fill, line) {
        let text;
        switch (ori) {
            case T_Orientation_1.T_Orientation.F:
                text = '前';
                break;
            case T_Orientation_1.T_Orientation.L:
                text = '左';
                break;
            case T_Orientation_1.T_Orientation.B:
                text = '後';
                break;
            case T_Orientation_1.T_Orientation.R:
                text = '右';
                break;
            default: text = '謎';
        }
        const size_x = (r.tr.x - r.tl.x);
        const size_y = (r.dl.y - r.tl.y) / 3;
        this._drow3D_text(text, {
            x: r.tl.x + (size_x / 2),
            y: (r.tl.y + 2 * size_y) + (size_y / 3)
        }, (0, F_Math_1._min)([size_x, size_y]), fill, line);
    }
    _drow3D_text(ch, pos, max_width, fill, line) {
        const con = C_MazeObjView_1.C_MazeObjView.get_context3D();
        if (con === undefined)
            return;
        const font_size = Math.floor(0.95 * max_width / ch.length);
        con.font = `${font_size}px sans-serif`;
        con.textAlign = 'center';
        con.textBaseline = 'middle';
        if (fill != null) {
            con.fillStyle = fill;
            con.fillText(ch, pos.x, pos.y, max_width);
        }
        if (line !== null) {
            con.strokeStyle = line;
            con.lineWidth = 1;
            con.strokeText(ch, pos.x, pos.y, max_width);
        }
    }
    encode() {
        var _a, _b;
        const j = super.encode();
        j.col_2_arw = (_a = this.col_2_arw) !== null && _a !== void 0 ? _a : null;
        j.col_2_tri = (_b = this.col_2_tri) !== null && _b !== void 0 ? _b : null;
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_WndrView = C_WndrView;


/***/ }),

/***/ "./src/d_mdl/C_WndrView2X.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_WndrView2X.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrView2X = void 0;
const C_MazeObjView2X_1 = __webpack_require__(/*! ./C_MazeObjView2X */ "./src/d_mdl/C_MazeObjView2X.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_WndrView2X extends C_MazeObjView2X_1.C_MazeObjView2X {
    constructor(j) {
        super(j);
        this.clname = 'WndrView';
        this.col_2_arw = null;
        this.col_2_tri = null;
        this.clname = 'WndrView';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        if (j === undefined)
            return this;
        super.__init(j);
        if ((j === null || j === void 0 ? void 0 : j.clname) !== undefined)
            this.clname = j.clname;
        if ((j === null || j === void 0 ? void 0 : j.col_2_arw) !== undefined)
            this.col_2_arw = j.col_2_arw;
        if ((j === null || j === void 0 ? void 0 : j.col_2_tri) !== undefined)
            this.col_2_tri = j.col_2_tri;
        return this;
    }
    free() { }
    letter(dir = 0) {
        switch (dir) {
            case C_PointDir_1.T_Direction.N: return '👆';
            case C_PointDir_1.T_Direction.E: return '👉';
            case C_PointDir_1.T_Direction.S: return '👈';
            case C_PointDir_1.T_Direction.W: return '👇';
            default: return '🌀';
        }
    }
    drow2X(ctx, r, dir = 0) {
        super.drow2X(ctx, r, dir);
        if (ctx === null)
            return;
        switch (dir) {
            case C_PointDir_1.T_Direction.N:
                this._drow2X_arrow(ctx, { x: (r.tl.x + r.tr.x) / 2, y: r.tl.y }, r.dl, r.dr);
                break;
            case C_PointDir_1.T_Direction.E:
                this._drow2X_arrow(ctx, { y: (r.tr.y + r.dr.y) / 2, x: r.tr.x }, r.tl, r.dl);
                break;
            case C_PointDir_1.T_Direction.S:
                this._drow2X_arrow(ctx, { x: (r.dl.x + r.dr.x) / 2, y: r.dl.y }, r.tr, r.tl);
                break;
            case C_PointDir_1.T_Direction.W:
                this._drow2X_arrow(ctx, { y: (r.tl.y + r.dl.y) / 2, x: r.tl.x }, r.dr, r.tr);
                break;
        }
    }
    _drow2X_arrow(ctx, top, left, right) {
        var _a, _b;
        if (ctx === undefined || ctx === null)
            return;
        ctx.beginPath();
        ctx.moveTo(top.x, top.y);
        ctx.lineTo(right.x, right.y);
        ctx.lineTo(left.x, left.y);
        ctx.closePath();
        ctx.fillStyle = (_a = this.col_2_arw) !== null && _a !== void 0 ? _a : "#ff3333";
        ctx.fill();
        ctx.strokeStyle = (_b = this.col_2_tri) !== null && _b !== void 0 ? _b : "#ff9999";
        ctx.lineWidth = 2;
        ctx.stroke();
    }
    encode() {
        var _a, _b;
        const j = super.encode();
        j.col_2_arw = (_a = this.col_2_arw) !== null && _a !== void 0 ? _a : null;
        j.col_2_tri = (_b = this.col_2_tri) !== null && _b !== void 0 ? _b : null;
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_WndrView2X = C_WndrView2X;


/***/ }),

/***/ "./src/d_mdl/C_WndrWalker.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_WndrWalker.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrWalker = void 0;
const C_Walker_1 = __webpack_require__(/*! ./C_Walker */ "./src/d_mdl/C_Walker.ts");
const C_Hope_1 = __webpack_require__(/*! ./C_Hope */ "./src/d_mdl/C_Hope.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_WndrWalker extends C_Walker_1.C_Walker {
    canMove() { return this.cond.canMove; }
    canTurn() { return this.cond.canTurn; }
    canSlid() { return this.cond.canSlid; }
    canUpDn() { return this.cond.canUpDn; }
    canThru() { return this.cond.canThru; }
    careWal() { return this.cond.careWal; }
    constructor(j) {
        super(j);
        this.clname = 'C_WndrWalker';
        this.action = [];
        this.wait = {};
        this.cond = {
            canMove: true,
            canTurn: true,
            canSlid: true,
            canUpDn: false,
            canThru: false,
            careWal: false,
        };
        this.wait = {
            'Wait_': 10,
            'MoveF': 10,
            'MoveB': 10,
            'TurnL': 10,
            'TurnR': 10,
            'SlidF': 10,
            'SlidB': 10,
            'SlidL': 10,
            'SlidR': 10,
            'FlorU': 10,
            'FlorD': 10,
        };
        if (j !== undefined)
            this.__init(j);
    }
    __init(a) {
        var _a, _b, _c, _d, _e, _f, _g;
        super.__init(a);
        if (a === undefined)
            return this;
        if (a.clname !== undefined)
            this.clname = a.clname;
        if (a.cond !== undefined) {
            (_a = this.cond) !== null && _a !== void 0 ? _a : (this.cond = {});
            if (((_b = a.cond) === null || _b === void 0 ? void 0 : _b.canMove) !== undefined)
                this.cond.canMove = a.cond.canMove !== '0' ? true : false;
            if (((_c = a.cond) === null || _c === void 0 ? void 0 : _c.canTurn) !== undefined)
                this.cond.canTurn = a.cond.canTurn !== '0' ? true : false;
            if (((_d = a.cond) === null || _d === void 0 ? void 0 : _d.canSlid) !== undefined)
                this.cond.canSlid = a.cond.canSlid !== '0' ? true : false;
            if (((_e = a.cond) === null || _e === void 0 ? void 0 : _e.canUpDn) !== undefined)
                this.cond.canUpDn = a.cond.canUpDn !== '0' ? true : false;
            if (((_f = a.cond) === null || _f === void 0 ? void 0 : _f.canThru) !== undefined)
                this.cond.canThru = a.cond.canThru !== '0' ? true : false;
            if (((_g = a.cond) === null || _g === void 0 ? void 0 : _g.careWal) !== undefined)
                this.cond.careWal = a.cond.careWal !== '0' ? true : false;
        }
        if (a.loc_pos !== undefined)
            this.set_pd(new C_PointDir_1.C_PointDir(a.loc_pos));
        return this;
    }
    free() { }
    get_mazeObj() {
        return this.mazeObj;
    }
    set_mazeObj(mo) {
        this.mazeObj = mo;
    }
    get_wait() { return Object.assign({}, this.wait); }
    set_wait(wait) { this.wait = Object.assign({}, wait); }
    set_pd(pd) {
        super.set_pd(pd);
        if (this.mazeObj !== undefined)
            this.mazeObj.set_pd(pd);
        return pd;
    }
    wonder() {
        const actions = this.selectable_action();
        if (actions.length <= 0)
            return this._wait();
        let items = [];
        for (const action of actions)
            items.push({ key: action, ratio: this.wait[action] });
        const selected_idx = (0, F_Rand_1._selectItem2)(items);
        const selected = selected_idx !== null && selected_idx !== void 0 ? selected_idx : 'TurnR';
        return this.return_hope_action(selected);
    }
    _wait() {
        return new C_Hope_1.C_HopeAction({});
    }
    selectable_action() {
        let selected = [];
        if (this.cond.canMove) {
            selected.push('MoveF');
            selected.push('MoveB');
        }
        if (this.cond.canTurn) {
            selected.push('TurnL');
            selected.push('TurnR');
        }
        if (this.cond.canSlid) {
            selected.push('SlidF');
            selected.push('SlidB');
            selected.push('SlidL');
            selected.push('SlidR');
        }
        if (this.cond.canUpDn) {
            selected.push('FlorU');
            selected.push('FlorD');
        }
        return selected;
    }
    return_hope_action(action) {
        switch (action) {
            case 'Wait_': return this._wait();
            case 'MoveF': return this.hope_p_fwd();
            case 'MoveB': return this.hope_p_bak();
            case 'TurnL': return this.hope_turn_l();
            case 'TurnR': return this.hope_turn_r();
            case 'SlidF': return this.hope_p_fwd();
            case 'SlidB': return this.hope_p_bak();
            case 'SlidL': return this.hope_p_lft();
            case 'SlidR': return this.hope_p_rgt();
            case 'FlorU': return this.hope_p_up();
            case 'FlorD': return this.hope_p_down();
        }
    }
    encode() {
        const j = super.encode();
        j.clname = this.clname;
        j.cond = {
            canMove: (this.cond.canMove) ? '1' : '0',
            canTurn: (this.cond.canTurn) ? '1' : '0',
            canSlid: (this.cond.canSlid) ? '1' : '0',
            canUpDn: (this.cond.canUpDn) ? '1' : '0',
            canThru: (this.cond.canThru) ? '1' : '0',
            careWal: (this.cond.careWal) ? '1' : '0',
        };
        return j;
    }
    decode(a) {
        return this.__init(a);
    }
}
exports.C_WndrWalker = C_WndrWalker;


/***/ }),

/***/ "./src/d_mdl/F_new_MazeObj.ts":
/*!************************************!*\
  !*** ./src/d_mdl/F_new_MazeObj.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.new_mazeObj = new_mazeObj;
const C_MazeObj_1 = __webpack_require__(/*! ./C_MazeObj */ "./src/d_mdl/C_MazeObj.ts");
const C_MazeObjEtc_1 = __webpack_require__(/*! ./C_MazeObjEtc */ "./src/d_mdl/C_MazeObjEtc.ts");
const C_WndrObj_1 = __webpack_require__(/*! ./C_WndrObj */ "./src/d_mdl/C_WndrObj.ts");
const C_WndrObjBoss_1 = __webpack_require__(/*! ./C_WndrObjBoss */ "./src/d_mdl/C_WndrObjBoss.ts");
function new_mazeObj(j) {
    if (j === undefined)
        return new C_MazeObj_1.C_MazeObj(j);
    switch (j.clname) {
        case 'C_MazeObj': return new C_MazeObj_1.C_MazeObj(j);
        case 'C_WndrObj': return new C_WndrObj_1.C_WndrObj(j);
        case 'C_WndrObjBoss2': return new C_WndrObjBoss_1.C_WndrObjBoss2(j);
        case 'C_WndrObjBoss3': return new C_WndrObjBoss_1.C_WndrObjBoss3(j);
        case 'C_MazeObjShadow': return new C_MazeObjEtc_1.C_MazeObjShadow(j);
        case 'C_MazeObjShogai': return new C_MazeObjEtc_1.C_MazeObjShogai(j);
        default: return new C_MazeObj_1.C_MazeObj(j);
    }
}


/***/ }),

/***/ "./src/d_mdl/F_new_Walker.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/F_new_Walker.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.new_walker = new_walker;
const C_WndrWalker_1 = __webpack_require__(/*! ./C_WndrWalker */ "./src/d_mdl/C_WndrWalker.ts");
function new_walker(j) {
    var _a;
    if (j === undefined)
        return new C_WndrWalker_1.C_WndrWalker(j);
    switch ((_a = j === null || j === void 0 ? void 0 : j.clname) !== null && _a !== void 0 ? _a : '') {
        case C_WndrWalker_1.C_WndrWalker.constructor.name: new C_WndrWalker_1.C_WndrWalker(j);
    }
    return new C_WndrWalker_1.C_WndrWalker(j);
}


/***/ }),

/***/ "./src/d_mdl/T_Direction.ts":
/*!**********************************!*\
  !*** ./src/d_mdl/T_Direction.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DirectionName = exports.T_Direction = void 0;
exports.T_Direction = {
    N: 0,
    E: 1,
    S: 2,
    W: 3,
    X: 99,
    MAX: 3
};
exports.DirectionName = {
    0: '北',
    1: '東',
    2: '南',
    3: '西',
    99: '謎'
};


/***/ }),

/***/ "./src/d_mdl/T_MzKind.ts":
/*!*******************************!*\
  !*** ./src/d_mdl/T_MzKind.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.T_RvMzKind = exports.T_MzKind = void 0;
exports.T_MzKind = {
    NoDef: 0,
    Floor: 1,
    Unexp: 2,
    Stone: 3,
    Unkwn: 4,
    StrUp: 5,
    StrDn: 6,
    StrUD: 7,
    Empty: 255,
};
exports.T_RvMzKind = {
    0: exports.T_MzKind.NoDef,
    1: exports.T_MzKind.Floor,
    2: exports.T_MzKind.Unexp,
    3: exports.T_MzKind.Stone,
    4: exports.T_MzKind.Unkwn,
    5: exports.T_MzKind.StrUp,
    6: exports.T_MzKind.StrDn,
    7: exports.T_MzKind.StrUD,
    255: exports.T_MzKind.Empty,
};


/***/ }),

/***/ "./src/d_mdl/T_Orientation.ts":
/*!************************************!*\
  !*** ./src/d_mdl/T_Orientation.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrientationName = exports.T_Orientation = void 0;
exports.getOrientationName = getOrientationName;
exports.relativeOrientation = relativeOrientation;
exports.relativeOrientationDir = relativeOrientationDir;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
exports.T_Orientation = {
    F: 0,
    L: 1,
    B: 2,
    R: 3,
    X: 99,
    MAX: 3
};
exports.OrientationName = {
    0: '前',
    1: '左',
    2: '後',
    3: '右',
    99: '謎'
};
function getOrientationName(ori) {
    var _a;
    return (_a = exports.OrientationName[ori]) !== null && _a !== void 0 ? _a : '謎';
}
function relativeOrientation(pd, me) {
    return relativeOrientationDir(pd.d, me.d);
}
function relativeOrientationDir(pd_d, me_d) {
    if (me_d === C_PointDir_1.T_Direction.X || pd_d === C_PointDir_1.T_Direction.X)
        return exports.T_Orientation.X;
    switch (pd_d) {
        case C_PointDir_1.T_Direction.N:
            switch (me_d) {
                case C_PointDir_1.T_Direction.N: return exports.T_Orientation.B;
                case C_PointDir_1.T_Direction.E: return exports.T_Orientation.L;
                case C_PointDir_1.T_Direction.S: return exports.T_Orientation.F;
                case C_PointDir_1.T_Direction.W: return exports.T_Orientation.R;
                default: return exports.T_Orientation.X;
            }
        case C_PointDir_1.T_Direction.E:
            switch (me_d) {
                case C_PointDir_1.T_Direction.N: return exports.T_Orientation.R;
                case C_PointDir_1.T_Direction.E: return exports.T_Orientation.B;
                case C_PointDir_1.T_Direction.S: return exports.T_Orientation.L;
                case C_PointDir_1.T_Direction.W: return exports.T_Orientation.F;
                default: return exports.T_Orientation.X;
            }
        case C_PointDir_1.T_Direction.S:
            switch (me_d) {
                case C_PointDir_1.T_Direction.N: return exports.T_Orientation.F;
                case C_PointDir_1.T_Direction.E: return exports.T_Orientation.R;
                case C_PointDir_1.T_Direction.S: return exports.T_Orientation.B;
                case C_PointDir_1.T_Direction.W: return exports.T_Orientation.L;
                default: return exports.T_Orientation.X;
            }
        case C_PointDir_1.T_Direction.W:
            switch (me_d) {
                case C_PointDir_1.T_Direction.N: return exports.T_Orientation.L;
                case C_PointDir_1.T_Direction.E: return exports.T_Orientation.F;
                case C_PointDir_1.T_Direction.S: return exports.T_Orientation.R;
                case C_PointDir_1.T_Direction.W: return exports.T_Orientation.B;
                default: return exports.T_Orientation.X;
            }
        default:
            return exports.T_Orientation.X;
    }
}


/***/ }),

/***/ "./src/d_utl/C_UrlOpt.ts":
/*!*******************************!*\
  !*** ./src/d_utl/C_UrlOpt.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_UrlOpt = void 0;
class C_UrlOpt {
    constructor(a) {
        if (typeof a === "undefined") {
            this.v = {};
            return;
        }
        if (typeof a === "string") {
            this.set_from_string(a);
        }
        if (typeof a === "object") {
            this.v = a;
            return;
        }
        this.v = {};
        return;
    }
    get_keys() {
        const key_list = new Array;
        for (var key in this.v) {
            key_list.push(key);
        }
        return key_list;
    }
    get(key) {
        if (key in this.v) {
            if (typeof this.v[key] === "number") {
                return this.v[key].toString();
            }
            if (typeof this.v[key] === "object") {
                return JSON.stringify(this.v[key]);
            }
            return this.v[key];
        }
        else {
            return "";
        }
    }
    set(ukn, val) {
        if (typeof ukn === "string") {
            if (typeof val === "undefined") {
                this.add_from_string(ukn);
                return;
            }
            else if (typeof val === "string") {
                this.v[ukn] = val;
                return;
            }
            else if (typeof val === "number") {
                this.v[ukn] = val;
                return;
            }
            else if (typeof val === "object") {
                this.v[ukn] = val;
                return;
            }
            else {
                this.v[ukn] = "";
                return;
            }
        }
        if (typeof ukn === "object") {
            const attr = ukn;
            for (const item in attr) {
                this.v[item] = attr[item];
            }
            return;
        }
        return;
    }
    isset(key) {
        return (key in this.v);
    }
    remove(key) {
        if (key in this.v) {
            delete this.v[key];
        }
    }
    clear() {
        this.v = {};
    }
    toString() {
        const len = Object.keys(this.v).length;
        if (len < 1)
            return "";
        var str_array = [];
        for (const key in this.v) {
            str_array.push(key + "=" + this.v[key]);
        }
        return str_array.join("&");
    }
    toJSON() {
        return JSON.stringify(this.v);
    }
    toFormData() {
        const len = Object.keys(this.v).length;
        if (len < 1)
            return undefined;
        var form_data = new FormData();
        for (const key in this.v) {
            const value = this.v[key];
            if (typeof value === "string")
                form_data.append(key, value);
            if (typeof value === "object")
                form_data.append(key, JSON.stringify(value));
            else
                form_data.append(key, value.toString());
        }
        return form_data;
    }
    set_from_string(s) {
        this.clear();
        this.add_from_string(s);
    }
    add_from_string(s) {
        const str = s.replace(/^(\??)(.*)$/, '$2');
        const str_array = str.split("&");
        str_array.forEach((item) => {
            const key_value = item.split("=");
            if (key_value.length < 2) {
                this.v[key_value[0]] = '';
            }
            else {
                this.v[key_value[0]] = key_value[1];
            }
        });
    }
}
exports.C_UrlOpt = C_UrlOpt;


/***/ }),

/***/ "./src/d_utl/F_Math.ts":
/*!*****************************!*\
  !*** ./src/d_utl/F_Math.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._isNum = _isNum;
exports._getNum = _getNum;
exports._round = _round;
exports._ceil = _ceil;
exports._floor = _floor;
exports._min = _min;
exports._max = _max;
function _isNum(numVal) {
    const pattern = /^[-+]?([1-9]\d*|0)(\.\d+)?$/;
    return pattern.test(numVal);
}
function _getNum(numVal) {
    const pattern = /([^0-9])/g;
    const valstr = numVal.replace(pattern, '');
    return Number(valstr);
}
function _round(num, digit) {
    const multiplier = Math.pow(10, digit);
    return Math.round(num * multiplier) / multiplier;
}
function _ceil(num, digit) {
    const multiplier = Math.pow(10, digit);
    return Math.ceil(num * multiplier) / multiplier;
}
function _floor(num, digit) {
    const multiplier = Math.pow(10, digit);
    return Math.floor(num * multiplier) / multiplier;
}
function _min(a) {
    return a.reduce((n1, n2) => Math.min(n1, n2));
}
function _max(a) {
    return a.reduce((n1, n2) => Math.max(n1, n2));
}


/***/ }),

/***/ "./src/d_utl/F_Rand.ts":
/*!*****************************!*\
  !*** ./src/d_utl/F_Rand.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_SeededRand = void 0;
exports._irand = _irand;
exports._igrand = _igrand;
exports._grand = _grand;
exports._inrand = _inrand;
exports._nrand = _nrand;
exports._get_uuid = _get_uuid;
exports._selectItem = _selectItem;
exports._selectItem2 = _selectItem2;
exports._shuffleArray = _shuffleArray;
exports._random_str = _random_str;
exports._random_UpperStr = _random_UpperStr;
exports._random_LowerStr = _random_LowerStr;
exports._random_UpperChar = _random_UpperChar;
exports._random_LowerChar = _random_LowerChar;
exports._random_NumChar = _random_NumChar;
exports._random_Char = _random_Char;
const F_Math_1 = __webpack_require__(/*! ./F_Math */ "./src/d_utl/F_Math.ts");
const frand = () => { return Math.random(); };
function _irand(min = 0, max = 1, rand = frand) {
    const f_rand = Math.floor(rand() * (max - min + 1) + min);
    return (0, F_Math_1._round)(f_rand, 0);
}
function _igrand(min = 0, max = 1, rand = frand) {
    return _irand(min, max, () => { return _grand(0, 1, rand); });
}
function _grand(min = 0, max = 1, rand = frand) {
    return Math.floor(___gaussianRand(rand) * (max - min + 1) + min);
}
function ___gaussianRand(rand = frand) {
    let sum = 0;
    for (let i = 0; i < 6; i += 1) {
        sum += rand();
    }
    return sum / 6;
}
function _inrand(min = 0, max = 1, dd = 3.0, rand = frand) {
    return Math.floor(_nrand(min, max, dd, rand));
}
function _nrand(min = 0.0, max = 1.0, dd = 3.0, rand = frand) {
    const ave = 0.5;
    const a = rand();
    const b = rand();
    let x = ave + _fab(a, b) / (2.0 * dd);
    x = min + x * (max - min);
    x = (0, F_Math_1._max)([min, x]);
    x = (0, F_Math_1._min)([max, x]);
    return x;
}
function _fab(a, b) {
    return Math.sqrt(-2.0 * Math.log(a)) * Math.sin(2.0 * Math.PI * b);
}
function _gab(a, b) {
    return Math.sqrt(-2.0 * Math.log(a)) * Math.cos(2.0 * Math.PI * b);
}
class C_SeededRand {
    constructor(seed) {
        this.seed = seed;
        this.first_seed = seed;
    }
    reset() {
        this.seed = this.first_seed;
    }
    random() {
        this.seed = (this.seed * 9301 + 49297) % 233280;
        return this.seed / 233280.0;
    }
}
exports.C_SeededRand = C_SeededRand;
function _get_uuid(len = 20, rand = frand) {
    const lft = (new Date()).getTime().toString(16);
    const rgt_len = (0, F_Math_1._max)([len - lft.length, 1]);
    const rgt = Math.floor(Math.pow(10, rgt_len) * rand()).toString(16);
    return lft + rgt;
}
function _selectItem(items, rand = frand) {
    var ttl = 0;
    for (let item of items)
        ttl += item.ratio;
    const target = _irand(0, ttl, rand);
    var sum = 0;
    for (const item of items) {
        sum += item.ratio;
        if (target < sum) {
            return item;
        }
    }
    return undefined;
}
function _selectItem2(items, rand = frand) {
    var ttl = 0;
    for (let item of items)
        ttl += item.ratio;
    const target = _irand(0, ttl);
    var sum = 0;
    for (const item of items) {
        sum += item.ratio;
        if (target < sum) {
            return item.key;
        }
    }
    ;
    return items[items.length - 1].key;
}
function _shuffleArray(array, rand = frand) {
    let shuffledArray = [...array];
    for (let i = shuffledArray.length - 1; i > 0; i--) {
        const j = _irand(0, i, rand);
        [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];
    }
    return shuffledArray;
}
function _random_str(length) {
    let str = '';
    for (let i = 0; i < length; i++)
        str += _random_Char();
    return str;
}
function _random_UpperStr(length) {
    let str = '';
    for (let i = 0; i < length; i++)
        str += _random_UpperChar();
    return str;
}
function _random_LowerStr(length) {
    let str = '';
    for (let i = 0; i < length; i++)
        str += _random_LowerChar();
    return str;
}
function _random_UpperChar() {
    const val = _irand(0, 26);
    return String.fromCharCode(65 + val);
}
function _random_LowerChar() {
    const val = _irand(0, 26);
    return String.fromCharCode(95 + val);
}
function _random_NumChar() {
    const val = _irand(0, 9);
    return String.fromCharCode(48 + val);
}
function _random_Char() {
    const val = _irand(0, 61);
    if (val < 26)
        return String.fromCharCode(65 + val);
    if (val < 52)
        return String.fromCharCode(97 + val - 26);
    return String.fromCharCode(48 + val - 52);
}


/***/ }),

/***/ "./src/d_vie/C_DisplayMessage.ts":
/*!***************************************!*\
  !*** ./src/d_vie/C_DisplayMessage.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_DisplayMessage = void 0;
class C_DisplayMessage {
    constructor(con, id = 'client_message') {
        C_DisplayMessage.me = this;
        this.id = id;
        this.div = document.createElement('div');
        if (this.div === null)
            alert('Can not founnd Div#client_message!');
        this.div.setAttribute('id', this.id);
        con.insertBefore(this.div, con.firstChild);
        C_DisplayMessage.me.clear_message();
    }
    static getObj(con = null, id = 'client_message') {
        if (typeof this.me !== "object" || !(this.me instanceof C_DisplayMessage)) {
            if (con === null) {
                con = document.createElement('div');
                document.body.appendChild(con);
            }
            this.me = new C_DisplayMessage(con, id);
        }
        return this.me;
    }
    display_message(mes, fr_color = 'inherit', bg_color = 'inherit') {
        const p = document.createElement('p');
        p.style.setProperty('color', fr_color);
        p.style.setProperty('background-color', bg_color);
        p.innerHTML = mes;
        this.div.insertBefore(p, this.div.firstChild);
    }
    clear_message() {
        while (this.div.firstChild) {
            this.div.removeChild(this.div.firstChild);
        }
        ;
    }
    normal_message(mes) {
        this.display_message(mes);
    }
    notice_message(mes) {
        this.display_message(mes, '#006600', '#ccffcc');
    }
    warning_message(mes) {
        this.display_message(mes, '#ffffff', '#ff0000');
    }
}
exports.C_DisplayMessage = C_DisplayMessage;


/***/ }),

/***/ "./src/d_vie/C_OneLineViewMessage.ts":
/*!*******************************************!*\
  !*** ./src/d_vie/C_OneLineViewMessage.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_OneLineViewMessage = void 0;
class C_OneLineViewMessage {
    constructor(id, parent) {
        var _a;
        (_a = C_OneLineViewMessage.me) !== null && _a !== void 0 ? _a : (C_OneLineViewMessage.me = {});
        C_OneLineViewMessage.me[id] = this;
        try {
            this.p = document.getElementById(id);
        }
        catch (err) {
            this.p = document.createElement('p');
            this.p.id = id;
            parent !== null && parent !== void 0 ? parent : (parent = document.body);
            parent.appendChild(this.p);
        }
        C_OneLineViewMessage.me[id].clear_message();
    }
    static getObj(id, parent) {
        var _a, _b;
        var _c;
        (_a = C_OneLineViewMessage.me) !== null && _a !== void 0 ? _a : (C_OneLineViewMessage.me = {});
        (_b = (_c = this.me)[id]) !== null && _b !== void 0 ? _b : (_c[id] = new C_OneLineViewMessage(id, parent));
        return this.me[id];
    }
    display_message(mes, fr_color = 'inherit', bg_color = 'inherit') {
        this.p.style.setProperty('color', fr_color);
        this.p.style.setProperty('background-color', bg_color);
        this.p.innerHTML = mes;
    }
    clear_message() {
        this.display_message('　');
    }
    normal_message(mes) {
        this.display_message(mes);
    }
    notice_message(mes) {
        this.display_message(mes, '#006600', '#ccffcc');
    }
    warning_message(mes) {
        this.display_message(mes, '#ffffff', '#ff0000');
    }
}
exports.C_OneLineViewMessage = C_OneLineViewMessage;


/***/ }),

/***/ "./src/mai_maze/C_DefaultCtls.ts":
/*!***************************************!*\
  !*** ./src/mai_maze/C_DefaultCtls.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_DefaultCtls = void 0;
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
const F_set_move_mode_1 = __webpack_require__(/*! ./F_set_move_mode */ "./src/mai_maze/F_set_move_mode.ts");
class C_DefaultCtls {
    constructor() {
        this.ctls = {};
        this.flgs = {};
        this.u_arr = document.getElementById('u_arr');
        this.d_arr = document.getElementById('d_arr');
        this.l_arr = document.getElementById('l_arr');
        this.r_arr = document.getElementById('r_arr');
        this.y_btn = document.getElementById('y_btn');
        this.n_btn = document.getElementById('n_btn');
        this.s_btn = document.getElementById('s_btn');
        this.r_btn = document.getElementById('r_btn');
        this.m_btn = document.getElementById('m_btn');
        this.y_cp1 = document.getElementById('y_cp1');
        this.n_cp1 = document.getElementById('n_cp1');
        this.s_cp1 = document.getElementById('s_cp1');
        this.r_cp1 = document.getElementById('r_cp1');
        this.u_arr.style.display = 'none';
        this.d_arr.style.display = 'none';
        this.l_arr.style.display = 'none';
        this.r_arr.style.display = 'none';
        this.y_btn.style.display = 'none';
        this.n_btn.style.display = 'none';
        this.s_btn.style.display = 'none';
        this.r_btn.style.display = 'none';
        this.m_btn.style.display = 'none';
        this.y_cp1.style.display = 'none';
        this.n_cp1.style.display = 'none';
        this.s_cp1.style.display = 'none';
        this.r_cp1.style.display = 'none';
    }
    static getObj() {
        var _a;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = new C_DefaultCtls());
        return this.me;
    }
    clr() {
        this.ctls = {};
        this.flgs = {};
        return true;
    }
    set(name, ctls) {
        try {
            if (typeof name === 'string' && ctls !== undefined) {
                this.ctls[name] = ctls;
                this.flgs[name] = false;
            }
            else {
                const c = name;
                this.ctls[c.name] = c;
                this.flgs[c.name] = false;
            }
            return true;
        }
        catch (err) {
            return false;
        }
    }
    rmv(ctls) {
        try {
            const name = typeof ctls === 'string' ? ctls : ctls.name;
            delete this.ctls[name];
            delete this.flgs[name];
            return true;
        }
        catch (err) {
            return false;
        }
    }
    deact() {
        for (const ii in this.ctls) {
            if (this.ctls[ii].name === undefined)
                continue;
            if (!this._rmv_default_ctls(this.ctls[ii].name))
                return false;
        }
        return true;
    }
    act(ctls) {
        try {
            if (!this.deact())
                return false;
            const name = typeof ctls === 'string' ? ctls : ctls.name;
            return this._add_default_ctls(name);
        }
        catch (err) {
            return false;
        }
    }
    is_act(ctls) {
        var _a;
        try {
            const name = typeof ctls === 'string' ? ctls : ctls.name;
            return (_a = this.flgs[name]) !== null && _a !== void 0 ? _a : false;
        }
        catch (err) {
            return false;
        }
    }
    keys_of_add() {
        const key_list = [];
        for (const name in this.ctls)
            key_list.push(name);
        return key_list;
    }
    keys_of_act() {
        const key_list = [];
        for (const name in this.flgs)
            if (this.flgs[name])
                key_list.push(name);
        return key_list;
    }
    _rmv_default_ctls(name) {
        var _a;
        var _b;
        (_a = (_b = this.flgs)[name]) !== null && _a !== void 0 ? _a : (_b[name] = false);
        if (!this.flgs[name])
            return true;
        this.flgs[name] = false;
        const c = this.ctls[name];
        try {
            if (_c(c === null || c === void 0 ? void 0 : c.do_U))
                this.u_arr.removeEventListener("click", c.do_U, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_D))
                this.d_arr.removeEventListener("click", c.do_D, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_L))
                this.l_arr.removeEventListener("click", c.do_L, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_R))
                this.r_arr.removeEventListener("click", c.do_R, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isOK))
                this.y_btn.removeEventListener("click", c.isOK, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isNG))
                this.n_btn.removeEventListener("click", c.isNG, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isSL))
                this.s_btn.removeEventListener("click", c.isSL, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isRT))
                this.r_btn.removeEventListener("click", c.isRT, false);
            if (_c(c === null || c === void 0 ? void 0 : c.menu))
                this.m_btn.removeEventListener("click", c.menu, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpOK))
                this.y_cp1.removeEventListener("click", c.cpOK, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpNG))
                this.n_cp1.removeEventListener("click", c.cpNG, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpSL))
                this.s_cp1.removeEventListener("click", c.cpSL, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpRT))
                this.r_cp1.removeEventListener("click", c.cpRT, false);
            if ((c === null || c === void 0 ? void 0 : c.keyEvent) !== undefined) {
                window.removeEventListener('keydown', c.keyEvent);
            }
            else {
                window.removeEventListener('keydown', key_press_function);
            }
            this.u_arr.style.display = 'none';
            this.d_arr.style.display = 'none';
            this.l_arr.style.display = 'none';
            this.r_arr.style.display = 'none';
            this.y_btn.style.display = 'none';
            this.n_btn.style.display = 'none';
            this.s_btn.style.display = 'none';
            this.r_btn.style.display = 'none';
            this.m_btn.style.display = 'none';
            this.y_cp1.style.display = 'none';
            this.n_cp1.style.display = 'none';
            this.s_cp1.style.display = 'none';
            this.r_cp1.style.display = 'none';
        }
        catch (err) {
            alert('Error Occuerd at Remove Default Ctls.');
            alert('' + err);
            return false;
        }
        return true;
    }
    _add_default_ctls(name) {
        var _a;
        var _b;
        (_a = (_b = this.flgs)[name]) !== null && _a !== void 0 ? _a : (_b[name] = false);
        if (this.flgs[name])
            return true;
        this.flgs[name] = true;
        const c = this.ctls[name];
        try {
            if (_c(c === null || c === void 0 ? void 0 : c.do_U))
                this.u_arr.addEventListener("click", c.do_U, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_D))
                this.d_arr.addEventListener("click", c.do_D, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_L))
                this.l_arr.addEventListener("click", c.do_L, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_R))
                this.r_arr.addEventListener("click", c.do_R, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isOK))
                this.y_btn.addEventListener("click", c.isOK, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isNG))
                this.n_btn.addEventListener("click", c.isNG, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isSL))
                this.s_btn.addEventListener("click", c.isSL, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isRT))
                this.r_btn.addEventListener("click", c.isRT, false);
            if (_c(c === null || c === void 0 ? void 0 : c.menu))
                this.m_btn.addEventListener("click", c.menu, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpOK))
                this.y_cp1.addEventListener("click", c.cpOK, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpNG))
                this.n_cp1.addEventListener("click", c.cpNG, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpSL))
                this.s_cp1.addEventListener("click", c.cpSL, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpRT))
                this.r_cp1.addEventListener("click", c.cpRT, false);
            if ((c === null || c === void 0 ? void 0 : c.keyEvent) !== undefined) {
                window.addEventListener('keydown', c.keyEvent);
            }
            else {
                window.addEventListener('keydown', key_press_function);
            }
            this.u_arr.style.display = _c(c === null || c === void 0 ? void 0 : c.do_U) ? 'block' : 'none';
            this.d_arr.style.display = _c(c === null || c === void 0 ? void 0 : c.do_D) ? 'block' : 'none';
            this.l_arr.style.display = _c(c === null || c === void 0 ? void 0 : c.do_L) ? 'block' : 'none';
            this.r_arr.style.display = _c(c === null || c === void 0 ? void 0 : c.do_R) ? 'block' : 'none';
            this.y_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.isOK) ? 'block' : 'none';
            this.n_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.isNG) ? 'block' : 'none';
            this.s_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.isSL) ? 'block' : 'none';
            this.r_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.isRT) ? 'block' : 'none';
            this.m_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.menu) ? 'block' : 'none';
            this.y_cp1.style.display = _c(c === null || c === void 0 ? void 0 : c.cpOK) ? 'block' : 'none';
            this.n_cp1.style.display = _c(c === null || c === void 0 ? void 0 : c.cpNG) ? 'block' : 'none';
            this.s_cp1.style.display = _c(c === null || c === void 0 ? void 0 : c.cpSL) ? 'block' : 'none';
            this.r_cp1.style.display = _c(c === null || c === void 0 ? void 0 : c.cpRT) ? 'block' : 'none';
        }
        catch (err) {
            alert('Error Occuerd at Append Default Ctls.');
            alert('' + err);
            return false;
        }
        return true;
    }
}
exports.C_DefaultCtls = C_DefaultCtls;
function _c(c) {
    if (c === undefined)
        return false;
    if (c === null)
        return false;
    return true;
}
function key_press_function(e) {
    var _a, _b, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
    const ne = ((_a = e.target) === null || _a === void 0 ? void 0 : _a.value) === undefined;
    switch (e.code) {
        case 'ArrowUp':
        case 'Numpad5':
            e.preventDefault();
            (_b = document.getElementById('u_arr')) === null || _b === void 0 ? void 0 : _b.click();
            break;
        case 'KeyK':
            if (ne)
                (_d = document.getElementById('u_arr')) === null || _d === void 0 ? void 0 : _d.click();
            break;
        case 'ArrowDown':
            e.preventDefault();
            (_e = document.getElementById('d_arr')) === null || _e === void 0 ? void 0 : _e.click();
            break;
        case 'Numpad2':
        case 'KeyJ':
            (_f = document.getElementById('d_arr')) === null || _f === void 0 ? void 0 : _f.click();
            break;
        case 'Semicolon':
            if (!ne)
                break;
            if (global_1.g_debug.isON()) {
                (0, F_set_move_mode_1.do_instant_load)();
            }
        case 'KeyL':
            (_g = document.getElementById('r_arr')) === null || _g === void 0 ? void 0 : _g.click();
            break;
        case 'ArrowLeft':
        case 'Numpad1':
            e.preventDefault();
            (_h = document.getElementById('l_arr')) === null || _h === void 0 ? void 0 : _h.click();
            break;
        case 'KeyH':
            if (ne)
                (_j = document.getElementById('l_arr')) === null || _j === void 0 ? void 0 : _j.click();
            break;
        case 'ArrowRight':
        case 'Numpad3':
            e.preventDefault();
            (_k = document.getElementById('r_arr')) === null || _k === void 0 ? void 0 : _k.click();
            break;
        case 'Enter':
        case 'NumpadEnter':
        case 'F10':
            e.preventDefault();
            if (e.shiftKey)
                (_l = document.getElementById('n_btn')) === null || _l === void 0 ? void 0 : _l.click();
            else
                (_m = document.getElementById('y_btn')) === null || _m === void 0 ? void 0 : _m.click();
            break;
        case 'KeyY':
        case 'KeyP':
        case 'Digit0':
            if (ne)
                (_o = document.getElementById('y_btn')) === null || _o === void 0 ? void 0 : _o.click();
            break;
        case 'F1':
        case 'Numpad0':
        case 'NumpadAdd':
            e.preventDefault();
            (_p = document.getElementById('n_btn')) === null || _p === void 0 ? void 0 : _p.click();
            break;
        case 'KeyN':
        case 'KeyI':
        case 'Digit8':
            if (ne)
                (_q = document.getElementById('n_btn')) === null || _q === void 0 ? void 0 : _q.click();
            break;
        case 'KeyU':
            if (!ne)
                break;
            if (global_1.g_debug.isON()) {
                const z = global_for_maze_1.g_team.getWalker().get_z();
                if (z > 0)
                    global_for_maze_1.g_team.getWalker().set_z(z - 1);
                (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
            }
            break;
        case 'KeyD':
            if (!ne)
                break;
            if (global_1.g_debug.isON()) {
                const z = global_for_maze_1.g_team.getWalker().get_z();
                if (z < global_for_maze_1.g_maze.get_z_max() - 1)
                    global_for_maze_1.g_team.getWalker().set_z(z + 1);
                (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
            }
            break;
        case 'KeyM':
        case 'Numpad7':
            if (ne)
                (_r = document.getElementById('m_btn')) === null || _r === void 0 ? void 0 : _r.click();
            break;
        case 'F7':
            e.preventDefault();
            (_s = document.getElementById('s_btn')) === null || _s === void 0 ? void 0 : _s.click();
            break;
        case 'Comma':
            if (ne)
                (_t = document.getElementById('s_btn')) === null || _t === void 0 ? void 0 : _t.click();
            break;
        case 'KeyS':
            if (!ne)
                break;
            if (global_1.g_debug.isON()) {
                (0, F_set_move_mode_1.do_instant_save)();
                (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
            }
            else {
                (_u = document.getElementById('s_btn')) === null || _u === void 0 ? void 0 : _u.click();
            }
            break;
        case 'F3':
        case 'Numpad8':
            e.preventDefault();
            (_v = document.getElementById('r_btn')) === null || _v === void 0 ? void 0 : _v.click();
            break;
        case 'KeyR':
        case 'Period':
            if (ne)
                (_w = document.getElementById('r_btn')) === null || _w === void 0 ? void 0 : _w.click();
            break;
    }
}


/***/ }),

/***/ "./src/mai_maze/C_DrowMap2X.ts":
/*!*************************************!*\
  !*** ./src/mai_maze/C_DrowMap2X.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_DrowMap2M = exports.C_DrowMap2D = exports.C_DrowMap2X = void 0;
const C_MazeObjView2X_1 = __webpack_require__(/*! ../d_mdl/C_MazeObjView2X */ "./src/d_mdl/C_MazeObjView2X.ts");
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
class C_DrowMap2X {
    static getObj(a) {
        var _a;
        (_a = C_DrowMap2X.me) !== null && _a !== void 0 ? _a : (C_DrowMap2X.me = {});
        if (C_DrowMap2X.me[a.canvas_id] === undefined) {
            switch (a.canvas_id) {
                case 'maze_view2D_canvas':
                    C_DrowMap2X.me[a.canvas_id] = new C_DrowMap2D(a);
                    break;
                case 'maze_view2M_canvas':
                    C_DrowMap2X.me[a.canvas_id] = new C_DrowMap2M(a);
                    break;
                default:
                    C_DrowMap2X.me[a.canvas_id] = new C_DrowMap2X(a);
                    break;
            }
        }
        return C_DrowMap2X.me[a.canvas_id];
    }
    constructor(a) {
        this.cell_masks = C_MazeObjView2X_1.C_MazeObjView2X.newObj({
            layer: 0, letter: 'Ｘ',
            show3D: '1',
            col_2: '#333333', col_L: '#6666ff',
        });
        this.div = null;
        this.cvs = null;
        this.ctx = null;
        this.px_size_x = 0;
        this.px_size_y = 0;
        this.px_min_x = 3;
        this.px_min_y = 3;
        this.view_wdth = 0;
        this.view_hght = 0;
        this.map_wdth = 0;
        this.map_hght = 0;
        this.init(a);
    }
    init(a) {
        this.div = document.getElementById(a.div_id);
        if (this.div === null)
            return;
        this.cvs = document.getElementById(a.canvas_id);
        if (this.cvs === null)
            return;
        this.ctx = this.cvs.getContext('2d');
        if (this.ctx === null)
            return;
        this.set_xy({ x_min: a.x_min, y_min: a.y_min });
    }
    set_xy(a) {
        if (a.x_min < 3 || a.y_min < 3)
            return;
        if (this.div === null || this.cvs === null)
            return;
        this.px_min_x = a.x_min;
        this.px_min_y = a.y_min;
        this._calc_map_size();
    }
    _calc_map_size() {
        if (this.div === null || this.cvs === null)
            return;
        this.view_wdth = this.div.clientWidth;
        this.view_hght = this.div.clientHeight;
        const col = global_for_maze_1.g_maze.get_x_max() + 0;
        const row = global_for_maze_1.g_maze.get_y_max() + 0;
        const col_px = this.cvs.width / col;
        const row_px = this.cvs.height / row;
        this.px_size_x = (0, F_Math_1._max)([this.px_min_x, (0, F_Math_1._round)(1.00 * (0, F_Math_1._min)([col_px, row_px]), 2)]);
        this.px_size_y = (0, F_Math_1._max)([this.px_min_y, (0, F_Math_1._round)(1.00 * (0, F_Math_1._min)([col_px, row_px]), 2)]);
        this.map_wdth = this.px_size_x * (0, F_Math_1._min)([col, row]);
        this.map_hght = this.px_size_y * (0, F_Math_1._min)([col, row]);
        if (this.map_wdth < this.view_wdth) {
            this.map_wdth = this.view_wdth;
            this.px_size_x = (0, F_Math_1._round)(this.view_wdth / col, 0);
        }
        if (this.map_hght < this.view_hght) {
            this.map_hght = this.view_hght;
            this.px_size_y = (0, F_Math_1._round)(this.view_hght / row, 0);
        }
        this.cvs.setAttribute('width', this.map_wdth.toString());
        this.cvs.setAttribute('height', this.map_hght.toString());
    }
    drow_map2X() {
        if (this.cvs !== null) {
            this._to_2X();
            this._calc_map_top();
        }
        ;
    }
    _calc_map_top() {
        var _a, _b, _c, _d, _e, _f;
        const pd = global_for_maze_1.g_team.get_pd();
        this.view_wdth = (_b = (_a = this.div) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : 0;
        this.view_hght = (_d = (_c = this.div) === null || _c === void 0 ? void 0 : _c.clientHeight) !== null && _d !== void 0 ? _d : 0;
        let top_x = this.view_wdth / 2 - pd.x * this.px_size_x;
        if (top_x > 0)
            top_x = 0;
        if (top_x < this.view_wdth - this.map_wdth)
            top_x = this.view_wdth - this.map_wdth;
        let top_y = this.view_hght / 2 - pd.y * this.px_size_y;
        if (top_y > 0)
            top_y = 0;
        if (top_y < this.view_hght - this.map_hght)
            top_y = this.view_hght - this.map_hght;
        (_e = this.cvs) === null || _e === void 0 ? void 0 : _e.style.setProperty('left', `${top_x}px`);
        (_f = this.cvs) === null || _f === void 0 ? void 0 : _f.style.setProperty('top', `${top_y}px`);
    }
    _to_2X() {
        var _a, _b, _c, _d, _e;
        const size_x = global_for_maze_1.g_maze.get_x_max();
        const size_y = global_for_maze_1.g_maze.get_y_max();
        const pd = global_for_maze_1.g_team.get_pd();
        const floor = pd.z;
        for (let y = 0; y < size_y; y++) {
            for (let x = 0; x < size_x; x++) {
                let rect_2d = {
                    tl: { x: (x) * this.px_size_x, y: (y) * this.px_size_y },
                    tr: { x: (x + 1) * this.px_size_x, y: (y) * this.px_size_y },
                    dl: { x: (x) * this.px_size_x, y: (y + 1) * this.px_size_y },
                    dr: { x: (x + 1) * this.px_size_x, y: (y + 1) * this.px_size_y },
                };
                if (!global_1.g_debug.isON() && global_for_maze_1.g_maze.is_masked_xyz(x, y, floor)) {
                    if (this.ctx !== null)
                        this.cell_masks.drow2X(this.ctx, rect_2d, 0);
                }
                else {
                    const flr_obj = (_a = global_for_maze_1.g_maze.get_cell_xyz(x, y, floor)) === null || _a === void 0 ? void 0 : _a.getObj();
                    (_b = flr_obj === null || flr_obj === void 0 ? void 0 : flr_obj.view2D()) === null || _b === void 0 ? void 0 : _b.drow2X(this.ctx, rect_2d, 0);
                    (_c = flr_obj === null || flr_obj === void 0 ? void 0 : flr_obj.view2M()) === null || _c === void 0 ? void 0 : _c.drow2X(this.ctx, rect_2d, 0);
                    const obj_cell = global_for_maze_1.g_maze.get_obj_xyz(x, y, floor);
                    if (obj_cell !== undefined) {
                        (_d = this.obje_view2X(obj_cell)) === null || _d === void 0 ? void 0 : _d.drow2X(this.ctx, rect_2d, (_e = obj_cell === null || obj_cell === void 0 ? void 0 : obj_cell.get_pd().d) !== null && _e !== void 0 ? _e : 0);
                    }
                }
            }
        }
        return;
    }
    obje_view2X(obj_cell) {
        return undefined;
    }
}
exports.C_DrowMap2X = C_DrowMap2X;
C_DrowMap2X.me = undefined;
class C_DrowMap2D extends C_DrowMap2X {
    constructor(a = {
        div_id: 'div_maze_vw2D',
        canvas_id: 'maze_view2D_canvas',
        x_min: 15,
        y_min: 15,
    }) {
        super(a);
    }
    obje_view2X(obj_cell) {
        return obj_cell === null || obj_cell === void 0 ? void 0 : obj_cell.view2D();
    }
}
exports.C_DrowMap2D = C_DrowMap2D;
class C_DrowMap2M extends C_DrowMap2X {
    constructor(a = {
        div_id: 'div_maze_vw2M',
        canvas_id: 'maze_view2M_canvas',
        x_min: 5,
        y_min: 5,
    }) {
        super(a);
    }
    obje_view2X(obj_cell) {
        return obj_cell === null || obj_cell === void 0 ? void 0 : obj_cell.view2M();
    }
}
exports.C_DrowMap2M = C_DrowMap2M;


/***/ }),

/***/ "./src/mai_maze/C_HresInfo.ts":
/*!************************************!*\
  !*** ./src/mai_maze/C_HresInfo.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_HresInfo = void 0;
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
const max_hres = 4;
class C_HresInfo {
    constructor() {
        this.elm = null;
        this.myHres = [];
        this.tbody = null;
        this.hres = undefined;
        this.rows = undefined;
        this.init();
    }
    init() {
        this.rows = [];
        this._init_rows();
    }
    _init_rows() {
        for (let idx = 0; idx < max_hres; idx++)
            this._init_a_row(idx);
    }
    _init_a_row(idx) {
        if (this.rows === undefined || this.rows.length < 0)
            return;
        this._init_a_col(idx, "name");
        this._init_a_col(idx, "stat");
        this._init_a_col(idx, "hpCh");
        this._init_a_col(idx, "mpCh");
    }
    _init_a_col(idx, key) {
        var _a;
        var _b;
        if (this.rows === undefined || this.rows.length < 0)
            return;
        (_a = (_b = this.rows)[idx]) !== null && _a !== void 0 ? _a : (_b[idx] = {});
        this.rows[idx][key]
            = document.getElementById(`div_hres_info_tr${idx.toString()}_${key}`);
    }
    update() {
        this._init_hres();
        this._hres_to_rows();
    }
    _init_hres() {
        this.hres = [];
        let idx = 0;
        for (let idx = 0; idx < max_hres; idx++) {
            this._init_a_hero(idx);
        }
    }
    _init_a_hero(idx) {
        if (global_for_maze_1.g_hres[idx] === undefined)
            return;
        if (this.hres === undefined || this.hres.length < 0)
            return;
        this.hres[idx] = {};
        if (idx < global_for_maze_1.g_hres.length) {
            this.hres[idx].name = global_for_maze_1.g_hres[idx].name();
            this.hres[idx].stat = global_for_maze_1.g_hres[idx].is_alive() ? '　正常　' : '行動不能';
            this.hres[idx].nwHp = global_for_maze_1.g_hres[idx].get_abi_p_now("xp") - global_for_maze_1.g_hres[idx].get_abi_p_now("xd");
            this.hres[idx].mxHp = global_for_maze_1.g_hres[idx].get_abi_p_now("xp");
            this.hres[idx].nwMp = global_for_maze_1.g_hres[idx].get_abi_m_now("xp") - global_for_maze_1.g_hres[idx].get_abi_m_now("xd");
            this.hres[idx].mxMp = global_for_maze_1.g_hres[idx].get_abi_m_now("xp");
        }
        else {
            this.hres[idx] = undefined;
        }
    }
    _hres_to_rows() {
        for (let idx = 0; idx < max_hres; idx++)
            this._hero_to_a_row(idx);
    }
    _hero_to_a_row(idx) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        if (this.rows === undefined || this.rows.length < 0)
            return;
        if (((_a = this.rows[idx]) === null || _a === void 0 ? void 0 : _a.name) === undefined)
            return;
        if (((_b = this.rows[idx]) === null || _b === void 0 ? void 0 : _b.stat) === undefined)
            return;
        if (((_c = this.rows[idx]) === null || _c === void 0 ? void 0 : _c.hpCh) === undefined)
            return;
        if (((_d = this.rows[idx]) === null || _d === void 0 ? void 0 : _d.mpCh) === undefined)
            return;
        if (this.rows[idx].name === null)
            return;
        if (this.rows[idx].stat === null)
            return;
        if (this.rows[idx].hpCh === null)
            return;
        if (this.rows[idx].mpCh === null)
            return;
        if (this.hres !== undefined && this.hres[idx] !== undefined) {
            this.rows[idx].name.innerHTML = (_e = this.hres[idx].name) !== null && _e !== void 0 ? _e : '';
            this.rows[idx].stat.innerHTML = (_f = this.hres[idx].stat) !== null && _f !== void 0 ? _f : '';
            this.rows[idx].hpCh.innerHTML = 'HP：'
                + ((_h = (_g = this.hres[idx].nwHp) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : '???')
                + ' / '
                + ((_k = (_j = this.hres[idx].mxHp) === null || _j === void 0 ? void 0 : _j.toString()) !== null && _k !== void 0 ? _k : '???');
            this.rows[idx].mpCh.innerHTML = 'MP：'
                + ((_m = (_l = this.hres[idx].nwMp) === null || _l === void 0 ? void 0 : _l.toString()) !== null && _m !== void 0 ? _m : '???')
                + ' / '
                + ((_p = (_o = this.hres[idx].mxMp) === null || _o === void 0 ? void 0 : _o.toString()) !== null && _p !== void 0 ? _p : '???');
        }
        else {
            this.rows[idx].name.innerHTML = '';
            this.rows[idx].stat.innerHTML = '';
            this.rows[idx].hpCh.innerHTML = '';
            this.rows[idx].mpCh.innerHTML = '';
        }
    }
}
exports.C_HresInfo = C_HresInfo;


/***/ }),

/***/ "./src/mai_maze/C_SwitchView.ts":
/*!**************************************!*\
  !*** ./src/mai_maze/C_SwitchView.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_SwitchView = exports.T_ViewMode = void 0;
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
exports.T_ViewMode = {
    Move: 'move',
    Batt: 'batt',
    Menu: 'menu',
    LdSv: 'ldsv',
    Bttl: 'bttl',
};
class C_SwitchView {
    Move() { return exports.T_ViewMode.Move; }
    Batt() { return exports.T_ViewMode.Batt; }
    Menu() { return exports.T_ViewMode.Menu; }
    MvPt() { return exports.T_ViewMode.Menu; }
    LdSv() { return exports.T_ViewMode.LdSv; }
    Bttl() { return exports.T_ViewMode.Bttl; }
    constructor() {
        C_SwitchView.all_class = Object.values(exports.T_ViewMode);
        C_SwitchView.article = {};
        try {
            C_SwitchView.body = document.body;
            C_SwitchView.article.view3d = document.getElementById('pane_maze_vw3D');
            C_SwitchView.article.view2d = document.getElementById('pane_maze_vw2D');
            C_SwitchView.article.view2m = document.getElementById('pane_maze_vw2m');
            C_SwitchView.article.menu_l = document.getElementById('pane_menu_list');
            C_SwitchView.article.ldsv_l = document.getElementById('pane_ldsv_list');
            C_SwitchView.article.ldsv_d = document.getElementById('pane_ldsv_data');
            C_SwitchView.article.bttl_s = document.getElementById('pane_bttl_scrn');
            C_SwitchView.article.bttl_m = document.getElementById('pane_bttl_mesg');
            C_SwitchView.article.menu_m = document.getElementById('pane_menu_mesg');
            C_SwitchView.article.game_m = document.getElementById('pane_maze_mesg');
            C_SwitchView.article.contls = document.getElementById('pane_ctls_boad');
            C_SwitchView.article.messag = document.getElementById('pane_sytm_mesg');
        }
        catch (err) {
            (0, global_1._alert)('Layout Get Error: ' + err);
        }
        this.view('move');
    }
    static getObj() {
        var _a;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = new C_SwitchView());
        return this.me;
    }
    view(mode) {
        this.__set_class(mode);
        return true;
    }
    __set_class(c) {
        var _a, _b, _c, _d;
        try {
            (_a = C_SwitchView.body) === null || _a === void 0 ? void 0 : _a.classList.remove(...C_SwitchView.all_class);
            (_b = C_SwitchView.body) === null || _b === void 0 ? void 0 : _b.classList.add(c);
            for (const ii in C_SwitchView.article) {
                if (C_SwitchView.article[ii] === null)
                    continue;
                (_c = C_SwitchView.article[ii]) === null || _c === void 0 ? void 0 : _c.classList.remove(...C_SwitchView.all_class);
                (_d = C_SwitchView.article[ii]) === null || _d === void 0 ? void 0 : _d.classList.add(c);
            }
        }
        catch (err) {
            (0, global_1._alert)('Layout Set Error: ' + err);
        }
    }
}
exports.C_SwitchView = C_SwitchView;


/***/ }),

/***/ "./src/mai_maze/F_GM_Hres_move_and_turn.ts":
/*!*************************************************!*\
  !*** ./src/mai_maze/F_GM_Hres_move_and_turn.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.can_move_team = can_move_team;
exports.can_turn_team = can_turn_team;
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
function can_move_team(r) {
    const _touch = _is_touch_team(r);
    if (!_touch) {
        const _how_collide = _how_collide_team(r);
        return {
            ok: _how_collide.canMove,
            res: _how_collide.canMove ? 'Move' : 'Block',
            dmg: _how_collide.damage,
            hope: r,
        };
    }
    else {
        return {
            ok: false,
            res: 'Block',
            dmg: 0,
            hope: r,
        };
    }
}
function can_turn_team(r) {
    const _turn = _can_turn_team(r);
    if (_turn) {
        const _touch = _is_touch_team(r);
        return { ok: !_touch, hope: r, res: _touch ? 'Block' : 'Turn', dmg: 0 };
    }
    else {
        return { ok: false, hope: r, res: 'Block', dmg: 0 };
    }
}
function _can_turn_team(r) { return true; }
function _is_touch_team(r) { return false; }
function _how_collide_team(r) {
    var _a, _b;
    const cell = global_for_maze_1.g_maze.get_cell(r.subj);
    if (!global_for_maze_1.g_maze.within(r.subj) || !((_a = cell === null || cell === void 0 ? void 0 : cell.getObj().canThrough()) !== null && _a !== void 0 ? _a : true)) {
        const damage = (_b = cell === null || cell === void 0 ? void 0 : cell.getObj().hitDamage()) !== null && _b !== void 0 ? _b : 10;
        return { canMove: false, damage: damage };
    }
    const obj = global_for_maze_1.g_maze.get_obj(r.subj);
    if (obj !== null) {
        if (obj.canThrough()) {
            return { canMove: true, damage: 0 };
        }
        else {
            const damage = obj.hitDamage();
            return { canMove: false, damage: damage };
        }
    }
    return { canMove: true, damage: 0 };
}


/***/ }),

/***/ "./src/mai_maze/F_GM_Wndr_move_and_turn.ts":
/*!*************************************************!*\
  !*** ./src/mai_maze/F_GM_Wndr_move_and_turn.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.can_move_wndr = can_move_wndr;
exports.can_turn_wndr = can_turn_wndr;
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
function can_move_wndr(walk, r) {
    const _touch = _is_touch_wndr(r);
    if (!_touch) {
        const _how_collide = _how_collide_wndr(walk, r);
        return {
            ok: _how_collide.canMove,
            res: _how_collide.canMove ? 'Move' : 'Block',
            dmg: _how_collide.damage,
            hope: r,
        };
    }
    else {
        return {
            ok: false,
            res: 'Block',
            dmg: 0,
            hope: r,
        };
    }
}
function _is_touch_wndr(r) { return false; }
function can_turn_wndr(walk, r) {
    const _turn = _can_turn_wndr(r);
    if (_turn) {
        const _touch = _is_touch_wndr(r);
        return { ok: !_touch, hope: r, res: _touch ? 'Block' : 'Turn', dmg: 0 };
    }
    else {
        return { ok: false, hope: r, res: 'Block', dmg: 0 };
    }
}
function _can_turn_wndr(r) { return true; }
function _how_collide_wndr(walk, r) {
    var _a, _b;
    const cell = global_for_maze_1.g_maze.get_cell(r.subj);
    if (!global_for_maze_1.g_maze.within(r.subj)) {
        const damage = 50;
        return { canMove: false, damage: damage };
    }
    if (walk.canThru())
        return { canMove: true, damage: 0 };
    if (!((_a = cell === null || cell === void 0 ? void 0 : cell.getObj().canThrough()) !== null && _a !== void 0 ? _a : true)) {
        const damage = (_b = cell === null || cell === void 0 ? void 0 : cell.getObj().hitDamage()) !== null && _b !== void 0 ? _b : 10;
        return { canMove: false, damage: damage };
    }
    const objs = global_for_maze_1.g_maze.get_any_obj(r.subj);
    let full_damage = 0;
    for (const obje of objs) {
        if (obje === undefined || obje === null)
            continue;
        if (!obje.canThrough()) {
            const full_damage = obje.hitDamage();
        }
        else { }
        ;
    }
    if (full_damage > 0)
        return { canMove: false, damage: full_damage };
    return { canMove: true, damage: 0 };
}


/***/ }),

/***/ "./src/mai_maze/F_display_maze2D.ts":
/*!******************************************!*\
  !*** ./src/mai_maze/F_display_maze2D.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_maze2D = init_maze2D;
exports.display_maze2D = display_maze2D;
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
function init_maze2D() {
    global_for_maze_1.g_view2D.init({
        div_id: 'div_maze_vw2D',
        canvas_id: 'maze_view2D_canvas',
        x_min: 15, y_min: 15
    });
    global_for_maze_1.g_view2M.init({
        div_id: 'div_maze_vw2M',
        canvas_id: 'maze_view2M_canvas',
        x_min: 5, y_min: 5
    });
}
function display_maze2D() {
    global_for_maze_1.g_view2D.drow_map2X();
    global_for_maze_1.g_view2M.drow_map2X();
}


/***/ }),

/***/ "./src/mai_maze/F_display_maze3D.ts":
/*!******************************************!*\
  !*** ./src/mai_maze/F_display_maze3D.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_maze3D = init_maze3D;
exports.display_maze3D = display_maze3D;
exports.displey_mase3D_direction = displey_mase3D_direction;
exports.maze3D_blink_on_direction = maze3D_blink_on_direction;
exports.maze3D_blink_off_direction = maze3D_blink_off_direction;
const C_Point_1 = __webpack_require__(/*! ../d_mdl/C_Point */ "./src/d_mdl/C_Point.ts");
const C_Range_1 = __webpack_require__(/*! ../d_mdl/C_Range */ "./src/d_mdl/C_Range.ts");
const C_MazeObjView_1 = __webpack_require__(/*! ../d_mdl/C_MazeObjView */ "./src/d_mdl/C_MazeObjView.ts");
const T_Direction_1 = __webpack_require__(/*! ../d_mdl/T_Direction */ "./src/d_mdl/T_Direction.ts");
const C_Wall_1 = __webpack_require__(/*! ../d_mdl/C_Wall */ "./src/d_mdl/C_Wall.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
function init_maze3D() {
    const canvas = document.getElementById('maze_view3D_canvas');
    if (canvas === null) {
        global_1.g_mes.warning_message('Canvas isnt found! id=Maze_view3D_canvas');
        return { canvas: null, con: null, depth: 0, wall: null };
    }
    const con = canvas.getContext('2d');
    if (con === null) {
        global_1.g_mes.warning_message('Browser dont surpport 2D graphics!');
        return { canvas: null, con: null, depth: 0, wall: null };
    }
    C_MazeObjView_1.C_MazeObjView.set_context3D(con);
    init_mazeCell3D();
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    const depth = 5;
    const top_p = new C_Point_1.C_Point(0, 0, 0);
    const btm_p = new C_Point_1.C_Point(canvas.width - 1, canvas.height - 1, 0);
    const wall = new C_Wall_1.C_Wall(depth, new C_Range_1.C_Range(top_p, btm_p));
    return { canvas: canvas, con: con, depth: depth, wall: wall };
}
function init_mazeCell3D() { }
function draw_init_maze3D() {
    if (global_for_maze_1.g_ds.canvas === null || global_for_maze_1.g_ds.con === null)
        return;
    global_for_maze_1.g_ds.con.fillStyle = '#aaaaaa';
    global_for_maze_1.g_ds.con.fillRect(0, 0, global_for_maze_1.g_ds.canvas.width - 1, get_holizon_line());
    global_for_maze_1.g_ds.con.fillStyle = '#6666ff';
    global_for_maze_1.g_ds.con.fillRect(0, get_holizon_line(), global_for_maze_1.g_ds.canvas.width - 1, global_for_maze_1.g_ds.canvas.height - 1);
    drow_floor_line();
}
function get_holizon_line() {
    if (global_for_maze_1.g_ds.wall === null)
        return -1;
    return global_for_maze_1.g_ds.wall.get(global_for_maze_1.g_ds.depth, 0).max_y;
}
function drow_floor_line() {
    if (global_for_maze_1.g_ds.canvas === null || global_for_maze_1.g_ds.con === null || global_for_maze_1.g_ds.wall === null)
        return;
    const con = global_for_maze_1.g_ds.con;
    const wall = global_for_maze_1.g_ds.wall;
    const depth = global_for_maze_1.g_ds.depth;
    const H_dept = (depth - 1) / 2;
    const left_x = 0;
    const right_x = global_for_maze_1.g_ds.canvas.width - 1;
    const front_y = global_for_maze_1.g_ds.canvas.height - 1;
    const back_y = get_holizon_line();
    con.strokeStyle = '#9999ff';
    con.lineWidth = 1;
    for (var y = 0; y < depth + 1; y++) {
        con.beginPath();
        con.moveTo(left_x, wall.get(y, 0).max_y);
        con.lineTo(right_x, wall.get(y, 0).max_y);
        con.stroke();
    }
    for (var x = -H_dept; x < H_dept + 1; x++) {
        con.beginPath();
        con.moveTo(wall.get(0, x).min_x, front_y);
        con.lineTo(wall.get(depth, x).min_x, back_y);
        con.stroke();
    }
}
function display_maze3D() {
    if (global_for_maze_1.g_ds.canvas === null || global_for_maze_1.g_ds.con === null || global_for_maze_1.g_ds.wall === null)
        return;
    draw_init_maze3D();
    displey_mase3D_direction();
    const depth = global_for_maze_1.g_ds.depth;
    const H_depth = (depth - 1) / 2;
    for (var j = global_for_maze_1.g_ds.depth - 1; j >= 0; j--) {
        for (var k = -H_depth; k < 0; k++)
            drowMazeCell(j, k);
        for (var k = H_depth; k > 0; k--)
            drowMazeCell(j, k);
        drowMazeCell(j, 0);
    }
}
function drowMazeCell(d, w) {
    var _a, _b, _c, _d;
    if (global_for_maze_1.g_ds.wall === null)
        return;
    const around_j_k = global_for_maze_1.g_team.getWalker().get_around(d, w, 0);
    const frot_wall = global_for_maze_1.g_ds.wall.get(d, w);
    const back_wall = global_for_maze_1.g_ds.wall.get(d + 1, w);
    const mz_kind = global_for_maze_1.g_maze.get_kind(around_j_k);
    (_a = global_for_maze_1.g_maze === null || global_for_maze_1.g_maze === void 0 ? void 0 : global_for_maze_1.g_maze.get_cell(around_j_k)) === null || _a === void 0 ? void 0 : _a.drow3D(frot_wall, back_wall);
    if (global_for_maze_1.g_maze.exist_obj(around_j_k)) {
        const obj = global_for_maze_1.g_maze.get_obj(around_j_k);
        if (obj !== null)
            (_b = obj.view()) === null || _b === void 0 ? void 0 : _b.drow3D(frot_wall, back_wall, (_c = obj === null || obj === void 0 ? void 0 : obj.get_pd().d) !== null && _c !== void 0 ? _c : T_Direction_1.T_Direction.N, (_d = global_for_maze_1.g_team.getWalker().get_d()) !== null && _d !== void 0 ? _d : T_Direction_1.T_Direction.N);
    }
}
function displey_mase3D_direction() {
    const p_dir = document.getElementById('maze_view3D_direction_info');
    if (p_dir === null) {
        global_1.g_mes.warning_message('P element isnt found! id=Maze_view3D_direction_info');
        return;
    }
    var direction;
    const p = global_for_maze_1.g_team.get_pd();
    switch (p.d) {
        case T_Direction_1.T_Direction.N:
            direction = '<span class="direction_N">《北》</span>';
            break;
        case T_Direction_1.T_Direction.E:
            direction = '<span class="direction_E">《東》</span>';
            break;
        case T_Direction_1.T_Direction.S:
            direction = '<span class="direction_S">《南》</span>';
            break;
        case T_Direction_1.T_Direction.W:
            direction = '<span class="direction_W">《西》</span>';
            break;
        default:
            direction = '<span class="direction_D">《謎》</span>';
            break;
    }
    const mes = '地下 ' + (p.z + 1) + '階　' + direction + '　(x = <span id="direction_X">' + p.x + '</span>, y = <span id="direction_Y">' + p.y + '</span>)';
    p_dir.innerHTML = mes;
}
function maze3D_blink_on_direction() {
    const dir_x = document.getElementById('direction_X');
    if (dir_x === null)
        return;
    const dir_y = document.getElementById('direction_Y');
    if (dir_y === null)
        return;
    switch (global_for_maze_1.g_team.getWalker().get_d()) {
        case T_Direction_1.T_Direction.N:
        case T_Direction_1.T_Direction.S:
            dir_x.classList.remove('blink');
            dir_y.classList.add('blink');
            return;
        case T_Direction_1.T_Direction.E:
        case T_Direction_1.T_Direction.W:
            dir_x.classList.add('blink');
            dir_y.classList.remove('blink');
            return;
    }
}
function maze3D_blink_off_direction() {
    const dir_x = document.getElementById('direction_X');
    if (dir_x === null)
        return;
    dir_x.classList.remove('blink');
    const dir_y = document.getElementById('direction_Y');
    if (dir_y === null)
        return;
    dir_y.classList.remove('blink');
}


/***/ }),

/***/ "./src/mai_maze/F_display_mazeCh.ts":
/*!******************************************!*\
  !*** ./src/mai_maze/F_display_mazeCh.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_mazeCh = init_mazeCh;
exports.display_mazeCh = display_mazeCh;
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
let div;
let pre;
let view_wdth = 0;
let view_hght = 0;
let map_wdth = 0;
let map_hght = 0;
let font_size = 0;
let line_hght = 0;
function init_mazeCh() {
    div = document.getElementById('div_maze_vwCh');
    pre = document.getElementById('maze_viewCh_pre');
    calc_viewCh_width();
}
function calc_viewCh_width() {
    view_wdth = div.clientWidth;
    view_hght = div.clientHeight;
    const col = global_for_maze_1.g_maze.get_x_max() + 1;
    const col_px = pre.clientWidth / col;
    const row = global_for_maze_1.g_maze.get_y_max() + 1;
    const row_px = pre.clientHeight / row;
    font_size = (0, F_Math_1._round)((0, F_Math_1._max)([15.0, (0, F_Math_1._round)(1.00 * (0, F_Math_1._min)([col_px, row_px]), 2)]), 0);
    line_hght = (0, F_Math_1._round)((0, F_Math_1._max)([15.0, (0, F_Math_1._round)(1.00 * (0, F_Math_1._min)([col_px, row_px]), 2)]), 0);
    map_wdth = font_size * col;
    map_hght = line_hght * col;
    if (map_wdth < view_wdth) {
        map_wdth = view_wdth;
        font_size = (0, F_Math_1._round)(view_wdth / col, 0);
    }
    if (map_hght < view_hght) {
        map_hght = view_hght;
        line_hght = (0, F_Math_1._round)(view_hght / row, 0);
    }
    pre.setAttribute('width', map_wdth.toString());
    pre.setAttribute('height', map_hght.toString());
    pre.style.setProperty('font-size', `${font_size}px`);
    pre.style.setProperty('line-height', `${line_hght}px`);
}
function calc_viewCh_top() {
    calc_viewCh_width();
    view_wdth = div.clientWidth;
    view_hght = div.clientHeight;
    const pd = global_for_maze_1.g_team.get_pd();
    let top_x = view_wdth / 2 - (pd.x + 0) * font_size;
    if (top_x > 0)
        top_x = 0;
    if (top_x < view_wdth - map_wdth)
        top_x = view_wdth - map_wdth;
    let top_y = view_hght / 2 - (pd.y + 0) * line_hght;
    if (top_y > 0)
        top_y = 0;
    if (top_y < view_hght - map_hght)
        top_y = view_hght - map_hght;
    pre.style.setProperty('left', `${top_x}px`);
    pre.style.setProperty('top', `${top_y}px`);
}
function display_mazeCh() {
    if (pre !== null) {
        pre.innerText = to_string();
        calc_viewCh_top();
    }
    else
        global_1.g_mes.warning_message('Can not found pre#Maze_viewCh_pre!!');
}
function to_string() {
    var _a, _b, _c, _d;
    const size_x = global_for_maze_1.g_maze.get_x_max();
    const size_y = global_for_maze_1.g_maze.get_y_max();
    const floor = global_for_maze_1.g_team.get_pd().z;
    let ret_str = '';
    for (let y = 0; y < size_y; y++) {
        for (let x = 0; x < size_x; x++) {
            if (!global_1.g_debug.isON() && global_for_maze_1.g_maze.is_masked_xyz(x, y, floor)) {
                ret_str += 'Ｘ';
            }
            else {
                const obj = global_for_maze_1.g_maze.get_obj_xyz(x, y, floor);
                if (obj === null || obj.view() === undefined) {
                    ret_str += (_a = global_for_maze_1.g_maze.get_cell_xyz(x, y, floor)) === null || _a === void 0 ? void 0 : _a.to_letter();
                }
                else {
                    const obj_c = (_d = (_b = obj.view()) === null || _b === void 0 ? void 0 : _b.letter((_c = obj === null || obj === void 0 ? void 0 : obj.get_pd().d) !== null && _c !== void 0 ? _c : 0)) !== null && _d !== void 0 ? _d : '謎';
                    ret_str += obj_c;
                }
            }
        }
        ret_str += "\n";
    }
    return ret_str;
}


/***/ }),

/***/ "./src/mai_maze/F_set_UD_mode.ts":
/*!***************************************!*\
  !*** ./src/mai_maze/F_set_UD_mode.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_UD_mode = init_UD_mode;
exports.act_Up_mode = act_Up_mode;
exports.act_Dn_mode = act_Dn_mode;
exports.act_UD_mode = act_UD_mode;
const C_UrlOpt_1 = __webpack_require__(/*! ../d_utl/C_UrlOpt */ "./src/d_utl/C_UrlOpt.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const F_POST_1 = __webpack_require__(/*! ../d_cmn/F_POST */ "./src/d_cmn/F_POST.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_set_save_mode_1 = __webpack_require__(/*! ./F_set_save_mode */ "./src/mai_maze/F_set_save_mode.ts");
const F_set_move_mode_1 = __webpack_require__(/*! ./F_set_move_mode */ "./src/mai_maze/F_set_move_mode.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
var canUp = false;
var canDn = false;
var isUp = false;
const ctls_updn_up = {
    name: 'updn_up',
    isOK: do_up,
    isNG: do_cancel,
};
const ctls_updn_dn = {
    name: 'updn_dn',
    isOK: do_down,
    isNG: do_cancel,
};
const ctls_updn_ud_hpup = {
    name: 'updn_ud_hpup',
    do_U: do_up,
    do_D: do_down,
    isNG: do_cancel,
};
const ctls_updn_ud_hpdn = {
    name: 'updn_ud_hpdn',
    do_U: do_up,
    do_D: do_down,
    isNG: do_cancel,
};
function init_UD_mode() {
    global_for_maze_1.g_ctls.set(ctls_updn_up);
    global_for_maze_1.g_ctls.set(ctls_updn_dn);
    global_for_maze_1.g_ctls.set(ctls_updn_ud_hpup);
    global_for_maze_1.g_ctls.set(ctls_updn_ud_hpdn);
}
function act_Up_mode() {
    if (global_for_maze_1.g_team.getWalker().get_z() > 0) {
        global_for_maze_1.g_mvm.notice_message('上りテレポーターが有ります。登りますか？登る ⇒ 〇 登らない ⇒ ✖');
    }
    else {
        global_for_maze_1.g_mvm.notice_message('街に戻りますか？戻る ⇒ 〇 戻らない ⇒ ✖');
    }
    canUp = true;
    canDn = false;
    global_for_maze_1.g_ctls.act(ctls_updn_up);
    global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.Move());
    setCanvas3DClick();
}
function act_Dn_mode() {
    if (global_for_maze_1.g_team.getWalker().get_z() < global_for_maze_1.g_maze.get_z_max() - 1) {
        global_for_maze_1.g_mvm.notice_message('下りテレポーターが有ります。降りますか？降りる ⇒ 〇 降りない ⇒ ✖');
    }
    else {
        global_for_maze_1.g_mvm.notice_message('迷宮探索を終了しますか？（街に戻ります）戻る ⇒ 〇 戻らない ⇒ ✖');
    }
    canUp = false;
    canDn = true;
    global_for_maze_1.g_ctls.act(ctls_updn_dn);
    global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.Move());
}
function act_UD_mode() {
    global_for_maze_1.g_mvm.notice_message('上下テレポーターが有ります。登りますか？登る⇒ 〇 降りる ⇒ (↓キー) 移動しない ⇒ ✖');
    canUp = true;
    canDn = true;
    if (!isUp)
        global_for_maze_1.g_ctls.act(ctls_updn_ud_hpup);
    else
        global_for_maze_1.g_ctls.act(ctls_updn_ud_hpdn);
    global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.Move());
}
function do_cancel() {
    global_for_maze_1.g_mvm.clear_message();
    (0, F_set_move_mode_1.act_move_mode)();
}
function do_up() {
    const rslt = global_for_maze_1.g_team.getWalker().hope_p_up();
    if (rslt.has_hope && rslt.subj.z < 0) {
        do_UD_save().then(() => __awaiter(this, void 0, void 0, function* () {
            return yield (0, F_load_and_save_1.tmp_save)();
        })).then(() => {
            const opt = new C_UrlOpt_1.C_UrlOpt();
            opt.set('mode', 'load');
            opt.set('pid', global_1.g_start_env.pid);
            opt.set('opt', 100);
            (0, F_POST_1.POST_and_move_page)(global_1.g_url[global_1.g_url_mai_guld], opt);
            return;
        });
        return;
    }
    if (!rslt.has_hope || !global_for_maze_1.g_maze.within(rslt.subj)) {
        global_for_maze_1.g_mvm.clear_message();
        (0, F_set_move_mode_1.act_move_mode)();
        (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
    }
    else {
        do_UD_save().then(() => {
            global_for_maze_1.g_team.getWalker().set_pd(rslt.subj);
            global_for_maze_1.g_mvm.clear_message();
            (0, F_set_move_mode_1.act_move_mode)();
            (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
        });
    }
}
function do_down() {
    const rslt = global_for_maze_1.g_team.getWalker().hope_p_down();
    if (rslt.has_hope && rslt.subj.z >= global_for_maze_1.g_maze.get_z_max()) {
        do_UD_save().then(() => __awaiter(this, void 0, void 0, function* () {
            return yield (0, F_load_and_save_1.tmp_save)();
        })).then(() => {
            const opt = new C_UrlOpt_1.C_UrlOpt();
            opt.set('mode', 'load');
            opt.set('pid', global_1.g_start_env.pid);
            opt.set('opt', 100);
            (0, F_POST_1.POST_and_move_page)(global_1.g_url[global_1.g_url_mai_guld], opt);
            return;
        });
        return;
    }
    if (!rslt.has_hope || !global_for_maze_1.g_maze.within(rslt.subj)) {
        global_for_maze_1.g_mvm.clear_message();
        (0, F_set_move_mode_1.act_move_mode)();
        (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
    }
    else {
        do_UD_save().then(() => {
            global_for_maze_1.g_team.getWalker().set_pd(rslt.subj);
            global_for_maze_1.g_mvm.clear_message();
            (0, F_set_move_mode_1.act_move_mode)();
            (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
        });
    }
}
function do_UD() {
    if (!canUp || !canDn)
        return;
    if (isUp)
        do_up();
    else
        do_down();
}
function hope_Up() {
    if (!canUp || !canDn)
        return;
    isUp = true;
    global_for_maze_1.g_ctls.act(ctls_updn_ud_hpdn);
    if (global_for_maze_1.g_team.getWalker().get_z() > 0) {
        global_for_maze_1.g_mvm.notice_message('登りますか？登る⇒ 〇 降りる ⇒ (↓キー) 移動しない ⇒ ✖');
    }
    else {
        global_for_maze_1.g_mvm.notice_message('街に戻りますか？戻る⇒ 〇 降りる ⇒ (↓キー) 移動しない ⇒ ✖');
    }
    ;
}
function hope_Down() {
    if (!canUp || !canDn)
        return;
    isUp = false;
    global_for_maze_1.g_ctls.act(ctls_updn_ud_hpup);
    global_for_maze_1.g_mvm.notice_message('降りますか？降りる⇒ 〇 登る ⇒ (↑キー) 移動しない ⇒ ✖');
}
function do_UD_save() {
    return __awaiter(this, void 0, void 0, function* () {
        (0, F_set_save_mode_1.set_g_save)(-1, -1, '自動保存データ', '', `『${global_for_maze_1.g_maze.get_name()}』 `
            + `地下 ${global_for_maze_1.g_team.getWalker().get_pd().z + 1}階層 `
            + `(X: ${global_for_maze_1.g_team.getWalker().get_pd().x}, Y: ${global_for_maze_1.g_team.get_pd().y})`, true);
        return (0, F_load_and_save_1.UD_save)();
    });
}
function setCanvas3DClick() {
    if ((global_for_maze_1.g_ds === null || global_for_maze_1.g_ds === void 0 ? void 0 : global_for_maze_1.g_ds.canvas) === null)
        return;
    global_for_maze_1.g_ds.canvas.onclick = canvas3Dclick;
}
function clrCanvas3DClick() {
    if ((global_for_maze_1.g_ds === null || global_for_maze_1.g_ds === void 0 ? void 0 : global_for_maze_1.g_ds.canvas) === null)
        return;
    global_for_maze_1.g_ds.canvas.onclick = () => { };
}
function canvas3Dclick(ev) {
    var _a, _b, _c, _d;
    if ((global_for_maze_1.g_ds === null || global_for_maze_1.g_ds === void 0 ? void 0 : global_for_maze_1.g_ds.canvas) === null)
        return;
    if (ev.target !== global_for_maze_1.g_ds.canvas)
        return;
    const cvs = global_for_maze_1.g_ds.canvas;
    const left_pane_r = cvs.clientWidth * 0.35;
    const rght_pane_l = cvs.clientWidth * 0.65;
    const back_pane_u = cvs.clientHeight * 0.50;
    if (ev.offsetX < left_pane_r) {
        (_a = document.getElementById('n_btn')) === null || _a === void 0 ? void 0 : _a.click();
        return;
    }
    if (ev.offsetX > rght_pane_l) {
        (_b = document.getElementById('y_btn')) === null || _b === void 0 ? void 0 : _b.click();
        return;
    }
    if (ev.offsetY < back_pane_u) {
        (_c = document.getElementById('u_arr')) === null || _c === void 0 ? void 0 : _c.click();
        return;
    }
    (_d = document.getElementById('d_arr')) === null || _d === void 0 ? void 0 : _d.click();
    return;
}


/***/ }),

/***/ "./src/mai_maze/F_set_bttl_mode.ts":
/*!*****************************************!*\
  !*** ./src/mai_maze/F_set_bttl_mode.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_bttl_mode = init_bttl_mode;
exports.act_bttl_mode = act_bttl_mode;
const C_CtlCursor_1 = __webpack_require__(/*! ../d_ctl/C_CtlCursor */ "./src/d_ctl/C_CtlCursor.ts");
const F_set_move_mode_1 = __webpack_require__(/*! ./F_set_move_mode */ "./src/mai_maze/F_set_move_mode.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
let mdl_team_list;
let dom_team_list;
let tby_team_list;
let ccr_team_list;
let mdl_enmy_list;
let dom_enmy_list;
let tby_enmy_list;
let ccr_enmy_list;
let mdl_cmmd_list;
let dom_cmmd_list;
let ccr_cmmd_list;
let mdl_slct_list;
let dom_slct_list;
let ccr_slct_list;
let TECS_mode = 'Team';
let idx = 0;
const Hero_max = 4;
const Wndr_max = 4;
let enmy_obje = undefined;
function init_bttl_mode() {
    init_all();
}
function act_bttl_mode(obje) {
    var _a, _b, _c;
    if (obje === undefined || obje.wres() === undefined || ((_b = (_a = obje.wres()) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) < 1)
        return;
    enmy_obje = obje;
    set_team_data(global_for_maze_1.g_team.hres());
    set_enmy_data((_c = obje.wres()) !== null && _c !== void 0 ? _c : []);
    update_all();
    global_for_maze_1.g_cvm.clear_message();
    TECS_mode = 'Team';
    global_for_maze_1.g_ctls.act(ctls_bttl_nor);
    global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.Bttl());
}
function set_team_data(hres) {
    mdl_team_list = hres;
}
function set_enmy_data(wres) {
    mdl_enmy_list = wres;
}
function init_all() {
    init_data();
    init_view();
    init_ctls();
}
function update_all() {
    update_data();
    update_view();
    update_ctls();
}
function init_data() {
    init_team_data();
    init_enmy_data();
    init_cmmd_data();
    init_slct_data();
}
;
function init_team_data() {
    mdl_team_list = [];
    for (let i = 0; i < Hero_max; i++) {
        mdl_team_list.push(undefined);
    }
}
function init_enmy_data() {
    mdl_enmy_list = [];
    for (let i = 0; i < Wndr_max; i++) {
        mdl_enmy_list.push(undefined);
    }
}
function init_cmmd_data() { }
function init_slct_data() { }
function update_data() {
    update_team_data();
    update_enmy_data();
    update_cmmd_data();
    update_slct_data();
}
;
function update_team_data() { }
function update_enmy_data() { }
function update_cmmd_data() { }
function update_slct_data() { }
function init_view() {
    init_team_view();
    init_enmy_view();
    init_cmmd_view();
    init_slct_view();
}
;
const TableCol = ['nmlv', 'acst', 'hpmp'];
function init_team_view() {
    dom_team_list = [];
    for (let i = 0; i < Hero_max; i++) {
        const tr = document.getElementById(`bttl_team_tr${i}`);
        if (tr === null)
            continue;
        dom_team_list[i] = {};
        for (const col of TableCol) {
            const td = document.getElementById(`bttl_team_tr${i}_${col}`);
            if (td === null)
                continue;
            dom_team_list[i][col] = td;
        }
    }
}
function init_enmy_view() {
    dom_enmy_list = [];
    for (let i = 0; i < Wndr_max; i++) {
        const tr = document.getElementById(`bttl_enmy_tr${i}`);
        if (tr === null)
            continue;
        dom_enmy_list[i] = {};
        for (const col of TableCol) {
            const td = document.getElementById(`bttl_enmy_tr${i}_${col}`);
            if (td === null)
                continue;
            dom_enmy_list[i][col] = td;
        }
    }
}
function init_cmmd_view() { }
function init_slct_view() { }
function update_view() {
    update_team_view();
    update_enmy_view();
    update_cmmd_view();
    update_slct_view();
}
;
function update_team_view() {
    var _a, _b;
    for (let i = 0; i < Hero_max; i++) {
        const hero = mdl_team_list[i];
        const dom = dom_team_list[i];
        if (hero !== undefined) {
            dom.nmlv.innerHTML = hero.name()
                + '<br />'
                + 'Lv：'
                + '　物理：'
                + ((_a = hero === null || hero === void 0 ? void 0 : hero.get_abi_p_now('lv')) !== null && _a !== void 0 ? _a : '???').toString()
                + '　魔法：'
                + ((_b = hero === null || hero === void 0 ? void 0 : hero.get_abi_m_now('lv')) !== null && _b !== void 0 ? _b : '???').toString();
            dom.acst.innerHTML = '　不明　'
                + '<br />'
                + hero.is_alive() ? '　正常　' : 0;
            dom.hpmp.innerHTML = 'ＨＰ：'
                + (hero.get_abi_p_now('xp') - hero.get_abi_p_now('xd')).toString() + ' / '
                + hero.get_abi_p_now('xp').toString()
                + '<br />'
                + 'ＭＰ：'
                + (hero.get_abi_m_now('xp') - hero.get_abi_m_now('xd')).toString() + ' / '
                + hero.get_abi_m_now('xp').toString();
        }
        else {
            dom.nmlv.innerHTML = '';
            dom.acst.innerHTML = '';
            dom.hpmp.innerHTML = '';
        }
    }
}
function update_enmy_view() {
    var _a, _b, _c, _d;
    for (let i = 0; i < Wndr_max; i++) {
        const wndr = mdl_enmy_list[i];
        const dom = dom_enmy_list[i];
        if (wndr !== undefined) {
            dom.nmlv.innerHTML = wndr.name()
                + '<br />'
                + 'Lv：'
                + '　物理：'
                + ((_a = wndr === null || wndr === void 0 ? void 0 : wndr.get_abi_p_now('lv')) !== null && _a !== void 0 ? _a : '???').toString()
                + '　魔法：'
                + ((_b = wndr === null || wndr === void 0 ? void 0 : wndr.get_abi_m_now('lv')) !== null && _b !== void 0 ? _b : '???').toString();
            dom.acst.innerHTML = '　不明　'
                + '<br />'
                + wndr.is_alive() ? '　正常　' : 0;
            dom.hpmp.innerHTML = 'ＨＰ：'
                + (wndr.get_abi_p_now('xp') - wndr.get_abi_p_now('xd')).toString() + ' / '
                + ((_c = wndr.get_abi_p_now('xp')) === null || _c === void 0 ? void 0 : _c.toString())
                + '<br />'
                + 'ＭＰ：'
                + (wndr.get_abi_m_now('xp') - wndr.get_abi_m_now('xd')).toString() + ' / '
                + ((_d = wndr.get_abi_m_now('xp')) === null || _d === void 0 ? void 0 : _d.toString());
        }
        else {
            dom.nmlv.innerHTML = '';
            dom.acst.innerHTML = '';
            dom.hpmp.innerHTML = '';
        }
    }
}
function update_cmmd_view() { }
function update_slct_view() { }
function init_ctls() {
    try {
        tby_team_list = document.getElementById('bttl_team_body');
        tby_enmy_list = document.getElementById('bttl_enmy_body');
        dom_cmmd_list = document.getElementById('bttl_cmmd_ul');
        dom_slct_list = document.getElementById('bttl_slct_ul');
        ccr_cmmd_list = C_CtlCursor_1.C_CtlCursor.getObj(dom_cmmd_list);
        ccr_slct_list = C_CtlCursor_1.C_CtlCursor.getObj(dom_slct_list);
    }
    catch (err) {
        alert('Error: ' + err);
    }
}
;
function update_ctls() { }
const ctls_bttl_nor = {
    name: 'menu_nor',
    do_U: do_U,
    do_D: do_D,
    isOK: isOK,
    isNG: isNG,
    isRT: isNG,
    cpRT: isNG,
};
function do_U() { }
function do_D() { }
function do_L() { }
function do_R() { }
function isOK() { }
function isNG() {
    global_for_maze_1.g_maze.rmv_obj(enmy_obje !== null && enmy_obje !== void 0 ? enmy_obje : undefined);
    enmy_obje === null || enmy_obje === void 0 ? void 0 : enmy_obje.free();
    enmy_obje = undefined;
    global_for_maze_1.g_cvm.clear_message();
    (0, F_set_move_mode_1.act_move_mode)();
    (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
}


/***/ }),

/***/ "./src/mai_maze/F_set_menu_mode.ts":
/*!*****************************************!*\
  !*** ./src/mai_maze/F_set_menu_mode.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_menu_mode = init_menu_mode;
exports.act_menu_mode = act_menu_mode;
const C_CtlCursor_1 = __webpack_require__(/*! ../d_ctl/C_CtlCursor */ "./src/d_ctl/C_CtlCursor.ts");
const F_set_move_mode_1 = __webpack_require__(/*! ./F_set_move_mode */ "./src/mai_maze/F_set_move_mode.ts");
const F_set_save_mode_1 = __webpack_require__(/*! ./F_set_save_mode */ "./src/mai_maze/F_set_save_mode.ts");
const F_set_mvpt_mode_1 = __webpack_require__(/*! ./F_set_mvpt_mode */ "./src/mai_maze/F_set_mvpt_mode.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
let dom_menu_list;
let menu_list_crsr;
let idx = 0;
const ctls_menu_nor = {
    name: 'menu_nor',
    do_U: do_U,
    do_D: do_D,
    isOK: isOK,
    isNG: isNG,
    isRT: isNG,
    cpRT: isNG,
};
function init_menu_mode() {
    init_view();
    init_ctls();
}
function act_menu_mode() {
    idx = 0;
    menu_list_crsr.set_pos(idx);
    global_for_maze_1.g_ctls.act(ctls_menu_nor);
    global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.Menu());
}
function init_view() {
    try {
        const menu_list = document.getElementById('menu_list');
        for (var i = 0; i < menu_list.children.length; i++) {
            const item = menu_list.children[i];
            item.addEventListener("click", _OK_menu_Fnc, false);
        }
        dom_menu_list = document.getElementById('menu_list');
        menu_list_crsr = C_CtlCursor_1.C_CtlCursor.getObj(dom_menu_list);
    }
    catch (err) {
        alert('Error: ' + err);
        return false;
    }
    return true;
}
function _OK_menu_Fnc(e) {
    __isOK(this.id);
}
function init_ctls() {
    global_for_maze_1.g_ctls.set(ctls_menu_nor);
}
function isOK() {
    const menu_list = document.getElementById('menu_list');
    if (menu_list === null)
        return;
    const children = menu_list.children;
    if (idx < 0 || idx > children.length - 1)
        return;
    const li = children.item(idx);
    __isOK(li.id);
}
function __isOK(id) {
    switch (id) {
        case 'menu_load':
            do_load();
            return;
        case 'menu_save':
            do_save();
            return;
        case 'menu_mvpt':
            do_mvpt();
            return;
    }
}
function isNG() {
    global_for_maze_1.g_cvm.clear_message();
    (0, F_set_move_mode_1.act_move_mode)();
    (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
}
function do_U() {
    global_for_maze_1.g_cvm.clear_message();
    idx = menu_list_crsr.pos_U();
}
function do_D() {
    global_for_maze_1.g_cvm.clear_message();
    idx = menu_list_crsr.pos_D();
}
function do_load() {
    (0, F_set_save_mode_1.act_load_mode)();
}
function do_save() {
    (0, F_set_save_mode_1.act_save_mode)();
}
function do_mvpt() {
    (0, F_set_mvpt_mode_1.act_mvpt_mode)();
}


/***/ }),

/***/ "./src/mai_maze/F_set_mode.ts":
/*!************************************!*\
  !*** ./src/mai_maze/F_set_mode.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_all_mode = init_all_mode;
exports.hide_controlles = hide_controlles;
const F_set_move_mode_1 = __webpack_require__(/*! ./F_set_move_mode */ "./src/mai_maze/F_set_move_mode.ts");
const F_set_menu_mode_1 = __webpack_require__(/*! ./F_set_menu_mode */ "./src/mai_maze/F_set_menu_mode.ts");
const F_set_mvpt_mode_1 = __webpack_require__(/*! ./F_set_mvpt_mode */ "./src/mai_maze/F_set_mvpt_mode.ts");
const F_set_save_mode_1 = __webpack_require__(/*! ./F_set_save_mode */ "./src/mai_maze/F_set_save_mode.ts");
const F_set_UD_mode_1 = __webpack_require__(/*! ./F_set_UD_mode */ "./src/mai_maze/F_set_UD_mode.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
const F_set_bttl_mode_1 = __webpack_require__(/*! ./F_set_bttl_mode */ "./src/mai_maze/F_set_bttl_mode.ts");
function init_all_mode() {
    global_for_maze_1.g_ctls.deact();
    (0, F_set_move_mode_1.init_move_mode)();
    (0, F_set_menu_mode_1.init_menu_mode)();
    (0, F_set_mvpt_mode_1.init_mvpt_mode)();
    (0, F_set_save_mode_1.init_SL_mode)();
    (0, F_set_UD_mode_1.init_UD_mode)();
    (0, F_set_bttl_mode_1.init_bttl_mode)();
}
function hide_controlles() {
    global_for_maze_1.g_ctls.deact();
    const move_ctl_view = document.getElementById('pane_ctls_boad');
    move_ctl_view === null || move_ctl_view === void 0 ? void 0 : move_ctl_view.style.setProperty('display', 'none');
}


/***/ }),

/***/ "./src/mai_maze/F_set_move_mode.ts":
/*!*****************************************!*\
  !*** ./src/mai_maze/F_set_move_mode.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_move_mode = init_move_mode;
exports.act_move_mode = act_move_mode;
exports.do_instant_load = do_instant_load;
exports.do_instant_save = do_instant_save;
exports.do_move_bottom_half = do_move_bottom_half;
const T_MzKind_1 = __webpack_require__(/*! ../d_mdl/T_MzKind */ "./src/d_mdl/T_MzKind.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const F_set_menu_mode_1 = __webpack_require__(/*! ./F_set_menu_mode */ "./src/mai_maze/F_set_menu_mode.ts");
const F_set_UD_mode_1 = __webpack_require__(/*! ./F_set_UD_mode */ "./src/mai_maze/F_set_UD_mode.ts");
const F_set_save_mode_1 = __webpack_require__(/*! ./F_set_save_mode */ "./src/mai_maze/F_set_save_mode.ts");
const F_display_mazeCh_1 = __webpack_require__(/*! ./F_display_mazeCh */ "./src/mai_maze/F_display_mazeCh.ts");
const F_display_maze3D_1 = __webpack_require__(/*! ./F_display_maze3D */ "./src/mai_maze/F_display_maze3D.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
const F_GM_Hres_move_and_turn_1 = __webpack_require__(/*! ./F_GM_Hres_move_and_turn */ "./src/mai_maze/F_GM_Hres_move_and_turn.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const F_display_maze2D_1 = __webpack_require__(/*! ./F_display_maze2D */ "./src/mai_maze/F_display_maze2D.ts");
const F_GM_Wndr_move_and_turn_1 = __webpack_require__(/*! ./F_GM_Wndr_move_and_turn */ "./src/mai_maze/F_GM_Wndr_move_and_turn.ts");
const C_Team_1 = __webpack_require__(/*! ../d_mdl/C_Team */ "./src/d_mdl/C_Team.ts");
const F_set_bttl_mode_1 = __webpack_require__(/*! ./F_set_bttl_mode */ "./src/mai_maze/F_set_bttl_mode.ts");
const ctls_move_nor = {
    name: 'move_nor',
    do_U: go_F,
    do_D: go_B,
    doUL: go_L,
    doUR: go_R,
    do_L: tr_L,
    do_R: tr_R,
    menu: menu,
};
function init_move_mode() {
    global_for_maze_1.g_ctls.set(ctls_move_nor);
}
function act_move_mode() {
    global_for_maze_1.g_ctls.act(ctls_move_nor);
    global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.Move());
    global_for_maze_1.g_hresInfo === null || global_for_maze_1.g_hresInfo === void 0 ? void 0 : global_for_maze_1.g_hresInfo.update();
    setCanvas3DClick();
}
function do_instant_load() {
    (0, F_load_and_save_1.instant_load)().then((jsonObj) => {
        (0, F_set_save_mode_1.decode_all)(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save);
        (0, global_for_maze_1.do_load_bottom_half)('ロードしました');
    });
}
function do_instant_save() {
    (0, F_set_save_mode_1.set_g_save)(-1, -1, '簡易保存データ', '', `『${global_for_maze_1.g_maze.get_name()}』 `
        + `地下 ${global_for_maze_1.g_team.get_pd().z + 1}階層 `
        + `(X: ${global_for_maze_1.g_team.get_pd().x}, Y: ${global_for_maze_1.g_team.get_pd().y})`, true);
    (0, F_load_and_save_1.instant_save)();
}
function clear_mask_around_the_team() {
    global_for_maze_1.g_maze.clear_mask_around_the_team(global_for_maze_1.g_team);
}
function change_unexp_to_floor(p) {
    global_for_maze_1.g_maze.change_unexp_to_floor(p);
}
function go_F() {
    const rslt = global_for_maze_1.g_team.getWalker().hope_p_fwd();
    move_check(rslt);
    hero_on_event();
    do_move_bottom_half('blink_on');
}
function go_B() {
    const rslt = global_for_maze_1.g_team.getWalker().hope_p_bak();
    move_check(rslt);
    hero_on_event();
    do_move_bottom_half('blink_on');
}
function go_L() {
    const rslt = global_for_maze_1.g_team.getWalker().hope_p_lft();
    move_check(rslt);
    hero_on_event();
    do_move_bottom_half('blink_on');
}
function go_R() {
    const rslt = global_for_maze_1.g_team.getWalker().hope_p_rgt();
    move_check(rslt);
    hero_on_event();
    do_move_bottom_half('blink_on');
}
function tr_R() {
    const rslt = global_for_maze_1.g_team.getWalker().hope_turn_r();
    move_check(rslt);
    do_move_bottom_half('blink_off');
}
function tr_L() {
    const rslt = global_for_maze_1.g_team.getWalker().hope_turn_l();
    move_check(rslt);
    hero_on_event();
    do_move_bottom_half('blink_off');
}
function move_check(r) {
    global_for_maze_1.g_mvm.clear_message();
    action_obj();
    if (!r.has_hope)
        return;
    switch (r.hope) {
        case 'Wait':
            break;
        case 'Turn':
            const _turn_rslt = (0, F_GM_Hres_move_and_turn_1.can_turn_team)(r);
            if (_turn_rslt.ok)
                global_for_maze_1.g_team.getWalker().set_pd(r.subj);
            break;
        case 'Move':
            const _move_rslt = (0, F_GM_Hres_move_and_turn_1.can_move_team)(r);
            if (_move_rslt.ok) {
                global_for_maze_1.g_team.getWalker().set_pd(r.subj);
                for (const hero of global_for_maze_1.g_hres) {
                    if (hero === undefined)
                        continue;
                    if (!hero.is_alive())
                        continue;
                    hero.hp_auto_heal();
                }
            }
            else {
                const damage = (0, F_Rand_1._irand)(Math.trunc(_move_rslt.dmg * 0.9), Math.ceil(_move_rslt.dmg * 1.1));
                for (const hero of global_for_maze_1.g_hres) {
                    if (hero === undefined)
                        continue;
                    if (!hero.is_alive())
                        continue;
                    hero.hp_damage(damage);
                }
                dont_move(r);
            }
            break;
    }
    global_for_maze_1.g_hresInfo.update();
}
function dont_move(r) {
    global_for_maze_1.g_mvm.normal_message('進めない！（笑）');
    return;
}
function around_obj(r) { }
function action_obj() {
    for (const obje of global_for_maze_1.g_maze.get_obj_array()) {
        if (obje === undefined)
            continue;
        const walker = obje.walker();
        if (walker === undefined)
            continue;
        const wres = obje.wres();
        if (wres === undefined)
            continue;
        const hope = walker.wonder();
        if (!hope.has_hope) {
            global_1.g_mes.normal_message(`近くのWanderWalkerはやる気がありません。`);
            continue;
        }
        const action = (0, F_GM_Wndr_move_and_turn_1.can_move_wndr)(walker, hope);
        switch (action.res) {
            case 'Move':
            case 'Turn':
                if (action.ok) {
                    walker.set_pd(hope.subj);
                    global_1.g_mes.normal_message(`近くのWanderWalkerが(x:${walker.get_pd().x},y:${walker.get_pd().y})(向:${walker.get_pd().d})に${hope.hope}しました。`);
                    continue;
                }
                else {
                    global_1.g_mes.normal_message(`近くのWanderWalkerは何もしませんでした。`);
                    continue;
                }
            case 'Block':
                for (const wndr of wres) {
                    if (wndr === undefined)
                        continue;
                    if (!wndr.is_alive())
                        continue;
                    wndr.hp_damage(action.dmg);
                }
                global_1.g_mes.normal_message(`近くのWanderWalkerはぶつかりました＞＜`);
                continue;
            case 'Wait':
                continue;
        }
    }
}
function hero_on_event() {
    var _a;
    const pos = global_for_maze_1.g_team.get_pd();
    const objs = global_for_maze_1.g_maze.get_any_obj(pos);
    for (let o of objs) {
        if (o === undefined)
            continue;
        if (o instanceof C_Team_1.C_Team)
            continue;
        if (o.get_pd().within(pos)) {
            (0, F_set_bttl_mode_1.act_bttl_mode)(o);
        }
        else {
            const kind = (_a = global_for_maze_1.g_maze.get_cell(global_for_maze_1.g_team.get_pd())) === null || _a === void 0 ? void 0 : _a.getKind();
            switch (kind) {
                case T_MzKind_1.T_MzKind.StrUp:
                case T_MzKind_1.T_MzKind.StrDn:
                case T_MzKind_1.T_MzKind.StrUD:
                    do_stairs_motion(kind);
                    return;
            }
        }
    }
}
;
function do_move_bottom_half(blink_mode) {
    change_unexp_to_floor(global_for_maze_1.g_team.get_pd());
    (0, F_display_maze3D_1.display_maze3D)();
    display_maze_name();
    if (blink_mode === 'blink_on')
        (0, F_display_maze3D_1.maze3D_blink_on_direction)();
    else
        (0, F_display_maze3D_1.maze3D_blink_off_direction)();
    if (!mask_floor_cleared()) {
        clear_mask_around_the_team();
        if (mask_floor_cleared()) {
            if (mask_maze_cleared())
                alert('おめでとう！！この迷宮を制覇しました！！！');
            else
                alert('この階を制覇しました！！');
        }
    }
    (0, F_display_maze2D_1.display_maze2D)();
    (0, F_display_mazeCh_1.display_mazeCh)();
}
function mask_floor_cleared() { return global_for_maze_1.g_maze.is_floor_cleared(global_for_maze_1.g_team.get_pd()); }
function mask_maze_cleared() { return global_for_maze_1.g_maze.is_maze_cleared(); }
function display_maze_name() {
    try {
        const p = document.getElementById('maze_view3D_maze_name_info');
        p.innerHTML = global_for_maze_1.g_maze.get_name();
    }
    catch (err) { }
    ;
}
function setCanvas3DClick() {
    if ((global_for_maze_1.g_ds === null || global_for_maze_1.g_ds === void 0 ? void 0 : global_for_maze_1.g_ds.canvas) === null)
        return;
    global_for_maze_1.g_ds.canvas.onclick = canvas3Dclick;
}
function clrCanvas3DClick() {
    if ((global_for_maze_1.g_ds === null || global_for_maze_1.g_ds === void 0 ? void 0 : global_for_maze_1.g_ds.canvas) === null)
        return;
    global_for_maze_1.g_ds.canvas.onclick = () => { };
}
function canvas3Dclick(ev) {
    var _a, _b, _c, _d;
    if ((global_for_maze_1.g_ds === null || global_for_maze_1.g_ds === void 0 ? void 0 : global_for_maze_1.g_ds.canvas) === null)
        return;
    if (ev.target !== global_for_maze_1.g_ds.canvas)
        return;
    const cvs = global_for_maze_1.g_ds.canvas;
    const left_pane_r = cvs.clientWidth * 0.25;
    const rght_pane_l = cvs.clientWidth * 0.75;
    const back_pane_u = cvs.clientHeight * 0.80;
    if (ev.offsetX < left_pane_r) {
        (_a = document.getElementById('l_arr')) === null || _a === void 0 ? void 0 : _a.click();
        return;
    }
    if (ev.offsetX > rght_pane_l) {
        (_b = document.getElementById('r_arr')) === null || _b === void 0 ? void 0 : _b.click();
        return;
    }
    if (ev.offsetY < back_pane_u) {
        (_c = document.getElementById('u_arr')) === null || _c === void 0 ? void 0 : _c.click();
        return;
    }
    (_d = document.getElementById('d_arr')) === null || _d === void 0 ? void 0 : _d.click();
    return;
}
function do_stairs_motion(kind) {
    switch (kind) {
        case T_MzKind_1.T_MzKind.StrUp:
            clrCanvas3DClick();
            (0, F_set_UD_mode_1.act_Up_mode)();
            break;
        case T_MzKind_1.T_MzKind.StrDn:
            clrCanvas3DClick();
            (0, F_set_UD_mode_1.act_Dn_mode)();
            break;
        case T_MzKind_1.T_MzKind.StrUD:
            clrCanvas3DClick();
            (0, F_set_UD_mode_1.act_UD_mode)();
            break;
    }
}
function menu() {
    clrCanvas3DClick();
    global_for_maze_1.g_mvm.clear_message();
    (0, F_set_menu_mode_1.act_menu_mode)();
}


/***/ }),

/***/ "./src/mai_maze/F_set_mvpt_mode.ts":
/*!*****************************************!*\
  !*** ./src/mai_maze/F_set_mvpt_mode.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_mvpt_mode = init_mvpt_mode;
exports.act_mvpt_mode = act_mvpt_mode;
const F_set_menu_mode_1 = __webpack_require__(/*! ./F_set_menu_mode */ "./src/mai_maze/F_set_menu_mode.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
const C_UrlOpt_1 = __webpack_require__(/*! ../d_utl/C_UrlOpt */ "./src/d_utl/C_UrlOpt.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const F_POST_1 = __webpack_require__(/*! ../d_cmn/F_POST */ "./src/d_cmn/F_POST.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
let mode;
const ctls_mvpt_nor = {
    name: 'mvpt_nor',
    isOK: isOK,
    isNG: isNG,
    cpOK: isOK,
    cpNG: isNG,
};
function init_mvpt_mode() {
    global_for_maze_1.g_ctls.set(ctls_mvpt_nor);
}
function act_mvpt_mode() {
    mode = 'chek';
    global_for_maze_1.g_cvm.notice_message('本当に街へ戻りますか？この場所にはギルドから復帰できます');
    global_for_maze_1.g_ctls.act(ctls_mvpt_nor);
    global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.MvPt());
}
function isOK() {
    switch (mode) {
        case 'view':
            global_for_maze_1.g_cvm.notice_message('本当に街へ戻りますか？この場所にはギルドから復帰できます');
            mode = 'chek';
            break;
        case 'chek':
            global_for_maze_1.g_cvm.notice_message('街へ戻りました');
            mode = 'view';
            const mvpt = global_for_maze_1.g_team.get_loc().clone();
            mvpt.set_url(global_1.g_my_url);
            mvpt.set_tid(global_for_maze_1.g_team.uid());
            mvpt.set_uid(global_for_maze_1.g_maze.uid());
            global_1.g_save.all_mvpt[mvpt.uid()] = mvpt;
            global_1.g_save.all_team[global_for_maze_1.g_team.uid()] = global_for_maze_1.g_team;
            global_1.g_save.all_maze[global_for_maze_1.g_maze.uid()] = global_for_maze_1.g_maze;
            (0, F_load_and_save_1.tmp_save)().then(() => {
                const opt = new C_UrlOpt_1.C_UrlOpt();
                opt.set('mode', 'load');
                opt.set('pid', global_1.g_start_env.pid);
                opt.set('opt', 100);
                (0, F_POST_1.POST_and_move_page)(global_1.g_url[global_1.g_url_mai_guld], opt);
                return;
            });
            break;
    }
}
function isNG() {
    switch (mode) {
        case 'chek':
            global_for_maze_1.g_cvm.clear_message();
            (0, F_set_menu_mode_1.act_menu_mode)();
            break;
    }
}


/***/ }),

/***/ "./src/mai_maze/F_set_save_mode.ts":
/*!*****************************************!*\
  !*** ./src/mai_maze/F_set_save_mode.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_SL_mode = init_SL_mode;
exports.act_load_mode = act_load_mode;
exports.act_save_mode = act_save_mode;
exports.display_save_list = display_save_list;
exports.decode_all = decode_all;
exports.decode_maze = decode_maze;
exports.set_g_save = set_g_save;
const C_UrlOpt_1 = __webpack_require__(/*! ../d_utl/C_UrlOpt */ "./src/d_utl/C_UrlOpt.ts");
const C_Location_1 = __webpack_require__(/*! ../d_mdl/C_Location */ "./src/d_mdl/C_Location.ts");
const C_PointDir_1 = __webpack_require__(/*! ../d_mdl/C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_CtlCursor_1 = __webpack_require__(/*! ../d_ctl/C_CtlCursor */ "./src/d_ctl/C_CtlCursor.ts");
const F_POST_1 = __webpack_require__(/*! ../d_cmn/F_POST */ "./src/d_cmn/F_POST.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_set_menu_mode_1 = __webpack_require__(/*! ./F_set_menu_mode */ "./src/mai_maze/F_set_menu_mode.ts");
const F_set_move_mode_1 = __webpack_require__(/*! ./F_set_move_mode */ "./src/mai_maze/F_set_move_mode.ts");
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
const C_SaveInfo_1 = __webpack_require__(/*! ../d_mdl/C_SaveInfo */ "./src/d_mdl/C_SaveInfo.ts");
let for_save = false;
let UL_idx = 0;
let UL_bak = 999;
let save_UL_list;
let UL_list_crsr;
let UL_list_leng;
let UL_to_Data;
let form_id;
let form_time;
let form_detail;
let form_point;
let is_kakunin = false;
let save_list;
const save_list_max = 20;
const ctls_load_rtn = {
    name: 'load_rtn',
    isNG: go_back_menu_mode,
    isRT: go_back_menu_mode,
    cpRT: go_back_menu_mode,
};
const ctls_load_nor = {
    name: 'load_nor',
    do_U: do_U,
    do_D: do_D,
    do_L: do_L,
    do_R: do_R,
    isOK: check_load,
    cpOK: check_load,
    isNG: go_back_menu_mode,
    isRT: go_back_menu_mode,
    cpRT: go_back_menu_mode,
};
const ctls_load_chk = {
    name: 'load_chk',
    do_U: do_U,
    do_D: do_D,
    do_L: do_L,
    do_R: do_R,
    isOK: isOK_for_load,
    cpOK: isOK_for_load,
    isNG: isNG_for_load,
    cpNG: isNG_for_load,
    isRT: go_back_menu_mode,
    cpRT: go_back_menu_mode,
};
const ctls_save_nor = {
    name: 'save_nor',
    do_U: do_U,
    do_D: do_D,
    do_L: do_L,
    do_R: do_R,
    isOK: check_save,
    cpOK: check_save,
    isNG: go_back_menu_mode,
    isRT: go_back_menu_mode,
    cpRT: go_back_menu_mode,
};
const ctls_save_chk = {
    name: 'save_chk',
    do_U: do_U,
    do_D: do_D,
    do_L: do_L,
    do_R: do_R,
    isOK: isOK_for_save,
    cpOK: isOK_for_save,
    isNG: isNG_for_save,
    cpNG: isNG_for_save,
    isRT: go_back_menu_mode,
    cpRT: go_back_menu_mode,
};
function init_SL_mode() {
    init_view();
    init_ctls();
}
function act_load_mode() {
    __set_data(false).then(() => {
        if (!exist_save_list()) {
            hide_load_fields();
            global_for_maze_1.g_cvm.notice_message('ロードできるデータが有りません');
            global_for_maze_1.g_ctls.act(ctls_load_rtn);
            global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.Move());
            return;
        }
        else {
            show_load_fields();
            display_message();
            global_for_maze_1.g_ctls.act(ctls_load_nor);
            global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.LdSv());
        }
    });
}
function act_save_mode() {
    __set_data(true).then(() => {
        display_message();
        global_for_maze_1.g_ctls.act(ctls_save_nor);
        global_for_maze_1.g_vsw.view(global_for_maze_1.g_vsw.LdSv());
    });
}
function __set_data(_for_save) {
    return __awaiter(this, void 0, void 0, function* () {
        for_save = _for_save;
        global_for_maze_1.g_cvm.clear_message();
        is_kakunin = false;
        yield display_save_list();
    });
}
function hide_load_fields() {
    var _a, _b;
    (_a = document.getElementById('ldsv_data_list')) === null || _a === void 0 ? void 0 : _a.style.setProperty('display', 'none');
    (_b = document.getElementById('ldsv_data_fields')) === null || _b === void 0 ? void 0 : _b.style.setProperty('display', 'none');
}
function show_load_fields() {
    var _a, _b;
    (_a = document.getElementById('ldsv_data_list')) === null || _a === void 0 ? void 0 : _a.style.setProperty('display', 'block');
    (_b = document.getElementById('ldsv_data_fields')) === null || _b === void 0 ? void 0 : _b.style.setProperty('display', 'block');
}
function init_data() { }
function init_view() { }
function init_ctls() {
    is_kakunin = false;
    UL_bak = 999;
    global_for_maze_1.g_ctls.set(ctls_load_rtn);
    global_for_maze_1.g_ctls.set(ctls_load_nor);
    global_for_maze_1.g_ctls.set(ctls_load_chk);
    global_for_maze_1.g_ctls.set(ctls_save_nor);
    global_for_maze_1.g_ctls.set(ctls_save_chk);
}
function isOK_for_load() {
    if (save_UL_list === null)
        return;
    if (UL_idx < 0 || UL_idx > UL_list_leng - 1)
        return;
    load();
}
function isOK_for_save() {
    if (save_UL_list === null)
        return;
    if (UL_idx < 0 || UL_idx > UL_list_leng - 1)
        return;
    save();
}
function isNG_for_load() {
    _isNG_(ctls_load_nor);
}
function isNG_for_save() {
    _isNG_(ctls_save_nor);
}
function _isNG_(ctls) {
    if (!is_kakunin) {
        global_for_maze_1.g_cvm.clear_message();
        go_back_menu_mode();
    }
    else {
        is_kakunin = false;
        global_for_maze_1.g_ctls.act(ctls);
        display_message();
    }
}
function go_back_menu_mode() {
    global_for_maze_1.g_cvm.clear_message();
    (0, F_set_menu_mode_1.act_menu_mode)();
}
function go_back_move_mode() {
    (0, F_set_move_mode_1.act_move_mode)();
    (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
}
function do_U() {
    display_message();
    UL_idx = UL_list_crsr.pos_U();
    form_set();
}
function do_D() {
    display_message();
    UL_idx = UL_list_crsr.pos_D();
    form_set();
}
function do_L() {
    display_message();
    UL_idx = UL_list_crsr.pos_L();
    form_set();
}
function do_R() {
    display_message();
    UL_idx = UL_list_crsr.pos_R();
    form_set();
}
function form_clr() {
    if (UL_idx < 0 || UL_idx > UL_list_leng - 1)
        return;
    form_id.value = '-1';
    form_time.innerText = '';
    form_point.innerText = '';
    if (form_detail.hasAttribute('readonly')) {
        form_detail.removeAttribute('readonly');
        form_detail.value = '';
        form_detail.setAttribute('readonly', 'readonly');
    }
    else {
        form_detail.value = '';
    }
}
function form_set() {
    var _a;
    if (UL_idx < 0 || UL_idx > UL_list_leng - 1)
        return;
    form_clr();
    const data_idx = UL_to_Data[UL_idx];
    form_id.value = save_list[data_idx].save_id.toString();
    form_time.innerText = (_a = save_list[data_idx].save_time) === null || _a === void 0 ? void 0 : _a.toISOString();
    form_point.innerText = save_list[data_idx].point;
    if (form_detail.hasAttribute('readonly')) {
        form_detail.removeAttribute('readonly');
        form_detail.value = save_list[data_idx].detail;
        form_detail.setAttribute('readonly', 'readonly');
    }
    else {
        form_detail.value = save_list[data_idx].detail;
    }
}
function display_save_list() {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const data_list = 'ldsv_data_list';
        const data_id = 'ldsv_data_id';
        const data_time = 'ldsv_data_time';
        const data_detail = 'ldsv_data_detail';
        const data_point = 'ldsv_data_point';
        yield ((_a = (0, F_load_and_save_1.get_save_info)()) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
            if (jsonObj === null || jsonObj === undefined) {
                global_1.g_mes.warning_message('セーブ情報の受信に失敗しました。【受信データ無し】');
                return undefined;
            }
            if (jsonObj.ecode !== 0) {
                global_1.g_mes.warning_message(`『${jsonObj.emsg}』(${jsonObj.ecode})`);
                global_1.g_mes.warning_message('セーブ情報の受信に失敗しました。');
                return undefined;
            }
            try {
                save_list = {};
                for (let save_info of jsonObj.save_info) {
                    save_list[save_info.uniq_no] = new C_SaveInfo_1.C_SaveInfo(save_info);
                }
                if (for_save) {
                    for (let uniq_no_cnt = 0; uniq_no_cnt < save_list_max; uniq_no_cnt++) {
                        if (uniq_no_cnt in save_list)
                            continue;
                        save_list[uniq_no_cnt] = new C_SaveInfo_1.C_SaveInfo({
                            save_id: -1,
                            uniq_no: uniq_no_cnt,
                            title: `新規保存#${uniq_no_cnt.toString().padStart(2, '0')}`,
                            detail: '',
                            point: '',
                            save_time: undefined,
                            auto_mode: '0',
                        });
                    }
                }
                save_UL_list = document.getElementById(data_list);
                if (save_UL_list === null) {
                    alert('Can not find the Dom of Save List!');
                    return;
                }
                while (save_UL_list.firstChild !== null) {
                    save_UL_list.removeChild(save_UL_list.firstChild);
                }
                let UL_list_idx = 0;
                UL_to_Data = {};
                for (let data_idx in save_list) {
                    if (save_list[data_idx].auto_mode) {
                        if (for_save)
                            continue;
                        switch (save_list[data_idx].uniq_no) {
                            case 100:
                                save_list[data_idx].title = '自動保存分';
                                save_list[data_idx].detail = '作業用に簡易保存したデータです';
                                continue;
                            case 101:
                                save_list[data_idx].title = '簡易保存分';
                                save_list[data_idx].detail = 'デバッグモードで簡易保存したデータです';
                                break;
                            case 102:
                                save_list[data_idx].title = '階段直前分';
                                save_list[data_idx].detail = '一番最近のフロア移動直前に自動保存したデータです';
                                break;
                            case 103:
                                save_list[data_idx].title = 'ｲﾍﾞﾝﾄ直前分';
                                save_list[data_idx].detail = 'イベント(失敗)直前に簡易保存したデータです';
                                break;
                        }
                    }
                    const li = document.createElement('li');
                    li.innerHTML = `『${save_list[data_idx].title}』`;
                    li.id = UL_list_idx.toString();
                    li.addEventListener("click", for_save ? _OK_save_Fnc : _OK_load_Fnc, false);
                    save_UL_list.appendChild(li);
                    UL_to_Data[UL_list_idx++] = Number(data_idx);
                }
                UL_list_crsr = C_CtlCursor_1.C_CtlCursor.getObj(save_UL_list);
                UL_list_leng = save_UL_list.children.length;
                form_id = document.getElementById(data_id);
                form_time = document.getElementById(data_time);
                form_detail = document.getElementById(data_detail);
                form_point = document.getElementById(data_point);
                if (!exist_save_list())
                    return;
                UL_idx = 0;
                UL_list_crsr.set_pos(UL_idx);
                form_set();
                return;
            }
            catch (err) {
                global_1.g_mes.warning_message(err);
                global_1.g_mes.warning_message('セーブ情報の受信に失敗しました。【データ不一致】');
                return;
            }
        }));
    });
}
function _OK_load_Fnc(e) {
    UL_idx = Number(this.id);
    if (UL_idx !== UL_bak) {
        UL_bak = UL_idx;
        is_kakunin = false;
    }
    if (is_kakunin)
        isOK_for_load();
    else
        check_load();
    UL_list_crsr.set_pos(UL_idx);
    form_set();
}
function _OK_save_Fnc(e) {
    UL_idx = Number(this.id);
    if (UL_idx !== UL_bak) {
        UL_bak = UL_idx;
        is_kakunin = false;
    }
    if (is_kakunin)
        isOK_for_save();
    else
        check_save();
    UL_list_crsr.set_pos(UL_idx);
    form_set();
}
function exist_save_list() {
    return save_UL_list.children.length > 0;
}
function check_load() {
    const data_idx = UL_to_Data[UL_idx];
    if (UL_idx < 0 || UL_idx > UL_list_leng - 1) {
        global_1.g_mes.warning_message(`check!! No longer access idx!『${save_list[data_idx].title}』(save_id: ${save_list[data_idx].save_id})`);
    }
    is_kakunin = true;
    global_for_maze_1.g_ctls.act(ctls_load_chk);
    display_message();
}
function check_save() {
    const data_idx = UL_to_Data[UL_idx];
    if (UL_idx < 0 || UL_idx > UL_list_leng - 1) {
        global_1.g_mes.warning_message(`check!! No longer access idx!『${save_list[data_idx].title}』(save_id: ${save_list[data_idx].save_id})`);
    }
    if (save_list[data_idx].auto_mode) {
        global_1.g_mes.warning_message(`check!! This is Auto Mode!『${save_list[data_idx].title}』(save_id: ${save_list[data_idx].save_id})`);
    }
    is_kakunin = true;
    global_for_maze_1.g_ctls.act(ctls_save_chk);
    display_message();
}
function display_message() {
    if (for_save) {
        if (is_kakunin) {
            if (UL_to_Data[UL_idx] === undefined) {
                global_for_maze_1.g_cvm.notice_message('これに保存しますか？');
            }
            else {
                global_for_maze_1.g_cvm.notice_message('これに上書保存しますか？以前のデータは消去されます');
            }
        }
        else {
            global_for_maze_1.g_cvm.normal_message('どれに保存しますか？');
        }
    }
    else {
        if (is_kakunin) {
            global_for_maze_1.g_cvm.notice_message('ロードしますか？');
        }
        else {
            global_for_maze_1.g_cvm.normal_message('どれをロードしますか？');
        }
    }
}
function load() {
    const data_idx = UL_to_Data[UL_idx];
    if (save_list[data_idx].mypos.url() !== '' && save_list[data_idx].mypos.url() != global_1.g_my_url) {
        _load_other(data_idx);
        return;
    }
    _load_here(data_idx);
    return;
}
function _load_other(data_idx) {
    const opt = new C_UrlOpt_1.C_UrlOpt();
    opt.set('mode', 'load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('opt', save_list[data_idx].uniq_no.toString());
    (0, F_POST_1.POST_and_move_page)(save_list[data_idx].mypos.url(), opt);
    return;
}
function _load_here(data_idx) {
    global_1.g_start_env.pid = save_list[data_idx].player_id;
    (0, F_load_and_save_1.general_load)(save_list[data_idx].uniq_no).then((jsonObj) => {
        is_kakunin = false;
        decode_all(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save);
        global_for_maze_1.g_mvm.notice_message('ロードしました');
        go_back_move_mode();
    });
}
function save() {
    return __awaiter(this, void 0, void 0, function* () {
        const data_idx = UL_to_Data[UL_idx];
        set_g_save(save_list[data_idx].save_id, save_list[data_idx].uniq_no, `保存済: #${data_idx.toString().padStart(2, '0')}`, form_detail.value, `『${global_for_maze_1.g_maze.get_name()}』 `
            + `地下 ${global_for_maze_1.g_team.get_pd().z + 1}階層 `
            + `(X: ${global_for_maze_1.g_team.get_pd().x}, Y: ${global_for_maze_1.g_team.get_pd().y})`, false);
        (0, F_load_and_save_1.general_save)().then((jsonObj) => {
            decode_all(jsonObj);
            is_kakunin = false;
            global_for_maze_1.g_mvm.notice_message('保存しました');
            go_back_move_mode();
        });
    });
}
function decode_all(jsonObj) {
    var _a;
    if (jsonObj === undefined)
        return;
    global_1.g_save.decode(jsonObj);
    global_1.g_save.mypos.set_url(global_1.g_my_url);
    global_for_maze_1.g_team.decode(global_1.g_save.all_team[(_a = global_1.g_save.mypos.tid()) !== null && _a !== void 0 ? _a : ''].encode());
    global_for_maze_1.g_team.set_loc(global_1.g_save.mypos);
    const loc = global_for_maze_1.g_team.get_loc();
    if (loc.get_lckd() == C_Location_1.T_Lckd.Maze) {
        global_for_maze_1.g_maze.decode(global_1.g_save.all_maze[loc.get_uid()].encode());
    }
    decode_common();
}
function decode_maze(jsonObj) {
    var _a, _b, _c, _d;
    if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.maze) !== undefined)
        global_for_maze_1.g_maze.decode(jsonObj.maze);
    if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.pos) !== undefined) {
        let pos = new C_PointDir_1.C_PointDir({
            x: (_a = jsonObj.pos) === null || _a === void 0 ? void 0 : _a.x,
            y: (_b = jsonObj.pos) === null || _b === void 0 ? void 0 : _b.y,
            z: (_c = jsonObj.pos) === null || _c === void 0 ? void 0 : _c.z,
            d: (_d = jsonObj.pos) === null || _d === void 0 ? void 0 : _d.d,
        });
        global_for_maze_1.g_team.getWalker().set_place(global_for_maze_1.g_maze, global_1.g_my_url, pos);
        global_1.g_save.mypos = global_for_maze_1.g_team.get_loc();
    }
    decode_common();
    global_1.g_save.mypos = global_for_maze_1.g_team.get_loc();
    global_1.g_save.all_maze[global_for_maze_1.g_maze.uid()] = global_for_maze_1.g_maze;
    global_1.g_save.all_team[global_for_maze_1.g_team.uid()] = global_for_maze_1.g_team;
}
function decode_common() {
    (0, global_for_maze_1.clr_g_hres)();
    for (const hero of global_for_maze_1.g_team.hres())
        global_for_maze_1.g_hres.push(hero);
    global_for_maze_1.g_hresInfo.init();
    global_for_maze_1.g_maze.add_obj(global_for_maze_1.g_team);
    (0, global_for_maze_1.init_g_view2X)();
}
function set_g_save(save_id, uniq_no, title, detail, point, auto_mode) {
    global_1.g_save.mypos = global_for_maze_1.g_team.get_loc();
    global_1.g_save.all_team[global_for_maze_1.g_team.uid()] = global_for_maze_1.g_team;
    global_1.g_save.all_maze[global_for_maze_1.g_maze.uid()] = global_for_maze_1.g_maze;
    global_1.g_save.decode({
        save_id: save_id,
        player_id: global_1.g_start_env.pid,
        uniq_no: uniq_no,
        title: title,
        detail: detail,
        point: point,
        auto_mode: auto_mode ? '1' : '0',
        is_active: '1',
        is_delete: '0',
    });
}


/***/ }),

/***/ "./src/mai_maze/global_for_maze.ts":
/*!*****************************************!*\
  !*** ./src/mai_maze/global_for_maze.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.g_view3 = exports.g_ctls = exports.g_hresInfo = exports.g_view2M = exports.g_view2D = exports.g_guld = exports.g_team = exports.g_maze = exports.g_hres = exports.g_cvm = exports.g_mvm = exports.g_vsw = exports.g_ds = exports.g_ctls_mode = void 0;
exports.init_before_games = init_before_games;
exports.init_before_new_games = init_before_new_games;
exports.do_load_bottom_half = do_load_bottom_half;
exports.init_after_loaded_DOM = init_after_loaded_DOM;
exports.init_debug_mode = init_debug_mode;
exports.init_view3_mode = init_view3_mode;
exports.clr_g_hres = clr_g_hres;
exports.init_g_view2X = init_g_view2X;
exports.g_ctls_mode = new Array(1);
const F_display_mazeCh_1 = __webpack_require__(/*! ./F_display_mazeCh */ "./src/mai_maze/F_display_mazeCh.ts");
const F_display_maze3D_1 = __webpack_require__(/*! ./F_display_maze3D */ "./src/mai_maze/F_display_maze3D.ts");
exports.g_ds = { canvas: null, con: null, depth: 0, wall: null };
const C_SwitchView_1 = __webpack_require__(/*! ./C_SwitchView */ "./src/mai_maze/C_SwitchView.ts");
const C_OneLineViewMessage_1 = __webpack_require__(/*! ../d_vie/C_OneLineViewMessage */ "./src/d_vie/C_OneLineViewMessage.ts");
exports.g_hres = [];
const C_Maze_1 = __webpack_require__(/*! ../d_mdl/C_Maze */ "./src/d_mdl/C_Maze.ts");
exports.g_maze = new C_Maze_1.C_Maze();
const C_Team_1 = __webpack_require__(/*! ../d_mdl/C_Team */ "./src/d_mdl/C_Team.ts");
exports.g_team = new C_Team_1.C_Team();
const C_Guild_1 = __webpack_require__(/*! ../d_mdl/C_Guild */ "./src/d_mdl/C_Guild.ts");
exports.g_guld = new C_Guild_1.C_Guild();
const C_DrowMap2X_1 = __webpack_require__(/*! ./C_DrowMap2X */ "./src/mai_maze/C_DrowMap2X.ts");
const C_WndrObj_1 = __webpack_require__(/*! ../d_mdl/C_WndrObj */ "./src/d_mdl/C_WndrObj.ts");
const C_HresInfo_1 = __webpack_require__(/*! ./C_HresInfo */ "./src/mai_maze/C_HresInfo.ts");
const C_DefaultCtls_1 = __webpack_require__(/*! ./C_DefaultCtls */ "./src/mai_maze/C_DefaultCtls.ts");
const F_set_mode_1 = __webpack_require__(/*! ./F_set_mode */ "./src/mai_maze/F_set_mode.ts");
const F_set_save_mode_1 = __webpack_require__(/*! ./F_set_save_mode */ "./src/mai_maze/F_set_save_mode.ts");
const F_set_move_mode_1 = __webpack_require__(/*! ./F_set_move_mode */ "./src/mai_maze/F_set_move_mode.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_MazeObjEtc_1 = __webpack_require__(/*! ../d_mdl/C_MazeObjEtc */ "./src/d_mdl/C_MazeObjEtc.ts");
const C_CycleButton_1 = __webpack_require__(/*! ../d_ctl/C_CycleButton */ "./src/d_ctl/C_CycleButton.ts");
const F_display_maze2D_1 = __webpack_require__(/*! ./F_display_maze2D */ "./src/mai_maze/F_display_maze2D.ts");
function init_before_games() {
    switch (global_1.g_start_env.mode) {
        case 'new':
            init_before_new_games();
            return;
        case 'load':
            init_before_load_games();
            return;
        case 'start':
            init_before_start_games();
            return;
        case 'mvpt':
            init_before_mvpt_games();
            return;
    }
}
function init_before_new_games() {
    (0, F_load_and_save_1.get_mai_maze)().then((jsonObj) => {
        (0, F_set_save_mode_1.decode_all)(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save);
        do_load_bottom_half('');
    });
}
function init_before_load_games() {
    const uno = Number(global_1.g_start_env.opt);
    (0, F_load_and_save_1.general_load)(uno).then((jsonObj) => {
        (0, F_set_save_mode_1.decode_all)(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save);
        do_load_bottom_half('ロードしました');
    });
}
function init_before_start_games() {
    const maze_name = global_1.g_start_env.opt;
    (0, F_load_and_save_1.tmp_load)().then((jsonObj) => {
        (0, F_set_save_mode_1.decode_all)(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save);
        (0, F_load_and_save_1.get_new_maze)(maze_name).then((jsonObj) => {
            (0, F_set_save_mode_1.decode_maze)(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data);
            do_load_bottom_half('冒険を始めましょう！');
        });
    });
}
function init_before_mvpt_games() {
    (0, F_load_and_save_1.tmp_load)().then((jsonObj) => {
        (0, F_set_save_mode_1.decode_all)(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save);
        do_load_bottom_half('冒険を再開しましょう！！');
    });
}
function do_load_bottom_half(msg) {
    (0, F_display_mazeCh_1.init_mazeCh)();
    (0, F_display_maze2D_1.init_maze2D)();
    exports.g_ds = (0, F_display_maze3D_1.init_maze3D)();
    exports.g_mvm.notice_message(msg);
    global_1.g_mes.notice_message(msg);
    (0, F_set_move_mode_1.act_move_mode)();
    (0, F_set_move_mode_1.do_move_bottom_half)('blink_off');
}
function init_after_loaded_DOM() {
    (0, global_1.init_after_loaded_DOM_in_common)('debug_mode', 'pane_sytm_logs');
    exports.g_mvm = C_OneLineViewMessage_1.C_OneLineViewMessage.getObj('maze_mesg');
    exports.g_cvm = C_OneLineViewMessage_1.C_OneLineViewMessage.getObj('menu_mesg');
    exports.g_ctls = C_DefaultCtls_1.C_DefaultCtls.getObj();
    exports.g_vsw = C_SwitchView_1.C_SwitchView.getObj();
    exports.g_hresInfo = new C_HresInfo_1.C_HresInfo();
    const btn = document.getElementById('view3_mode');
    exports.g_view3 = C_CycleButton_1.C_CycleButton.getObj(btn);
    init_g_view2X();
    init_debug_mode();
    init_view3_mode();
    stop_double_click();
    (0, F_set_mode_1.init_all_mode)();
    global_1.g_ready_games.setFunction(init_before_games);
    global_1.g_ready_games.setLoadedDOM();
}
function init_debug_mode() {
    try {
        const alert = document.getElementById('alert_mode');
        alert === null || alert === void 0 ? void 0 : alert.style.setProperty('display', 'none');
        alert === null || alert === void 0 ? void 0 : alert.addEventListener("click", (event) => {
            try {
                global_1.g_alert.show();
            }
            catch (err) { }
            ;
        });
        global_1.g_debug.setObj({
            yn: false,
            onName: 'DEBUG',
            offName: '通常',
            onClass: 'debug',
            offClass: 'normal',
        });
        global_1.g_debug.addFnc(toggle_debug_mode);
        const btn = document.getElementById('debug_mode');
        window.addEventListener("keydown", (event) => {
            switch (event.code) {
                case "NumpadMultiply":
                case "Escape":
                    btn.click();
                    toggle_debug_mode(global_1.g_debug.isON());
                    break;
            }
        });
    }
    catch (err) {
        return;
    }
    ;
}
function toggle_debug_mode(yn) {
    (0, F_display_mazeCh_1.display_mazeCh)();
    (0, F_display_maze2D_1.display_maze2D)();
    (0, F_display_maze3D_1.display_maze3D)();
    const alert = document.getElementById('alert_mode');
    const display = yn ? 'block' : 'none';
    alert === null || alert === void 0 ? void 0 : alert.style.setProperty('display', display);
}
function init_view3_mode() {
    try {
        exports.g_view3.setObj({
            at: 0,
            ccName: ['3D', '2D', 'Ch'],
            ccClass: ['d3', 'd2', 'ch'],
        });
        exports.g_view3.addFnc(cycle_view3_mode);
        const btn = document.getElementById('view3_mode');
        window.addEventListener("keydown", (event) => {
            switch (event.code) {
                case "Digit3":
                case "KeyV":
                    btn.click();
            }
        });
        cycle_view3_mode(0);
    }
    catch (err) {
        return;
    }
    ;
}
function cycle_view3_mode(seq) {
    const d3 = document.getElementById('div_maze_vw3D');
    const d2 = document.getElementById('div_maze_vw2D');
    const ch = document.getElementById('div_maze_vwCh');
    switch (exports.g_view3.at()) {
        case 0:
            d3.style.setProperty('display', 'block');
            d2.style.setProperty('display', 'none');
            ch.style.setProperty('display', 'none');
            (0, F_display_maze3D_1.display_maze3D)();
            break;
        case 1:
            d3.style.setProperty('display', 'none');
            d2.style.setProperty('display', 'block');
            ch.style.setProperty('display', 'none');
            (0, F_display_maze2D_1.display_maze2D)();
            break;
        case 2:
            d3.style.setProperty('display', 'none');
            d2.style.setProperty('display', 'none');
            ch.style.setProperty('display', 'block');
            (0, F_display_mazeCh_1.display_mazeCh)();
            break;
    }
}
function stop_double_click() {
    window.addEventListener('dblclick', (evt) => { evt.preventDefault(); });
}
function clr_g_hres() {
    exports.g_hres = [];
}
function init_g_view2X() {
    exports.g_view2D = C_DrowMap2X_1.C_DrowMap2X.getObj({
        div_id: 'div_maze_vw2D',
        canvas_id: 'maze_view2D_canvas',
        x_min: 15, y_min: 15
    });
    exports.g_view2M = C_DrowMap2X_1.C_DrowMap2X.getObj({
        div_id: 'div_maze_vw2M',
        canvas_id: 'maze_view2M_canvas',
        x_min: 5, y_min: 5
    });
}
function install_objs(num = 1) {
    for (let i = 0; i < num; i++) {
        const x = (0, F_Rand_1._irand)(0, (exports.g_maze.get_x_max() - 1) / 2 - 1) * 2 + 1;
        const y = (0, F_Rand_1._irand)(0, (exports.g_maze.get_y_max() - 1) / 2 - 1) * 2 + 1;
        const obje = new C_WndrObj_1.C_WndrObj({
            pos: { x: x, y: y, z: 0, d: 0 },
        });
        exports.g_maze.add_obj(obje);
    }
    for (let i = 0; i < num; i++) {
        const x = (0, F_Rand_1._irand)(0, (exports.g_maze.get_x_max() - 1) / 2 - 1) * 2 + 1;
        const y = (0, F_Rand_1._irand)(0, (exports.g_maze.get_y_max() - 1) / 2 - 1) * 2 + 1;
        const obj = new C_MazeObjEtc_1.C_MazeObjShadow({
            pos: { x: x, y: y, z: 0, d: 0 },
        });
        exports.g_maze.add_obj(obj);
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**********************************!*\
  !*** ./src/mai_maze/mai_maze.ts ***!
  \**********************************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const global_for_maze_1 = __webpack_require__(/*! ./global_for_maze */ "./src/mai_maze/global_for_maze.ts");
window.addEventListener('DOMContentLoaded', function () {
    (0, global_for_maze_1.init_after_loaded_DOM)();
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O1FBRS9DLE1BQU0sSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQUksQ0FBQyxLQUFLLDBDQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLG1DQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFFLENBQUM7UUFFeEYsTUFBTSxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDNUMsVUFBSSxDQUFDLEtBQUssMENBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsVUFBSSxDQUFDLEtBQUssMENBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsVUFBSSxDQUFDLEtBQUssMENBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBQ00sT0FBTyxDQUFDLElBQVk7O1FBQ3ZCLElBQU0sTUFBTSxHQUFHLGdCQUFJLENBQUMsS0FBSywwQ0FBRSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQ0FBSSxDQUFDLENBQUM7UUFDOUMsSUFBSSxNQUFNLElBQUksQ0FBQztZQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTFCLE1BQU0sSUFBSSxJQUFJLENBQUM7UUFFZixNQUFNLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxVQUFJLENBQUMsS0FBSywwQ0FBRSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixVQUFJLENBQUMsS0FBSywwQ0FBRSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztR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O1FBQ25ELElBQUksQ0FBQyxDQUFDLElBQUksS0FBUyxTQUFTO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3JELElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBTSxTQUFTO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3hELElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBTSxTQUFTO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3hELElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBVSxTQUFTO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBUSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3BELElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBVSxTQUFTO1lBQUUsSUFBSSxDQUFDLEdBQUcsR0FBUSxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3BELElBQUksQ0FBQyxDQUFDLEtBQUssS0FBUSxTQUFTO1lBQUUsSUFBSSxDQUFDLEtBQUssR0FBTSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3RELElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBVyxTQUFTO1lBQUUsSUFBSSxDQUFDLEVBQUUsR0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ25ELElBQUksQ0FBQyxDQUFDLElBQUksS0FBUyxTQUFTO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBR3JELElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBUyxTQUFTLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQUksQ0FBQyxHQUFHLG1DQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUVELElBQUksQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTO1lBQUUsVUFBSSxDQUFDLEtBQUssMENBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkUs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RU0sR0FBRyxDQUFDLENBQW9CO1FBQzNCLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsQ0FBQztJQUNMLENBQUM7SUFHUyxPQUFPO1FBQ2IsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUssSUFBSSxDQUFDLElBQUksQ0FBRSxFQUFFLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUUsQ0FBQztJQUMzRixDQUFDO0lBRVMsT0FBTztRQUNiLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFJLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUUsQ0FBQztRQUN0RSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBSSxJQUFJLENBQUMsSUFBSSxDQUFFLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFFLENBQUM7UUFDdEUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUksSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBRSxDQUFDO1FBQ3RFLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFJLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFrQixDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUUsQ0FBQztJQUMxRSxDQUFDO0lBRU0sV0FBVyxDQUFDLGFBQXFCLENBQUM7UUFFckMsTUFBTSxFQUFFLEdBQUssVUFBVSxHQUFHLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSyxvQkFBTyxFQUFDLENBQUMsRUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFLLG9CQUFPLEVBQUMsQ0FBQyxFQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUssb0JBQU8sRUFBQyxDQUFDLEVBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSyxvQkFBTyxFQUFDLENBQUMsRUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFLLG9CQUFPLEVBQUMsQ0FBQyxFQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUssb0JBQU8sRUFBQyxDQUFDLEVBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSyxvQkFBTyxFQUFDLENBQUMsRUFBSSxFQUFFLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxD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Q0FBQztJQUMxQixDQUFDO0lBRU0sWUFBWSxDQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztRQUNoRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFDTSxRQUFRLENBQUUsQ0FBVTtRQUN2QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBQ00sUUFBUSxDQUFDLENBQVUsRUFBRSxDQUFXO1FBQ25DLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLHVCQUFVLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUNyRSxDQUFDO0lBQ0wsQ0FBQztJQUNNLFlBQVksQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFXO1FBQzVELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENB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MUMsSUFBSSxDQUFDLEtBQUssU0FBUztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRWpDLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBTSxTQUFTO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBTSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxDQUFDLEtBQUssS0FBTyxTQUFTO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBSSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3RELElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBTSxTQUFTO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQUUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2pGLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBUyxTQUFTO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBTSxDQUFDLENBQUMsR0FBRyxLQUFRLEVBQUUsQ0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzlFLElBQUksQ0FBQyxDQUFDLEtBQUssS0FBTyxTQUFTO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBSSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3RELElBQUksQ0FBQyxDQUFDLEtBQUssS0FBTyxTQUFTO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBSSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3RELElBQUksQ0FBQyxDQUFDLEtBQUssS0FBTyxTQUFTO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBSSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3RELElBQUksQ0FBQyxDQUFDLElBQUksS0FBUSxTQUFTO1lBQUUsSUFBSSxDQUFDLE9BQU8sR0FBSyxDQUFDLENBQUMsSUFBSSxLQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFLLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbEYsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFPLFNBQVM7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFJLENBQUMsQ0FBQyxLQUFLLEtBQU0sRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakYsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFPLFNBQVM7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFJLENBQUMsQ0FBQyxLQUFLLEtBQU0sRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakYsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFPLFNBQVM7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFJLENBQUMsQ0FBQyxLQUFLLEtBQU0sRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakYsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFPLFNBQVM7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFJLENBQUMsQ0FBQyxLQUFLLEtBQU0sRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakYsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFPLFNBQVM7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFJLENBQUMsQ0FBQyxLQUFLLEtBQU0sRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakYsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFPLFNBQVM7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFJLENBQUMsQ0FBQyxLQUFLLEtBQU0sRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDakYsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFPLFNBQVM7WUFBRSxJQUFJLENBQUMsUUFBUSxHQUFJLENBQUMsQ0FBQyxLQUFLLEtBQU0sRUFBRSxDQUFFLENB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QU8sR0FBSyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFOUIsTUFBTSxVQUFVLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDMUUsTUFBTSxVQUFVLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUM7SUFFMUUsTUFBTSxVQUFVLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDMUUsTUFBTSxVQUFVLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUM7SUFFMUUsTUFBTSxVQUFVLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUM7SUFDMUUsTUFBTSxVQUFVLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUM7SUFJMUUsTUFBTSxZQUFZLEdBQUcsRUFBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEtBQUssR0FBRyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxFQUFDO0lBQ3ZGLE1BQU0sWUFBWSxHQUFHLEVBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsRUFBQztJQUN2RixNQUFNLFlBQVksR0FBRyxFQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxHQUFHLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FB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QUksQ0FBQyxTQUFTLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBSyxPQUFDLENBQUMsT0FBTyxtQ0FBTSxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdDLElBQUksQ0FBQyxLQUFLLEdBQU8sT0FBQyxDQUFDLEtBQUssbUNBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUMzQyxJQUFJLENBQUMsTUFBTSxHQUFNLE9BQUMsQ0FBQyxNQUFNLG1DQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDNUMsSUFBSSxDQUFDLEtBQUssR0FBTyxPQUFDLENBQUMsS0FBSyxtQ0FBUSxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzNDLElBQUksQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTO1lBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQzs7WUFBTSxDQUFDLENBQUMsU0FBUyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDdkYsSUFBSSxDQUFDLENBQUMsU0FBUyxLQUFLLFNBQVM7WUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDOztZQUFNLENBQUMsQ0FBQyxTQUFTLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN2RixJQUFJLENBQUMsQ0FBQyxTQUFTLEtBQUssU0FBUztZQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7O1lBQU0sQ0FBQyxDQUFDLFNBQVMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTO1lBQUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFdEUsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFTLFNBQVM7WUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBaUI7UUFDL0IsT0FBTyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU0sTUFBTTtRQUNULElBQUksU0FBaUIsQ0FBQztRQUN0QixJQUFJLENBQUM7WUFDRCxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM3QyxDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNYLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3pDLENBQUM7UUFFRCxJQUFJLENBQUM7WUFDRCxPQUFPO2dCQUNILE9BQU8sRUFBSSxJQUFJLENBQUMsT0FBTztnQkFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUN6QixPQUFPLEVBQUksSUFBSSxDQUFDLE9BQU87Z0JBQ3ZCLEtBQUssRUFBTSxJQUFJLENBQUMsS0FBSztnQkFDckIsTUFBTSxFQUFLLElBQUksQ0FBQyxNQUFNO2dCQUN0QixLQUFLLEVBQU0sSUFBSSxDQUFDLEtBQUs7Z0JBQ3JCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUc7Z0JBQ3JDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUc7Z0JBQ3JDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUc7Z0JBQ3JDLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixLQUFLLEVBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7YUFDakM7UUFDTCxDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNYLEtBQUssQ0FBQyx5QkFBeUIsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN2QyxPQUFPLEVBQUUsQ0FBQztRQUNkLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLENBQWdCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sS0FBSzs7UUFDUixLQUFLLENBQUMsZ0JBQWdCO2NBQ2hCLGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLE9BQU8sbUNBQU0sR0FBRyxDQUFDO2NBQzFDLGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLFNBQVMsbUNBQUksR0FBRyxDQUFDO2NBQzFDLGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLE9BQU8sbUNBQU0sR0FBRyxDQUFDO2NBQzFDLGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLEtBQUssbUNBQVEsR0FBRyxDQUFDO2NBQzFDLGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLE1BQU0sbUNBQU8sR0FBRyxDQUFDO2NBQzFDLGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLEtBQUssbUNBQVEsR0FBRyxDQUFDO2NBQzFDLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxJQUFHLEVBQUMsSUFBRyxDQUFDO2NBQzNDLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxJQUFHLEVBQUMsSUFBRyxDQUFDO2NBQzNDLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQyxJQUFHLEVBQUMsSUFBRyxDQUFDO2NBQzNDLGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsbUNBQVMsR0FBRyxDQUFDO2NBQ2pELGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsbUNBQVMsR0FBRyxDQUFDO2NBQ2pELGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsbUNBQUksR0FBRyxDQUFDO2NBQ2pELGdCQUFnQixHQUFHLENBQUMsVUFBSSxDQUFDLEtBQUssQ0FB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QU87UUFlOUIsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDdkMsS0FBSyx3QkFBVyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUFBLE1BQUs7WUFDM0UsS0FBSyx3QkFBVyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUFBLE1BQU07WUFDNUUsS0FBSyx3QkFBVyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUFBLE1BQU07WUFDNUUsS0FBSyx3QkFBVyxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxF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QUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUMxRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsYUFBRCxDQUFDLHVCQUFELENBQUMsQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLGFBQUQsQ0FBQyx1QkFBRCxDQUFDLENBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxhQUFELENBQUMsdUJBQUQsQ0FBQyxDQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUMxRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsYUFBRCxDQUFDLHVCQUFELENBQUMsQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLGFBQUQsQ0FBQyx1QkFBRCxDQUFDLENBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQzFELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxhQUFELENBQUMsdUJBQUQsQ0FBQyxDQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUMxRCxJQUFJ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NEdBQTBEO0FBRTFELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRTtJQUN4QywyQ0FBcUIsR0FBRSxDQUFDO0FBQzVCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfY21uL0NfQWxlcnRMb2cudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfY21uL0NfRGlhbG9nLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX2Ntbi9GX1BPU1QudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfY21uL0ZfbG9hZF9hbmRfc2F2ZS50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9jbW4vZ2xvYmFsLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX2N0bC9DX0N0bEN1cnNvci50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9jdGwvQ19DeWNsZUJ1dHRvbi50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9jdGwvQ19Pbk9mZkJ1dHRvbi50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19HdWlsZC50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19IZXJvLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX0hlcm9BYmlsaXR5LnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX0hvcGUudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfTG9jYXRpb24udHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfTWF6ZS50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19NYXplQ2VsbC50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19NYXplSW5mby50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19NYXplT2JqLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX01hemVPYmpFdGMudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfTWF6ZU9ialZpZXcudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfTWF6ZU9ialZpZXcyWC50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19Nb3ZhYmxlUG9pbnQudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfUG9pbnQudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfUG9pbnREaXIudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfUG9pbnRTZXQyRC50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19SYW5nZS50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19TYXZlRGF0YS50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19TYXZlSW5mby50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19UZWFtLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX1RlYW1WaWV3LnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX1RlYW1WaWV3MlgudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfV2Fsa2VyLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX1dhbGwudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfV25kci50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvQ19XbmRyT2JqLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX1duZHJPYmpCb3NzLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX1duZHJWaWV3LnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9DX1duZHJWaWV3MlgudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL0NfV25kcldhbGtlci50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvRl9uZXdfTWF6ZU9iai50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvRl9uZXdfV2Fsa2VyLnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX21kbC9UX0RpcmVjdGlvbi50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF9tZGwvVF9NektpbmQudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfbWRsL1RfT3JpZW50YXRpb24udHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfdXRsL0NfVXJsT3B0LnRzIiwid2VicGFjazovL21haS8uL3NyYy9kX3V0bC9GX01hdGgudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL2RfdXRsL0ZfUmFuZC50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF92aWUvQ19EaXNwbGF5TWVzc2FnZS50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvZF92aWUvQ19PbmVMaW5lVmlld01lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL21haV9tYXplL0NfRGVmYXVsdEN0bHMudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL21haV9tYXplL0NfRHJvd01hcDJYLnRzIiwid2VicGFjazovL21haS8uL3NyYy9tYWlfbWF6ZS9DX0hyZXNJbmZvLnRzIiwid2VicGFjazovL21haS8uL3NyYy9tYWlfbWF6ZS9DX1N3aXRjaFZpZXcudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL21haV9tYXplL0ZfR01fSHJlc19tb3ZlX2FuZF90dXJuLnRzIiwid2VicGFjazovL21haS8uL3NyYy9tYWlfbWF6ZS9GX0dNX1duZHJfbW92ZV9hbmRfdHVybi50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvbWFpX21hemUvRl9kaXNwbGF5X21hemUyRC50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvbWFpX21hemUvRl9kaXNwbGF5X21hemUzRC50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvbWFpX21hemUvRl9kaXNwbGF5X21hemVDaC50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvbWFpX21hemUvRl9zZXRfVURfbW9kZS50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvbWFpX21hemUvRl9zZXRfYnR0bF9tb2RlLnRzIiwid2VicGFjazovL21haS8uL3NyYy9tYWlfbWF6ZS9GX3NldF9tZW51X21vZGUudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL21haV9tYXplL0Zfc2V0X21vZGUudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL21haV9tYXplL0Zfc2V0X21vdmVfbW9kZS50cyIsIndlYnBhY2s6Ly9tYWkvLi9zcmMvbWFpX21hemUvRl9zZXRfbXZwdF9tb2RlLnRzIiwid2VicGFjazovL21haS8uL3NyYy9tYWlfbWF6ZS9GX3NldF9zYXZlX21vZGUudHMiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL21haV9tYXplL2dsb2JhbF9mb3JfbWF6ZS50cyIsIndlYnBhY2s6Ly9tYWkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbWFpLy4vc3JjL21haV9tYXplL21haV9tYXplLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9nZXRfdXVpZCB9IGZyb20gXCIuLi9kX3V0bC9GX1JhbmRcIjtcclxuaW1wb3J0IHsgQ19EaWFsb2cgfSAgZnJvbSBcIi4vQ19EaWFsb2dcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ19BbGVydExvZyBleHRlbmRzIENfRGlhbG9nIHtcclxuICAgIHByb3RlY3RlZCBzdGF0aWMgbWU6IHtbaWQ6IHN0cmluZ106IENfQWxlcnRMb2d9O1xyXG4gICAgcHVibGljICAgIHN0YXRpYyBnZXRPYmoodGFyZ2V0PzogSFRNTERpYWxvZ0VsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLm1lID8/PSB7fTtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGlhbG9nJykgYXMgSFRNTERpYWxvZ0VsZW1lbnQ7XHJcbiAgICAgICAgICAgIHRhcmdldC5pZCA9ICdkaWFsb2dfJyArIF9nZXRfdXVpZCgpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5tZVt0YXJnZXQuaWRdID8/PSBuZXcgQ19BbGVydExvZyh0YXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBtc2c6IHtbdHRsOiBzdHJpbmddOiBzdHJpbmdbXX07XHJcblxyXG4gICAgcHJvdGVjdGVkIHBhbmU6IEhUTUxEaXZFbGVtZW50fHVuZGVmaW5lZDtcclxuICAgIHByb3RlY3RlZCBsb2dzOiBIVE1MRGl2RWxlbWVudHx1bmRlZmluZWQ7XHJcbiAgICBwcm90ZWN0ZWQgYnRuczogSFRNTERpdkVsZW1lbnR8dW5kZWZpbmVkO1xyXG4gICAgcHJvdGVjdGVkIHVwZDogIEhUTUxCdXR0b25FbGVtZW50fHVuZGVmaW5lZDtcclxuICAgIHByb3RlY3RlZCBjbHI6ICBIVE1MQnV0dG9uRWxlbWVudHx1bmRlZmluZWQ7XHJcbiAgICBwcm90ZWN0ZWQgY2xzOiAgSFRNTEJ1dHRvbkVsZW1lbnR8dW5kZWZpbmVkO1xyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcih0YXJnZXQ6IEhUTUxEaWFsb2dFbGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIodGFyZ2V0KTtcclxuICAgICAgICB0aGlzLm1zZyA9IHt9O1xyXG5cclxuICAgICAgICB0aGlzLl9fY2xlYXJEaWFsb2coKTtcclxuICAgICAgICB0aGlzLl9fbWFrZURpYWxvZygpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9fY2xlYXJEaWFsb2coKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY3R4ID0gc3VwZXIuZ2V0V2luZG93KCk7XHJcbiAgICAgICAgd2hpbGUgKGN0eC5maXJzdENoaWxkKSBjdHgucmVtb3ZlQ2hpbGQoY3R4LmZpcnN0Q2hpbGQpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9fbWFrZURpYWxvZygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjdHggPSBzdXBlci5nZXRXaW5kb3coKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLnBhbmUgPSB0aGlzLl9fbWFrZVdpbmRvdyAoJ3BhbmUnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubG9ncyA9IHRoaXMuX19tYWtlUGFuZWwgKCdsb2dzJywgICB0aGlzLnBhbmUpO1xyXG4gICAgICAgICAgICB0aGlzLmJ0bnMgPSB0aGlzLl9fbWFrZVBhbmVsICgnYnRucycsICAgdGhpcy5wYW5lKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkICA9IHRoaXMuX19tYWtlQnV0dG9uKCd1cGRhdGUnLCAn5pu05pawJywgICB0aGlzLmJ0bnMpO1xyXG4gICAgICAgICAgICB0aGlzLmNsciAgPSB0aGlzLl9fbWFrZUJ1dHRvbignY2xlYXInLCAgJ+a2iOWOuycsICAgdGhpcy5idG5zKTtcclxuICAgICAgICAgICAgdGhpcy5jbHMgID0gdGhpcy5fX21ha2VCdXR0b24oJ2Nsb3NlJywgICfplonjgZjjgosnLCB0aGlzLmJ0bnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy51cGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e3RoaXMudXBkYXRlKCl9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9Pnt0aGlzLmNsZWFyICgpfSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmNscy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57dGhpcy5oaWRlICAoKX0sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubG9ncy5zdHlsZS5zZXRQcm9wZXJ0eSgndXNlci1zZWxlY3QnLCAndGV4dCcpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ3Muc3R5bGUuc2V0UHJvcGVydHkoJ21heC13aWR0aCcsICAgJzkwZHZ3Jyk7XHJcbiAgICAgICAgICAgIHRoaXMubG9ncy5zdHlsZS5zZXRQcm9wZXJ0eSgnbWluLWhlaWdodCcsICAnMy4wcmVtJyk7XHJcbiAgICAgICAgICAgIHRoaXMubG9ncy5zdHlsZS5zZXRQcm9wZXJ0eSgnbWF4LWhlaWdodCcsICAnODBkdmgnKTtcclxuICAgICAgICAgICAgdGhpcy5sb2dzLnN0eWxlLnNldFByb3BlcnR5KCdvdmVyZmxvdy14JywgICdhdXRvJyk7XHJcbiAgICAgICAgICAgIHRoaXMubG9ncy5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cteScsICAnYXV0bycpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFpvb21FbG0odGhpcy5sb2dzKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHt9XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX19tYWtlV2luZG93KGlkOiBzdHJpbmcpOiBIVE1MRGl2RWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgZGl2ICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgIGRpdi5pZCAgICAgPSBgJHt0aGlzLmlkfV8ke2lkfWA7XHJcbiAgICAgICAgdGhpcy5zZXRXaW5kb3coZGl2KTtcclxuICAgICAgICByZXR1cm4gZGl2O1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9fbWFrZVBhbmVsKGlkOiBzdHJpbmcsIHBhcmVudDogSFRNTEVsZW1lbnQpOiBIVE1MRGl2RWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgZGl2ICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgIGRpdi5pZCAgICAgPSBgJHt0aGlzLmlkfV8ke2lkfWA7XHJcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICAgICAgcmV0dXJuIGRpdjtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfX21ha2VCdXR0b24oaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBwYXJlbnQ6IEhUTUxFbGVtZW50KTogSFRNTEJ1dHRvbkVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGJ0biAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICBidG4uaWQgICAgICAgICA9IGAke3RoaXMuaWR9XyR7aWR9YDtcclxuICAgICAgICBidG4uaW5uZXJIVE1MICA9IG5hbWU7XHJcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGJ0bik7XHJcbiAgICAgICAgcmV0dXJuIGJ0bjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0X21lc3NhZ2UodHRsOiBzdHJpbmcsIG1zZzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgKHRoaXMubXNnW3R0bF0gPz89IFtdKS5wdXNoKG1zZyk7XHJcbiAgICAgICAgdGhpcy5fX2RvbV91cGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xyX21lc3NhZ2UodHRsPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHR0bCAhPT0gdW5kZWZpbmVkKSB7dGhpcy5tc2dbdHRsXSA9IFtdO3JldHVybjt9XHJcbiAgICAgICAgZm9yIChjb25zdCBpaSBpbiB0aGlzLm1zZykgdGhpcy5tc2dbaWldID0gW107XHJcbiAgICAgICAgdGhpcy5fX2RvbV9jbGVhcigpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge3RoaXMuX19kb21fdXBkYXRlKCl9XHJcbiAgICBwcm90ZWN0ZWQgX19kb21fdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX19kb21fY2xlYXIoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHRpdGxlIGluIHRoaXMubXNnKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG1zZyBvZiB0aGlzLm1zZ1t0aXRsZV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZmllbGRzZXQnKSBhcyBIVE1MRmllbGRTZXRFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGxnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGVnZW5kJykgICBhcyBIVE1MTGVnZW5kRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGxnLmlubmVySFRNTCA9IGAke3RpdGxlfSAoJHtEYXRlLm5vdygpLnRvU3RyaW5nKCl9KWA7XHJcbiAgICAgICAgICAgICAgICBmcy5hcHBlbmRDaGlsZChsZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcmUnKSAgICAgIGFzIEhUTUxQcmVFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgZnMuYXBwZW5kQ2hpbGQocHIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykgICAgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBwZy5pbm5lckhUTUwgPSBtc2c7XHJcbiAgICAgICAgICAgICAgICBwci5hcHBlbmRDaGlsZChwZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dzPy5hcHBlbmRDaGlsZChmcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyKCk6IHZvaWQge3RoaXMuY2xyX21lc3NhZ2UoKX1cclxuICAgIHByb3RlY3RlZCBfX2RvbV9jbGVhcigpOiB2b2lkIHtcclxuICAgICAgICB3aGlsZSAodGhpcy5sb2dzPy5maXJzdENoaWxkKSB0aGlzLmxvZ3MucmVtb3ZlQ2hpbGQodGhpcy5sb2dzLmZpcnN0Q2hpbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaG93KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgdHJ5IHtzdXBlci5zaG93KCk7fSBjYXRjaCAoZXJyKSB7fVxyXG4gICAgfVxyXG4gICAgcHVibGljIGhpZGUoKTogdm9pZCB7XHJcbiAgICAgICAgdHJ5IHtzdXBlci5oaWRlKCk7fSBjYXRjaCAoZXJyKSB7fVxyXG4gICAgfVxyXG4gICAgcHVibGljIGRpc3BsYXkoeW46IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB5bj90aGlzLnNob3coKTp0aGlzLmhpZGUoKTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgX2dldE51bSB9IGZyb20gXCIuLi9kX3V0bC9GX01hdGhcIjtcclxuaW1wb3J0IHsgX2dldF91dWlkIH0gZnJvbSBcIi4uL2RfdXRsL0ZfUmFuZFwiO1xyXG50eXBlIHh5ID0ge3g6IG51bWJlciwgeTogbnVtYmVyfTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDX0RpYWxvZyB7XHJcbiAgICBwcm90ZWN0ZWQgaWQ6ICBzdHJpbmc7XHJcbiAgICBwcml2YXRlICAgX19kaWE6IEhUTUxEaWFsb2dFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSAgIF9fcGFuOiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHByaXZhdGUgICBfX2N0eDogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBwcml2YXRlICAgX19tb3A6IHh5ID0ge3g6MCwgeTowfTtcclxuICAgIHByaXZhdGUgICBfX3Jzejoge1tpZDogc3RyaW5nXTogcmVzaXplRG9tfTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodGFyZ2V0PzogSFRNTERpYWxvZ0VsZW1lbnQpIHtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGlhbG9nJykgYXMgSFRNTERpYWxvZ0VsZW1lbnQ7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRhcmdldC5pZCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldC5pZCA9PT0gJycpIHRhcmdldC5pZCA9ICdkaWFsb2dfJyArIF9nZXRfdXVpZCgpO1xyXG4gICAgICAgIHRoaXMuaWQgPSB0YXJnZXQuaWQ7XHJcblxyXG4gICAgICAgIHRhcmdldC5zdHlsZS5tYXJnaW4gID0gJzAnO1xyXG4gICAgICAgIHRhcmdldC5zdHlsZS5wYWRkaW5nID0gJzAnO1xyXG4gICAgICAgIHRoaXMuX19kaWEgPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgIHRoaXMuX19wYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICB0aGlzLl9fc2V0X2RpYWxvZ19zdHlsZSgpO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fX2N0eCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuX19jdHguc3R5bGUuZ3JpZEFyZWEgPSAnbW0nO1xyXG4gICAgICAgIHRoaXMuX19wYW4uYXBwZW5kQ2hpbGQodGhpcy5fX2N0eCk7XHJcblxyXG4gICAgICAgIHRoaXMuX19yc3ogPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5fX3NldF9iYXJfc3R5bGUoJ3RtJyk7XHJcbiAgICAgICAgdGhpcy5fX3NldF9iYXJfc3R5bGUoJ21sJyk7XHJcbiAgICAgICAgdGhpcy5fX3NldF9iYXJfc3R5bGUoJ21yJyk7XHJcbiAgICAgICAgdGhpcy5fX3NldF9iYXJfc3R5bGUoJ2JtJyk7XHJcblxyXG4gICAgICAgIHRoaXMuX19zZXRfY29ybmVyX3N0eWxlKCd0bCcpO1xyXG4gICAgICAgIHRoaXMuX19zZXRfY29ybmVyX3N0eWxlKCd0cicpO1xyXG4gICAgICAgIHRoaXMuX19zZXRfY29ybmVyX3N0eWxlKCdibCcpO1xyXG4gICAgICAgIHRoaXMuX19zZXRfY29ybmVyX3N0eWxlKCdicicpO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5fX2RpYS5hcHBlbmRDaGlsZCh0aGlzLl9fcGFuKTtcclxuICAgIH0gXHJcbiAgICBwcml2YXRlIF9fc2V0X2RpYWxvZ19zdHlsZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9fZGlhLnN0eWxlLmJvcmRlciAgICAgICA9ICdub25lJztcclxuICAgICAgICB0aGlzLl9fZGlhLnN0eWxlLmJvcmRlclJhZGl1cyA9ICcxMHB4JztcclxuICAgICAgICB0aGlzLl9fZGlhLnN0eWxlLnVzZXJTZWxlY3QgICA9ICdhdXRvJztcclxuICAgICAgICB0aGlzLl9fZGlhLnN0eWxlLm1hcmdpbiAgICAgICA9ICcwJztcclxuICAgICAgICB0aGlzLl9fZGlhLnN0eWxlLnBhZGRpbmcgICAgICA9ICcwJztcclxuXHJcbiAgICAgICAgdGhpcy5fX3Bhbi5zdHlsZS5kaXNwbGF5ICAgICAgPSAnZ3JpZCc7XHJcbiAgICAgICAgdGhpcy5fX3Bhbi5zdHlsZS5ncmlkVGVtcGxhdGVDb2x1bW5zID0gYFxyXG4gICAgICAgICAgICBbdGwtc3RhcnQgbWwtc3RhcnQgYmwtc3RhcnRdXHJcbiAgICAgICAgICAgIDIwcHhcclxuICAgICAgICAgICAgW3RsLWVuZCBtbC1lbmQgYmwtZW5kIHRtLXN0YXJ0IG1tLXN0YXJ0IGJtLXN0YXJ0XVxyXG4gICAgICAgICAgICAxZnJcclxuICAgICAgICAgICAgW3RtLWVuZCBtbS1lbmQgYm0tZW5kIHRyLXN0YXJ0IG1yLXN0YXJ0IGJyLXN0YXJ0XVxyXG4gICAgICAgICAgICAyMHB4XHJcbiAgICAgICAgICAgIFt0ci1lbmQgbXItZW5kIGJyLWVuZF1cclxuICAgICAgICBgO1xyXG4gICAgICAgIHRoaXMuX19wYW4uc3R5bGUuZ3JpZFRlbXBsYXRlUm93cyA9IGBcclxuICAgICAgICAgICAgW3RsLXN0YXJ0IHRtLXN0YXJ0IHRyLXN0YXJ0XVxyXG4gICAgICAgICAgICAyMHB4XHJcbiAgICAgICAgICAgIFt0bC1lbmQgdG0tZW5kIHRyLWVuZCBtbC1zdGFydCBtbS1zdGFydCBtci1zdGFydF1cclxuICAgICAgICAgICAgMWZyXHJcbiAgICAgICAgICAgIFttbC1lbmQgbW0tZW5kIG1yLWVuZCBibC1zdGFydCBibS1zdGFydCBici1zdGFydF1cclxuICAgICAgICAgICAgMjBweFxyXG4gICAgICAgICAgICBbYmwtZW5kIGJtLWVuZCBici1lbmRdXHJcbiAgICAgICAgYDtcclxuXHJcbi8vICAgICAgICB0aGlzLl9fcGFuLnN0eWxlLmdyaWRUZW1wbGF0ZUFyZWFzID0gJ1widGwgdG0gdHJcIiBcIm1sIG1tIG1yXCIgXCJibCBibSBiclwiJztcclxuICAgIH1cclxuICAgIHByaXZhdGUgX19zZXRfYmFyX3N0eWxlKGFyZWE6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICBlbG0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ2xpZ2h0Y3lhbic7XHJcbiAgICAgICAgZWxtLnN0eWxlLnVzZXJTZWxlY3QgICAgICA9ICdub25lJztcclxuICAgICAgICBlbG0uc3R5bGUuZ3JpZEFyZWEgPSBhcmVhO1xyXG4gICAgICAgIHRoaXMuX19zZXRfbW92ZV9kaWFsb2coZWxtKTtcclxuICAgICAgICB0aGlzLl9fcGFuLmFwcGVuZENoaWxkKGVsbSk7XHJcbiAgICAgICAgcmV0dXJuIGVsbTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgX19zZXRfY29ybmVyX3N0eWxlKGFyZWE6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICBlbG0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ2N5YW4nO1xyXG4gICAgICAgIGVsbS5zdHlsZS51c2VyU2VsZWN0ICAgICAgPSAnbm9uZSc7XHJcbiAgICAgICAgZWxtLnN0eWxlLmdyaWRBcmVhID0gYXJlYTtcclxuXHJcbiAgICAgICAgaWYgKGVsbS5pZCA9PT0gdW5kZWZpbmVkIHx8IGVsbS5pZCA9PT0gJycpIGVsbS5pZCA9IGFyZWE7XHJcbiAgICAgICAgdGhpcy5fX3JzeltlbG0uaWRdID0gbmV3IHJlc2l6ZURvbShlbG0sIHRoaXMuX19kaWEpO1xyXG5cclxuICAgICAgICB0aGlzLl9fc2V0X3pvb21fZGlhbG9nKGVsbSk7XHJcbiAgICAgICAgdGhpcy5fX3Bhbi5hcHBlbmRDaGlsZChlbG0pO1xyXG4gICAgICAgIHJldHVybiBlbG07XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9fc2V0X3pvb21fZGlhbG9nKGVsbTogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgICAgICBlbG0uc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xyXG4gICAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCAoZXY6RHJhZ0V2ZW50KT0+eyBcclxuICAgICAgICAgICAgdGhpcy5fX21vcCA9IHt4OjAsIHk6MH07XHJcbiAgICAgICAgICAgIHRoaXMuX19tb3AueCA9IGV2LnBhZ2VYO1xyXG4gICAgICAgICAgICB0aGlzLl9fbW9wLnkgPSBldi5wYWdlWTtcclxuICAgICAgICAgICAgaWYgKGVsbS5pZCBpbiB0aGlzLl9fcnN6KSB0aGlzLl9fcnN6W2VsbS5pZF0ucmVzZXQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZycsIChldjpEcmFnRXZlbnQpPT57XHJcbiAgICAgICAgICAgIGlmIChldi5wYWdlWCA9PT0gdGhpcy5fX21vcC54ICYmIGV2LnBhZ2VZID09PSB0aGlzLl9fbW9wLnkpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZVggID0gZXYucGFnZVggLSB0aGlzLl9fbW9wLng7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc2l6ZVkgID0gZXYucGFnZVkgLSB0aGlzLl9fbW9wLnk7XHJcbiAgICAgICAgICAgIGlmIChlbG0uaWQgaW4gdGhpcy5fX3JzeikgdGhpcy5fX3JzeltlbG0uaWRdLnJlc2l6ZShyZXNpemVYLCByZXNpemVZKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIChldjpEcmFnRXZlbnQpPT57IFxyXG4gICAgICAgICAgICBjb25zdCByZXNpemVYICA9IGV2LnBhZ2VYIC0gdGhpcy5fX21vcC54O1xyXG4gICAgICAgICAgICBjb25zdCByZXNpemVZICA9IGV2LnBhZ2VZIC0gdGhpcy5fX21vcC55O1xyXG4gICAgICAgICAgICBpZiAoZWxtLmlkIGluIHRoaXMuX19yc3opIHRoaXMuX19yc3pbZWxtLmlkXS5yZXNpemUocmVzaXplWCwgcmVzaXplWSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9fc2V0X21vdmVfZGlhbG9nKGVsbTogSFRNTEVsZW1lbnQpOiB2b2lkIHsgXHJcbiAgICAgICAgZWxtLnNldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJywgJ3RydWUnKTtcclxuICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgKGV2OkRyYWdFdmVudCk9PnsgXHJcbiAgICAgICAgICAgIHRoaXMuX19tb3AgPSB7eDowLCB5OjB9O1xyXG4gICAgICAgICAgICB0aGlzLl9fbW9wLnkgPSB0aGlzLl9fZGlhLm9mZnNldFRvcCAgLSBldi5wYWdlWTtcclxuICAgICAgICAgICAgdGhpcy5fX21vcC54ID0gdGhpcy5fX2RpYS5vZmZzZXRMZWZ0IC0gZXYucGFnZVg7XHJcbi8vICAgICAgICAgICAgZXYuZGF0YVRyYW5zZmVyPy5zZXREcmFnSW1hZ2UoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIDAsIDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnJywgKGV2OkRyYWdFdmVudCk9PntcclxuICAgICAgICAgICAgaWYgKGV2LnggPT09IDAgJiYgZXYueSA9PT0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICBjb25zdCB0b3AgID0gZXYucGFnZVkgKyB0aGlzLl9fbW9wLnk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlZnQgPSBldi5wYWdlWCArIHRoaXMuX19tb3AueDtcclxuLy8gICAgICAgICAgICBjb25zdCByaWdodCA9IHdpbmRvdy5vdXRlcldpZHRoIC0gZXYucGFnZVg7XHJcbiAgICAgICAgICAgIHRoaXMuX19kaWEuc3R5bGUudG9wICAgPSB0b3AgICArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMuX19kaWEuc3R5bGUubGVmdCAgPSBsZWZ0ICArICdweCc7XHJcbi8vICAgICAgICAgICAgdGhpcy5fX2RpYS5zdHlsZS5yaWdodCA9IHJpZ2h0ICsgJ3B4JztcclxuICAgICAgICB9KTtcclxuICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIChldjpEcmFnRXZlbnQpPT57IFxyXG4gICAgICAgICAgICB0aGlzLl9fbW9wID0ge3g6MCwgeTowfTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBnZXRXaW5kb3coKTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9fY3R4O1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIHNldFdpbmRvdyhjdHg6IEhUTUxEaXZFbGVtZW50KTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19wYW4ucmVtb3ZlQ2hpbGQodGhpcy5fX2N0eCk7XHJcbiAgICAgICAgICAgIHRoaXMuX19wYW4uYXBwZW5kQ2hpbGQoY3R4KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19jdHggPSBjdHg7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxyXG4gICAgICAgIHJldHVybiBjdHg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFpvb21FbG0oZWxtOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3QgaWkgaW4gdGhpcy5fX3JzeikgdGhpcy5fX3JzeltpaV0uc2V0Wm9vbUVsbShlbG0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNsclpvb20oKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpaSBpbiB0aGlzLl9fcnN6KSB0aGlzLl9fcnN6W2lpXS5jbHJab29tRWxtKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBzaG93KCk6IHZvaWQgeyBcclxuICAgICAgICB0cnkge3RoaXMuX19kaWEuc2hvdygpfSBjYXRjaCAoZXJyKSB7fVxyXG4gICAgfVxyXG4gICAgcHVibGljIGhpZGUoKTogdm9pZCB7IFxyXG4gICAgICAgIHRyeSB7dGhpcy5fX2RpYS5jbG9zZSgpfSBjYXRjaCAoZXJyKSB7fVxyXG4gICAgfVxyXG4gICAgcHVibGljIGRpc3BsYXkoeW46IGJvb2xlYW4pOiB2b2lkIHsgXHJcbiAgICAgICAgeW4/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIHJlc2l6ZURvbSB7XHJcbiAgICBwcml2YXRlIF9fZGlhOiAgSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIF9fY25yOiAgSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIF9fdHJnOiAgSFRNTEVsZW1lbnR8dW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBfX2Nhbjoge3g6IGJvb2xlYW4sIHk6IGJvb2xlYW59O1xyXG4gICAgcHJpdmF0ZSBfX3RvcDogIHh5O1xyXG4gICAgcHJpdmF0ZSBfX3NpejogIHh5O1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNucjogSFRNTEVsZW1lbnQsIGRpYTogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9fZGlhID0gZGlhOyB0aGlzLl9fY25yID0gY25yO1xyXG4gICAgICAgIHRoaXMuX19jYW4gPSB7eDpmYWxzZSwgeTogZmFsc2V9O1xyXG4gICAgICAgIHRoaXMuX190b3AgPSB7eDowLCB5OjB9O1xyXG4gICAgICAgIHRoaXMuX19zaXogPSB7eDowLCB5OjB9O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldFpvb21FbG0odHJnOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX190cmcgICA9IHRyZztcclxuICAgIH1cclxuICAgIHB1YmxpYyBjbHJab29tRWxtKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX190cmcgICA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICAvLyBab29t5a++6LGh44GM6Kit5a6a44GV44KM44Gm44GE44Gq44GR44KM44Gw5L2V44KC44GX44Gq44GEXHJcbiAgICAgICAgaWYgKHRoaXMuX190cmcgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBEaWFsb2fjga7lt6bljYrliIbjgavlr77osaHjgrPjg7zjg4rjg7zjgYzmnInjgozjgbDjgrXjgqTjgrrlpInmm7Tjga7pmpvjgavlt6bovrrjgpLli5XjgYvjgZnjga7jgafjgZ3jga7jg5Xjg6njgrDoqK3lrpooeClcclxuICAgICAgICAgICAgLy8gRGlhbG9n44Gu5LiK5Y2K5YiG44Gr5a++6LGh44Kz44O844OK44O844GM5pyJ44KM44Gw44K144Kk44K65aSJ5pu044Gu6Zqb44Gr5LiK6L6644KS5YuV44GL44GZ44Gu44Gn44Gd44Gu44OV44Op44Kw6Kit5a6aKHkpXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCAgPSAgdGhpcy5fX2Nuci5vZmZzZXRQYXJlbnQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuX19jYW4ueCAgPSAgdGhpcy5fX2Nuci5vZmZzZXRMZWZ0IDwgKHBhcmVudD8ub2Zmc2V0V2lkdGggIC8gMik7XHJcbiAgICAgICAgICAgIHRoaXMuX19jYW4ueSAgPSAgdGhpcy5fX2Nuci5vZmZzZXRUb3AgIDwgKHBhcmVudD8ub2Zmc2V0SGVpZ2h0IC8gMik7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19jYW4ueCAgPSAgdGhpcy5fX2Nhbi55ICA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBEaWFsb2fjga7lt6bkuIrjga7luqfmqJnjgpLkv53lrZhcclxuICAgICAgICB0aGlzLl9fdG9wLnggPSB0aGlzLl9fZGlhLm9mZnNldExlZnQ7IFxyXG4gICAgICAgIHRoaXMuX190b3AueSA9IHRoaXMuX19kaWEub2Zmc2V0VG9wOyBcclxuXHJcbiAgICAgICAgLy8gWm9vbeWvvuixoeOBqOOBmeOCi+imgee0oOOBruW5heOBqOmrmOOBleOCkuS/neWtmFxyXG4gICAgICAgIHRoaXMuX19zaXoueCA9IHRoaXMuX190cmcub2Zmc2V0V2lkdGg7IFxyXG4gICAgICAgIHRoaXMuX19zaXoueSA9IHRoaXMuX190cmcub2Zmc2V0SGVpZ2h0OyBcclxuICAgIH1cclxuICAgIHB1YmxpYyByZXNpemUocmVzaXplWDogbnVtYmVyLCByZXNpemVZOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICAvLyBab29t5a++6LGh44GM6Kit5a6a44GV44KM44Gm44GE44Gq44GR44KM44Gw5L2V44KC44GX44Gq44GEXHJcbiAgICAgICAgaWYgKHRoaXMuX190cmcgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBEaWFsb2fjga7lt6bljYrliIbjgavlr77osaHjgrPjg7zjg4rjg7zjgYzmnInjgozjgbDlt6bovrrjgpLli5XjgYvjgZlcclxuICAgICAgICAvLyDlt6bovrrjgpLkvLjjgbDjgZnjga7jgafjg6rjgrXjgqTjgrrph4/jga/lj43ou6LjgZXjgZvjgotcclxuICAgICAgICBpZiAodGhpcy5fX2Nhbi54KSB7XHJcbiAgICAgICAgICAgIHJlc2l6ZVggPSAtcmVzaXplWDtcclxuICAgICAgICAgICAgdGhpcy5fX2RpYS5zdHlsZS5sZWZ0ICA9IHRoaXMuX190b3AueCAtIHJlc2l6ZVggICsgJ3B4JztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRGlhbG9n44Gu5LiK5Y2K5YiG44Gr5a++6LGh44Kz44O844OK44O844GM5pyJ44KM44Gw5LiK6L6644KS5YuV44GL44GZXHJcbiAgICAgICAgLy8g5LiK6L6644KS5Ly444Gw44GZ44Gu44Gn44Oq44K144Kk44K66YeP44Gv5Y+N6Lui44GV44Gb44KLXHJcbiAgICAgICAgaWYgKHRoaXMuX19jYW4ueSkge1xyXG4gICAgICAgICAgICByZXNpemVZID0gLXJlc2l6ZVk7XHJcbiAgICAgICAgICAgIHRoaXMuX19kaWEuc3R5bGUudG9wICAgPSB0aGlzLl9fdG9wLnkgLSByZXNpemVZICAgKyAncHgnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBab29t5a++6LGh44KS44K144Kk44K65aSJ5pu044GZ44KLXHJcbiAgICAgICAgdGhpcy5fX3RyZy5zdHlsZS53aWR0aCAgPSB0aGlzLl9fc2l6LnggKyByZXNpemVYICsgJ3B4JztcclxuICAgICAgICB0aGlzLl9fdHJnLnN0eWxlLmhlaWdodCA9IHRoaXMuX19zaXoueSArIHJlc2l6ZVkgKyAncHgnO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IF9taW4gfSAgICAgICAgICBmcm9tIFwiLi4vZF91dGwvRl9NYXRoXCI7XHJcbmltcG9ydCB7IENfVXJsT3B0IH0gICAgICBmcm9tIFwiLi4vZF91dGwvQ19VcmxPcHRcIjtcclxuaW1wb3J0IHsgZ19tZXMsIF9hbGVydCwgZ19kZWJ1ZywgZ19hbGVydCB9IGZyb20gXCIuLi9kX2Ntbi9nbG9iYWxcIjtcclxuXHJcblxyXG4vLyDpnZ7lkIzmnJ/pgJrkv6HniYggUE9TVChTdHJpbmcpICYgR0VUIEpTT05cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1RfYW5kX2dldF9KU09OKFxyXG4gICAgdXJsOiBzdHJpbmcsIFxyXG4gICAgb3B0OiBDX1VybE9wdCwgXHJcbik6IFByb21pc2U8YW55fHVuZGVmaW5lZD4ge1xyXG4gICAgY29uc3QgZm9ybV9kYXRhID0gb3B0LnRvRm9ybURhdGEoKTtcclxuXHJcbiAgICBpZiAoZm9ybV9kYXRhID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB2YXIgcmVzOiBSZXNwb25zZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gYXdhaXQgZmV0Y2godXJsLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBjYWNoZTogICduby1jYWNoZScsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuLy8gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJcclxuLy8gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxyXG4vLyAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG59LFxyXG4gICAgICAgICAgICBib2R5OiBvcHQudG9Gb3JtRGF0YSgpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKCFyZXMub2spIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDjg6zjgrnjg53jg7Pjgrnjgrnjg4bjg7zjgr/jgrkgKCR7cmVzLnN0YXR1c30pYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZSgn6YCa5L+h44Ko44Op44O8OiAnICsgZXJyKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1vbml0b3IgPSB0cnVlOyAgLy8gYWxlcnTjgaflj5fkv6HjgZfjgZ/jg4bjgq3jgrnjg4jjgpLooajnpLrjgZnjgovjgajjgY3jgat0cnVl44Gr44GZ44KLXHJcblxyXG4gICAgcmV0dXJuIHJlcy50ZXh0KClcclxuICAgICAgICAudGhlbih0eHQ9PntcclxuICAgICAgICAgICAgY29uc3QgdHggPSB0eHQuc2xpY2UoKTtcclxuXHJcbi8vICAgICAgICAgICAgaWYgKG1vbml0b3IpIF9hbGVydCh0eCk7XHJcbiAgICAgICAgICAgIGlmIChtb25pdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBnX2FsZXJ0LnNldF9tZXNzYWdlKGBQT1NUIFVSTDpgLCB1cmwpO1xyXG4gICAgICAgICAgICAgICAgZ19hbGVydC5zZXRfbWVzc2FnZShgUE9TVCBPUFQ6YCwgb3B0LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgZ19hbGVydC5zZXRfbWVzc2FnZShgUE9TVCBEQVRBOmAsIHR4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHR4dCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBnX21lcy53YXJuaW5nX21lc3NhZ2UoJ0pTT07lvaLlvI/jga7jg4fjgrPjg7zjg4njgqjjg6njg7wnKTtcclxuICAgICAgICAgICAgICAgIF9hbGVydCh0eCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbi8vIOmdnuWQjOacn+mAmuS/oeeJiCBQT1NUKEpTT04pICYgR0VUIEpTT05cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1RfYW5kX2dldF9KU09OMyhcclxuICAgIHVybDogc3RyaW5nLCBcclxuICAgIG9wdDogQ19VcmxPcHQsIFxyXG4pOiBQcm9taXNlPGFueXx1bmRlZmluZWQ+IHtcclxuICAgIGNvbnN0IGZvcm1fZGF0YSA9IG9wdC50b0Zvcm1EYXRhKCk7XHJcblxyXG4gICAgaWYgKGZvcm1fZGF0YSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgdmFyIHJlczogUmVzcG9uc2U7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJlcyA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgY2FjaGU6ICAnbm8tY2FjaGUnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbi8vICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiXHJcbi8vICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcclxuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbn0sXHJcbiAgICAgICAgICAgIGJvZHk6IG9wdC50b0pTT04oKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghcmVzLm9rKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg44Os44K544Od44Oz44K544K544OG44O844K/44K5ICgke3Jlcy5zdGF0dXN9KWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBnX21lcy53YXJuaW5nX21lc3NhZ2UoJ+mAmuS/oeOCqOODqeODvDogJyArIGVycik7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtb25pdG9yID0gdHJ1ZTsgIC8vIGFsZXJ044Gn5Y+X5L+h44GX44Gf44OG44Kt44K544OI44KS6KGo56S644GZ44KL44Go44GN44GrdHJ1ZeOBq+OBmeOCi1xyXG5cclxuICAgIHJldHVybiByZXMudGV4dCgpXHJcbiAgICAgICAgLnRoZW4odHh0PT57XHJcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gdHh0LnNsaWNlKCk7XHJcblxyXG4vLyAgICAgICAgICAgIGlmIChtb25pdG9yKSBfYWxlcnQodHgpO1xyXG4gICAgICAgICAgICBpZiAobW9uaXRvcikge1xyXG4gICAgICAgICAgICAgICAgZ19hbGVydC5zZXRfbWVzc2FnZShgUE9TVCBVUkw6YCwgdXJsKTtcclxuICAgICAgICAgICAgICAgIGdfYWxlcnQuc2V0X21lc3NhZ2UoYFBPU1QgT1BUOmAsIG9wdC50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgICAgIGdfYWxlcnQuc2V0X21lc3NhZ2UoYFBPU1QgREFUQTpgLCB0eCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh0eHQpO1xyXG4gICAgICAgICAgICB9IGNhdGNoKGVycikge1xyXG4gICAgICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKCdKU09O5b2i5byP44Gu44OH44Kz44O844OJ44Ko44Op44O8Jyk7XHJcbiAgICAgICAgICAgICAgICBfYWxlcnQodHgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG4vLyDlkIzmnJ/pgJrkv6HniYggUE9TVCAmIEdFVCBKU09OXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUX2FuZF9nZXRfSlNPTjIoXHJcbiAgICB1cmw6IHN0cmluZywgXHJcbiAgICBvcHQ6IENfVXJsT3B0LCBcclxuKTogUHJvbWlzZTxhbnl8dW5kZWZpbmVkPiB7XHJcbiAgICBjb25zdCByZXFPYmogPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsgLy8gb2JqZWN0IG9mIHJlcXVlc3RcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJlcU9iai5vcGVuKFwiUE9TVFwiLCB1cmwsIGZhbHNlKTsgLy8gU3luYyBtb2RlXHJcbiAgICAgICAgcmVxT2JqLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7IC8vIHNldHRpbmcgb2YgaGVhZGVycyAgaW4gcmVxdWVzdFxyXG4gICAgICAgIHJlcU9iai5zZW5kKG9wdC50b0Zvcm1EYXRhKCkpOyAvLyBkYXRhIHRvIHNlbmQgaW4gcmVxdWVzdFxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKGDpgJrkv6Hjgqjjg6njg7w6ICR7cmVxT2JqLnN0YXR1c31gKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHR4dCA9IHJlcU9iai5yZXNwb25zZVRleHQ7IC8vIGRpc3BsYXlpbmcgcmVzcG9uc2UgdGV4dCBpbiBwYXJhZ3JhcGggdGFnXHJcblxyXG4gICAgY29uc3QgbW9uaXRvciA9IHRydWU7ICAvLyBhbGVydOOBp+WPl+S/oeOBl+OBn+ODhuOCreOCueODiOOCkuihqOekuuOBmeOCi+OBqOOBjeOBq3RydWXjgavjgZnjgotcclxuICAgIGlmIChtb25pdG9yKSB7XHJcbiAgICAgICAgZ19hbGVydC5zZXRfbWVzc2FnZShgUE9TVCBVUkw6YCwgIHVybCk7XHJcbiAgICAgICAgZ19hbGVydC5zZXRfbWVzc2FnZShgUE9TVCBPUFQ6YCwgIG9wdC50b1N0cmluZygpKTtcclxuICAgICAgICBnX2FsZXJ0LnNldF9tZXNzYWdlKGBQT1NUIERBVEE6YCwgdHh0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoTnVtYmVyKHJlcU9iai5zdGF0dXMpID4gMzk5KSB7XHJcbiAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKGDjg6zjgrnjg53jg7Pjgrnjgrnjg4bjg7zjgr/jgrk6ICR7cmVxT2JqLnN0YXR1c31gKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodHh0KTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZSgnSlNPTuW9ouW8j+OBruODh+OCs+ODvOODieOCqOODqeODvDogJyArIGVycik7XHJcbiAgICAgICAgX2FsZXJ0KHR4dCk7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFBPU1RfYW5kX21vdmVfcGFnZSh1cmw6IHN0cmluZywgb3B0OiBDX1VybE9wdCk6IHZvaWQge1xyXG4gICAgY3JlYXRlX2Zvcm0odXJsLCBvcHQpLnN1Ym1pdCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVfZm9ybSh1cmw6IHN0cmluZywgb3B0OiBDX1VybE9wdCk6IEhUTUxGb3JtRWxlbWVudCB7XHJcbiAgICBjb25zdCBmb3JtICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKSBhcyBIVE1MRm9ybUVsZW1lbnQ7XHJcblxyXG4gICAgZm9ybS5pZCAgICAgPSAnZHVtbXlfZm9ybV8nICsgbmV3IERhdGUoKS52YWx1ZU9mKCkudG9TdHJpbmcoKTtcclxuICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xyXG4gICAgZm9ybS5hY3Rpb24gPSAgdXJsO1xyXG4gICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cclxuICAgIGZvciAodmFyIGtleSBvZiBvcHQuZ2V0X2tleXMoKSkge1xyXG4gICAgICAgIGNyZWF0ZV9pbnB1dChmb3JtLCBmb3JtLmlkLCBrZXksIG9wdC5nZXQoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xyXG4gICAgcmV0dXJuIGZvcm07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZV9pbnB1dChmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIGZpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBIVE1MSW5wdXRFbGVtZW50IHtcclxuICAgIGNvbnN0IGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG4gICAgaS50eXBlICA9ICdoaWRkZW4nO1xyXG4gICAgaS5uYW1lICA9IG5hbWU7XHJcbiAgICBpLnZhbHVlID0gdmFsdWU7XHJcbiAgICBpLnN0eWxlLmRpc3BsYXkgPSdub25lJztcclxuICAgIGkuc2V0QXR0cmlidXRlKCdmb3InLCAgIGZpZCk7XHJcbiAgICBmb3JtLmFwcGVuZENoaWxkKGkpO1xyXG5cclxuICAgIHJldHVybiBpO1xyXG59XHJcbiIsImltcG9ydCB7IGFsZXJ0X3NhdmVfZGV0YWlsLCBhbGVydF9zYXZlX2luZm8gfSBmcm9tICcuLi9kX21kbC9DX1NhdmVEYXRhJzsgXHJcbmltcG9ydCB7IGFsZXJ0X3RlYW1faW5mbyB9ICAgICBmcm9tIFwiLi4vZF9tZGwvQ19UZWFtXCI7IFxyXG5pbXBvcnQgeyBhbGVydF9tYXplX2luZm8gfSAgICAgZnJvbSBcIi4uL2RfbWRsL0NfTWF6ZVwiOyBcclxuaW1wb3J0IHsgYWxlcnRfZ3VsZF9pbmZvIH0gICAgIGZyb20gXCIuLi9kX21kbC9DX0d1aWxkXCI7IFxyXG5pbXBvcnQgeyBhbGVydF9tdnB0X2luZm8gfSAgICAgZnJvbSBcIi4uL2RfbWRsL0NfTW92YWJsZVBvaW50XCI7XHJcbmltcG9ydCB7IGFsZXJ0X2hyZXNfaW5mbyB9ICAgICBmcm9tIFwiLi4vZF9tZGwvQ19IZXJvXCI7IFxyXG5pbXBvcnQgeyBhbGVydF9QRF9pbmZvIH0gICAgICAgZnJvbSBcIi4uL2RfbWRsL0NfUG9pbnREaXJcIjtcclxuaW1wb3J0IHsgYWxlcnRfbWF6ZWluZm9faW5mbyB9IGZyb20gJy4uL2RfbWRsL0NfTWF6ZUluZm8nO1xyXG5cclxuaW1wb3J0IHsgX3JvdW5kLCBfbWluLCBfbWF4ICB9IGZyb20gXCIuLi9kX3V0bC9GX01hdGhcIjtcclxuaW1wb3J0IHsgQ19VcmxPcHQgfSAgICAgICAgICAgIGZyb20gXCIuLi9kX3V0bC9DX1VybE9wdFwiOyAgXHJcbmltcG9ydCB7IFBPU1RfYW5kX2dldF9KU09OLCAgUE9TVF9hbmRfZ2V0X0pTT04zLCBQT1NUX2FuZF9tb3ZlX3BhZ2UgfSBmcm9tIFwiLi4vZF9jbW4vRl9QT1NUXCI7XHJcbmltcG9ydCB7IFxyXG4gICAgX2FsZXJ0LCBnX21lcywgZ19zdGFydF9lbnYsIFxyXG4gICAgZ191cmwsICBnX3VybF9ndDJfbWF6ZSwgZ191cmxfZ2V0X3NhdmUsIGdfdXJsX2d0Ml9ndWxkLCBcclxuICAgIGdfc2F2ZSxcclxuICAgIGdfdXJsX2FsbF9tYXplLFxyXG4gICAgZ191cmxfZ2V0X21hemUsIFxyXG4gICAgZ191cmxfbmV3X21hemUsXHJcbiAgICBnX3VybF9uZXdfZ3VsZCxcclxuICAgIGdfdXJsX2FsbF9ocmVzLFxyXG4gICAgZ191cmxfY2hlY2tfSlNPTixcclxuICAgIGdfdXJsX2d0Ml9zYXZlLFxyXG4gICAgZ191cmxfZ2V0X2luZm8sXHJcbiAgICBnX3VybF9nZXRfZGF0YSxcclxuICAgIGdfdXJsX3B1dF9kYXRhLFxyXG59IGZyb20gXCIuLi9kX2Ntbi9nbG9iYWxcIjtcclxuXHJcblxyXG50eXBlIFRfY2FsbGJhY2sgPSAoanNvbk9iajphbnkpPT4oYm9vbGVhbnx2b2lkKTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRfbWFpX21hemUoY2FsbGJhY2s/OiBUX2NhbGxiYWNrKTogUHJvbWlzZTxhbnl8dW5kZWZpbmVkPiB7XHJcbiAgICBjb25zdCBvcHQgPSBuZXcgQ19VcmxPcHQoKTtcclxuICAgIG9wdC5zZXQoJ21vZGUnLCAnbmV3X2dhbWUnKTsgXHJcbiAgICBvcHQuc2V0KCdwaWQnLCAgIGdfc3RhcnRfZW52LnBpZCk7XHJcbi8vICAgIHJldHVybiBhd2FpdCBfZ2V0X25ld19nYW1lKGdfdXJsW2dfdXJsX2d0Ml9tYXplXSwgb3B0LCBjYWxsYmFjayk7XHJcbiAgICByZXR1cm4gYXdhaXQgX2dldF9uZXdfZ2FtZShnX3VybFtnX3VybF9uZXdfbWF6ZV0sIG9wdCwgY2FsbGJhY2spO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldF9tYWlfZ3VsZChjYWxsYmFjaz86IFRfY2FsbGJhY2spOiBQcm9taXNlPGFueXx1bmRlZmluZWQ+IHtcclxuICAgIGNvbnN0IG9wdCA9IG5ldyBDX1VybE9wdCgpO1xyXG4gICAgb3B0LnNldCgnbW9kZScsICduZXdfZ2FtZScpOyBcclxuICAgIG9wdC5zZXQoJ3BpZCcsICAgZ19zdGFydF9lbnYucGlkLnRvU3RyaW5nKCkpO1xyXG4vLyAgICByZXR1cm4gYXdhaXQgX2dldF9uZXdfZ2FtZShnX3VybFtnX3VybF9ndDJfZ3VsZF0sIG9wdCwgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIGF3YWl0IF9nZXRfbmV3X2dhbWUoZ191cmxbZ191cmxfbmV3X2d1bGRdLCBvcHQsIGNhbGxiYWNrKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gX2dldF9uZXdfZ2FtZSh1cmw6IHN0cmluZywgb3B0OiBDX1VybE9wdCwgY2FsbGJhY2s/OiBUX2NhbGxiYWNrKTogUHJvbWlzZTxhbnl8dW5kZWZpbmVkPiB7XHJcbiAgICByZXR1cm4gYXdhaXQgUE9TVF9hbmRfZ2V0X0pTT04zKHVybCwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICAgICAgaWYgKChqc29uT2JqLmVjb2RlPz8tOTkpID09PSAwKSB7XHJcbiAgICAgICAgICAgIGdfbWVzLm5vcm1hbF9tZXNzYWdlKCfmraPluLjjgavjg63jg7zjg4njgZXjgozjgb7jgZfjgZ8nKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGpzb25PYmouc2F2ZSAgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKFwi5L+d5a2Y44OH44O844K/44GM5LiN5q2j44Gq5b2i5byP44Gn44GX44GfXFxuXCIgKyBqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICAgICAgX2FsZXJ0KChqc29uT2JqLmVtc2c/Pyc/Pz8g5LiN5piO44Gq44Ko44Op44O8ID8/PycpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1vbml0b3IgPSBmYWxzZTsgIC8vIGFsZXJ044Gn5Y+X5L+h44GX44Gf44OG44Kt44K544OI44KS6KGo56S644GZ44KL44Go44GN44GrdHJ1ZeOBq+OBmeOCi1xyXG4gICAgICAgICAgICBpZiAobW9uaXRvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpzb25PYmo/LnNhdmUgICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydF9zYXZlX2luZm8oanNvbk9iai5zYXZlKTtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydF9zYXZlX2RldGFpbChqc29uT2JqLnNhdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBjYWxsYmFjayhqc29uT2JqKTtcclxuICAgICAgICAgICAgcmV0dXJuIGpzb25PYmo7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKFwi44Ot44O844OJ44Gn44GN44G+44Gb44KT44Gn44GX44GfXFxuXCIgKyBqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICBfYWxlcnQoKGpzb25PYmouZW1zZz8/Jz8/PyDkuI3mmI7jgarjgqjjg6njg7wgPz8/JykpO1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0X25ld19tYXplKG1hemVfbmFtZTogc3RyaW5nLCBjYWxsYmFjaz86IFRfY2FsbGJhY2spOiBQcm9taXNlPGFueXx1bmRlZmluZWQ+IHtcclxuICAgIGNvbnN0IG9wdCA9IG5ldyBDX1VybE9wdCgpO1xyXG4gICAgb3B0LnNldCgnbW9kZScsICAgICAgJ25ld19tYXplJyk7XHJcbiAgICBvcHQuc2V0KCdwaWQnLCAgICAgICAgZ19zdGFydF9lbnYucGlkKTtcclxuICAgIG9wdC5zZXQoJ21hemVfbmFtZScsICBtYXplX25hbWUpO1xyXG5cclxuLy8gICAgcmV0dXJuIFBPU1RfYW5kX2dldF9KU09OKGdfdXJsW2dfdXJsX2d0Ml9tYXplXSwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICByZXR1cm4gUE9TVF9hbmRfZ2V0X0pTT04zKGdfdXJsW2dfdXJsX2dldF9tYXplXSwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICAgICAgaWYgKChqc29uT2JqLmVjb2RlPz8tOTkpICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShcIuaWsOi/t+WuruODh+ODvOOCv+OCkuWPl+S/oeOBp+OBjeOBvuOBm+OCk+OBp+OBl+OBn1xcblwiICsganNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgX2FsZXJ0KChqc29uT2JqLmVtc2c/Pyc/Pz8g5LiN5piO44Gq44Ko44Op44O8ID8/PycpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGpzb25PYmo/LmRhdGEgID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKFwi5Y+X5L+h44OH44O844K/44GM5LiN5q2j44Gq5b2i5byP44Gn44GX44GfXFxuXCIgKyBqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICBfYWxlcnQoanNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGpzb25PYmo/LmRhdGE/Lm1hemUgID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKFwi5paw6L+35a6u44OH44O844K/44GM5LiN5q2j44Gq5b2i5byP44Gn44GX44GfXFxuXCIgKyBqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICBfYWxlcnQoanNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGpzb25PYmo/LmRhdGE/LnBvcyAgID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKFwi5paw6L+35a6u44Gu5L2N572u44OH44O844K/44GM5LiN5q2j44Gq5b2i5byP44Gn44GX44GfXFxuXCIgKyBqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICBfYWxlcnQoanNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1vbml0b3IgPSBmYWxzZSAgLy8gYWxlcnTjgaflj5fkv6HjgZfjgZ/jg4bjgq3jgrnjg4jjgpLooajnpLrjgZnjgovjgajjgY3jgat0cnVl44Gr44GZ44KLXHJcbiAgICAgICAgaWYgKG1vbml0b3IpIHtcclxuICAgICAgICAgICAgaWYgKGpzb25PYmo/LmRhdGE/Lm1hemUgICE9PSB1bmRlZmluZWQpIGFsZXJ0X21hemVfaW5mbyhqc29uT2JqLmRhdGEubWF6ZSk7XHJcbiAgICAgICAgICAgIGlmIChqc29uT2JqPy5kYXRhPy5wb3MgICAhPT0gdW5kZWZpbmVkKSBhbGVydF9QRF9pbmZvICAoanNvbk9iai5kYXRhLnBvcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBjYWxsYmFjayhqc29uT2JqPy5kYXRhKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGpzb25PYmo7XHJcbiAgICB9KTsgXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfc2F2ZV9pbmZvKGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4ge1xyXG4gICAgY29uc3Qgb3B0ID0gbmV3IENfVXJsT3B0KCk7XHJcbiAgICBvcHQuc2V0KCdtb2RlJywgICAgICAgJ3NhdmVfaW5mbycpOyBcclxuICAgIG9wdC5zZXQoJ3BpZCcsICAgICAgICAgZ19zdGFydF9lbnYucGlkKTtcclxuXHJcbi8vICAgIHJldHVybiBQT1NUX2FuZF9nZXRfSlNPTihnX3VybFtnX3VybF9ndDJfc2F2ZV0sIG9wdCk/LnRoZW4oanNvbk9iaj0+e1xyXG4gICAgcmV0dXJuIFBPU1RfYW5kX2dldF9KU09OMyhnX3VybFtnX3VybF9nZXRfaW5mb10sIG9wdCk/LnRoZW4oanNvbk9iaj0+e1xyXG4gICAgICAgIGlmICgoanNvbk9iai5lY29kZT8/LTk5KSA9PT0gMCkge1xyXG4gICAgICAgICAgICBnX21lcy5ub3JtYWxfbWVzc2FnZSgn5q2j5bi444Gr44Ot44O844OJ44GV44KM44G+44GX44GfJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoanNvbk9iai5zYXZlX2luZm8gID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShcIuS/neWtmOODh+ODvOOCv+OBjOS4jeato+OBquW9ouW8j+OBp+OBl+OBn1xcblwiICsganNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgICAgIF9hbGVydChqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgbW9uaXRvciA9IGZhbHNlOyAgLy8gYWxlcnTjgaflj5fkv6HjgZfjgZ/jg4bjgq3jgrnjg4jjgpLooajnpLrjgZnjgovjgajjgY3jgat0cnVl44Gr44GZ44KLXHJcbiAgICAgICAgICAgIGlmIChtb25pdG9yKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzYXZlIG9mIGpzb25PYmouc2F2ZV9pbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNhdmUgICAgICAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydF9zYXZlX2luZm8oc2F2ZSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRfc2F2ZV9kZXRhaWwoc2F2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkgY2FsbGJhY2soanNvbk9iaik7XHJcbiAgICAgICAgICAgIHJldHVybiBqc29uT2JqO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShcIuODreODvOODieOBp+OBjeOBvuOBm+OCk+OBp+OBl+OBn1xcblwiICsganNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgX2FsZXJ0KChqc29uT2JqLmVtc2c/Pyc/Pz8g5LiN5piO44Gq44Ko44Op44O8ID8/PycpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldF9tYXplX2luZm8oY2FsbGJhY2s/OiBUX2NhbGxiYWNrKTogUHJvbWlzZTxhbnl8dW5kZWZpbmVkPiB7XHJcbiAgICBjb25zdCBvcHQgPSBuZXcgQ19VcmxPcHQoKTtcclxuICAgIG9wdC5zZXQoJ21vZGUnLCAgICAgICAgJ21hemVfaW5mbycpOyBcclxuLy8gICAgcmV0dXJuIGF3YWl0IFBPU1RfYW5kX2dldF9KU09OKGdfdXJsW2dfdXJsX2d0Ml9tYXplXSwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICByZXR1cm4gYXdhaXQgUE9TVF9hbmRfZ2V0X0pTT04zKGdfdXJsW2dfdXJsX2FsbF9tYXplXSwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICAgICAgaWYgKChqc29uT2JqLmVjb2RlPz8tOTkpID09PSAwKSB7XHJcbiAgICAgICAgICAgIGdfbWVzLm5vcm1hbF9tZXNzYWdlKCfmraPluLjjgavjg63jg7zjg4njgZXjgozjgb7jgZfjgZ8nKTtcclxuICAgICAgICAgICAgaWYgKGpzb25PYmo/LmRhdGE/Lm1hemVpbmZvID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShcIui/t+WuruaDheWgseOBjOS4jeato+OBquW9ouW8j+OBp+OBl+OBn1xcblwiICsganNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgICAgIF9hbGVydChqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBtb25pdG9yID0gZmFsc2U7ICAvLyBhbGVydOOBp+WPl+S/oeOBl+OBn+ODhuOCreOCueODiOOCkuihqOekuuOBmeOCi+OBqOOBjeOBq3RydWXjgavjgZnjgotcclxuICAgICAgICAgICAgaWYgKG1vbml0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChqc29uT2JqPy5kYXRhPy5tYXplaW5mbyAgIT09IHVuZGVmaW5lZCkgeyBcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1hemVpbmZvIG9mIGpzb25PYmouZGF0YS5tYXplaW5mbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydF9tYXplaW5mb19pbmZvKG1hemVpbmZvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIGNhbGxiYWNrKGpzb25PYmo/LmRhdGE/Lm1hemVpbmZvKTtcclxuICAgICAgICAgICAgcmV0dXJuIGpzb25PYmo/LmRhdGE/Lm1hemVpbmZvO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShcIuODreODvOODieOBp+OBjeOBvuOBm+OCk+OBp+OBl+OBn1xcblwiICsganNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgX2FsZXJ0KChqc29uT2JqLmVtc2c/Pyc/Pz8g5LiN5piO44Gq44Ko44Op44O8ID8/PycpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldF9uZXdfaGVybyhudW06IG51bWJlciA9IDIwLCBjYWxsYmFjaz86IFRfY2FsbGJhY2spOiBQcm9taXNlPGFueXx1bmRlZmluZWQ+IHtcclxuICAgIGNvbnN0IG9wdCA9IG5ldyBDX1VybE9wdCgpO1xyXG4gICAgb3B0LnNldCgnbW9kZScsICAgICAgICAnbmV3X2hlcm8nKTsgXHJcbi8vICAgIG9wdC5zZXQoJ251bWJlcicsICAgICAgIG51bS50b1N0cmluZygpKTtcclxuLy8gICAgcmV0dXJuIGF3YWl0IFBPU1RfYW5kX2dldF9KU09OKGdfdXJsW2dfdXJsX2d0Ml9ndWxkXSwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICBvcHQuc2V0KCdubWJyJywgICAgICAgICBudW0udG9TdHJpbmcoKSk7XHJcbiAgICByZXR1cm4gYXdhaXQgUE9TVF9hbmRfZ2V0X0pTT04zKGdfdXJsW2dfdXJsX2FsbF9ocmVzXSwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICAgICAgaWYgKChqc29uT2JqLmVjb2RlPz8tOTkpID09PSAwKSB7XHJcbiAgICAgICAgICAgIGdfbWVzLm5vcm1hbF9tZXNzYWdlKCfmraPluLjjgavjg63jg7zjg4njgZXjgozjgb7jgZfjgZ8nKTtcclxuICAgICAgICAgICAgaWYgKGpzb25PYmo/LmRhdGE/LmhyZXMgID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShcIuODkuODvOODreODvOODu+ODh+ODvOOCv+OBjOS4jeato+OBquW9ouW8j+OBp+OBl+OBn1xcblwiICsganNvbk9iai5lbXNnKTtcclxuICAgICAgICAgICAgICAgIF9hbGVydChqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IG1vbml0b3IgPSBmYWxzZTsgIC8vIGFsZXJ044Gn5Y+X5L+h44GX44Gf44OG44Kt44K544OI44KS6KGo56S644GZ44KL44Go44GN44GrdHJ1ZeOBq+OBmeOCi1xyXG4gICAgICAgICAgICBpZiAobW9uaXRvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpzb25PYmo/LmRhdGE/LmhyZXMgICE9PSB1bmRlZmluZWQpIGFsZXJ0X2hyZXNfaW5mbyhqc29uT2JqLmRhdGEuaHJlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIGNhbGxiYWNrKGpzb25PYmo/LmRhdGEpO1xyXG4gICAgICAgICAgICByZXR1cm4ganNvbk9iaj8uZGF0YTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBnX21lcy53YXJuaW5nX21lc3NhZ2UoXCLjg63jg7zjg4njgafjgY3jgb7jgZvjgpPjgafjgZfjgZ9cXG5cIiArIGpzb25PYmouZW1zZyk7XHJcbiAgICAgICAgICAgIF9hbGVydCgoanNvbk9iai5lbXNnPz8nPz8/IOS4jeaYjuOBquOCqOODqeODvCA/Pz8nKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG1wX2xvYWQob3B0PzogQ19VcmxPcHQsIGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4ge1xyXG4gICAgb3B0ID8/PSBuZXcgQ19VcmxPcHQoKTtcclxuICAgIG9wdC5zZXQoJ21vZGUnLCAgICAgICAndG1wX2xvYWQnKTsgXHJcbiAgICBvcHQuc2V0KCdwaWQnLCAgIGdfc3RhcnRfZW52LnBpZCk7IFxyXG4gICAgb3B0LnNldCgndW5vJywgICAgICAgICAgICAgICAxMDApOyBcclxuICAgIHJldHVybiBfX2F1dG9fbG9hZChvcHQsIGNhbGxiYWNrKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbnRfbG9hZChvcHQ/OiBDX1VybE9wdCwgY2FsbGJhY2s/OiBUX2NhbGxiYWNrKTogUHJvbWlzZTxhbnl8dW5kZWZpbmVkPiB7XHJcbiAgICBvcHQgPz89IG5ldyBDX1VybE9wdCgpO1xyXG4gICAgb3B0LnNldCgnbW9kZScsICAgJ2luc3RhbnRfbG9hZCcpOyBcclxuICAgIG9wdC5zZXQoJ3BpZCcsICAgZ19zdGFydF9lbnYucGlkKTsgXHJcbiAgICBvcHQuc2V0KCd1bm8nLCAgICAgICAgICAgICAgIDEwMSk7IFxyXG4gICAgcmV0dXJuIF9fYXV0b19sb2FkKG9wdCwgY2FsbGJhY2spO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVURfbG9hZChvcHQ/OiBDX1VybE9wdCwgY2FsbGJhY2s/OiBUX2NhbGxiYWNrKTogUHJvbWlzZTxhbnl8dW5kZWZpbmVkPiB7XHJcbiAgICBvcHQgPz89IG5ldyBDX1VybE9wdCgpO1xyXG4gICAgb3B0LnNldCgnbW9kZScsICAgICAgICAnVURfbG9hZCcpOyBcclxuICAgIG9wdC5zZXQoJ3BpZCcsICAgZ19zdGFydF9lbnYucGlkKTsgXHJcbiAgICBvcHQuc2V0KCd1bm8nLCAgICAgICAgICAgICAgIDEwMik7IFxyXG4gICAgcmV0dXJuIF9fYXV0b19sb2FkKG9wdCwgY2FsbGJhY2spO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmVmb3JlX2xvYWQob3B0PzogQ19VcmxPcHQsIGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4ge1xyXG4gICAgb3B0ID8/PSBuZXcgQ19VcmxPcHQoKTtcclxuICAgIG9wdC5zZXQoJ21vZGUnLCAgICAnYmVmb3JlX2xvYWQnKTsgXHJcbiAgICBvcHQuc2V0KCdwaWQnLCAgIGdfc3RhcnRfZW52LnBpZCk7IFxyXG4gICAgb3B0LnNldCgndW5vJywgICAgICAgICAgICAgICAxMDMpOyBcclxuICAgIHJldHVybiBfX2F1dG9fbG9hZChvcHQsIGNhbGxiYWNrKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYWxfbG9hZCh1bmlxX25vOiBudW1iZXIsIG9wdD86IENfVXJsT3B0LCBjYWxsYmFjaz86IFRfY2FsbGJhY2spOiBQcm9taXNlPGFueXx1bmRlZmluZWQ+IHtcclxuICAgIG9wdCA/Pz0gbmV3IENfVXJsT3B0KCk7XHJcbiAgICBvcHQuc2V0KCdtb2RlJywgICAnZ2VuZXJhbF9sb2FkJyk7IFxyXG4gICAgb3B0LnNldCgncGlkJywgICBnX3N0YXJ0X2Vudi5waWQpOyBcclxuICAgIG9wdC5zZXQoJ3VubycsICAgICAgICAgICB1bmlxX25vKTsgXHJcbiAgICByZXR1cm4gX19hdXRvX2xvYWQob3B0LCBjYWxsYmFjayk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fYXV0b19sb2FkKG9wdDogQ19VcmxPcHQsIGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4ge1xyXG5cclxuLy8gICAgcmV0dXJuIFBPU1RfYW5kX2dldF9KU09OKGdfdXJsW2dfdXJsX2d0Ml9zYXZlXSwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICByZXR1cm4gUE9TVF9hbmRfZ2V0X0pTT04zKGdfdXJsW2dfdXJsX2dldF9kYXRhXSwgb3B0KT8udGhlbihqc29uT2JqPT57XHJcbiAgICAgICAgaWYgKChqc29uT2JqLmVjb2RlPz8tOTkpID09PSAwKSB7XHJcbiAgICAgICAgICAgIGdfbWVzLm5vcm1hbF9tZXNzYWdlKCfmraPluLjjgavjg63jg7zjg4njgZXjgozjgb7jgZfjgZ8nKTtcclxuIFxyXG4gICAgICAgICAgICBpZiAoanNvbk9iaj8uc2F2ZSAgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKFwi5Y+X5L+h44GX44Gf5L+d5a2Y44OH44O844K/44GM5LiN5q2j44Gq5b2i5byP44Gn44GX44GfXFxuXCIgKyBqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICAgICAgX2FsZXJ0KChqc29uT2JqLmVtc2c/Pyc/Pz8g5LiN5piO44Gq44Ko44Op44O8ID8/PycpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBjb25zdCBtb25pdG9yID0gZmFsc2U7ICAvLyBhbGVydOOBp+WPl+S/oeOBl+OBn+ODhuOCreOCueODiOOCkuihqOekuuOBmeOCi+OBqOOBjeOBq3RydWXjgavjgZnjgotcclxuICAgICAgICAgICAgaWYgKG1vbml0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChqc29uT2JqPy5zYXZlICAgICAgICAgICAgICAgICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydF9zYXZlX2luZm8oanNvbk9iai5zYXZlKTtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydF9zYXZlX2RldGFpbChqc29uT2JqLnNhdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBjYWxsYmFjayhqc29uT2JqKTtcclxuICAgICAgICAgICAgcmV0dXJuIGpzb25PYmo7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKGDjg63jg7zjg4njgafjgY3jgb7jgZvjgpPjgafjgZfjgZ8ke2pzb25PYmouZWNvZGV9XFxuYCArIGpzb25PYmouZW1zZyk7XHJcbiAgICAgICAgICAgIF9hbGVydCgoanNvbk9iai5lbXNnPz8nPz8/IOS4jeaYjuOBquOCqOODqeODvCA/Pz8nKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG1wX3NhdmUob3B0PzogQ19VcmxPcHQsIGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4geyBcclxuICAgIG9wdCA/Pz0gbmV3IENfVXJsT3B0KCk7XHJcbiAgICBvcHQuc2V0KCdtb2RlJywgICAgICAgJ3RtcF9zYXZlJyk7IFxyXG4gICAgb3B0LnNldCgncGlkJywgICBnX3N0YXJ0X2Vudi5waWQpOyBcclxuICAgIG9wdC5zZXQoJ3VubycsICAgICAgICAgICAgICAgMTAwKTsgXHJcbiAgICByZXR1cm4gX19hdXRvX3NhdmUob3B0LCBjYWxsYmFjayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnN0YW50X3NhdmUob3B0PzogQ19VcmxPcHQsIGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4geyBcclxuICAgIG9wdCA/Pz0gbmV3IENfVXJsT3B0KCk7XHJcbiAgICBvcHQuc2V0KCdtb2RlJywgICAnaW5zdGFudF9zYXZlJyk7IFxyXG4gICAgb3B0LnNldCgncGlkJywgICBnX3N0YXJ0X2Vudi5waWQpOyBcclxuICAgIG9wdC5zZXQoJ3VubycsICAgICAgICAgICAgICAgMTAxKTsgXHJcbiAgICByZXR1cm4gX19hdXRvX3NhdmUob3B0LCBjYWxsYmFjayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBVRF9zYXZlKG9wdD86IENfVXJsT3B0LCBjYWxsYmFjaz86IFRfY2FsbGJhY2spOiBQcm9taXNlPGFueXx1bmRlZmluZWQ+IHsgXHJcbiAgICBvcHQgPz89IG5ldyBDX1VybE9wdCgpO1xyXG4gICAgb3B0LnNldCgnbW9kZScsICAgICAgICAnVURfc2F2ZScpOyBcclxuICAgIG9wdC5zZXQoJ3BpZCcsICAgZ19zdGFydF9lbnYucGlkKTsgXHJcbiAgICBvcHQuc2V0KCd1bm8nLCAgICAgICAgICAgICAgIDEwMik7IFxyXG4gICAgcmV0dXJuIF9fYXV0b19zYXZlKG9wdCwgY2FsbGJhY2spO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmVmb3JlX3NhdmUob3B0PzogQ19VcmxPcHQsIGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4geyBcclxuICAgIG9wdCA/Pz0gbmV3IENfVXJsT3B0KCk7XHJcbiAgICBvcHQuc2V0KCdtb2RlJywgICAgJ2JlZm9yZV9zYXZlJyk7IFxyXG4gICAgb3B0LnNldCgncGlkJywgICBnX3N0YXJ0X2Vudi5waWQpOyBcclxuICAgIG9wdC5zZXQoJ3VubycsICAgICAgICAgICAgICAgMTAzKTsgXHJcbiAgICByZXR1cm4gX19hdXRvX3NhdmUob3B0LCBjYWxsYmFjayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmFsX3NhdmUob3B0PzogQ19VcmxPcHQsIGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4ge1xyXG4gICAgZ19zYXZlLmF1dG9fbW9kZSA9IGZhbHNlO1xyXG5cclxuICAgIG9wdCA/Pz0gbmV3IENfVXJsT3B0KCk7XHJcbiAgICBvcHQuc2V0KCdtb2RlJywgICAnZ2VuZXJhbF9zYXZlJyk7IFxyXG4gICAgb3B0LnNldCgncGlkJywgICBnX3N0YXJ0X2Vudi5waWQpOyBcclxuICAgIHJldHVybiBfX3NhdmUob3B0LCBjYWxsYmFjayk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fYXV0b19zYXZlKG9wdDogQ19VcmxPcHQsIGNhbGxiYWNrPzogVF9jYWxsYmFjayk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4ge1xyXG4gICAgZ19zYXZlLmF1dG9fbW9kZSA9IHRydWU7XHJcbiAgICByZXR1cm4gX19zYXZlKG9wdCwgY2FsbGJhY2spO1xyXG59IFxyXG5mdW5jdGlvbiBfX3NhdmUob3B0OiBDX1VybE9wdCwgY2FsbGJhY2s/OiBUX2NhbGxiYWNrKTogUHJvbWlzZTxhbnl8dW5kZWZpbmVkPiB7IFxyXG4gICAgaWYgKCFvcHQuaXNzZXQoJ3NhdmUnKSkge1xyXG4gICAgICAgIG9wdC5zZXQoJ3NhdmUnLCBKU09OLnN0cmluZ2lmeShnX3NhdmUuZW5jb2RlKCksIG51bGwsIFwiXFx0XCIpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDpgIHkv6Hjg4fjg7zjgr/jgpJjaGVja19KU09OLnBocOOBq+mAgeOBo+OBpuODgeOCp+ODg+OCr+OBmeOCi+OBqOOBjeOBq3RydWXjgavjgZnjgovjgIJcclxuICAgIGNvbnN0IG1vdmVfcGFnZSA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChtb3ZlX3BhZ2UpIHtcclxuICAgICAgICBQT1NUX2FuZF9tb3ZlX3BhZ2UoZ191cmxbZ191cmxfY2hlY2tfSlNPTl0sIG9wdCk7XHJcbiAgICB9XHJcblxyXG4vLyAgICByZXR1cm4gUE9TVF9hbmRfZ2V0X0pTT04oZ191cmxbZ191cmxfZ3QyX3NhdmVdLCBvcHQpPy50aGVuKGpzb25PYmo9PntcclxuICAgIHJldHVybiBQT1NUX2FuZF9nZXRfSlNPTjMoZ191cmxbZ191cmxfcHV0X2RhdGFdLCBvcHQpPy50aGVuKGpzb25PYmo9PntcclxuICAgICAgICBpZiAoKGpzb25PYmouZWNvZGU/Py05OSkgPT09IDApIHtcclxuIFxyXG4gICAgICAgICAgICBpZiAoanNvbk9iaj8uc2F2ZSAgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKFwi5Y+X5L+h44GX44Gf5L+d5a2Y44OH44O844K/44GM5LiN5q2j44Gq5b2i5byP44Gn44GX44GfXFxuXCIgKyBqc29uT2JqLmVtc2cpO1xyXG4gICAgICAgICAgICAgICAgX2FsZXJ0KChqc29uT2JqLmVtc2c/Pyc/Pz8g5LiN5piO44Gq44Ko44Op44O8ID8/PycpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBjb25zdCBtb25pdG9yID0gZmFsc2U7ICAvLyBhbGVydOOBp+WPl+S/oeOBl+OBn+ODhuOCreOCueODiOOCkuihqOekuuOBmeOCi+OBqOOBjeOBq3RydWXjgavjgZnjgotcclxuICAgICAgICAgICAgaWYgKG1vbml0b3IpIHtcclxuICAgICAgICAgICAgICAgIGlmIChqc29uT2JqPy5zYXZlICAgICAgICAgICAgICAgICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydF9zYXZlX2luZm8oanNvbk9iai5zYXZlKTtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydF9zYXZlX2RldGFpbChqc29uT2JqLnNhdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSBjYWxsYmFjayhqc29uT2JqKTtcclxuICAgICAgICAgICAgZ19tZXMubm9ybWFsX21lc3NhZ2UoJ+ato+W4uOOBq+OCu+ODvOODluOBleOCjOOBvuOBl+OBnycpO1xyXG4gICAgICAgICAgICByZXR1cm4ganNvbk9iajtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBnX21lcy53YXJuaW5nX21lc3NhZ2UoXCLjgrvjg7zjg5bjgafjgY3jgb7jgZvjgpPjgafjgZfjgZ9cXG5cIiArIGpzb25PYmouZW1zZyk7XHJcbiAgICAgICAgICAgIF9hbGVydCgoanNvbk9iai5lbXNnPz8nPz8/IOS4jeaYjuOBquOCqOODqeODvCA/Pz8nKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfSkuIGNhdGNoKGVycj0+e1xyXG4gICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZSgnUE9TVOiqreOBv+i+vOOBv+OBq+WkseaVl+OBl+OBvuOBl+OBnyhQT1NUX0FORF9KU09OMyknKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfSk7XHJcblxyXG4vLyAgICBQT1NUX2FuZF9tb3ZlX3BhZ2UoZ191cmxbZ191cmxfY2hlY2tfSlNPTl0sIG9wdCk7IHJldHVybiB7ZWNvZGU6IDB9O1xyXG59XHJcblxyXG4iLCJleHBvcnQgY29uc3QgZ191cmxfZ2V0X21hemUgICAgPSAgMDtcclxuZXhwb3J0IGNvbnN0IGdfdXJsX25ld19tYXplICAgID0gIDE7XHJcblxyXG5leHBvcnQgY29uc3QgZ191cmxfYWxsX21hemUgICAgPSAgMjtcclxuZXhwb3J0IGNvbnN0IGdfdXJsX25ld19ndWxkICAgID0gIDU7XHJcbmV4cG9ydCBjb25zdCBnX3VybF9hbGxfaHJlcyAgICA9ICA2O1xyXG5leHBvcnQgY29uc3QgZ191cmxfZ2V0X3NhdmUgICAgPSAgNztcclxuZXhwb3J0IGNvbnN0IGdfdXJsX3B1dF9zYXZlICAgID0gIDg7XHJcbmV4cG9ydCBjb25zdCBnX3VybF9hbGxfc2F2ZSAgICA9ICA5O1xyXG5leHBvcnQgY29uc3QgZ191cmxfbWFpX21hemUgICAgPSAxMDtcclxuZXhwb3J0IGNvbnN0IGdfdXJsX21haV9ndWxkICAgID0gMTE7XHJcbmV4cG9ydCBjb25zdCBnX3VybF9nZXRfaW5mbyAgICA9IDEyO1xyXG5leHBvcnQgY29uc3QgZ191cmxfZ2V0X2RhdGEgICAgPSAxMztcclxuZXhwb3J0IGNvbnN0IGdfdXJsX3B1dF9kYXRhICAgID0gMTU7XHJcblxyXG5leHBvcnQgY29uc3QgZ191cmxfY2hlY2tfSlNPTiAgPSAxNjtcclxuXHJcbmV4cG9ydCBjb25zdCBnX3VybF9yY2RfbGlzdCAgICA9IDE3O1xyXG5leHBvcnQgY29uc3QgZ191cmxfcmNkX2xvYWQgICAgPSAxODtcclxuZXhwb3J0IGNvbnN0IGdfdXJsX3JjZF9zYXZlICAgID0gMTk7XHJcblxyXG5leHBvcnQgY29uc3QgZ191cmxfZ3QyX2d1bGQgICAgPSAyMDtcclxuZXhwb3J0IGNvbnN0IGdfdXJsX2d0Ml9tYXplICAgID0gMjE7XHJcbmV4cG9ydCBjb25zdCBnX3VybF9ndDJfc2F2ZSAgICA9IDIyO1xyXG5leHBvcnQgY29uc3QgZ191cmw6IHN0cmluZ1tdID0gbmV3IEFycmF5KDIzKTtcclxuXHJcbmV4cG9ydCBsZXQgICBnX215X3VybDogc3RyaW5nO1xyXG5cclxuaW1wb3J0IHsgQ19Pbk9mZkJ1dHRvbiB9IGZyb20gJy4uL2RfY3RsL0NfT25PZmZCdXR0b24nXHJcbmV4cG9ydCB2YXIgZ19kZWJ1ZzogQ19Pbk9mZkJ1dHRvbjtcclxuXHJcbmltcG9ydCB7IENfQWxlcnRMb2cgfSAgICBmcm9tIFwiLi4vZF9jbW4vQ19BbGVydExvZ1wiO1xyXG5leHBvcnQgbGV0IGdfYWxlcnQ6IENfQWxlcnRMb2c7XHJcblxyXG4vL2V4cG9ydCB2YXIgZ19waWQ6IG51bWJlcltdID0gbmV3IEFycmF5KDEpIGFzIG51bWJlcltdO1xyXG5cclxuY2xhc3MgQ19SZWFkeUdhbWVzICB7XHJcbiAgICBwcm90ZWN0ZWQgZmxnczoge1tpZDogc3RyaW5nXTogYm9vbGVhbn07IFxyXG4gICAgcHJvdGVjdGVkIGZ1bmM6ICgpPT52b2lkO1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZmxncyA9IHt9O1xyXG4gICAgICAgIHRoaXMuZmxncy5sb2FkZWRET00gPSBmYWxzZTsgXHJcbiAgICAgICAgdGhpcy5mbGdzLmdldFdpbmRvdyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZnVuYyA9ICgpPT57fTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRMb2FkZWRET00oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mbGdzLmxvYWRlZERPTSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jaGVja19hbmRfZG8oKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRHZXRXaW5kb3coKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mbGdzLmdldFdpbmRvdyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jaGVja19hbmRfZG8oKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRGdW5jdGlvbihmdW5jOiAoKT0+dm9pZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZnVuYyA9IGZ1bmM7XHJcbiAgICAgICAgdGhpcy5jaGVja19hbmRfZG8oKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBjaGVja19hbmRfZG8oKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZnVuYyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICAgICAgZm9yIChsZXQgaWkgaW4gdGhpcy5mbGdzKSBpZiAoIXRoaXMuZmxnc1tpaV0pIHJldHVybjtcclxuICAgICAgICB0aGlzLmZ1bmMoKTsgXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IGdfcmVhZHlfZ2FtZXMgPSBuZXcgQ19SZWFkeUdhbWVzKCk7XHJcblxyXG5leHBvcnQgY29uc3QgZ19zdGFydF9lbnYgPSB7bW9kZTogJycsIHBpZDogLTEsIG9wdDogJyd9O1xyXG5cclxuaW1wb3J0IHsgQ19EaXNwbGF5TWVzc2FnZSB9IGZyb20gXCIuLi9kX3ZpZS9DX0Rpc3BsYXlNZXNzYWdlXCI7XHJcbmV4cG9ydCB2YXIgZ19tZXM6IENfRGlzcGxheU1lc3NhZ2U7XHJcblxyXG5pbXBvcnQgeyBDX1NhdmVEYXRhIH0gICAgICAgICBmcm9tIFwiLi4vZF9tZGwvQ19TYXZlRGF0YVwiO1xyXG5leHBvcnQgY29uc3QgZ19zYXZlID0gbmV3IENfU2F2ZURhdGEoKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0X2FmdGVyX2xvYWRlZF9ET01faW5fY29tbW9uKGRlYnVnX2lkOiBzdHJpbmcgPSAnZGVidWdfbW9kZScsIG1zZ19pZDogc3RyaW5nID0gJ3BhbmVfc3l0bV9sb2dzJyk6IHZvaWQge1xyXG4gICAgY29uc3QgIGNvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1zZ19pZCk7XHJcbiAgICBnX21lcyAgPSBDX0Rpc3BsYXlNZXNzYWdlLmdldE9iaihjb24sICdjbGllbnRfbWVzc2FnZScpO1xyXG4gICAgZ19hbGVydCA9IENfQWxlcnRMb2cuZ2V0T2JqKCk7XHJcblxyXG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGVidWdfaWQpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgZ19kZWJ1ZyA9IENfT25PZmZCdXR0b24uZ2V0T2JqKGJ0biwge30pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX2FsZXJ0KHR4dDogc3RyaW5nLCBwYWdlX3NpemUgPSAyNTApOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHh0Lmxlbmd0aDsgaSArPSBwYWdlX3NpemUpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5jb25maXJtKHR4dC5zdWJzdHJpbmcoaSwgaStwYWdlX3NpemUpKSkgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLy8g5Lul5LiL44CBSFRNTOWBtOOBi+OCieWRvOOBs+WHuuOBm+OCi+mWouaVsOOBruWumue+qVxyXG4vLyB3aW5kb3fjgqrjg5bjgrjjgqfjgq/jg4jjgavmuKHjgZnjgqTjg7Pjgr/jg7zjg5Xjgqfjg7zjgrnjgpLlrprnvqlcclxuaW50ZXJmYWNlIElfVHNDYWxsIHtcclxuICAgIGdldF9pbml0X2RhdGE6ICh1cmxfYmFzZTogc3RyaW5nKT0+dm9pZCxcclxuICAgIHN0YXJ0X2dhbWU6ICAgIChtb2RlOiBzdHJpbmcsIHVybF9iYXNlOiBzdHJpbmcsIHBsYXllcl9pZDogbnVtYmVyLCBvcHRpb246IHN0cmluZyk9PnZvaWQsIFxyXG59XHJcbi8vIHdpbmRvd+OCquODluOCuOOCp+OCr+ODiOOBq+OCpOODs+OCv+ODvOODleOCp+ODvOOCueOBruWumue+qeOCkui/veWKoFxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICB0c0NhbGw6IElfVHNDYWxsO1xyXG4gICAgfVxyXG59XHJcbi8vIOOCpOODs+OCv+ODvOODleOCp+ODvOOCueOBruWun+ijhVxyXG4vL++8iOOBqeOBhuOChOOCieOCpOODs+OCv+ODvOODleOCp+ODvOOCueOBr+ODl+ODreODkeODhuOCo+Wumue+qeOBruOCquODluOCuOOCp+OCr+ODiOOBq+OBquOBo+OBpuOCi+OCieOBl+OBhO+8iVxyXG5jb25zdCB0c0NhbGxlcjogSV9Uc0NhbGwgPSAoKCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRfaW5pdF9kYXRhOiAobXlfdXJsOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgZ19teV91cmwgPSBteV91cmw7XHJcbiAgICAgICAgICAgIGNvbnN0IHVybF90b3AgPSBwYXJlbnRfdXJsKG15X3VybCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cF90b3AgPSBwYXJlbnRfdXJsKHVybF90b3ApICsgXCIvbWFpZXhcIjtcclxuXHJcbiAgICAgICAgICAgIGdfdXJsW2dfdXJsX2d0Ml9zYXZlXSAgID0gdXJsX3RvcCArIFwiL19KU09OX21haV9zYXZlLnBocFwiO1xyXG4gICAgICAgICAgICBnX3VybFtnX3VybF9ndDJfbWF6ZV0gICA9IHVybF90b3AgKyBcIi9fSlNPTl9tYWlfbWF6ZS5waHBcIjtcclxuICAgICAgICAgICAgZ191cmxbZ191cmxfZ3QyX2d1bGRdICAgPSB1cmxfdG9wICsgXCIvX0pTT05fbWFpX2d1bGQucGhwXCI7XHJcblxyXG4gICAgICAgICAgICBnX3VybFtnX3VybF9tYWlfbWF6ZV0gICA9IHVybF90b3AgKyBcIi9tYWlfbWF6ZS5waHBcIjtcclxuICAgICAgICAgICAgZ191cmxbZ191cmxfbWFpX2d1bGRdICAgPSB1cmxfdG9wICsgXCIvbWFpX2d1bGQucGhwXCI7XHJcblxyXG4gICAgICAgICAgICBnX3VybFtnX3VybF9uZXdfbWF6ZV0gICA9IGV4cF90b3AgKyBcIi9tYXplL25ld01hemVcIjtcclxuICAgICAgICAgICAgZ191cmxbZ191cmxfZ2V0X21hemVdICAgPSBleHBfdG9wICsgXCIvbWF6ZS9nZXRNYXplXCI7XHJcbiAgICAgICAgICAgIGdfdXJsW2dfdXJsX2FsbF9tYXplXSAgID0gZXhwX3RvcCArIFwiL21hemUvYWxsTWF6ZVwiO1xyXG4gICAgICAgICAgICBnX3VybFtnX3VybF9uZXdfZ3VsZF0gICA9IGV4cF90b3AgKyBcIi9ndWxkL25ld0d1bGRcIjtcclxuICAgICAgICAgICAgZ191cmxbZ191cmxfYWxsX2hyZXNdICAgPSBleHBfdG9wICsgXCIvZ3VsZC9hbGxIcmVzXCI7XHJcblxyXG4gICAgICAgICAgICBnX3VybFtnX3VybF9nZXRfaW5mb10gICA9IGV4cF90b3AgKyBcIi9sZHN2L19pbmZvXCI7XHJcbiAgICAgICAgICAgIGdfdXJsW2dfdXJsX2dldF9kYXRhXSAgID0gZXhwX3RvcCArIFwiL2xkc3YvX2xvYWRcIjtcclxuICAgICAgICAgICAgZ191cmxbZ191cmxfcHV0X2RhdGFdICAgPSBleHBfdG9wICsgXCIvbGRzdi9fc2F2ZVwiO1xyXG5cclxuICAgICAgICAgICAgZ191cmxbZ191cmxfY2hlY2tfSlNPTl0gPSB1cmxfdG9wICsgXCIvY2hlY2tfSlNPTi5waHBcIjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIOaaq+WumueJiOmWi+Wni+WHpueQhlxyXG4gICAgICAgIHN0YXJ0X2dhbWU6IChtb2RlOiBzdHJpbmcsIG15X3VybDogc3RyaW5nLCBwbGF5ZXJfaWQ6IG51bWJlciwgb3B0OiBzdHJpbmcpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgdHNDYWxsZXIuZ2V0X2luaXRfZGF0YShteV91cmwpOyBcclxuICAgICAgICAgICAgZ19zdGFydF9lbnYubW9kZSA9IG1vZGU7IFxyXG4gICAgICAgICAgICBnX3N0YXJ0X2Vudi5waWQgID0gcGxheWVyX2lkOyBcclxuICAgICAgICAgICAgZ19zdGFydF9lbnYub3B0ICA9IG9wdDsgXHJcblxyXG4gICAgICAgICAgICBnX3JlYWR5X2dhbWVzLnNldEdldFdpbmRvdygpOyBcclxuICAgICAgICB9IFxyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmZ1bmN0aW9uIHBhcmVudF91cmwodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgbGV0IHJlID0gL1xcL1teXFwvXSs/JC87XHJcbiAgICByZXR1cm4gdXJsLnJlcGxhY2UocmUsICcnKTtcclxufVxyXG5cclxuLy8gd2luZG9344Kq44OW44K444Kn44Kv44OI44Gr6L+95Yqg44GX44Gf44Kk44Oz44K/44O844OV44Kn44O844K544Gr5LiK6KiY44Gu5a6f6KOF44KS5Luj5YWlXHJcbndpbmRvdy50c0NhbGwgPSB0c0NhbGxlcjtcclxuXHJcbi8vIOOBk+OCjOOBp0hUTUzlgbTjga5zY3JpcHTjgr/jgrDlhoXjgYvjgokgPHNjcmlwdD53aW5kb3dzLnRzQ2FsbC5nZXRwbGF5ZXIoMSk7PC9zY3JpcHQ+XHJcbi8vIOOBv+OBn+OBhOOBq+WRvOOBs+WHuuOBm+OCi+OAguOBn+OBoOOBl+OAgWJ1bmRsZS5qc+OBrnNjcmlwdOOCv+OCsOOBp3R5cGXlsZ7mgKfjgpJtb2R1bGXjgavjgZfjgabjgYTjgovjgajlpLHmlZfjgZnjgovjgIJcclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfY2VpbCwgX2Zsb29yLCBfaXNOdW0gfSBmcm9tIFwiLi4vZF91dGwvRl9NYXRoXCI7XHJcbmltcG9ydCB7IF9hbGVydCB9ICAgICAgICAgICAgICAgIGZyb20gXCIuLi9kX2Ntbi9nbG9iYWxcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDX0N0bEN1cnNvciB7XHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIG1lOiB7W2lkOiBzdHJpbmddOiBDX0N0bEN1cnNvcn07XHJcblxyXG4gICAgcHJvdGVjdGVkIF9pZDogICBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX2xpc3Q6IEhUTUxFbGVtZW50fHVuZGVmaW5lZDtcclxuICAgIHByb3RlY3RlZCBfbGVuZzogbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF9jb2xzOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgX2luZHg6IG51bWJlcjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IobGlzdD86IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgQ19DdGxDdXJzb3IubWUgPz89IHt9XHJcblxyXG4gICAgICAgIHRoaXMuX2lkICAgPSAnX19kbXlfXyc7XHJcbiAgICAgICAgdGhpcy5fbGlzdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9sZW5nID0gMDtcclxuICAgICAgICB0aGlzLl9jb2xzID0gMTtcclxuICAgICAgICB0aGlzLl9pbmR4ID0gMDtcclxuICAgICAgICBDX0N0bEN1cnNvci5tZVt0aGlzLl9pZF0gPSB0aGlzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRPYmoobGlzdD86IEhUTUxFbGVtZW50KTogQ19DdGxDdXJzb3IgIHtcclxuICAgICAgICB0aGlzLm1lID8/PSB7fVxyXG5cclxuICAgICAgICBjb25zdCBpZCA9IGxpc3QgIT09IHVuZGVmaW5lZCA/IGxpc3QuaWQgOiAnX19kbXlfXyc7XHJcbiAgICAgICAgdGhpcy5tZVtpZF0gPz89IG5ldyBDX0N0bEN1cnNvcihsaXN0KTtcclxuXHJcbiAgICAgICAgaWYgKGxpc3QgIT09IHVuZGVmaW5lZCkgdGhpcy5tZVtpZF0uc2V0KGxpc3QpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lW2lkXTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQobGlzdDogSFRNTEVsZW1lbnQpOiBDX0N0bEN1cnNvciB7XHJcbiAgICAgICAgdGhpcy5faWQgICA9IGxpc3QuaWQ7XHJcbiAgICAgICAgdGhpcy5fbGlzdCA9IGxpc3Q7XHJcbiAgICAgICAgdGhpcy5fbGVuZyA9IHRoaXMuX19nZXRfbGVuZygpO1xyXG4gICAgICAgIHRoaXMuX2NvbHMgPSB0aGlzLl9fZ2V0X2NvbHMoKTtcclxuICAgICAgICB0aGlzLl9pbmR4ID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5oaWdoX2xpZ2h0X29uKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVpZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBsZW5nKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmc7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcm93cygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9fZ2V0X3Jvd3MoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBjb2xzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBvcygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbmR4O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldF9wb3MoaW5keDogbnVtYmVyKTogQ19DdGxDdXJzb3Ige1xyXG4gICAgICAgIGlmIChpbmR4IDwgIDApIGluZHggPSAwO1xyXG4gICAgICAgIGlmIChpbmR4ID49IHRoaXMuX2xlbmcpIGluZHggPSB0aGlzLl9sZW5nIC0gMTtcclxuXHJcbiAgICAgICAgdGhpcy5faW5keCA9IGluZHg7IHRoaXMuaGlnaF9saWdodF9vbigpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwb3NfVSgpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xyXG5cclxuICAgICAgICBsZXQgICBpbmR4ID0gdGhpcy5faW5keDtcclxuICAgICAgICBjb25zdCByb3dzID0gdGhpcy5fX2dldF9yb3dzKCk7XHJcbiAgICAgICAgY29uc3QgY3VyX3JvdyAgID0gaW5keCAlIHJvd3M7XHJcbiAgICAgICAgaWYgKGN1cl9yb3cgIT09IDApIHtcclxuICAgICAgICAgICAgLy8g5pyA5LiK5q61KOS4iuerrynku6XlpJZcclxuICAgICAgICAgICAgLS1pbmR4O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOacgOS4iuautSjkuIrnq68pXHJcbiAgICAgICAgICAgIGluZHggKz0gcm93cyAtIDE7XHJcbiAgICAgICAgICAgIHdoaWxlIChpbmR4ID4gdGhpcy5fbGVuZyAtIDEpIHtcclxuICAgICAgICAgICAgICAgIC0taW5keDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcbiAgICAgICAgdGhpcy5faW5keCA9IGluZHg7IHRoaXMuaGlnaF9saWdodF9vbigpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbmR4O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHBvc19EKCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xpc3QgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIGxldCAgIGluZHggPSB0aGlzLl9pbmR4O1xyXG4gICAgICAgIGNvbnN0IHJvd3MgPSB0aGlzLl9fZ2V0X3Jvd3MoKTtcclxuICAgICAgICBjb25zdCBjdXJfcm93ID0gaW5keCAlIHJvd3M7XHJcbiAgICAgICAgaWYgKGN1cl9yb3cgIT09IHJvd3MgLSAxICYmIGluZHggIT09IHRoaXMuX2xlbmcgLSAxKSB7XHJcbiAgICAgICAgICAgIC8vIOacgOS4i+autSjkuIvnq68p5Lul5aSWXHJcbiAgICAgICAgICAgICsraW5keDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDmnIDkuIvmrrUo5LiL56uvKVxyXG4gICAgICAgICAgICBpbmR4IC09IHJvd3MgLSAxO1xyXG4gICAgICAgICAgICB3aGlsZSAoaW5keCAlIHJvd3MgIT09IDAgJiYgaW5keCA8IHRoaXMuX2xlbmcgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICArK2luZHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIHRoaXMuX2luZHggPSBpbmR4OyB0aGlzLmhpZ2hfbGlnaHRfb24oKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5keDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBwb3NfTCgpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xyXG5cclxuICAgICAgICBsZXQgICBpbmR4ID0gdGhpcy5faW5keDtcclxuICAgICAgICBjb25zdCByb3dzID0gdGhpcy5fX2dldF9yb3dzKCk7XHJcbiAgICAgICAgaWYgKGluZHggID4gcm93cyAtIDEpIHtcclxuICAgICAgICAgICAgLy8g5pyA5YmN5YiXKOW3puerrynku6XlpJZcclxuICAgICAgICAgICAgaW5keCAtPSByb3dzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOacgOWJjeWIlyjlt6bnq68pXHJcbiAgICAgICAgICAgIGNvbnN0ICAgdnVydHVhbF9saXN0X2xlbmcgPSB0aGlzLl9jb2xzICogcm93cztcclxuICAgICAgICAgICAgaW5keCArPSB2dXJ0dWFsX2xpc3RfbGVuZyAtIHJvd3M7XHJcbiAgICAgICAgICAgIHdoaWxlIChpbmR4ID4gdGhpcy5fbGVuZyAtIDEpIHtcclxuICAgICAgICAgICAgICAgIGluZHggLT0gcm93cztcclxuICAgICAgICAgICAgICAgIGlmIChpbmR4IDwgMCkge2luZHggPSAwOyBicmVhazt9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIHRoaXMuX2luZHggPSBpbmR4OyB0aGlzLmhpZ2hfbGlnaHRfb24oKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5keDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBwb3NfUigpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xyXG5cclxuICAgICAgICBsZXQgICBpbmR4ID0gdGhpcy5faW5keDtcclxuICAgICAgICBjb25zdCByb3dzID0gdGhpcy5fX2dldF9yb3dzKCk7XHJcbiAgICAgICAgaWYgKGluZHggIDwgdGhpcy5fbGVuZyAtIHJvd3MpIHsgXHJcbiAgICAgICAgICAgIC8vIOacgOe1guWIlyjlj7Pnq68p5Lul5aSWXHJcbiAgICAgICAgICAgIGluZHggKz0gcm93cztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDmnIDntYLliJco5Y+z56uvKVxyXG4gICAgICAgICAgICBjb25zdCAgIG9sZF9pbmR4ID0gaW5keDtcclxuICAgICAgICAgICAgY29uc3QgICB2dXJ0dWFsX2xpc3RfbGVuZyA9IHRoaXMuX2NvbHMgKiByb3dzO1xyXG4gICAgICAgICAgICBpbmR4IC09IHZ1cnR1YWxfbGlzdF9sZW5nIC0gcm93cztcclxuICAgICAgICAgICAgaWYgKGluZHggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBpbmR4ICs9IHJvd3M7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5keCA8IDAgfHwgaW5keCA+IHRoaXMuX2xlbmcgLSAxKSBpbmR4ID0gX2Zsb29yKChvbGRfaW5keCArIDEpIC8gdGhpcy5fY29scywgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIHRoaXMuX2luZHggPSBpbmR4OyB0aGlzLmhpZ2hfbGlnaHRfb24oKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5keDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIF9fZ2V0X3Jvd3MoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gX2NlaWwodGhpcy5fbGVuZyAvIHRoaXMuX2NvbHMsIDApO1xyXG4gICAgfVxyXG4gICAgLy8gRE9N44Oq44K544OI5LiA6Kan44Gu6KGM5pWw44Gu5Y+W5b6XXHJcbiAgICBwcm90ZWN0ZWQgX19nZXRfbGVuZygpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0LmNoaWxkcmVuLmxlbmd0aDsgXHJcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gRE9N44Oq44K544OI5LiA6Kan44Gu5YiX5pWwKENTU+OBi+OCieWPluW+lynjga7lj5blvpdcclxuICAgIHByb3RlY3RlZCAgX19nZXRfY29scygpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGxldCBjb2xzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5fbGlzdCkuY29sdW1uQ291bnQ7XHJcbiAgICAgICAgICAgIHJldHVybiBfaXNOdW0oY29scykgPyBOdW1iZXIoY29scykgOiAxOyBcclxuICAgICAgICB9IGNhdGNoKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Oh44OL44Ol44O844Gu44OH44OV44Kp44Or44OI5pON5L2cKOODj+OCpOODqeOCpOODiOOBqOips+e0sOihqOekuuWItuW+oSlcclxuICAgIHB1YmxpYyBoaWdoX2xpZ2h0X29uKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9saXN0ID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLl9saXN0LmNoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IGxlbiAgICAgID0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIGlmICh0aGlzLl9pbmR4IDwgMCB8fCB0aGlzLl9pbmR4ID4gbGVuIC0gMSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpID0gY2hpbGRyZW4uaXRlbShpKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy5fX2hpZ2hfbGlnaHRfb24obGksIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbGkgPSBjaGlsZHJlbi5pdGVtKHRoaXMuX2luZHgpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuX19oaWdoX2xpZ2h0X29uKGxpLCB0cnVlKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBoaWdoX2xpZ2h0X29mZigpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fbGlzdCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5fbGlzdC5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCBsZW4gICAgICA9IGNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpID0gY2hpbGRyZW4uaXRlbShpKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgdGhpcy5fX2hpZ2hfbGlnaHRfb24obGksIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX19oaWdoX2xpZ2h0X29uKGVsbTogSFRNTEVsZW1lbnQgfCBudWxsLCBpc09uOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGVsbSA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IHBlcmVudFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxtLnBhcmVudEVsZW1lbnQgPz8gZWxtKTtcclxuXHJcbiAgICAgICAgY29uc3QgZndfY29sb3IgPSBwZXJlbnRTdHlsZS5jb2xvcjtcclxuICAgICAgICBjb25zdCBiZ19jb2xvciA9IHBlcmVudFN0eWxlLmJhY2tncm91bmRDb2xvcjtcclxuXHJcbiAgICAgICAgZWxtLnN0eWxlLmNvbG9yICAgICAgICAgICA9IGlzT24gPyBiZ19jb2xvciA6IGZ3X2NvbG9yO1xyXG4gICAgICAgIGVsbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBpc09uID8gZndfY29sb3IgOiBiZ19jb2xvcjtcclxuXHJcbiAgICAgICAgZWxtLnN0eWxlLmZvbnRXZWlnaHQgPSAgaXNPbiA/ICdib2xkJyA6ICdub3JtYWwnO1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZWxtLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSBlbG0uY2hpbGRyZW4uaXRlbShqKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKGlzT24pIHtcclxuICAgICAgICAgICAgICAgIHAuc3R5bGUuZm9udFdlaWdodCAgICAgID0gJ25vcm1hbCc7XHJcbiAgICAgICAgICAgICAgICBwLnN0eWxlLmNvbG9yICAgICAgICAgICA9IGZ3X2NvbG9yO1xyXG4gICAgICAgICAgICAgICAgcC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBiZ19jb2xvcjtcclxuICAgICAgICAgICAgICAgIHAuc3R5bGUuZGlzcGxheSAgICAgICAgID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHAuc3R5bGUuZGlzcGxheSAgICAgICAgID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGFsZXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIF9hbGVydChcclxuICAgICAgICAgICAgICBcIkN0bEN1cnNvcjogXCJcclxuICAgICAgICAgICAgKyBcIlxcbmlkICAgPSBcIiArIHRoaXMuX2lkXHJcbiAgICAgICAgICAgICsgXCJcXG5pbmR4ID0gXCIgKyB0aGlzLl9pbmR4XHJcbiAgICAgICAgICAgICsgXCJcXG5sZW5nID0gXCIgKyB0aGlzLl9sZW5nXHJcbiAgICAgICAgICAgICsgXCJcXG5jb2xzID0gXCIgKyB0aGlzLl9jb2xzXHJcbiAgICAgICAgKVxyXG4gICAgfTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfZ2V0X3V1aWQgfSBmcm9tIFwiLi4vZF91dGwvRl9SYW5kXCI7XHJcblxyXG50eXBlICBUX0N5Y2xlT3B0aW9uID0ge1xyXG4gICAgYXQ/OiAgICAgICBudW1iZXIsXHJcbiAgICBjY05hbWU/OiAgIHN0cmluZ1tdLFxyXG4gICAgY2NDbGFzcz86ICBzdHJpbmdbXSxcclxuICAgIGZuYz86ICAgICAgX1RfRm5jW10sXHJcbn1cclxuXHJcbnR5cGUgIF9UX0N5Y2xlT3B0aW9uID0ge1xyXG4gICAgY2NOYW1lOiAgICBzdHJpbmdbXSxcclxuICAgIGNjQ2xhc3M6ICAgc3RyaW5nW10sXHJcbiAgICBmbmM/OiAgICAgIF9UX0ZuY1tdLFxyXG59XHJcblxyXG50eXBlIF9UX0ZuYyA9IChzZXE6IG51bWJlcik9Pih2b2lkfGJvb2xlYW4pO1xyXG5cclxuZXhwb3J0IGNsYXNzIENfQ3ljbGVCdXR0b24ge1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBtZToge1tpZDogc3RyaW5nXTogQ19DeWNsZUJ1dHRvbn07XHJcblxyXG4gICAgcHVibGljICAgIHN0YXRpYyBnZXRPYmooZWxtOiBIVE1MQnV0dG9uRWxlbWVudCwgY2NvPzogVF9DeWNsZU9wdGlvbik6IENfQ3ljbGVCdXR0b24ge1xyXG4gICAgICAgIHRoaXMubWUgPz89IHt9O1xyXG4gICAgICAgIHRoaXMubWVbZWxtLmlkXSA/Pz0gbmV3IENfQ3ljbGVCdXR0b24oZWxtLCBjY28pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lW2VsbS5pZF07XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHNlcTogbnVtYmVyID0gMDtcclxuICAgIHByb3RlY3RlZCBlbG06IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIGNjbzogX1RfQ3ljbGVPcHRpb247XHJcbiAgICBwcm90ZWN0ZWQgZGVmX2NjbzogX1RfQ3ljbGVPcHRpb24gPSB7XHJcbiAgICAgICAgY2NOYW1lOiAgIFsnb25lJywndHdvJywndGhyZWUnXSxcclxuICAgICAgICBjY0NsYXNzOiAgWydfY3ljbGVfb25lJywnX2N5Y2xlX3R3bycsJ19jeWNsZV90aHJlZSddLFxyXG4gICAgfTtcclxuICAgIHByb3RlY3RlZCBmbmM6IHtbaWQ6IHN0cmluZ106IF9UX0ZuY307XHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGVsbTogSFRNTEJ1dHRvbkVsZW1lbnQsIGNjbz86IFRfQ3ljbGVPcHRpb24pIHtcclxuICAgICAgICB0aGlzLmZuYyA9IHt9O1xyXG4gICAgICAgIHRoaXMuY2NvID0gdGhpcy5kZWZfY2NvO1xyXG4gICAgICAgIHRoaXMuc2VxID0gMDtcclxuXHJcbiAgICAgICAgaWYgKGVsbS5uYW1lID09PSB1bmRlZmluZWQgfHwgZWxtLm5hbWUgPT09IG51bGwgfHwgZWxtLm5hbWUgPT09ICcnKSBlbG0ubmFtZSA9IGVsbS5pZDtcclxuICAgICAgICB0aGlzLmVsbSA9IGVsbTtcclxuICAgICAgICB0aGlzLmVsbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50Ok1vdXNlRXZlbnQpPT57dGhpcy5jeWNsZSgpO30sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgaWYgKGNjbyAhPT0gdW5kZWZpbmVkKSB0aGlzLnNldE9iaihjY28pOyBcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRPYmooY2NvOiBUX0N5Y2xlT3B0aW9uKTogQ19DeWNsZUJ1dHRvbiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5zZXEgPSBjY28uYXQgPz8gMDtcclxuICAgICAgICAgICAgaWYgKGNjby5jY05hbWUgIT09IHVuZGVmaW5lZCkgIHRoaXMuY2NvLmNjTmFtZSAgPSBbLi4uY2NvLmNjTmFtZV07XHJcbiAgICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNjby5jY05hbWUgID0gWy4uLnRoaXMuZGVmX2Njby5jY05hbWVdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNjby5jY0NsYXNzICE9PSB1bmRlZmluZWQpIHRoaXMuY2NvLmNjQ2xhc3MgPSBbLi4uY2NvLmNjQ2xhc3NdO1xyXG4gICAgICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jY28uY2NDbGFzcyA9IFsuLi50aGlzLmRlZl9jY28uY2NDbGFzc107XHJcblxyXG4gICAgICAgICAgICBpZiAoY2NvLmZuYyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgaW4gY2NvLmZuYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjY28uZm5jW2ldID09PSB1bmRlZmluZWQpIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjY28uZm5jW2ldID09PSAnZnVuY3Rpb24nKSB0aGlzLmZuY1tpXSA9IGNjby5mbmNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3NldFN0eWxlKHRoaXMuc2VxKTtcclxuICAgICAgICB9IGNhdGNoIHt9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX3NldFN0eWxlKHNlcTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgb2xkX3NlcSA9IHRoaXMuc2VxO1xyXG4gICAgICAgIHRoaXMuc2VxICA9IHNlcTtcclxuICAgICAgICBjb25zdCBjY28gPSB0aGlzLmNjbztcclxuICAgICAgICB0aGlzLmVsbS52YWx1ZSAgICAgPSBjY28uY2NOYW1lW3NlcV07XHJcbiAgICAgICAgdGhpcy5lbG0uaW5uZXJIVE1MID0gY2NvLmNjTmFtZVtzZXFdO1xyXG4gICAgICAgIHRoaXMuZWxtLmNsYXNzTGlzdC5yZW1vdmUoY2NvLmNjQ2xhc3Nbb2xkX3NlcV0pO1xyXG4gICAgICAgIHRoaXMuZWxtLmNsYXNzTGlzdC5hZGQgICAoY2NvLmNjQ2xhc3NbdGhpcy5zZXFdKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBjeWNsZSgpOiBib29sZWFufHZvaWQge1xyXG4gICAgICAgIGxldCBzZXEgPSB0aGlzLnNlcSArIDE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoaWZ0KHNlcSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmV2ZXJjZSgpOiBib29sZWFufHZvaWQge1xyXG4gICAgICAgIGxldCBzZXEgPSB0aGlzLnNlcSAtIDE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoaWZ0KHNlcSk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX3NoaWZ0KHNlcTogbnVtYmVyKTogYm9vbGVhbnx2b2lkIHtcclxuICAgICAgICBpZiAoc2VxID49IHRoaXMuY2NvLmNjTmFtZS5sZW5ndGgpIHNlcSA9IDA7XHJcbiAgICAgICAgaWYgKHNlcSA8ICAwICAgICAgICAgICAgICAgICAgICAgKSBzZXEgPSB0aGlzLmNjby5jY05hbWUubGVuZ3RoIC0gMTtcclxuICAgICAgICB0aGlzLl9zZXRTdHlsZShzZXEpO1xyXG5cclxuICAgICAgICBsZXQgcnNsdDpib29sZWFufHZvaWQgPSB0cnVlOyBcclxuICAgICAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5mbmMpIHJzbHQgJiY9IHRoaXMuZm5jW2ldKHRoaXMuc2VxKTsgXHJcbiAgICAgICAgcmV0dXJuIHJzbHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlkKCk6ICAgICAgc3RyaW5nICB7cmV0dXJuIHRoaXMuZWxtLmlkfTtcclxuICAgIHB1YmxpYyBhdCgpOiAgICAgIG51bWJlciAge3JldHVybiB0aGlzLnNlcTt9XHJcblxyXG4gICAgcHVibGljIGFkZEZuYyhmbmM6IF9UX0ZuYyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgaWQgPSAnY2NmdW5jXycgKyBfZ2V0X3V1aWQoKTtcclxuICAgICAgICB0aGlzLmZuY1tpZF0gPSBmbmM7XHJcbiAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJtdkZuYyhmbmM6IF9UX0ZuY3xzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodHlwZW9mIGZuYyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZm5jW2ZuY107IFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1jYXRjaChlcnIpe3JldHVybiBmYWxzZX1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBpIGluIHRoaXMuZm5jKSBpZiAoZm5jID09PSB0aGlzLmZuY1tpXSkge2RlbGV0ZSB0aGlzLmZuY1tpXTsgcmV0dXJuIHRydWV9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IF9nZXRfdXVpZCB9IGZyb20gXCIuLi9kX3V0bC9GX1JhbmRcIjtcclxuXHJcbnR5cGUgIFRfT25PZmZPcHRpb24gPSB7XHJcbiAgICB5bj86ICAgICAgIGJvb2xlYW4sXHJcbiAgICBvbk5hbWU/OiAgIHN0cmluZyxcclxuICAgIG9mZk5hbWU/OiAgc3RyaW5nLFxyXG4gICAgb25DbGFzcz86ICBzdHJpbmcsXHJcbiAgICBvZmZDbGFzcz86IHN0cmluZyxcclxuICAgIGZuYz86ICAgICAgX1RfRm5jLFxyXG59XHJcblxyXG50eXBlICBfVF9Pbk9mZk9wdGlvbiA9IHtcclxuICAgIG9uTmFtZTogICAgc3RyaW5nLFxyXG4gICAgb2ZmTmFtZTogICBzdHJpbmcsXHJcbiAgICBvbkNsYXNzOiAgIHN0cmluZyxcclxuICAgIG9mZkNsYXNzOiAgc3RyaW5nLFxyXG4gICAgZm5jPzogICAgICBfVF9GbmMsXHJcbn1cclxuXHJcbnR5cGUgX1RfRm5jID0gKHluOiBib29sZWFuKT0+KHZvaWR8Ym9vbGVhbik7XHJcblxyXG5leHBvcnQgY2xhc3MgQ19Pbk9mZkJ1dHRvbiB7XHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIG1lOiB7W2lkOiBzdHJpbmddOiBDX09uT2ZmQnV0dG9ufTtcclxuXHJcbiAgICBwdWJsaWMgICAgc3RhdGljIGdldE9iaihlbG06IEhUTUxCdXR0b25FbGVtZW50LCBvb28/OiBUX09uT2ZmT3B0aW9uKTogQ19Pbk9mZkJ1dHRvbiB7XHJcbiAgICAgICAgdGhpcy5tZSA/Pz0ge307XHJcbiAgICAgICAgdGhpcy5tZVtlbG0uaWRdID8/PSBuZXcgQ19Pbk9mZkJ1dHRvbihlbG0sIG9vbyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWVbZWxtLmlkXTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgeW46ICBib29sZWFuO1xyXG4gICAgcHJvdGVjdGVkIGVsbTogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBwcm90ZWN0ZWQgb29vOiBfVF9Pbk9mZk9wdGlvbjtcclxuICAgIHByb3RlY3RlZCBkZWZfb29vOiBfVF9Pbk9mZk9wdGlvbiA9IHtcclxuICAgICAgICBvbk5hbWU6ICAgJ09OJyxcclxuICAgICAgICBvZmZOYW1lOiAgJ29mZicsXHJcbiAgICAgICAgb25DbGFzczogICdfdG9nZ2xlX29uJyxcclxuICAgICAgICBvZmZDbGFzczogJ190b2dnbGVfb2ZmJyxcclxuICAgIH07XHJcbiAgICBwcm90ZWN0ZWQgZm5jOiB7W2lkOiBzdHJpbmddOiBfVF9GbmN9O1xyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihlbG06IEhUTUxCdXR0b25FbGVtZW50LCBvb28/OiBUX09uT2ZmT3B0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5mbmMgPSB7fTtcclxuICAgICAgICB0aGlzLm9vbyA9IHRoaXMuZGVmX29vbztcclxuICAgICAgICB0aGlzLnluICA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoZWxtLm5hbWUgPT09IHVuZGVmaW5lZCB8fCBlbG0ubmFtZSA9PT0gJycpIGVsbS5uYW1lID0gZWxtLmlkO1xyXG4gICAgICAgIHRoaXMuZWxtID0gZWxtO1xyXG4gICAgICAgIHRoaXMuZWxtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQ6TW91c2VFdmVudCk9Pnt0aGlzLnRvZ2dsZSgpO30sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgaWYgKG9vbyAhPT0gdW5kZWZpbmVkKSB0aGlzLnNldE9iaihvb28pOyBcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRPYmoob29vOiBUX09uT2ZmT3B0aW9uKTogQ19Pbk9mZkJ1dHRvbiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy55biAgPSBvb28ueW4gPz8gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9vbyA9IG9vbyBhcyBfVF9Pbk9mZk9wdGlvbjsgXHJcbiAgICAgICAgICAgIHRoaXMub29vLm9uTmFtZSAgID8/PSB0aGlzLmRlZl9vb28ub25OYW1lOyBcclxuICAgICAgICAgICAgdGhpcy5vb28ub2ZmTmFtZSAgPz89IHRoaXMuZGVmX29vby5vZmZOYW1lOyBcclxuICAgICAgICAgICAgdGhpcy5vb28ub25DbGFzcyAgPz89IHRoaXMuZGVmX29vby5vbkNsYXNzOyBcclxuICAgICAgICAgICAgdGhpcy5vb28ub2ZmQ2xhc3MgPz89IHRoaXMuZGVmX29vby5vZmZDbGFzczsgXHJcbiAgICAgICAgICAgIHRoaXMuX3NldFN0eWxlKHRoaXMueW4pO1xyXG4gICAgICAgIH0gY2F0Y2gge31cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfc2V0U3R5bGUoeW46IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnluICAgPSB5bjtcclxuICAgICAgICBjb25zdCBvb28gPSB0aGlzLm9vbztcclxuICAgICAgICB0aGlzLmVsbS52YWx1ZSA9IHluPydvbic6J29mZic7XHJcbiAgICAgICAgdGhpcy5lbG0uaW5uZXJIVE1MID0geW4gPyBvb28ub25OYW1lIDogb29vLm9mZk5hbWU7XHJcbiAgICAgICAgdGhpcy5lbG0uY2xhc3NMaXN0LnJlbW92ZSh5bj8gb29vLm9mZkNsYXNzIDogb29vLm9uQ2xhc3MpO1xyXG4gICAgICAgIHRoaXMuZWxtLmNsYXNzTGlzdC5hZGQgICAoeW4/IG9vby5vbkNsYXNzICA6IG9vby5vZmZDbGFzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldE9OKCk6ICAgYm9vbGVhbiB7cmV0dXJuIHRoaXMuX3NldFlOKHRydWUpID8/IGZhbHNlfTtcclxuICAgIHB1YmxpYyBzZXRPRkYoKTogIGJvb2xlYW4ge3JldHVybiB0aGlzLl9zZXRZTihmYWxzZSkgPz8gZmFsc2V9O1xyXG4gICAgcHVibGljIHRvZ2dsZSgpOiAgYm9vbGVhbiB7cmV0dXJuIHRoaXMuX3NldFlOKCF0aGlzLnluKSA/PyBmYWxzZX1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3NldFlOKHluOiBib29sZWFuKTogYm9vbGVhbnx2b2lkIHtcclxuICAgICAgICB0aGlzLl9zZXRTdHlsZSh5bik7XHJcblxyXG4gICAgICAgIGxldCB0Zjpib29sZWFufHZvaWQgID0gdHJ1ZTsgXHJcbiAgICAgICAgZm9yIChjb25zdCBpIGluIHRoaXMuZm5jKSB0ZiAmJj0gdGhpcy5mbmNbaV0oeW4pOyBcclxuICAgICAgICByZXR1cm4gdGY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlkKCk6ICAgICAgc3RyaW5nICB7cmV0dXJuIHRoaXMuZWxtLmlkfTtcclxuICAgIHB1YmxpYyBpc09OKCk6ICAgIGJvb2xlYW4ge3JldHVybiB0aGlzLnluO31cclxuXHJcbiAgICBwdWJsaWMgYWRkRm5jKGZuYzogX1RfRm5jKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBpZCA9ICdvb2Z1bmNfJyArIF9nZXRfdXVpZCgpO1xyXG4gICAgICAgIHRoaXMuZm5jW2lkXSA9IGZuYztcclxuICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcm12Rm5jKGZuYzogX1RfRm5jfHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZm5jID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5mbmNbZm5jXTsgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfWNhdGNoKGVycil7cmV0dXJuIGZhbHNlfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5mbmMpIGlmIChmbmMgPT09IHRoaXMuZm5jW2ldKSB7ZGVsZXRlIHRoaXMuZm5jW2ldOyByZXR1cm4gdHJ1ZX1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBJX0xvY2F0ZSwgVF9MY2tkIH0gICAgICBmcm9tIFwiLi9DX0xvY2F0aW9uXCI7XHJcbmltcG9ydCB7IElfSlNPTl9VbmlxLCBKU09OX0FueSB9IGZyb20gXCIuL0NfU2F2ZUluZm9cIjtcclxuaW1wb3J0IHsgQ19IZXJvLCBKU09OX0hlcm8gfSAgICAgZnJvbSBcIi4vQ19IZXJvXCI7XHJcbmltcG9ydCB7IF9nZXRfdXVpZCB9ICAgICAgICAgICAgIGZyb20gXCIuLi9kX3V0bC9GX1JhbmRcIjtcclxuaW1wb3J0IHsgQ19Hb29kc0xpc3QsIEpTT05fR29vZHNMaXN0IH0gZnJvbSBcIi4vQ19Hb29kc0xpc3ROR1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX0d1aWxkIGV4dGVuZHMgSlNPTl9Bbnkge1xyXG4gICAgaWQ/OiAgICAgICBudW1iZXIsXHJcbiAgICB1bmlxX2lkPzogIHN0cmluZyxcclxuICAgIHNhdmVfaWQ/OiAgbnVtYmVyLFxyXG4gICAgbmFtZT86ICAgICBzdHJpbmcsXHJcbiAgICBnb2xkPzogICAgIG51bWJlcixcclxuICAgIGdvb2RzPzogICAgSlNPTl9Hb29kc0xpc3QsXHJcbiAgICBoZXJvZXM/OiAgIEpTT05fSGVyb1tdLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxlcnRfZ3VsZF9pbmZvKGE6IEpTT05fR3VpbGR8dW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICBhbGVydChcIkd1aWxkIEluZm86XCIgXHJcbiAgICAgICAgKyBcIlxcbmlkOiAgICAgICBcIiArIChhLmlkICAgICAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnVuaXFfaWQ6ICBcIiArIChhLnVuaXFfaWQgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnNhdmVfaWQ6ICBcIiArIChhLnNhdmVfaWQgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbm5hbWU6ICAgICBcIiArIChhLm5hbWUgICAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmdvbGQ6ICAgICBcIiArIChhLmdvbGQgICAgICA/PyAgMCApXHJcbi8vICAgICAgICArIFwiXFxuZ29vZHM6ICAgIFwiICsgKE9iamVjdC5rZXlzKGEuZ29vZHM/PzApLmxlbmd0aClcclxuICAgICAgICArIFwiXFxuaGVyb2VzOiAgIFwiICsgKGEuaGVyb2VzPy5sZW5ndGggPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5cIlxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfR3VpbGQgaW1wbGVtZW50cyBJX0xvY2F0ZSwgSV9KU09OX1VuaXEge1xyXG4gICAgcHJvdGVjdGVkIGlkOiAgICAgICAgIG51bWJlcjtcclxuICAgIHByb3RlY3RlZCB1bmlxX2lkOiAgICBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgc2F2ZV9pZDogICAgbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIG5hbWU6ICAgICAgIHN0cmluZztcclxuICAgIHB1YmxpYyAgICBnb2xkOiAgICAgICBudW1iZXI7XHJcbi8vICAgIHB1YmxpYyAgICBnb29kczogICAgICBDX0dvb2RzTGlzdDtcclxuICAgIHByb3RlY3RlZCBoZXJvZXM6ICAgICB7W3VpZDogc3RyaW5nXTogQ19IZXJvfTtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhPzogSlNPTl9HdWlsZCkge1xyXG4gICAgICAgIHRoaXMuaWQgICAgICAgICA9IC0xO1xyXG4gICAgICAgIHRoaXMudW5pcV9pZCAgICA9ICdtYWlfZ3VsZCMnICsgX2dldF91dWlkKCk7XHJcbiAgICAgICAgdGhpcy5zYXZlX2lkICAgID0gLTE7XHJcbiAgICAgICAgdGhpcy5uYW1lICAgICAgID0gJyc7XHJcbiAgICAgICAgdGhpcy5nb2xkICAgICAgID0gIDA7XHJcbi8vICAgICAgICB0aGlzLmdvb2RzICAgICAgPSBuZXcgQ19Hb29kc0xpc3QoKTtcclxuICAgICAgICB0aGlzLmhlcm9lcyAgICAgPSB7fTtcclxuICAgICAgICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB0aGlzLmRlY29kZShhKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdWlkKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLnVuaXFfaWR9XHJcbiAgICBwdWJsaWMgZ2V0X2xja2QoKTogVF9MY2tkIHtyZXR1cm4gVF9MY2tkLk1hemV9XHJcbiAgICBwdWJsaWMgZ2V0X25hbWUoKTogc3RyaW5nIHtyZXR1cm4gdGhpcy5uYW1lfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgaHJlcygpOiAgQ19IZXJvW10ge1xyXG4gICAgICAgIGNvbnN0IGhyZXM6IENfSGVyb1tdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaWkgaW4gdGhpcy5oZXJvZXMpIGhyZXMucHVzaCh0aGlzLmhlcm9lc1tpaV0pO1xyXG4gICAgICAgIHJldHVybiBocmVzO1xyXG4gICAgfSBcclxuICAgIHB1YmxpYyBjbGVhcl9ocmVzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaGVyb2VzID0ge307XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkX2hlcm8oaGVybzogQ19IZXJvKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5oZXJvZXNbaGVyby51aWQoKV0gPSBoZXJvO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJtdl9oZXJvKGhlcm86IENfSGVybyk6IHZvaWQge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmhlcm9lc1toZXJvLnVpZCgpXTtcclxuICAgIH1cclxuXHJcbi8qXHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21fb2JqX3RvX3N0cmluZyhvYTogQ19HdWlsZCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9hLCBudWxsLCBcIlxcdFwiKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZnJvbV9vYmpBcnJheV90b19zdHJpbmcob2FhOiB7W3VpZDogc3RyaW5nXTogQ19HdWlsZH0pOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IG9hID0gW10gYXMgQ19HdWlsZFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgaWkgaW4gb2FhKSBvYS5wdXNoKG9hYVtpaV0pO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYSwgbnVsbCwgXCJcXHRcIik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21fc3RyaW5nX3RvX29iaih0eHQ6IHN0cmluZyk6IENfR3VpbGQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGogICA9IEpTT04ucGFyc2UodHh0KSBhcyBKU09OX0d1aWxkW107XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ19HdWlsZChqKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDX0d1aWxkKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZnJvbV9zdHJpbmdfdG9fb2JqQXJyYXkodHh0OiBzdHJpbmcpOiB7W3VpZDogc3RyaW5nXTogQ19HdWlsZH0ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGogICA9IEpTT04ucGFyc2UodHh0KSBhcyBKU09OX0d1aWxkW107XHJcbiAgICAgICAgICAgIGNvbnN0IG1wYSA9IHt9IGFzIHtbaWQ6IHN0cmluZ106IENfR3VpbGR9O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGpqIG9mIGopIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFhYSA9IG5ldyBDX0d1aWxkKCkuZGVjb2RlKGpqKTtcclxuICAgICAgICAgICAgICAgIG1wYVthYWEudWlkKCldID0gYWFhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBtcGE7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4qL1xyXG5cclxuICAgIHB1YmxpYyBlbmNvZGUoKTogSlNPTl9HdWlsZCB7XHJcbiAgICAgICAgY29uc3QganNvbl9oZXJvZXM6IEpTT05fSGVyb1tdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaWkgaW4gdGhpcy5oZXJvZXMpIGpzb25faGVyb2VzLnB1c2godGhpcy5oZXJvZXNbaWldLmVuY29kZSgpKTsgIFxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogICAgICB0aGlzLmlkLFxyXG4gICAgICAgICAgICB1bmlxX2lkOiB0aGlzLnVuaXFfaWQsXHJcbiAgICAgICAgICAgIHNhdmVfaWQ6IHRoaXMuc2F2ZV9pZCxcclxuICAgICAgICAgICAgZ29sZDogICAgdGhpcy5nb2xkLFxyXG4vLyAgICAgICAgICAgIGdvb2RzOiAgIHRoaXMuZ29vZHMuZW5jb2RlKCksXHJcbiAgICAgICAgICAgIGhlcm9lczogIGpzb25faGVyb2VzLFxyXG4gICAgICAgICAgICBuYW1lOiAgICB0aGlzLm5hbWUsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGRlY29kZShhOiBKU09OX0d1aWxkfHVuZGVmaW5lZCk6IENfR3VpbGQge1xyXG4gICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChhLmlkICAgICAgICE9PSB1bmRlZmluZWQpIHRoaXMuaWQgICAgICAgICA9IGEuaWQ7XHJcbiAgICAgICAgaWYgKGEudW5pcV9pZCAgIT09IHVuZGVmaW5lZCkgdGhpcy51bmlxX2lkICAgID0gYS51bmlxX2lkO1xyXG4gICAgICAgIGlmIChhLnNhdmVfaWQgICE9PSB1bmRlZmluZWQpIHRoaXMuc2F2ZV9pZCAgICA9IGEuc2F2ZV9pZDtcclxuICAgICAgICBpZiAoYS5uYW1lICAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm5hbWUgICAgICAgPSBhLm5hbWU7XHJcbiAgICAgICAgaWYgKGEuZ29sZCAgICAgIT09IHVuZGVmaW5lZCkgdGhpcy5nb2xkO1xyXG4vLyAgICAgICAgaWYgKGEuZ29vZHMgICAgIT09IHVuZGVmaW5lZCkgdGhpcy5nb29kcy5kZWNvZGUgKGEuZ29vZHMpO1xyXG5cclxuICAgICAgICBpZiAoYS5oZXJvZXMgIT09IHVuZGVmaW5lZCkgIHtcclxuICAgICAgICAgICAgdGhpcy5oZXJvZXMgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBqc29uX2hlcm8gb2YgYS5oZXJvZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlcm8gPSBuZXcgQ19IZXJvKGpzb25faGVybyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlcm9lc1toZXJvLnVpZCgpXSA9IGhlcm87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGVuY29kZV9hbGwoYWxsX2d1bGQ6IENfR3VpbGRbXSk6IEpTT05fR3VpbGRbXSB7XHJcbiAgICAgICAgY29uc3QgYWxsX2d1bGRfZGF0YTogSlNPTl9HdWlsZFtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgZ3VsZCBvZiBhbGxfZ3VsZCkge1xyXG4gICAgICAgICAgICBhbGxfZ3VsZF9kYXRhLnB1c2goZ3VsZC5lbmNvZGUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbGxfZ3VsZF9kYXRhO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBkZWNvZGVfYWxsKGFsbF9ndWxkX2RhdGE6IEpTT05fR3VpbGRbXSk6IENfR3VpbGRbXSB7XHJcbiAgICAgICAgY29uc3QgYWxsX2d1bGQ6IENfR3VpbGRbXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGd1bGRfZGF0YSBvZiBhbGxfZ3VsZF9kYXRhKSB7XHJcbiAgICAgICAgICAgIGFsbF9ndWxkLnB1c2goKG5ldyBDX0d1aWxkKCkpLmRlY29kZShndWxkX2RhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFsbF9ndWxkO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgYWxlcnQoKTogdm9pZCB7XHJcbiAgICAgICAgYWxlcnQoXCJHdWlsZCBJbmZvOlwiIFxyXG4gICAgICAgICAgICArIFwiXFxuaWQ6ICAgICAgIFwiICsgKHRoaXMuaWQgICAgICAgICAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxudW5pcV9pZDogIFwiICsgKHRoaXMudW5pcV9pZCAgICAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuc2F2ZV9pZDogIFwiICsgKHRoaXMuc2F2ZV9pZCAgICAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxubmFtZTogICAgIFwiICsgKHRoaXMubmFtZSAgICAgICAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuZ29sZDogICAgIFwiICsgKHRoaXMuZ29sZCAgICAgICAgICAgPz8gIDApXHJcbi8vICAgICAgICAgICAgKyBcIlxcbmdvb2RzOiAgICBcIiArIChPYmplY3Qua2V5cyh0aGlzLmdvb2RzPz8wKS5sZW5ndGgpXHJcbiAgICAgICAgICAgICsgXCJcXG5oZXJvZXM6ICAgXCIgKyAodGhpcy5oZXJvZXM/Lmxlbmd0aCA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5cIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBDX0hlcm9BYmlsaXR5LCBKU09OX0hlcm9fQWJpbGl0eX0gZnJvbSBcIi4vQ19IZXJvQWJpbGl0eVwiO1xyXG5pbXBvcnQgeyBJX0pTT05fVW5pcSwgICBKU09OX0FueSB9ICAgICAgICAgZnJvbSBcIi4vQ19TYXZlSW5mb1wiO1xyXG5pbXBvcnQgeyBfZ2V0X3V1aWQsIF9pbnJhbmQsIF9pcmFuZCwgX3JhbmRvbV9zdHIgfSAgZnJvbSBcIi4uL2RfdXRsL0ZfUmFuZFwiO1xyXG5pbXBvcnQgeyBDX0dvb2RzTGlzdCwgSlNPTl9Hb29kc0xpc3QgfSBmcm9tIFwiLi9DX0dvb2RzTGlzdE5HXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fSGVybyBleHRlbmRzIEpTT05fQW55IHtcclxuICAgIGlkPzogICAgICAgIG51bWJlciwgXHJcbiAgICB1bmlxX2lkPzogICBzdHJpbmcsIFxyXG4gICAgc2F2ZV9pZD86ICAgbnVtYmVyLCBcclxuICAgIG5hbWU/OiAgICAgIHN0cmluZywgXHJcbiAgICBzZXg/OiAgICAgICBudW1iZXI7IFxyXG4gICAgYWdlPzogICAgICAgbnVtYmVyOyBcclxuICAgIGdvbGQ/OiAgICAgIG51bWJlcjsgXHJcbi8vICAgIGdvb2RzPzogICAgIEpTT05fR29vZHNMaXN0OyBcclxuICAgIHN0YXRlPzogICAgIG51bWJlcjsgXHJcbiAgICBsdj86ICAgICAgICBudW1iZXI7IFxyXG4gICAgdmFsPzogICAgICAgSlNPTl9IZXJvX1ZhbHVlO1xyXG4gICAgYWJpX3A/OiAgICAgICB7YnNjPzogSlNPTl9IZXJvX0FiaWxpdHksIHR0bD86IEpTT05fSGVyb19BYmlsaXR5LCBub3c/OiBKU09OX0hlcm9fQWJpbGl0eX07XHJcbiAgICBhYmlfbT86ICAgICAgIHtic2M/OiBKU09OX0hlcm9fQWJpbGl0eSwgdHRsPzogSlNPTl9IZXJvX0FiaWxpdHksIG5vdz86IEpTT05fSGVyb19BYmlsaXR5fTtcclxuICAgIGlzX2FsaXZlPzogIHN0cmluZ3xib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fSGVyb19WYWx1ZSBleHRlbmRzIEpTT05fQW55IHtcclxuICAgIHNrcD86IHt0dGw6IG51bWJlciwgIG5vdzogbnVtYmVyfSwgXHJcbiAgICBleHA/OiB7dHRsOiBudW1iZXIsICBub3c6IG51bWJlcn0sXHJcbiAgICBueGU/OiBudW1iZXIsICAgICAgICAgICAgICAgICAgIC8vIOasoeWbnuOBruODkuODvOODreODvOODrOODmeODq+OCouODg+ODl+OBq+W/heimgeOBque1jOmok+WApFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElfSGVybyB7XHJcbiAgICBmcmVlKCk6IHZvaWQ7XHJcblxyXG4gICAgc2V0X3BycChhcmcgOiBKU09OX0hlcm8pOiB2b2lkO1xyXG5cclxuICAgIHVpZCgpOiAgc3RyaW5nO1xyXG4gICAgbmFtZSgpOiBzdHJpbmc7XHJcbiAgICBzZXRfbmFtZShuYW1lOiBzdHJpbmcpOiB2b2lkXHJcblxyXG4gICAgaXNfYWxpdmUoKTogYm9vbGVhbjtcclxuICAgIGdldF9nb2xkKCk6IG51bWJlcjtcclxuICAgIHNldF9nb2xkKGdvbGQ6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBzdWJfZ29sZChnb2xkOiBudW1iZXIpOiBib29sZWFuO1xyXG5cclxuICAgIGdldF9hYmlfcF9ic2Moa2V5OiBzdHJpbmcpOiBudW1iZXI7XHJcbiAgICBnZXRfYWJpX3BfdHRsKGtleTogc3RyaW5nKTogbnVtYmVyO1xyXG4gICAgZ2V0X2FiaV9wX25vdyhrZXk6IHN0cmluZyk6IG51bWJlcjtcclxuXHJcbiAgICBnZXRfYWJpX21fYnNjKGtleTogc3RyaW5nKTogbnVtYmVyO1xyXG4gICAgZ2V0X2FiaV9tX3R0bChrZXk6IHN0cmluZyk6IG51bWJlcjtcclxuICAgIGdldF9hYmlfbV9ub3coa2V5OiBzdHJpbmcpOiBudW1iZXI7XHJcblxyXG4gICAgc2V0X2FiaV9wX2FsbChrZXk6IHN0cmluZywgdmFsOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgc2V0X2FiaV9wX2JzYyhrZXk6IHN0cmluZywgdmFsOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgc2V0X2FiaV9wX3R0bChrZXk6IHN0cmluZywgdmFsOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgc2V0X2FiaV9wX25vdyhrZXk6IHN0cmluZywgdmFsOiBudW1iZXIpOiB2b2lkO1xyXG5cclxuICAgIHNldF9hYmlfbV9hbGwoa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogdm9pZDtcclxuICAgIHNldF9hYmlfbV9ic2Moa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogdm9pZDtcclxuICAgIHNldF9hYmlfbV90dGwoa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogdm9pZDtcclxuICAgIHNldF9hYmlfbV9ub3coa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogdm9pZDtcclxuXHJcbiAgICBoZXJvX2JvbnVzKG46IG51bWJlcik6ICBudW1iZXI7XHJcbiAgICBocF9kYW1hZ2UoZG1nOiBudW1iZXIpOiBudW1iZXI7XHJcbiAgICBocF9oZWFsKGhlYWw6IG51bWJlcik6ICBudW1iZXI7XHJcbiAgICBocF9hdXRvX2hlYWwoKTogICAgICAgICBudW1iZXI7XHJcbiAgICByYW5kb21fbWFrZShoZXJvX2xldmVsOiBudW1iZXIpOiBDX0hlcm87XHJcblxyXG4gICAgZW5jb2RlKCk6IEpTT05fSGVybztcclxuICAgIGRlY29kZShqOiBKU09OX0hlcm8pOnZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbGVydF9ocmVzX2luZm8oYTogKEpTT05fSGVyb3x1bmRlZmluZWQpW118dW5kZWZpbmVkKTogdm9pZCB7IFxyXG4gICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgYWxlcnQoJ051bWJlciBvZiBIZXJvID0gJyArIGEubGVuZ3RoLnRvU3RyaW5nKCkpO1xyXG4gICAgZm9yICh2YXIgaSBpbiBhKSB7XHJcbiAgICAgICAgaWYgKGFbaV0gPT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgYWxlcnRfaGVyb19pbmZvKGFbaV0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxlcnRfaGVyb19pbmZvKGE6IEpTT05fSGVyb3x1bmRlZmluZWQpOiB2b2lkIHsgXHJcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICBhbGVydChcIkhlcm8gSW5mbzpcXG5cIiBcclxuICAgICAgICArIFwiXFxuaWQ6ICAgICAgIFwiICAgICArIChhPy5pZCAgICAgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG51bmlxX2lkICAgXCIgICAgICsgKGE/LnVuaXFfaWQgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbm5hbWU6ICAgICBcIiAgICAgKyAoYT8ubmFtZSAgICAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxuc2F2ZV9pZDogIFwiICAgICArIChhPy5zYXZlX2lkICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5pc19hbGl2ZTogXCIgICAgICsgKGE/LmlzX2FsaXZlICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcblwiXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ19IZXJvIGltcGxlbWVudHMgSV9KU09OX1VuaXEge1xyXG4gICAgcHJvdGVjdGVkIG15X2lkOiAgICBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgbXlfbmFtZTogIHN0cmluZztcclxuICAgIHByb3RlY3RlZCB1bmlxX2lkOiAgc3RyaW5nOyBcclxuICAgIHByb3RlY3RlZCBzYXZlX2lkOiAgbnVtYmVyOyBcclxuICAgIHByb3RlY3RlZCBzZXg6ICAgICAgbnVtYmVyOyBcclxuICAgIHByb3RlY3RlZCBhZ2U6ICAgICAgbnVtYmVyOyBcclxuICAgIHByb3RlY3RlZCBzdGF0ZTogICAgbnVtYmVyOyBcclxuICAgIHByb3RlY3RlZCBsdjogICAgICAgbnVtYmVyOyBcclxuICAgIC8vIGJzYyhCYXNpYynjga/lvZPkurrjga7ln7rmnKzlgKTjgIJ0dGwoVG90YWwp44Gv6KOF5YKZ562J44KS5Yqg5rib566X44GX44Gf44KC44Gu44CCbm9344Gv44OQ44OV562J44Gu44K/44O844Oz5Yi244Gu44KC5Yqg5rib566X44GX44Gf44KC44GuXHJcbiAgICBwcm90ZWN0ZWQgZ29sZDogICAgIG51bWJlcjsgXHJcbi8vICAgIHByb3RlY3RlZCBnb29kczogICAgQ19Hb29kc0xpc3Q7IFxyXG4gICAgcHJvdGVjdGVkIHZhbDogICAgICBKU09OX0hlcm9fVmFsdWV8dW5kZWZpbmVkO1xyXG4gICAgcHJvdGVjdGVkIGFiaV9wOiAgICAgIHtic2M6IENfSGVyb0FiaWxpdHksIHR0bDogQ19IZXJvQWJpbGl0eSwgbm93OiBDX0hlcm9BYmlsaXR5fXx1bmRlZmluZWQ7XHJcbiAgICBwcm90ZWN0ZWQgYWJpX206ICAgICAge2JzYzogQ19IZXJvQWJpbGl0eSwgdHRsOiBDX0hlcm9BYmlsaXR5LCBub3c6IENfSGVyb0FiaWxpdHl9fHVuZGVmaW5lZDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYT86IEpTT05fSGVybykge1xyXG4gICAgICAgIHRoaXMubXlfaWQgICAgICA9IDA7XHJcbiAgICAgICAgdGhpcy5teV9uYW1lICAgID0gJ05vIE5hbWUgSGVybyc7XHJcbiAgICAgICAgdGhpcy51bmlxX2lkICAgID0gJ21haV9oZXJvIycgKyBfZ2V0X3V1aWQoKTtcclxuICAgICAgICB0aGlzLnNhdmVfaWQgICAgPSAwO1xyXG4gICAgICAgIHRoaXMuc2V4ICAgICAgICA9IDA7IFxyXG4gICAgICAgIHRoaXMuYWdlICAgICAgICA9IDA7IFxyXG4gICAgICAgIHRoaXMuZ29sZCAgICAgICA9IDA7IFxyXG4vLyAgICAgICAgdGhpcy5nb29kcyAgICAgID0gbmV3IENfR29vZHNMaXN0KCk7IFxyXG4gICAgICAgIHRoaXMuc3RhdGUgICAgICA9IDA7IFxyXG4gICAgICAgIHRoaXMubHYgICAgICAgICA9IDA7XHJcbiAgICAgICAgdGhpcy52YWwgICAgICAgID0ge307XHJcbiAgICAgICAgdGhpcy5hYmlfcCAgICAgID0ge2JzYzogbmV3IENfSGVyb0FiaWxpdHkoKSwgdHRsOiBuZXcgQ19IZXJvQWJpbGl0eSgpLCBub3c6IG5ldyBDX0hlcm9BYmlsaXR5KCl9O1xyXG4gICAgICAgIHRoaXMuYWJpX20gICAgICA9IHtic2M6IG5ldyBDX0hlcm9BYmlsaXR5KCksIHR0bDogbmV3IENfSGVyb0FiaWxpdHkoKSwgbm93OiBuZXcgQ19IZXJvQWJpbGl0eSgpfTtcclxuLy8gICAgICAgIHRoaXMuaXNfYWxpdmUgICA9IHRydWU7XHJcbiAgICAgICAgaWYgKGEgIT09IHVuZGVmaW5lZCkgdGhpcy5fX2luaXQoYSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZnJlZSgpIHtcclxuICAgICAgICB0aGlzLnZhbCAgICAgICAgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5hYmlfcCAgICAgID0gdW5kZWZpbmVkO2NvbnN0IGE9e2JzYzogbmV3IENfSGVyb0FiaWxpdHkoKSwgdHRsOiBuZXcgQ19IZXJvQWJpbGl0eSgpLCBub3c6IG5ldyBDX0hlcm9BYmlsaXR5KCl9O1xyXG4gICAgICAgIHRoaXMuYWJpX20gICAgICA9IHVuZGVmaW5lZDtjb25zdCBiPXtic2M6IG5ldyBDX0hlcm9BYmlsaXR5KCksIHR0bDogbmV3IENfSGVyb0FiaWxpdHkoKSwgbm93OiBuZXcgQ19IZXJvQWJpbGl0eSgpfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0X3BycChhcmcgOiBKU09OX0hlcm8pIHtcclxuICAgICAgICB0aGlzLmRlY29kZShhcmcpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldF91bmlxX2lkKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLnVuaXFfaWR9XHJcblxyXG4gICAgcHVibGljIGlkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdIZXJvXycgKyB0aGlzLm15X2lkLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg1LCAnMCcpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHVpZCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy51bmlxX2lkO31cclxuICAgIHB1YmxpYyBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXlfbmFtZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRfbmFtZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm15X25hbWUgPSBuYW1lO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgaXNfYWxpdmUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgaHAgPSB0aGlzLmFiaV9wPy5ub3cuZ2V0KCd4cCcpID8/IDA7XHJcbiAgICAgICAgY29uc3QgaGQgPSB0aGlzLmFiaV9wPy5ub3cuZ2V0KCd4ZCcpID8/IDA7XHJcbiAgICAgICAgcmV0dXJuIGhwIC0gaGQgPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRfZ29sZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdvbGQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0X2dvbGQoZ29sZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nb2xkID0gZ29sZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdWJfZ29sZChnb2xkOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoZ29sZCA+IHRoaXMuZ29sZCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZ29sZCAtPSBnb2xkO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRfYWJpX3BfYnNjKGtleTogc3RyaW5nKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5hYmlfcD8uYnNjLmdldChrZXkpPz8wfVxyXG4gICAgcHVibGljIGdldF9hYmlfcF90dGwoa2V5OiBzdHJpbmcpOiBudW1iZXIge3JldHVybiB0aGlzLmFiaV9wPy50dGwuZ2V0KGtleSk/PzB9XHJcbiAgICBwdWJsaWMgZ2V0X2FiaV9wX25vdyhrZXk6IHN0cmluZyk6IG51bWJlciB7cmV0dXJuIHRoaXMuYWJpX3A/Lm5vdy5nZXQoa2V5KT8/MH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0X2FiaV9tX2JzYyhrZXk6IHN0cmluZyk6IG51bWJlciB7cmV0dXJuIHRoaXMuYWJpX20/LmJzYy5nZXQoa2V5KT8/MH1cclxuICAgIHB1YmxpYyBnZXRfYWJpX21fdHRsKGtleTogc3RyaW5nKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5hYmlfbT8udHRsLmdldChrZXkpPz8wfVxyXG4gICAgcHVibGljIGdldF9hYmlfbV9ub3coa2V5OiBzdHJpbmcpOiBudW1iZXIge3JldHVybiB0aGlzLmFiaV9tPy5ub3cuZ2V0KGtleSk/PzB9XHJcblxyXG4gICAgcHVibGljIHNldF9hYmlfcF9hbGwoa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hYmlfcD8uYnNjLnNldChrZXksIHZhbCk7XHJcbiAgICAgICAgdGhpcy5hYmlfcD8udHRsLnNldChrZXksIHZhbCk7XHJcbiAgICAgICAgdGhpcy5hYmlfcD8ubm93LnNldChrZXksIHZhbCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0X2FiaV9wX2JzYyhrZXk6IHN0cmluZywgdmFsOiBudW1iZXIpOiB2b2lkIHt0aGlzLmFiaV9wPy5ic2Muc2V0KGtleSwgdmFsKX1cclxuICAgIHB1YmxpYyBzZXRfYWJpX3BfdHRsKGtleTogc3RyaW5nLCB2YWw6IG51bWJlcik6IHZvaWQge3RoaXMuYWJpX3A/LnR0bC5zZXQoa2V5LCB2YWwpfVxyXG4gICAgcHVibGljIHNldF9hYmlfcF9ub3coa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogdm9pZCB7dGhpcy5hYmlfcD8ubm93LnNldChrZXksIHZhbCl9XHJcblxyXG4gICAgcHVibGljIHNldF9hYmlfbV9hbGwoa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hYmlfbT8uYnNjLnNldChrZXksIHZhbCk7XHJcbiAgICAgICAgdGhpcy5hYmlfbT8udHRsLnNldChrZXksIHZhbCk7XHJcbiAgICAgICAgdGhpcy5hYmlfbT8ubm93LnNldChrZXksIHZhbCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0X2FiaV9tX2JzYyhrZXk6IHN0cmluZywgdmFsOiBudW1iZXIpOiB2b2lkIHt0aGlzLmFiaV9tPy5ic2Muc2V0KGtleSwgdmFsKX1cclxuICAgIHB1YmxpYyBzZXRfYWJpX21fdHRsKGtleTogc3RyaW5nLCB2YWw6IG51bWJlcik6IHZvaWQge3RoaXMuYWJpX20/LnR0bC5zZXQoa2V5LCB2YWwpfVxyXG4gICAgcHVibGljIHNldF9hYmlfbV9ub3coa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogdm9pZCB7dGhpcy5hYmlfbT8ubm93LnNldChrZXksIHZhbCl9XHJcblxyXG4gICAgcHVibGljIGhlcm9fYm9udXMobjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gbiAqICggdGhpcy5sdiArIDEgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaHBfZGFtYWdlKGRtZzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCB4cF9ub3cgID0gdGhpcy5hYmlfcD8ubm93LmdldCgneHAnKSA/PyAwO1xyXG4gICAgICAgIGxldCAgIHhkX25vdyAgPSB0aGlzLmFiaV9wPy5ub3cuZ2V0KCd4ZCcpID8/IDA7XHJcblxyXG4gICAgICAgIHhkX25vdyArPSBkbWcgLSBNYXRoLnJvdW5kKCB0aGlzLmhlcm9fYm9udXMoKHRoaXMuYWJpX3A/Lm5vdy5nZXQoJ3ZpdCcpID8/IDApIC8gMTAuMCkgKTtcclxuXHJcbiAgICAgICAgY29uc3QgZCA9IHhkX25vdyA+IHhwX25vdyA/IHhwX25vdyA6IHhkX25vdztcclxuICAgICAgICB0aGlzLmFiaV9wPy5ub3cuc2V0KCd4ZCcsIGQpO1xyXG4gICAgICAgIHRoaXMuYWJpX3A/LnR0bC5zZXQoJ3hkJywgZCk7XHJcbiAgICAgICAgdGhpcy5hYmlfcD8uYnNjLnNldCgneGQnLCBkKTtcclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBocF9oZWFsKGhlYWw6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgbGV0ICAgeGRfbm93ID0gdGhpcy5hYmlfcD8ubm93LmdldCgneGQnKSA/PyAwO1xyXG4gICAgICAgIGlmICh4ZF9ub3cgPD0gMCkgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIHhkX25vdyAtPSBoZWFsO1xyXG5cclxuICAgICAgICBjb25zdCBkID0geGRfbm93IDwgMCA/IDAgOiB4ZF9ub3c7XHJcbiAgICAgICAgdGhpcy5hYmlfcD8ubm93LnNldCgneGQnLCBkKTtcclxuICAgICAgICB0aGlzLmFiaV9wPy50dGwuc2V0KCd4ZCcsIGQpO1xyXG4gICAgICAgIHRoaXMuYWJpX3A/LmJzYy5zZXQoJ3hkJywgZCk7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaHBfYXV0b19oZWFsKCk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgaGVhbCA9IE1hdGguY2VpbCggdGhpcy5oZXJvX2JvbnVzKCh0aGlzLmFiaV9wPy5ub3cuZ2V0KCd2aXQnKSA/PyAwKSAvIDEwLjApICk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHBfaGVhbChoZWFsKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIHByb3RlY3RlZCBjb3B5X2JzY190b190dGwoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hYmlfcD8udHRsLmRlY29kZSh0aGlzLmFiaV9wPy5ic2MuZW5jb2RlKCk/P3t9KTtcclxuICAgICAgICB0aGlzLmFiaV9tPy50dGwuZGVjb2RlKHRoaXMuYWJpX20/LmJzYy5lbmNvZGUoKT8/e30pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBjb3B5X3R0bF90b19ub3coKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hYmlfcD8ubm93LmRlY29kZSh0aGlzLmFiaV9wPy50dGwuZW5jb2RlKCk/P3t9KTtcclxuICAgICAgICB0aGlzLmFiaV9tPy5ub3cuZGVjb2RlKHRoaXMuYWJpX20/LnR0bC5lbmNvZGUoKT8/e30pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByYW5kb21fbWFrZShoZXJvX2xldmVsOiBudW1iZXIgPSAwKTogQ19IZXJvIHtcclxuICAgICAgICB0aGlzLm15X2lkICAgID0gMDsgLy8gLS1IZXJvOjokbWF4X2lkO1xyXG4gICAgICAgIHRoaXMubXlfbmFtZSAgPSBcIuWGkumZuuiAhSBcIiArIF9yYW5kb21fc3RyKDUpO1xyXG4gICAgICAgIHRoaXMuc2V4ICAgICAgPSBfaXJhbmQoIDAsICAgICAxKTsgXHJcbiAgICAgICAgdGhpcy5hZ2UgICAgICA9IF9pcmFuZCggMTUsICAgMjUpOyBcclxuICAgICAgICB0aGlzLnN0YXRlICAgID0gMDsgXHJcbiAgICAgICAgdGhpcy5sdiAgICAgICA9IGhlcm9fbGV2ZWw7IFxyXG4gICAgICAgIHRoaXMuZ29sZCAgICAgPSBfaXJhbmQoIDUwMCwgMTAwMCk7IFxyXG4gICAgICAgIHRoaXMudmFsICAgICAgPSB7XHJcbiAgICAgICAgICAgIHNrcDoge3R0bDogMCwgbm93OiAwfSwgXHJcbiAgICAgICAgICAgIGV4cDoge3R0bDogMCwgbm93OiAwfSxcclxuICAgICAgICAgICAgJ254ZSc6IDEwMDBcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgY29uc3QgYWJpX3BfYnNjID0gdGhpcy5hYmlfcD8uYnNjO1xyXG4gICAgICAgIGFiaV9wX2JzYz8ucmFuZG9tX21ha2UoaGVyb19sZXZlbCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFiaV9tX2JzYyA9IHRoaXMuYWJpX20/LmJzYztcclxuICAgICAgICBhYmlfbV9ic2M/LnJhbmRvbV9tYWtlKGhlcm9fbGV2ZWwpO1xyXG5cclxuICAgICAgICB0aGlzLmNvcHlfYnNjX3RvX3R0bCgpO1xyXG4gICAgICAgIHRoaXMuY29weV90dGxfdG9fbm93KCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBcclxuICAgIHB1YmxpYyBlbmNvZGUoKTogSlNPTl9IZXJvIHtcclxuICAgICAgICBjb25zdCByZXQ6IEpTT05fSGVybyA9IHtcclxuICAgICAgICAgICAgaWQ6ICAgICAgICB0aGlzLm15X2lkLFxyXG4gICAgICAgICAgICB1bmlxX2lkOiAgIHRoaXMudW5pcV9pZCxcclxuICAgICAgICAgICAgbmFtZTogICAgICB0aGlzLm15X25hbWUsXHJcbiAgICAgICAgICAgIHNhdmVfaWQ6ICAgdGhpcy5zYXZlX2lkLFxyXG4gICAgICAgICAgICBzZXg6ICAgICAgIHRoaXMuc2V4LCBcclxuICAgICAgICAgICAgYWdlOiAgICAgICB0aGlzLmFnZSwgXHJcbiAgICAgICAgICAgIHN0YXRlOiAgICAgdGhpcy5zdGF0ZSwgXHJcbiAgICAgICAgICAgIGx2OiAgICAgICAgdGhpcy5sdiwgXHJcbiAgICAgICAgICAgIGdvbGQ6ICAgICAgdGhpcy5nb2xkLCBcclxuLy8gICAgICAgICAgICBnb29kczogICAgIHRoaXMuZ29vZHMuZW5jb2RlKCksIFxyXG4gICAgICAgICAgICB2YWw6ICAgICAgIHRoaXMudmFsLFxyXG4gICAgICAgICAgICBhYmlfcF9ic2M6IHRoaXMuYWJpX3A/LmJzYy5lbmNvZGUoKT8/e30sXHJcbiAgICAgICAgICAgIGFiaV9tX2JzYzogdGhpcy5hYmlfbT8uYnNjLmVuY29kZSgpPz97fSxcclxuICAgICAgICAgICAgYWJpX3BfdHRsOiB0aGlzLmFiaV9wPy50dGwuZW5jb2RlKCk/P3t9LFxyXG4gICAgICAgICAgICBhYmlfbV90dGw6IHRoaXMuYWJpX20/LnR0bC5lbmNvZGUoKT8/e30sXHJcbiAgICAgICAgICAgIGFiaV9wX25vdzogdGhpcy5hYmlfcD8ubm93LmVuY29kZSgpPz97fSxcclxuICAgICAgICAgICAgYWJpX21fbm93OiB0aGlzLmFiaV9tPy5ub3cuZW5jb2RlKCk/P3t9LFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgcHVibGljIGRlY29kZShhOiBKU09OX0hlcm98dW5kZWZpbmVkKTogQ19IZXJvIHtyZXR1cm4gdGhpcy5fX2luaXQoYSl9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9faW5pdChhOiBKU09OX0hlcm98dW5kZWZpbmVkKTogQ19IZXJvIHtcclxuICAgICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcztcclxuICAgICAgICBpZiAoYS5pZCAgICAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm15X2lkICAgID0gYS5pZDtcclxuICAgICAgICBpZiAoYS5uYW1lICAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm15X25hbWUgID0gYS5uYW1lO1xyXG4gICAgICAgIGlmIChhLnVuaXFfaWQgICE9PSB1bmRlZmluZWQpIHRoaXMudW5pcV9pZCAgPSBhLnVuaXFfaWQ7XHJcbiAgICAgICAgaWYgKGEuc2F2ZV9pZCAgIT09IHVuZGVmaW5lZCkgdGhpcy5zYXZlX2lkICA9IGEuc2F2ZV9pZDtcclxuICAgICAgICBpZiAoYS5zZXggICAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLnNleCAgICAgID0gYS5zZXg7XHJcbiAgICAgICAgaWYgKGEuYWdlICAgICAgIT09IHVuZGVmaW5lZCkgdGhpcy5hZ2UgICAgICA9IGEuYWdlO1xyXG4gICAgICAgIGlmIChhLnN0YXRlICAgICE9PSB1bmRlZmluZWQpIHRoaXMuc3RhdGUgICAgPSBhLnN0YXRlO1xyXG4gICAgICAgIGlmIChhLmx2ICAgICAgICE9PSB1bmRlZmluZWQpIHRoaXMubHYgICAgICAgPSBhLmx2O1xyXG4gICAgICAgIGlmIChhLmdvbGQgICAgICE9PSB1bmRlZmluZWQpIHRoaXMuZ29sZCAgICAgPSBhLmdvbGQ7XHJcblxyXG4vLyAgICAgICAgaWYgKGEuZ29vZHMgICAhPT0gdW5kZWZpbmVkKSB0aGlzLmdvb2RzLmRlY29kZShhLmdvb2RzKTtcclxuICAgICAgICBpZiAoYS52YWwgICAgICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fX2RlY29kZV92YWwodGhpcy52YWw/P3t9LCBhLnZhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYS5hYmlfcF9ic2MgIT09IHVuZGVmaW5lZCkgdGhpcy5hYmlfcD8uYnNjLmRlY29kZShhLmFiaV9wX2JzYyk7XHJcbiAgICAgICAgaWYgKGEuYWJpX21fYnNjICE9PSB1bmRlZmluZWQpIHRoaXMuYWJpX20/LmJzYy5kZWNvZGUoYS5hYmlfbV9ic2MpO1xyXG4gICAgICAgIGlmIChhLmFiaV9wX3R0bCAhPT0gdW5kZWZpbmVkKSB0aGlzLmFiaV9wPy50dGwuZGVjb2RlKGEuYWJpX3BfdHRsKTtcclxuICAgICAgICBpZiAoYS5hYmlfbV90dGwgIT09IHVuZGVmaW5lZCkgdGhpcy5hYmlfbT8udHRsLmRlY29kZShhLmFiaV9tX3R0bCk7XHJcbiAgICAgICAgaWYgKGEuYWJpX3Bfbm93ICE9PSB1bmRlZmluZWQpIHRoaXMuYWJpX3A/Lm5vdy5kZWNvZGUoYS5hYmlfcF9ub3cpO1xyXG4gICAgICAgIGlmIChhLmFiaV9tX25vdyAhPT0gdW5kZWZpbmVkKSB0aGlzLmFiaV9tPy5ub3cuZGVjb2RlKGEuYWJpX21fbm93KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9fZGVjb2RlX3ZhbChkOiBKU09OX0hlcm9fVmFsdWUsIHM6IEpTT05fSGVyb19WYWx1ZSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChzLnNrcCAhPT0gdW5kZWZpbmVkKSBkLnNrcCA9IHRoaXMuX19kZWNvZGVfc2tleChkLnNrcCwgcy5za3ApO1xyXG4gICAgICAgIGlmIChzLmV4cCAhPT0gdW5kZWZpbmVkKSBkLmV4cCA9IHRoaXMuX19kZWNvZGVfc2tleChkLmV4cCwgcy5leHApO1xyXG4gICAgICAgIGlmIChzLm54ZSAhPT0gdW5kZWZpbmVkKSBkLm54ZSA9IHMubnhlO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9fZGVjb2RlX3NrZXgoYToge3R0bD86IG51bWJlciwgbm93PzogbnVtYmVyfSB8IHVuZGVmaW5lZCwgczoge3R0bD86IG51bWJlciwgbm93PzogbnVtYmVyfSk6IHt0dGw6IG51bWJlciwgbm93OiBudW1iZXJ9IHtcclxuICAgICAgICB2YXIgZDoge3R0bDogbnVtYmVyLCBub3c6IG51bWJlcn07XHJcbiAgICAgICAgaWYgICAgIChhID09PSB1bmRlZmluZWQpIGQgPSB7dHRsOiAwLCBub3c6IDB9O1xyXG4gICAgICAgIGVsc2UgICAgZCA9IHt0dGw6IGE/LnR0bCA/PyAwLCBub3c6IGE/Lm5vdyA/PyAwfTtcclxuXHJcbiAgICAgICAgZC50dGwgPSBzLnR0bCA/PyBkLnR0bDtcclxuICAgICAgICBkLm5vdyA9IHMubm93ID8/IHMudHRsID8/IGQubm93O1xyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlX2hlcm9lcyhoZXJvZXM6IENfSGVyb1tdKTogSlNPTl9IZXJvW10ge1xyXG4gICAgICAgIGNvbnN0IGhlcm9lc19kYXRhID0gW10gYXMgSlNPTl9IZXJvW107XHJcbiAgICAgICAgZm9yICh2YXIgaGVybyBvZiBoZXJvZXMpIHtcclxuICAgICAgICAgICAgaGVyb2VzX2RhdGEucHVzaChoZXJvLmVuY29kZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlcm9lc19kYXRhO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBkZWNvZGVfaGVyb2VzKGhlcm9lc19kYXRhOiAoSlNPTl9IZXJvfHVuZGVmaW5lZClbXXx1bmRlZmluZWQpOiBDX0hlcm9bXSB7XHJcbiAgICAgICAgY29uc3QgaGVyb2VzID0gW10gYXMgQ19IZXJvW107XHJcbiAgICAgICAgaWYgKGhlcm9lc19kYXRhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaGVyb19kYXRhIG9mIGhlcm9lc19kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGVyb19kYXRhICE9PSB1bmRlZmluZWQpIGhlcm9lcy5wdXNoKG5ldyBDX0hlcm8oKS5kZWNvZGUoaGVyb19kYXRhKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlcm9lcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWxlcnQoKTogdm9pZCB7IFxyXG4gICAgICAgIGFsZXJ0KFwiSGVybyBJbmZvOlxcblwiIFxyXG4gICAgICAgICAgICArIFwiXFxuaWQ6ICAgICAgIFwiICAgICArICh0aGlzLmlkICAgICAgICA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG51bmlxX2lkICAgXCIgICAgICsgKHRoaXMudW5pcV9pZCAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbm5hbWU6ICAgICBcIiAgICAgKyAodGhpcy5uYW1lICAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuc2F2ZV9pZDogIFwiICAgICArICh0aGlzLnNhdmVfaWQgICA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5pc19hbGl2ZTogXCIgICAgICsgKHRoaXMuaXNfYWxpdmUgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcblwiXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgYWxlcnRfaHJlcyhhOiAoQ19IZXJvfHVuZGVmaW5lZClbXXx1bmRlZmluZWQpOiB2b2lkIHsgXHJcbiAgICAgICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgIGFsZXJ0KCdOdW1iZXIgb2YgSGVybyA9ICcgKyBhLmxlbmd0aC50b1N0cmluZygpKTtcclxuICAgICAgICBmb3IgKHZhciBpIGluIGEpIGFbaV0/LmFsZXJ0KCk7XHJcbiAgICB9XHJcbn0iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IElfSlNPTiwgSlNPTl9BbnkgfSBmcm9tIFwiLi9DX1NhdmVJbmZvXCI7XHJcbmltcG9ydCB7IF9yb3VuZCB9ICAgICAgICAgICBmcm9tIFwiLi4vZF91dGwvRl9NYXRoXCI7XHJcbmltcG9ydCB7IF9pbnJhbmQgfSBmcm9tIFwiLi4vZF91dGwvRl9SYW5kXCI7XHJcblxyXG4vLyDkuIDoiKzjgavkvb/jgYjjgovjg6bjg7zjg4bjgqPjg6rjg4bjgqPjgarlkarmlodcclxuLy8g44Kq44OW44K444Kn44Kv44OI44KS5YiX5oyZ5Z6L44Go44GX44Gm5Z6L5YyW44GZ44KL44Gu44Gr5Yip55SoXHJcbnR5cGUgVF9IZXJvQWJpbGl0eSA9IHtba2V5OiBzdHJpbmddOiBudW1iZXJ9O1xyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fSGVyb19BYmlsaXR5IGV4dGVuZHMgSlNPTl9Bbnkge1trZXk6IHN0cmluZ106IG51bWJlcn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDX0hlcm9BYmlsaXR5IGltcGxlbWVudHMgSV9KU09OIHtcclxuICAgIHByb3RlY3RlZCB2OiBUX0hlcm9BYmlsaXR5ID0ge1xyXG4gICAgICAgIHhwOiAgMCwgIC8vIHA6SFDjgIFtOk1QXHJcbiAgICAgICAgeGQ6ICAwLCAgLy8g5LiK6KiY44Gu44OA44Oh44O844K46YePXHJcblxyXG4gICAgICAgIC8vIOS7peS4i+OAgeaIpumXmOiDveWKm+OBruWfuuacrOWApChwOueJqeeQhuOAgW066a2U5rOVKeOAguODkuODvOODreODvOODrOODmeODq+OChOOCueODhuODvOOCv+OCueOCouODg+ODl+OBp+WKoOeulyBcclxuICAgICAgICBhdGs6IDAsICAvLyDmlLvmkoPlgKRcclxuICAgICAgICBkZWY6IDAsICAvLyDpmLLlvqHlgKRcclxuICAgICAgICBxdWM6IDAsICAvLyDnnqznmbrliptcclxuICAgICAgICBjbmM6IDAsICAvLyDmqZ/pgYvlgKQo44OB44Oj44Oz44K5KVxyXG4gICAgXHJcbiAgICAgICAgLy8g5Lul5LiL44CB44GE44KP44KG44KL44K544OG44O844K/44K544CC5LiK6KiY44Gu6KiI566X44Gr5b2x6Z+/44CC44OS44O844Ot44O844Os44OZ44Or44KE44K544OG44O844K/44K544Ki44OD44OX44Gn5Yqg566XXHJcbiAgICAgICAgc3RyOiAwLCAgLy8g5qC55oCn44CC5pS75pKDL+mYsuW+oeWKm+OBq+OCguW9semfv+OAgkhQL01Q5Zue5b6p44KE44Ki44Kk44OG44Og44Gu5pyA5aSn5omA5oyB6YeN6YeP44Gr44Oc44O844OK44K5XHJcbiAgICAgICAgcHdyOiAwLCAgLy8g5Z+65pys55qE5by344GV44CC5pS75pKD5Yqb44Gr5b2x6Z+/XHJcbiAgICAgICAgdml0OiAwLCAgLy8g6ICQ5LmF5Yqb44CCSFAvTVDjga7mnIDlpKflgKTjgoTpmLLlvqHlipvjgIHlm57lvqnlgKTjgavlvbHpn7/jgpLkuI7jgYjjgotcclxuICAgICAgICBkZXg6IDAsICAvLyDlmajnlKjjgZXjgILlkb3kuK3njofjgavlvbHpn7/jgpLkuI7jgYjjgovjgILpo5vjgbPpgZPlhbfjgoTplbfot53pm6LprZTms5Xjgafjga/nibnjgavlvbHpn7/jgILnvaDop6PpmaTjgavjgoLlvbHpn79cclxuICAgICAgICBhZ2k6IDAsICAvLyDntKDml6njgZXjgILooYzli5XpgJ/luqbjgoTlm57pgb/njofjgavlvbHpn7/jgpLkuI7jgYjjgovjgILlkb3kuK3njofjgavjgoLlvbHpn79cclxuICAgICAgICB0ZWM6IDAsICAvLyDmioDooZPlipvjgILntYzpqJPjgaflkJHkuIrjgZfjgabog73lipvlgKQocXVjL2NuYynjgavjg5zjg7zjg4rjgrnjgpLkuI7jgYjjgotcclxuICAgICAgICBsdWs6IDAsICAvLyDlubjpgYvlgKTjgIJjbmPjgavlpKfjgY3jgY/lvbHpn7/jgZnjgotcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGE/OiBKU09OX0hlcm9fQWJpbGl0eSkge1xyXG4gICAgICAgIGZvciAobGV0IGlkeCBpbiB0aGlzLnYpIHt0aGlzLnZbaWR4XSA9IDA7fVxyXG4gICAgICAgIGlmIChhICE9PSB1bmRlZmluZWQpIHRoaXMuZGVjb2RlKGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcpOiBudW1iZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICghKGtleSBpbiB0aGlzLnYpKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZba2V5XTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQoa2V5OiBzdHJpbmcsIHZhbDogbnVtYmVyKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoIShrZXkgaW4gdGhpcy52KSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnZba2V5XSA9IHZhbDtcclxuICAgICAgICByZXR1cm4gdGhpcy52W2tleV07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0QW55KGtleTogc3RyaW5nLCBzOiBKU09OX0hlcm9fQWJpbGl0eSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGlkeCBpbiBzKSB7XHJcbiAgICAgICAgICAgIGlmICghKGlkeCBpbiB0aGlzLnYpKSBjb250aW51ZTtcclxuICAgICAgICAgICAgdGhpcy52W2tleV0gPSBzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGQoYTogSlNPTl9IZXJvX0FiaWxpdHkpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gYSkge1xyXG4gICAgICAgICAgICB0aGlzLnZba2V5XSArPSBhW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIGNhbGNfeHAoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52LnhwICA9ICBNYXRoLmNlaWwoIDIwKnRoaXMudi5zdHIgKyAyMCp0aGlzLnYudml0ICsgNSp0aGlzLnYudGVjICsgNSp0aGlzLnYubHVrICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNhbGNfZWwoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52LmF0ayA9ICBNYXRoLmNlaWwoIDIqdGhpcy52LnN0ciArIDIqdGhpcy52LnB3ciArIDEqdGhpcy52LnRlYyApO1xyXG4gICAgICAgIHRoaXMudi5kZWYgPSAgTWF0aC5jZWlsKCAyKnRoaXMudi5zdHIgKyAyKnRoaXMudi52aXQgKyAxKnRoaXMudi50ZWMgKTtcclxuICAgICAgICB0aGlzLnYucXVjID0gIE1hdGguY2VpbCggMip0aGlzLnYuZGV4ICsgMip0aGlzLnYuYWdpICsgMSp0aGlzLnYudGVjICk7XHJcbiAgICAgICAgdGhpcy52LmNuYyA9ICBNYXRoLmNlaWwoIDMqdGhpcy52Lmx1ayAgICAgICAgICAgICAgICArIDIqdGhpcy52LnRlYyApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByYW5kb21fbWFrZShoZXJvX2xldmVsOiBudW1iZXIgPSAwKTogQ19IZXJvQWJpbGl0eSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGhsICAgPSBoZXJvX2xldmVsICsgMTsgLy8g44OS44O844Ot44O844Os44OZ44Or44Gu5Yid5pyf5YCkXHJcblxyXG4gICAgICAgIHRoaXMudi5zdHIgKz0gIF9pbnJhbmQoNSwgICAyMCwgMi4wKSAqIGhsO1xyXG4gICAgICAgIHRoaXMudi5wd3IgKz0gIF9pbnJhbmQoNSwgICAyMCwgMi4wKSAqIGhsO1xyXG4gICAgICAgIHRoaXMudi52aXQgKz0gIF9pbnJhbmQoNSwgICAyMCwgMi4wKSAqIGhsO1xyXG4gICAgICAgIHRoaXMudi5kZXggKz0gIF9pbnJhbmQoNSwgICAyMCwgMi4wKSAqIGhsO1xyXG4gICAgICAgIHRoaXMudi5hZ2kgKz0gIF9pbnJhbmQoNSwgICAyMCwgMi4wKSAqIGhsO1xyXG4gICAgICAgIHRoaXMudi50ZWMgKz0gIF9pbnJhbmQoNSwgICAyMCwgMi4wKSAqIGhsO1xyXG4gICAgICAgIHRoaXMudi5sdWsgKz0gIF9pbnJhbmQoNSwgICAyMCwgMi4wKSAqIGhsO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnYueGQgID0gIDA7XHJcblxyXG4gICAgICAgIHRoaXMuY2FsY194cCgpO1xyXG4gICAgICAgIHRoaXMuY2FsY19lbCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fSGVyb19BYmlsaXR5IHtcclxuICAgICAgICBjb25zdCBhOiBKU09OX0hlcm9fQWJpbGl0eSA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnYpIGFba2V5XSA9IHRoaXMudltrZXldO1xyXG4gICAgICAgIHJldHVybiBhO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGRlY29kZShhOiBKU09OX0hlcm9fQWJpbGl0eSk6IENfSGVyb0FiaWxpdHkge1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiBhKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgaW4gdGhpcy52ICYmIGFba2V5XSAhPT0gdW5kZWZpbmVkKSB0aGlzLnZba2V5XSA9IGFba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjbG9uZShzOiBDX0hlcm9BYmlsaXR5KTogQ19IZXJvQWJpbGl0eSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDX0hlcm9BYmlsaXR5KHMuZW5jb2RlKCkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBDX1BvaW50RGlyLCBKU09OX1BvaW50RGlyIH0gZnJvbSBcIi4vQ19Qb2ludERpclwiXHJcblxyXG5leHBvcnQgdHlwZSBUX0hvcGVSZXFLaW5kID1cclxuICAgICAnV2FpdCcgICAgICAvLyDlvoXmqZ9cclxuICB8ICAnTW92ZScgICAgICAvLyDnp7vli5VcclxuICB8ICAnVHVybicgICAgICAvLyDjgr/jg7zjg7NcclxuICB8ICAnVXAnICAgICAgICAvLyDkuIrjgbhcclxuICB8ICAnRG93bicgICAgICAvLyDkuIvjgbggXHJcbiAgfCAgJ0F0dGFjaycgICAgLy8g5pS75pKDXHJcbiAgfCAgJ0RlZmVuc2UnICAgLy8g6Ziy5b6hICAgXHJcbiAgfCAgJ1F1aWNrJyAgICAgLy8g5Zue6YG/XHJcbiAgfCAgJ0l0ZW0nICAgICAgIC8vIOOCouOCpOODhuODoOS9v+eUqFxyXG4gIDtcclxuXHJcblxyXG5leHBvcnQgdHlwZSBUX0hvcGVSZXNLaW5kID1cclxuICAgICAnV2FpdCcgICAgICAvLyDlvoXmqZ9cclxuICB8ICAnTW92ZScgICAgICAvLyDnp7vli5XjgafjgY3jgotcclxuICB8ICAnVHVybicgICAgICAvLyDjgr/jg7zjg7PjgafjgY3jgotcclxuICB8ICAnQmxvY2snICAgICAvLyDooYzli5XjgpLpmLvmraLjgZXjgozjgZ9cclxuICA7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJX0hhc0hvcGUge1xyXG4gICAgaGFzX2hvcGU6IGJvb2xlYW4sICAgICAgICAgLy8g5biM5pyb6KGM5YuV44Gu5pyJ54ShXHJcbiAgICBob3BlOiAgICAgVF9Ib3BlUmVxS2luZCwgICAvLyDooYzli5Xjga7nqK7poZ5cclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fSGFzSG9wZSB7XHJcbiAgICBoYXNfaG9wZT86IGJvb2xlYW4sICAgICAgICAgLy8g5biM5pyb6KGM5YuV44Gu5pyJ54ShXHJcbiAgICBob3BlPzogICAgIFRfSG9wZVJlcUtpbmQsICAgLy8g6KGM5YuV44Gu56iu6aGeXHJcbn1cclxuZXhwb3J0IGNsYXNzIENfSGFzSG9wZSBpbXBsZW1lbnRzIElfSGFzSG9wZSB7XHJcbiAgICBwdWJsaWMgaGFzX2hvcGU6IGJvb2xlYW4gPWZhbHNlOyAgLy8g5biM5pyb6KGM5YuV44Gu5pyJ54ShXHJcbiAgICBwdWJsaWMgaG9wZTogICAgIFRfSG9wZVJlcUtpbmQgPSAnV2FpdCc7IC8vIOihjOWLleOBrueorumhnlxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX0hhc0hvcGUpIHtcclxuICAgICAgICBpZiAoaikge1xyXG4gICAgICAgICAgICB0aGlzLmhhc19ob3BlID0gai5oYXNfaG9wZSA/PyBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5ob3BlICAgICA9IGouaG9wZSAgICAgPz8gJ1dhaXQnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9Ib3BlQWN0aW9uIGV4dGVuZHMgSV9IYXNIb3BlIHtcclxuICAgIHN1Ymo6ICAgIENfUG9pbnREaXIsICAgIC8vIOWvvuixoeOBruaMh+WumijkvY3nva4pXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX0hvcGVBY3Rpb24gZXh0ZW5kcyBKU09OX0hhc0hvcGUge1xyXG4gICAgc3Viaj86ICAgSlNPTl9Qb2ludERpciwgICAgLy8g5a++6LGh44Gu5oyH5a6aKOS9jee9rilcclxufVxyXG5leHBvcnQgY2xhc3MgQ19Ib3BlQWN0aW9uIGltcGxlbWVudHMgSV9Ib3BlQWN0aW9uIHtcclxuICAgIHB1YmxpYyBoYXNfaG9wZTogYm9vbGVhbiA9IGZhbHNlOyAgICAgICAgLy8g5biM5pyb6KGM5YuV44Gu5pyJ54ShXHJcbiAgICBwdWJsaWMgaG9wZTogICAgIFRfSG9wZVJlcUtpbmQgPSAnV2FpdCc7IC8vIOihjOWLleOBrueorumhnlxyXG4gICAgcHVibGljIHN1Ymo6ICAgICBDX1BvaW50RGlyOyAgICAgICAgICAgICAvLyDlr77osaHjga7mjIflrpoo5L2N572uKVxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX0hvcGVBY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmhhc19ob3BlID0gaj8uaGFzX2hvcGUgPz8gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5ob3BlICAgICA9IGo/LmhvcGUgICAgID8/ICdXYWl0JztcclxuICAgICAgICB0aGlzLnN1YmogICAgID0gaj8uc3ViaiAhPT0gdW5kZWZpbmVkID8gbmV3IENfUG9pbnREaXIoai5zdWJqKSA6IG5ldyBDX1BvaW50RGlyKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9Ib3BlUmVzcG9uY2Uge1xyXG4gICAgb2s6ICAgYm9vbGVhbiwgICAgICAgICAvLyDooYzli5Xlj6/lkKZcclxuICAgIHJlczogIFRfSG9wZVJlc0tpbmQsICAgLy8g6KGM5YuV57WQ5p6cXHJcbiAgICBkbWc6ICBudW1iZXIsICAgICAgICAgIC8vIOWfuuacrOODgOODoeODvOOCuOWApFxyXG4gICAgaG9wZTogSV9Ib3BlQWN0aW9uLCAgICAvLyDluIzmnJvooYzli5Xjga7nqK7poZ5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJX0hvcGVSZXNwb25jZU1vdmUgZXh0ZW5kcyBJX0hvcGVSZXNwb25jZSB7fVxyXG5leHBvcnQgaW50ZXJmYWNlIElfSG9wZVJlc3BvbmNlVHVybiBleHRlbmRzIElfSG9wZVJlc3BvbmNlIHt9XHJcblxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IENfUG9pbnQgfSAgICAgICAgICAgICAgICAgICBmcm9tICcuL0NfUG9pbnQnO1xyXG5pbXBvcnQgeyBDX1BvaW50RGlyLCBKU09OX1BvaW50RGlyIH0gZnJvbSAnLi9DX1BvaW50RGlyJztcclxuaW1wb3J0IHsgVF9EaXJlY3Rpb24gfSAgICAgICAgICAgICAgIGZyb20gJy4vQ19Qb2ludERpcic7XHJcbmltcG9ydCB7IElfSlNPTiwgSlNPTl9BbnkgfSAgICAgICAgICBmcm9tICcuL0NfU2F2ZUluZm8nO1xyXG5pbXBvcnQgeyBUX01ha2VFbnVtVHlwZSB9ICAgICAgICAgICAgZnJvbSBcIi4uL2RfdXRsL1RfTWFrZUVudW1UeXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgVF9MY2tkOntbbGNrZDogc3RyaW5nXTogbnVtYmVyfSAgPSB7XHJcbiAgICBVbmtuOiAwLFxyXG4gICAgTWF6ZTogMSxcclxuICAgIEd1bGQ6IDIsXHJcbn0gYXMgY29uc3Q7XHJcbmV4cG9ydCB0eXBlIFRfTGNrZCAgID0gVF9NYWtlRW51bVR5cGU8dHlwZW9mIFRfTGNrZD47XHJcblxyXG5mdW5jdGlvbiBfbGNrZF9rZXkobGNrZDogVF9MY2tkKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhUX0xja2QpLmZpbmQoa2V5ID0+IFRfTGNrZFtrZXldID09PSBsY2tkKSA/PyBcIj8/Pz9cIjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX0xvY2F0aW9uIGV4dGVuZHMgSlNPTl9Bbnkge1xyXG4gICAga2luZD86ICAgIHN0cmluZyxcclxuICAgIG5hbWU/OiAgICBzdHJpbmcsXHJcbiAgICBsb2NfdWlkPzogc3RyaW5nLFxyXG4gICAgbG9jX3Bvcz86IEpTT05fUG9pbnREaXIsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9Mb2NhdGUge1xyXG4gICAgdWlkOiAgICAgICgpPT5zdHJpbmc7XHJcbiAgICBnZXRfbGNrZDogKCk9PlRfTGNrZDtcclxuICAgIGdldF9uYW1lOiAoKT0+c3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ19Mb2NhdGlvbiBpbXBsZW1lbnRzIElfSlNPTiB7XHJcbiAgICBwcm90ZWN0ZWQgbG9jX2tpbmQ6IFRfTGNrZCA9IFRfTGNrZC5VbmtuO1xyXG4gICAgcHJvdGVjdGVkIGxvY19uYW1lOiBzdHJpbmcgPSAnJztcclxuICAgIHByb3RlY3RlZCBsb2NfdWlkOiAgc3RyaW5nID0gJyc7XHJcbiAgICBwcm90ZWN0ZWQgbG9jX3BvczogIENfUG9pbnREaXIgPSBuZXcgQ19Qb2ludERpcigpO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihqc29uPzogSlNPTl9Mb2NhdGlvbikge1xyXG4gICAgICAgIGlmIChqc29uICE9PSB1bmRlZmluZWQpIHRoaXMuX19pbml0KGpzb24pO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9faW5pdChqPzogSlNPTl9Mb2NhdGlvbik6IENfTG9jYXRpb24ge1xyXG4gICAgICAgIGlmIChqID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzO1xyXG4gICAgICAgIGlmIChqLmtpbmQgPT09IHVuZGVmaW5lZCB8fCAhKGoua2luZCBpbiBUX0xja2QpKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKGoua2luZCAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLmxvY19raW5kID0gVF9MY2tkW2oua2luZF07XHJcbiAgICAgICAgaWYgKGoubmFtZSAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLmxvY19uYW1lID0gai5uYW1lO1xyXG4gICAgICAgIGlmIChqLmxvY191aWQgIT09IHVuZGVmaW5lZCkgdGhpcy5sb2NfdWlkICA9IGoubG9jX3VpZDtcclxuICAgICAgICBpZiAoai5sb2NfcG9zICE9PSB1bmRlZmluZWQpIHRoaXMubG9jX3Bvcy5kZWNvZGUoai5sb2NfcG9zKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0X2xja2Rfc3RyKCk6IHN0cmluZyAge3JldHVybiBfbGNrZF9rZXkodGhpcy5sb2Nfa2luZCk7fVxyXG4gICAgcHVibGljIGdldF9sY2tkKCk6IFRfTGNrZCAgICAgIHtyZXR1cm4gdGhpcy5sb2Nfa2luZDt9XHJcbiAgICBwdWJsaWMgZ2V0X25hbWUoKTogc3RyaW5nICAgICAge3JldHVybiB0aGlzLmxvY19uYW1lO31cclxuICAgIHB1YmxpYyBnZXRfdWlkKCk6ICBzdHJpbmcgICAgICB7cmV0dXJuIHRoaXMubG9jX3VpZDt9XHJcblxyXG4gICAgcHVibGljIHNldF9sY2tkKGxja2Q6IFRfTGNrZCk6IENfTG9jYXRpb258dW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoIShfbGNrZF9rZXkobGNrZCkgaW4gVF9MY2tkKSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmxvY19raW5kID0gbGNrZDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRfbmFtZShuYW1lOiBzdHJpbmcpOiAgIHZvaWQge3RoaXMubG9jX25hbWUgPSBuYW1lO31cclxuICAgIHB1YmxpYyBzZXRfdWlkICh1aWQ6IHN0cmluZyk6ICAgIHZvaWQge3RoaXMubG9jX3VpZCAgPSB1aWQ7fVxyXG4gICAgXHJcbiAgICBwdWJsaWMgc2V0X2xja2Rfc3RyKGxja2Q6IHN0cmluZyk6IENfTG9jYXRpb258dW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoIShsY2tkIGluIFRfTGNrZCkpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5sb2Nfa2luZCA9IFRfTGNrZFtsY2tkXTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGdldF9wKCk6IENfUG9pbnQgICAgIHtcclxuLy8gICAgICAgIGlmICh0aGlzLmxvY19raW5kICE9IFRfTGNrZC5NYXplKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY19wb3MuZ2V0X3AoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfZCgpOiBUX0RpcmVjdGlvbiB7XHJcbi8vICAgICAgICBpZiAodGhpcy5sb2Nfa2luZCAhPSBUX0xja2QuTWF6ZSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NfcG9zLmdldF9kKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X3BkKCk6IENfUG9pbnREaXIge1xyXG4vLyAgICAgICAgaWYgKHRoaXMubG9jX2tpbmQgIT0gVF9MY2tkLk1hemUpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jX3Bvcy5nZXRfcGQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0X3AgICAocDogQ19Qb2ludERpcik6IENfUG9pbnREaXJ8dW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAodGhpcy5sb2Nfa2luZCAhPT0gVF9MY2tkLk1hemUpICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAodGhpcy5sb2NfcG9zLnNldF9wKHApID09PSB1bmRlZmluZWQpICByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NfcG9zO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldF9kICAgKGQ6IFRfRGlyZWN0aW9uKTogVF9EaXJlY3Rpb258dW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAodGhpcy5sb2Nfa2luZCAhPT0gVF9MY2tkLk1hemUpICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAodGhpcy5sb2NfcG9zLnNldF9kKGQpID09PSB1bmRlZmluZWQpICByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NfcG9zLmQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0X3BkICAocGQ6IENfUG9pbnREaXIpOiBDX1BvaW50RGlyfHVuZGVmaW5lZCB7XHJcbi8vICAgICAgICBpZiAodGhpcy5sb2Nfa2luZCAhPT0gVF9MY2tkLk1hemUpICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMubG9jX3Bvcy5zZXRfcGQocGQpID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmxvY19wb3M7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBlbmNvZGUoKTogSlNPTl9Mb2NhdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAga2luZDogICAgIF9sY2tkX2tleSh0aGlzLmxvY19raW5kKSxcclxuICAgICAgICAgICAgbmFtZTogICAgIHRoaXMubG9jX25hbWUsXHJcbiAgICAgICAgICAgIGxvY191aWQ6ICB0aGlzLmxvY191aWQsXHJcbiAgICAgICAgICAgIGxvY19wb3M6ICB0aGlzLmxvY19wb3MuZW5jb2RlKCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkZWNvZGUoaj86IEpTT05fTG9jYXRpb24pOiBDX0xvY2F0aW9uIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fX2luaXQoaik7XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgVF9NektpbmQgfSAgICAgICAgICAgICAgICAgICAgZnJvbSBcIi4vVF9NektpbmRcIjtcclxuaW1wb3J0IHsgQ19NYXplQ2VsbCB9ICAgICAgICAgICAgICAgICAgZnJvbSBcIi4vQ19NYXplQ2VsbFwiO1xyXG5pbXBvcnQgeyBJX01hemVPYmosIEpTT05fTWF6ZU9iaiB9ICAgICBmcm9tIFwiLi9DX01hemVPYmpcIjtcclxuaW1wb3J0IHsgQ19Qb2ludCB9ICAgICAgICAgICAgICAgICAgICAgZnJvbSBcIi4vQ19Qb2ludFwiO1xyXG5pbXBvcnQgeyBJX0xvY2F0ZSwgVF9MY2tkIH0gICAgICAgICAgICBmcm9tIFwiLi9DX0xvY2F0aW9uXCI7XHJcbmltcG9ydCB7IENfUmFuZ2UgfSAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuL0NfUmFuZ2VcIjtcclxuaW1wb3J0IHsgQ19UZWFtLCBKU09OX1RlYW0gfSAgICAgICAgICAgZnJvbSBcIi4vQ19UZWFtXCI7XHJcbmltcG9ydCB7IElfSlNPTl9VbmlxLCBKU09OX0FueSB9ICAgICAgIGZyb20gXCIuL0NfU2F2ZUluZm9cIjtcclxuaW1wb3J0IHsgX2dldF91dWlkLCBfaWdyYW5kLCBfaXJhbmQgfSAgZnJvbSBcIi4uL2RfdXRsL0ZfUmFuZFwiO1xyXG5pbXBvcnQgeyBfbWluIH0gICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFwiLi4vZF91dGwvRl9NYXRoXCI7XHJcbmltcG9ydCB7IENfUG9pbnREaXIgfSAgICAgICAgICAgICAgICAgIGZyb20gXCIuL0NfUG9pbnREaXJcIjtcclxuaW1wb3J0IHsgVF9EaXJlY3Rpb24gfSAgICAgICAgICAgICAgICAgZnJvbSBcIi4vVF9EaXJlY3Rpb25cIjtcclxuaW1wb3J0IHsgQ19Qb2ludExpbmsyRCwgQ19Qb2ludFNldDJEIH0gZnJvbSBcIi4vQ19Qb2ludFNldDJEXCI7XHJcbmltcG9ydCB7IG5ld19tYXplT2JqIH0gICAgICAgICAgICAgICAgIGZyb20gXCIuL0ZfbmV3X01hemVPYmpcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9NYXplIGV4dGVuZHMgSlNPTl9Bbnkge1xyXG4gICAgaWQ/OiAgICAgIG51bWJlcixcclxuICAgIHVuaXFfaWQ/OiBzdHJpbmcsXHJcbiAgICBzYXZlX2lkPzogbnVtYmVyLFxyXG4gICAgZmxvb3I/OiAgIG51bWJlcixcclxuICAgIG5hbWU/OiAgICBzdHJpbmcsXHJcbiAgICBzaXplX3g/OiAgbnVtYmVyLFxyXG4gICAgc2l6ZV95PzogIG51bWJlcixcclxuICAgIHNpemVfej86ICBudW1iZXIsXHJcbiAgICBtYXplPzogICAgc3RyaW5nLCBcclxuICAgIG1hc2s/OiAgICBzdHJpbmcsIFxyXG4gICAgbXl0ZWFtPzogIEpTT05fVGVhbSwgXHJcbiAgICBvYmpzPzogICAgSlNPTl9NYXplT2JqW10sXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxlcnRfbWF6ZV9pbmZvKGE6IEpTT05fTWF6ZXx1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgIGlmIChhID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICBhbGVydChcIk1hemUgSW5mbzpcIlxyXG4gICAgICAgICsgXCJcXG5tYXplIGlkIDpcIiArIChhLmlkICAgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5mbG9vcjogXCIgICArIChhLmZsb29yICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG51bmlxIGlkIDpcIiArIChhLnVuaXFfaWQgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5zYXZlIGlkIDpcIiArIChhLnNhdmVfaWQgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5uYW1lOiAgIFwiICArIChhLm5hbWUgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5zaXplX3g6IFwiICArIChhLnNpemVfeCAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5zaXplX3k6IFwiICArIChhLnNpemVfeSAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5zaXplX3o6IFwiICArIChhLnNpemVfeiAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJtYXplOlxcblwiICAgICArIChhLm1hemUgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJtYXNrOlxcblwiICAgICArIChhLm1hc2sgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5cIlxyXG4gICAgKTtcclxufVxyXG5cclxuXHJcbnR5cGUgX2luaXRfYXJnID0ge1xyXG4gICAgbWF6ZV9pZD86IG51bWJlcixcclxuICAgIHNhdmVfaWQ/OiBudW1iZXIsXHJcbiAgICBmbG9vcj86ICAgbnVtYmVyLFxyXG4gICAgbmFtZT86ICAgIHN0cmluZyxcclxuICAgIHNpemVfeD86ICBudW1iZXIsXHJcbiAgICBzaXplX3k/OiAgbnVtYmVyLFxyXG4gICAgc2l6ZV96PzogIG51bWJlcixcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfTWF6ZSBpbXBsZW1lbnRzIElfTG9jYXRlLCBJX0pTT05fVW5pcSB7XHJcbiAgICBwcm90ZWN0ZWQgbWF6ZV9pZDogIG51bWJlcjtcclxuICAgIHByb3RlY3RlZCB1bmlxX2lkOiAgc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIHNhdmVfaWQ6ICBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgZmxvb3I6ICAgIG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBuYW1lOiAgICAgc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIG15X2xheWVyOiBudW1iZXIgPSAwO1xyXG4gICAgcHJvdGVjdGVkIHNpemU6ICAgICBDX1JhbmdlO1xyXG4gICAgcHJvdGVjdGVkIGNlbGxzOiAgICBDX01hemVDZWxsW11bXVtdO1xyXG4gICAgcHJvdGVjdGVkIG1hc2tzOiAgICBib29sZWFuW11bXVtdO1xyXG4gICAgcHJvdGVjdGVkIHVuY2xlYXI6ICBudW1iZXJbXTtcclxuICAgIHByb3RlY3RlZCBvYmpzOiAgICAge1t1aWQ6IHN0cmluZ106IElfTWF6ZU9ian07XHJcbiAgICBwcm90ZWN0ZWQgbnVtX29mX3Jvb206ICAgICAgbnVtYmVyID0gNTsgLyog44Op44Oz44OA44Og55Sf5oiQ44Gu6Zqb44Gu6YOo5bGL44Gu5pWw44Gu5pyA5aSn5pWwICovXHJcbiAgICBwcm90ZWN0ZWQgbWF4X3NpemVfb2Zfcm9vbTogbnVtYmVyID0gMzsgLyog44Op44Oz44OA44Og55Sf5oiQ44Gu6Zqb44Gu6YOo5bGL44Gu5aSn44GN44GVICovXHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGE/OiBfaW5pdF9hcmcpIHtcclxuICAgICAgICB0aGlzLm1hemVfaWQgPSAtMTtcclxuICAgICAgICB0aGlzLnNhdmVfaWQgPSAtMTtcclxuICAgICAgICB0aGlzLnVuaXFfaWQgPSAnbWFpX21hemUjJyArIF9nZXRfdXVpZCgpO1xyXG4gICAgICAgIHRoaXMuZmxvb3IgICA9IDA7XHJcbiAgICAgICAgdGhpcy5uYW1lICAgID0gJyc7XHJcbiAgICAgICAgdGhpcy5zaXplICAgID0gbmV3IENfUmFuZ2UoXHJcbiAgICAgICAgICAgIG5ldyBDX1BvaW50KDAsIDAsIDApLCBcclxuICAgICAgICAgICAgbmV3IENfUG9pbnQoMiwgMiwgMikpO1xyXG4gICAgICAgIHRoaXMuY2VsbHMgICA9IHRoaXMuX19pbml0X21hemUoVF9NektpbmQuU3RvbmUpO1xyXG5cclxuICAgICAgICB0aGlzLm1hc2tzICAgPSB0aGlzLl9faW5pdF9tYXNrKHRydWUpO1xyXG4gICAgICAgIHRoaXMudW5jbGVhciA9IFtdO1xyXG4gICAgICAgIHRoaXMuX19pbml0X3VuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5vYmpzICAgID0ge307XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGEgIT09IHVuZGVmaW5lZCkgdGhpcy5kZWNvZGUoYSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9faW5pdF9tYXplKGtpbmQ6IFRfTXpLaW5kID0gVF9NektpbmQuU3RvbmUpOiBDX01hemVDZWxsW11bXVtdIHtcclxuICAgICAgICBjb25zdCBzaXplX3ggPSB0aGlzLnNpemUuc2l6ZV94KCk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZV95ID0gdGhpcy5zaXplLnNpemVfeSgpO1xyXG4gICAgICAgIGNvbnN0IHNpemVfeiA9IHRoaXMuc2l6ZS5zaXplX3ooKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2VsbHM6IENfTWF6ZUNlbGxbXVtdW10gPSBBcnJheShzaXplX3opIGFzIENfTWF6ZUNlbGxbXVtdW107XHJcbiAgICAgICAgZm9yICh2YXIgeiA9IDA7IHogPCBzaXplX3o7IHorKykge1xyXG4gICAgICAgICAgICBjZWxsc1t6XSA9IEFycmF5KHNpemVfeSkgYXMgQ19NYXplQ2VsbFtdW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc2l6ZV95OyB5KyspIHtcclxuICAgICAgICAgICAgICAgIGNlbGxzW3pdW3ldICA9IEFycmF5KHNpemVfeCkgYXMgQ19NYXplQ2VsbFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBzaXplX3g7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzW3pdW3ldW3hdID0gQ19NYXplQ2VsbC5uZXdPYmooe2tpbmQ6a2luZCwgcG9zOiB7eDp4LCB5OnksIHo6en19KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2VsbHM7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX19pbml0X21hc2soWU46IGJvb2xlYW4pOiBib29sZWFuW11bXVtdIHtcclxuICAgICAgICBjb25zdCBzaXplX3ggPSB0aGlzLnNpemUuc2l6ZV94KCk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZV95ID0gdGhpcy5zaXplLnNpemVfeSgpO1xyXG4gICAgICAgIGNvbnN0IHNpemVfeiA9IHRoaXMuc2l6ZS5zaXplX3ooKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXNrcyAgID0gQXJyYXkoc2l6ZV96KSBhcyBib29sZWFuW11bXVtdO1xyXG4gICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgc2l6ZV96OyB6KyspIHtcclxuICAgICAgICAgICAgdGhpcy5tYXNrc1t6XSA9IEFycmF5KHNpemVfeSkgYXMgYm9vbGVhbltdW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc2l6ZV95OyB5KyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFza3Nbel1beV0gID0gQXJyYXkoc2l6ZV94KSBhcyBib29sZWFuW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHNpemVfeDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrc1t6XVt5XVt4XSA9IFlOO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLm1hc2tzO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9faW5pdF91bmNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNpemVfeCA9IHRoaXMuc2l6ZS5zaXplX3goKTtcclxuICAgICAgICBjb25zdCBzaXplX3kgPSB0aGlzLnNpemUuc2l6ZV95KCk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZV96ID0gdGhpcy5zaXplLnNpemVfeigpO1xyXG5cclxuICAgICAgICB0aGlzLnVuY2xlYXIgPSBBcnJheShzaXplX3opO1xyXG4gICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgc2l6ZV96OyB6KyspIHtcclxuICAgICAgICAgICAgdGhpcy51bmNsZWFyW3pdPTA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc2l6ZV95OyB5KyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc2l6ZV94OyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXNrc1t6XVt5XVt4XSkgdGhpcy51bmNsZWFyW3pdKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHVpZCgpOiBzdHJpbmcgICAgICB7cmV0dXJuIHRoaXMudW5pcV9pZH1cclxuICAgIHB1YmxpYyBnZXRfbGNrZCgpOiBUX0xja2Qge3JldHVybiBUX0xja2QuTWF6ZX1cclxuICAgIHB1YmxpYyBnZXRfbmFtZSgpOiBzdHJpbmcge3JldHVybiB0aGlzLm5hbWV9XHJcblxyXG4gICAgcHVibGljIHdpdGhpbihwOiBDX1BvaW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2l6ZS53aXRoaW4ocCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOODoeOCpOOCuuWGheOBruOCquODluOCuOOCp+OCr+ODiOOChOODouODs+OCueOCv+ODvOetieOBrumFjee9rlxyXG4gICAgcHVibGljIGFkZF9vYmoob2JqOiBJX01hemVPYmogfCB1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgICAgICBpZiAob2JqID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLm9ianNbb2JqLnVpZCgpXSA9IG9iajtcclxuICAgIH1cclxuICAgIHB1YmxpYyBybXZfb2JqKG9iajogSV9NYXplT2JqfHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ianNbb2JqLnVpZCgpXTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfb2JqX2FycmF5KCk6IElfTWF6ZU9ialtdIHtcclxuICAgICAgICBjb25zdCBvYmpfYXJyYXk6IElfTWF6ZU9ialtdID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLm9ianMpICBvYmpfYXJyYXkucHVzaCh0aGlzLm9ianNbaWRdKTtcclxuICAgICAgICByZXR1cm4gb2JqX2FycmF5O1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldF9vYmpfeHl6KHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBJX01hemVPYmp8bnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0X29iaihuZXcgQ19Qb2ludCh4LCB5LCB6KSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X29iaihwOiBDX1BvaW50KTogSV9NYXplT2JqfG51bGwge1xyXG4gICAgICAgIHZhciBsYXllciA9IC0xO1xyXG4gICAgICAgIHZhciBvYmo6IElfTWF6ZU9ianxudWxsICAgPSBudWxsO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMub2Jqcykge1xyXG4gICAgICAgICAgICBjb25zdCBleGlzdCA9IHRoaXMub2Jqc1tpZF07XHJcblxyXG4gICAgICAgICAgICBpZiAoZXhpc3QudmlldygpID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAoZXhpc3Qud2l0aGluKHApICYmIGV4aXN0LnZpZXcoKT8ubGV0dGVyKGV4aXN0LmdldF9wZCgpLmQpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdF9sYXllciA9IGV4aXN0LnZpZXcoKT8ubGF5ZXIoKT8/LTk5O1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0X2xheWVyID4gbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXllciA9IGV4aXN0X2xheWVyO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iaiAgID0gZXhpc3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X2FueV9vYmoocDogQ19Qb2ludERpcik6IElfTWF6ZU9ialtdIHtcclxuICAgICAgICB2YXIgb2JqZTogSV9NYXplT2JqW10gID0gW107XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5vYmpzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0ID0gdGhpcy5vYmpzW2lkXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChleGlzdC52aWV3KCkgPT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChleGlzdC53aXRoaW4ocCkgJiYgZXhpc3QudmlldygpPy5sZXR0ZXIoZXhpc3QuZ2V0X3BkKCkuZCkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIG9iamUucHVzaChleGlzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iamU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZXhpc3Rfb2JqKHA6IENfUG9pbnQpOiBib29sZWFuIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMub2Jqcykge1xyXG4gICAgICAgICAgICBjb25zdCBleGlzdCA9IHRoaXMub2Jqc1tpZF07XHJcbiAgICAgICAgICAgIGlmIChleGlzdCA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKGV4aXN0LndpdGhpbihwKSAmJiBleGlzdC52aWV3KCk/LmxldHRlcihleGlzdC5nZXRfcGQoKS5kKSAhPT0gbnVsbCkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUZWFt44GM5p2l44Gf44Od44Kk44Oz44OI44GM5pyq6LiP5Zyw44Gg44Gj44Gf44KJ44Gf44Gg44Gu5bqK44Gr5aSJ44GI44KLXHJcbiAgICBwdWJsaWMgY2hhbmdlX3VuZXhwX3RvX2Zsb29yKHA6IENfUG9pbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRfa2luZChwKSA9PSBUX016S2luZC5VbmV4cCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldF9jZWxsKHAsIFRfTXpLaW5kLkZsb29yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gMkTjg57jg4Pjg5fjga7jg57jgrnjgq/lpJbjgZfplqLpgKNcclxuICAgIHB1YmxpYyBjbGVhcl9tYXNrX2Fyb3VuZF90aGVfdGVhbSh0ZWFtOiBDX1RlYW0pOiB2b2lkIHtcclxuICAgICAgICAvLyDnj77lnKjlnLDjgajnnJ/mqKrjga/oh6rli5XnmoTjgavopovjgYjjgotcclxuICAgICAgICB0aGlzLl9fY2xlYXJfbWFzayh0ZWFtLmdldFdhbGtlcigpLmdldF9hcm91bmQoMCwgLTEpKTtcclxuICAgICAgICB0aGlzLl9fY2xlYXJfbWFzayh0ZWFtLmdldFdhbGtlcigpLmdldF9hcm91bmQoMCwgIDApKTtcclxuICAgICAgICB0aGlzLl9fY2xlYXJfbWFzayh0ZWFtLmdldFdhbGtlcigpLmdldF9hcm91bmQoMCwgIDEpKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGVwdGggICA9ICA1OyAvLyAyROODnuODg+ODl+eUqOOBruWlpeihjOOBjemZkOeVjFxyXG5cclxuICAgICAgICAvLyDliY3mlrnjga7opovpgJrjgZfjgpLjg4Hjgqfjg4Pjgq/jgZfjgarjgYzjgonopovjgYjjgovjgajjgZPjgo3jga/op6PmlL7jgZnjgotcclxuICAgICAgICBmb3IgKHZhciBkID0gMTsgZCA8IGRlcHRoOyBkKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZnJvbnRfcG9zID0gdGVhbS5nZXRXYWxrZXIoKS5nZXRfYXJvdW5kKGQsIDApXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzX21vdmFibGUoZnJvbnRfcG9zKSkge1xyXG4gICAgICAgICAgICAgICAgLy8g5q2j6Z2i44Gr6Zqc5a6z54mp44GM54Sh44GR44KM44Gw44CB44Gd44Gu5Lih5YG044KC6KaL44GI44KLXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2xlYXJfbWFzayh0ZWFtLmdldFdhbGtlcigpLmdldF9hcm91bmQoZCwgLTEpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX19jbGVhcl9tYXNrKHRlYW0uZ2V0V2Fsa2VyKCkuZ2V0X2Fyb3VuZChkLCAgMCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fX2NsZWFyX21hc2sodGVhbS5nZXRXYWxrZXIoKS5nZXRfYXJvdW5kKGQsICAxKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyDmraPpnaLjgYzpmpzlrrPnianjgafjgoLjgZ3jga7miYvliY3jgb7jgafopovjgYjjgabjgZ/jgarjgonjgIHjgZ3jga7lo4HjgajkuKHlgbTjga/opovjgYjjgotcclxuICAgICAgICAgICAgICAgIHRoaXMuX19jbGVhcl9tYXNrKHRlYW0uZ2V0V2Fsa2VyKCkuZ2V0X2Fyb3VuZChkLCAtMSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fX2NsZWFyX21hc2sodGVhbS5nZXRXYWxrZXIoKS5nZXRfYXJvdW5kKGQsICAwKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fY2xlYXJfbWFzayh0ZWFtLmdldFdhbGtlcigpLmdldF9hcm91bmQoZCwgIDEpKTtcclxuICAgICAgICAgICAgICAgIC8vIOato+mdouOBq+manOWus+eJqeOBjOacieOBo+OBn+OCieOBneOBruWlpeOBr+imi+OBiOOBquOBhOOBruOBp+aOoue0oue1guS6hlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX19jbGVhcl9tYXNrKGNscl9wb3M6IENfUG9pbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2l6ZS53aXRoaW4oY2xyX3BvcykpIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubWFza3NbY2xyX3Bvcy56XVtjbHJfcG9zLnldW2Nscl9wb3MueF0pIHtcclxuICAgICAgICAgICAgdGhpcy5tYXNrc1tjbHJfcG9zLnpdW2Nscl9wb3MueV1bY2xyX3Bvcy54XSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnVuY2xlYXJbY2xyX3Bvcy56XS0tO1xyXG4gICAgICAgIH0gICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzX2Zsb29yX2NsZWFyZWQoY2xyX3BvczogQ19Qb2ludCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVuY2xlYXJbY2xyX3Bvcy56XSA8IDE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzX21hemVfY2xlYXJlZCgpOiBib29sZWFuIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGNsciBvZiB0aGlzLnVuY2xlYXIpIGlmIChjbHIgPiAwKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzX21hc2tlZChwOiBDX1BvaW50KTogYm9vbGVhbiB7cmV0dXJuIHRoaXMuaXNfbWFza2VkX3h5eihwLngsIHAueSwgcC56KX1cclxuICAgIHB1YmxpYyBpc19tYXNrZWRfeHl6KHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXNrc1t6XVt5XVt4XTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNfbW92YWJsZShwOiBDX1BvaW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNpemUud2l0aGluKHApKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmdldF9raW5kKHApKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVF9NektpbmQuRmxvb3I6XHJcbiAgICAgICAgICAgIGNhc2UgVF9NektpbmQuVW5leHA6XHJcbiAgICAgICAgICAgIGNhc2UgVF9NektpbmQuU3RyVXA6XHJcbiAgICAgICAgICAgIGNhc2UgVF9NektpbmQuU3RyRG46XHJcbiAgICAgICAgICAgIGNhc2UgVF9NektpbmQuU3RyVUQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSAgICBcclxuXHJcbiAgICBwdWJsaWMgZ2V0X3hfbWF4KCk6IG51bWJlciB7cmV0dXJuIHRoaXMuc2l6ZS5zaXplX3goKX1cclxuICAgIHB1YmxpYyBnZXRfeV9tYXgoKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5zaXplLnNpemVfeSgpfVxyXG4gICAgcHVibGljIGdldF96X21heCgpOiBudW1iZXIge3JldHVybiB0aGlzLnNpemUuc2l6ZV96KCl9XHJcbiAgICBwdWJsaWMgZ2V0X2tpbmQgKHA6IENfUG9pbnQpOiBUX016S2luZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2l6ZS53aXRoaW4ocCkpIHJldHVybiB0aGlzLmNlbGxzW3Auel1bcC55XVtwLnhdLmdldEtpbmQoKTtcclxuICAgICAgICByZXR1cm4gVF9NektpbmQuTm9EZWY7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X2tpbmRfeHl6ICh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKTogVF9NektpbmQge1xyXG4gICAgICAgIGlmICh0aGlzLnNpemUud2l0aGluKHgsIHksIHopKSByZXR1cm4gdGhpcy5jZWxsc1t6XVt5XVt4XS5nZXRLaW5kKCk7XHJcbiAgICAgICAgcmV0dXJuIFRfTXpLaW5kLk5vRGVmO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRfY2VsbF94eXogKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBDX01hemVDZWxsfHVuZGVmaW5lZCB7IFxyXG4gICAgICAgIGlmICh0aGlzLnNpemUud2l0aGluKHgsIHksIHopKSByZXR1cm4gdGhpcy5jZWxsc1t6XVt5XVt4XTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldF9jZWxsIChwOiBDX1BvaW50KTogQ19NYXplQ2VsbHx1bmRlZmluZWQgeyBcclxuICAgICAgICBpZiAodGhpcy5zaXplLndpdGhpbihwKSkgcmV0dXJuIHRoaXMuY2VsbHNbcC56XVtwLnldW3AueF07XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRfY2VsbChwOiBDX1BvaW50LCBrOiBUX016S2luZCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnNpemUud2l0aGluKHApKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbHNbcC56XVtwLnldW3AueF0gPSBDX01hemVDZWxsLm5ld09iaih7a2luZDogaywgcG9zOiBwfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIHNldF9jZWxsX3h5eih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCBrOiBUX016S2luZCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnNpemUud2l0aGluKHgsIHksIHopKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbHNbel1beV1beF0gPSBDX01hemVDZWxsLm5ld09iaih7a2luZDogaywgcG9zOiB7eDp4LCB5OnksIHo6en19KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY2FuX21vdmUocDogQ19Qb2ludCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemUud2l0aGluKHApO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNhbl9VRChwOiBDX1BvaW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNfbW92YWJsZShwKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5wdWJsaWMgZmlsbF9jZWxsKGtpbmQ6IFRfTXpLaW5kLCBmbG9vcjpudW1iZXIpOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGggPSAwOyBoIDwgdGhpcy5zaXplLnNpemVfeSgpOyBoKyspXHJcbiAgICBmb3IgKGxldCB3ID0gMDsgdyA8IHRoaXMuc2l6ZS5zaXplX3goKTsgdysrKVxyXG4gICAgICAgIHRoaXMuc2V0X2NlbGxfeHl6KHcsIGgsIGZsb29yLCBraW5kKTtcclxuICAgIHJldHVybjtcclxufVxyXG5cclxucHVibGljIHNldF9ib3goa2luZDogVF9NektpbmQsIHRvcF94Om51bWJlciwgdG9wX3k6IG51bWJlciwgc2l6ZV94OiBudW1iZXIsIHNpemVfeTogbnVtYmVyLCBmbG9vcjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodG9wX3ggKyBzaXplX3ggPiB0aGlzLnNpemUuc2l6ZV94KCkpIHNpemVfeCA9IHRoaXMuc2l6ZS5zaXplX3goKSAtIHRvcF94ICsgMTsgXHJcbiAgICBpZiAodG9wX3kgKyBzaXplX3kgPiB0aGlzLnNpemUuc2l6ZV95KCkpIHNpemVfeSA9IHRoaXMuc2l6ZS5zaXplX3koKSAtIHRvcF95ICsgMTtcclxuICAgIFxyXG4gICAgY29uc3QgdG9wID0gdG9wX3k7XHJcbiAgICBjb25zdCBidG0gPSB0b3AgICAgKyBzaXplX3kgLSAxO1xyXG4gICAgY29uc3QgbGZ0ID0gdG9wX3g7XHJcbiAgICBjb25zdCByZ3QgPSBsZnQgICAgKyBzaXplX3ggLSAxO1xyXG4gICAgXHJcbiAgICAvLyDljJflgbQo5LiKKeOBqOWNl+WBtCjkuIsp44KS55+z5aOB44GrXHJcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHNpemVfeDsgeCsrKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfY2VsbF94eXooeCwgdG9wLCBmbG9vciwga2luZCk7XHJcbiAgICAgICAgdGhpcy5zZXRfY2VsbF94eXooeCwgYnRtLCBmbG9vciwga2luZCk7XHJcbiAgICB9XHJcbiAgICAvLyDmnbHlgbQo5Y+zKeOBqOilv+WBtCjlt6Yp44KS55+z5aOB44GrXHJcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHNpemVfeTsgeSsrKSB7XHJcbiAgICAgICAgdGhpcy5zZXRfY2VsbF94eXoobGZ0LCB5LCBmbG9vciwga2luZCk7XHJcbiAgICAgICAgdGhpcy5zZXRfY2VsbF94eXoocmd0LCB5LCBmbG9vciwga2luZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm47XHJcbn1cclxuXHJcbi8vIOmajuS4iuOBqOmajuS4i+OBq+majuauteOCkuioree9ruOBmeOCiyjmsqHniYgpXHJcbnB1YmxpYyBjcmVhdGVfc3RhaXIyKGZsb29yOm51bWJlcik6IENfUG9pbnREaXIge1xyXG4gICAgY29uc3QgSF9zaXplX3ggPSAodGhpcy5zaXplLnNpemVfeCgpIC0gMSkgLyAyO1xyXG4gICAgY29uc3QgSF9zaXplX3kgPSAodGhpcy5zaXplLnNpemVfeSgpIC0gMSkgLyAyO1xyXG4gICAgY29uc3QgcG9zX3ggICAgPSAyICogX2lyYW5kKDAsIEhfc2l6ZV94IC0gMSkgKyAxO1xyXG4gICAgY29uc3QgcG9zX3kgICAgPSAyICogX2lyYW5kKDAsIEhfc2l6ZV95IC0gMSkgKyAxO1xyXG4gICAgY29uc3QgcG9zX2QgICAgPSAxICogX2lyYW5kKDAsIFRfRGlyZWN0aW9uLk1BWCk7XHJcblxyXG4gICAgLy8g5Lmx5pWw44Gn5b6X44Gf5bqn5qiZ44Gr6ZqO5q6144KS572u44GPXHJcbiAgICAvLyDkuIvjgbjjga7pmo7mrrUoZmxvb3Ljga7pmo7jgavoqK3nva4pXHJcbiAgICBpZiAodGhpcy5nZXRfY2VsbF94eXoocG9zX3gsIHBvc195LCBmbG9vcik/LmdldEtpbmQoKSAhPT0gVF9NektpbmQuU3RyVXApIHtcclxuICAgICAgICB0aGlzLnNldF9jZWxsX3h5eihwb3NfeCwgcG9zX3ksIGZsb29yLCAgVF9NektpbmQuU3RyRG4pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnNldF9jZWxsX3h5eihwb3NfeCwgcG9zX3ksIGZsb29yLCAgVF9NektpbmQuU3RyVUQpO1xyXG4gICAgfVxyXG4gICAgLy8g5LiK44G444Gu6ZqO5q61KGZsb29y44Gu5LiL44Gu6ZqO44Gr6Kit572uKVxyXG4gICAgaWYgKGZsb29yIDwgdGhpcy5nZXRfel9tYXgoKSkge1xyXG4gICAgICAgIGlmICh0aGlzLmdldF9jZWxsX3h5eihwb3NfeCwgcG9zX3ksIGZsb29yICsgMSk/LmdldEtpbmQoKSAhPT0gVF9NektpbmQuU3RyRG4pIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRfY2VsbF94eXoocG9zX3gsIHBvc195LCBmbG9vciArIDEsICBUX016S2luZC5TdHJVcCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRfY2VsbF94eXoocG9zX3gsIHBvc195LCBmbG9vciArIDEsICBUX016S2luZC5TdHJVRCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgQ19Qb2ludERpcih7eDogcG9zX3gsIHk6IHBvc195LCB6OiBmbG9vciwgZDogcG9zX2R9KTtcclxufVxyXG5cclxuLy8g6ZqO5LiK44Go6ZqO5LiL44Gr6ZqO5q6144KS6Kit572u44GZ44KL77yI5pen54mI77yJXHJcbnB1YmxpYyBjcmVhdGVfc3RhaXIoZmxvb3I6bnVtYmVyKToge3VwOiBDX1BvaW50RGlyLCBkbjogQ19Qb2ludERpcnx1bmRlZmluZWR9IHtcclxuICAgIGNvbnN0IEhfc2l6ZV94ID0gKHRoaXMuc2l6ZS5zaXplX3goKSAtIDEpIC8gMjtcclxuICAgIGNvbnN0IEhfc2l6ZV95ID0gKHRoaXMuc2l6ZS5zaXplX3koKSAtIDEpIC8gMjtcclxuICAgIGNvbnN0IHBvc194ICAgID0gMiAqIF9pcmFuZCgwLCBIX3NpemVfeCAtIDEpICsgMTtcclxuICAgIGNvbnN0IHBvc195ICAgID0gMiAqIF9pcmFuZCgwLCBIX3NpemVfeSAtIDEpICsgMTtcclxuICAgIGNvbnN0IHBvc19kICAgID0gMSAqIF9pcmFuZCgwLCBUX0RpcmVjdGlvbi5NQVgpO1xyXG5cclxuICAgIC8vIOS5seaVsOOBp+W+l+OBn+W6p+aomeOBq+majuauteOCkue9ruOBj1xyXG4gICAgLy8g5LiL44G444Gu6ZqO5q61KGZsb29y44Gu5LiK6ZqO44Gr6Kit572uKVxyXG4gICAgaWYgKGZsb29yID49IDEpIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRfY2VsbF94eXoocG9zX3gsIHBvc195LCBmbG9vciAtIDEpPy5nZXRLaW5kKCkgIT09IFRfTXpLaW5kLlN0clVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2NlbGxfeHl6KHBvc194LCBwb3NfeSwgZmxvb3IgLSAxLCAgVF9NektpbmQuU3RyRG4pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2NlbGxfeHl6KHBvc194LCBwb3NfeSwgZmxvb3IgLSAxLCAgVF9NektpbmQuU3RyVUQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDkuIrjgbjjga7pmo7mrrUoZmxvb3Ljga7pmo7jgavoqK3nva4pXHJcbiAgICBpZiAoZmxvb3IgPCB0aGlzLmdldF96X21heCgpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0X2NlbGxfeHl6KHBvc194LCBwb3NfeSwgZmxvb3IpPy5nZXRLaW5kKCkgIT09IFRfTXpLaW5kLlN0ckRuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2NlbGxfeHl6KHBvc194LCBwb3NfeSwgZmxvb3IsICBUX016S2luZC5TdHJVcCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRfY2VsbF94eXoocG9zX3gsIHBvc195LCBmbG9vciwgIFRfTXpLaW5kLlN0clVEKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1cDogbmV3IENfUG9pbnREaXIoe3g6IHBvc194LCB5OiBwb3NfeSwgejogZmxvb3IsIGQ6IHBvc19kfSksXHJcbiAgICAgICAgZG46IGZsb29yID49IDEgPyBuZXcgQ19Qb2ludERpcih7eDogcG9zX3gsIHk6IHBvc195LCB6OiBmbG9vciAtIDEsIGQ6IHBvc19kfSkgOiB1bmRlZmluZWQsXHJcbiAgICB9XHJcbn1cclxuXHJcbnB1YmxpYyBjcmVhdGVfbWF6ZShmbG9vcjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBzaXplX3ggPSB0aGlzLnNpemUuc2l6ZV94KCk7XHJcbiAgICBjb25zdCBzaXplX3kgPSB0aGlzLnNpemUuc2l6ZV95KCk7XHJcblxyXG5cclxuICAgIC8vIOODgOODs+OCuOODp+ODs+OBpyRmbG9vcuOBp+aMh+WumuOBleOCjOOBn+majuOCkuacqui4j+WcsOOBq+OBmeOCiyBcclxuICAgIHRoaXMuZmlsbF9jZWxsKFRfTXpLaW5kLlVuZXhwLCBmbG9vcik7XHJcblxyXG4gICAgLy8g44OA44Oz44K444On44Oz44Gu6Lyq6YOt44KS55+z5aOB44Gr44GZ44KLXHJcbiAgICB0aGlzLnNldF9ib3goVF9NektpbmQuU3RvbmUsIDAsIDAsIHNpemVfeCwgc2l6ZV95LCBmbG9vcik7XHJcblxyXG4gICAgLy8g6YCa6Lev44Gr5LiA44Gk572u44GN44Gr5aOB44GM5oiQ6ZW344GZ44KL44Od44Kk44Oz44OI44KS6Kit5a6a44GZ44KLXHJcbiAgICAvLyDjg53jgqTjg7Pjg4jjgYvjgonlo4HjgpLkvLjjgbDjgZnmlrnlkJHjgpLjg6njg7Pjg4Djg6DjgavmsbrjgoHjgotcclxuICAgIGNvbnN0IHBvaW50cyA9IG5ldyBDX1BvaW50U2V0MkQoKTtcclxuICAgIGZvciAobGV0IGggPSAyOyBoIDwgc2l6ZV95IC0gMjsgaCArPSAyKXtcclxuICAgICAgICBmb3IgKGxldCB3ID0gMjsgdyA8IHNpemVfeCAtIDI7IHcgKz0gMil7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpID0gX2lyYW5kKDAsIFRfRGlyZWN0aW9uLk1BWCk7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBDX1BvaW50TGluazJEKHcsIGgsIGRpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOS5seaVsOOBp+OBhOOBj+OBpOOBi+mDqOWxi+OCkuS9nOOCi1xyXG4gICAgY29uc3Qgcm9vbXNfYXJyYXkgPSBbXTtcclxuICAgIGNvbnN0IG51bV9vZl9yb29tID0gX2lyYW5kKDAsIHRoaXMubnVtX29mX3Jvb20pO1xyXG4gICAgZm9yIChsZXQgY250ID0gMDsgY250IDwgbnVtX29mX3Jvb207IGNudCsrKSB7XHJcbiAgICAgICAgY29uc3QgbGVuZ194ID0gX2lyYW5kKDEsICB0aGlzLm1heF9zaXplX29mX3Jvb20pICogMiArIDE7XHJcbiAgICAgICAgY29uc3QgbGVuZ195ID0gX2lyYW5kKDEsICB0aGlzLm1heF9zaXplX29mX3Jvb20pICogMiArIDE7XHJcbiAgICAgICAgY29uc3Qgcm9vbV94ID0gX2lyYW5kKDAsIChzaXplX3ggLSBsZW5nX3gpIC8gMikgKiAyO1xyXG4gICAgICAgIGNvbnN0IHJvb21feSA9IF9pcmFuZCgwLCAoc2l6ZV95IC0gbGVuZ195KSAvIDIpICogMjtcclxuICAgICAgICByb29tc19hcnJheS5wdXNoKHt0eDogcm9vbV94LCB0eTogcm9vbV95LCBzeDogbGVuZ194LCBzeTogbGVuZ195fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6YOo5bGL44Gu5Lit44Gu44Od44Kk44Oz44OI44KS5YmK6Zmk44GZ44KLXHJcbiAgICBmb3IgKGNvbnN0IHJvb20gb2Ygcm9vbXNfYXJyYXkpIHtcclxuICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgcG9pbnRzLnNldC5sZW5ndGg7IGlpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcCA9ICBwb2ludHMuc2V0W2lpXTtcclxuICAgICAgICAgICAgaWYgKHAgPT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoICAgIChwLnggPj0gcm9vbS50eCkgXHJcbiAgICAgICAgICAgICAgICAmJiAgKHAueCA8PSByb29tLnR4ICsgcm9vbS5zeClcclxuICAgICAgICAgICAgICAgICYmICAocC55ID49IHJvb20udHkpXHJcbiAgICAgICAgICAgICAgICAmJiAgKHAueSA8PSByb29tLnR5ICsgcm9vbS5zeSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb2ludHMucmVtb3ZlKHApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8g44Od44Kk44Oz44OI44GL44KJ5aOB44KS5oiQ6ZW344GV44Gb44Gm6L+36Lev44KS5L2c44KLXHJcbiAgICBmb3IgKGNvbnN0IHAgb2YgcG9pbnRzLnNldCkge1xyXG4gICAgICAgIGlmIChwID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOODneOCpOODs+ODiOOBruS9jee9ruOBq+efs+WjgeOCkue9ruOBj1xyXG4gICAgICAgIHRoaXMuc2V0X2NlbGxfeHl6KHAueCwgcC55LCBmbG9vciwgVF9NektpbmQuU3RvbmUpO1xyXG5cclxuICAgICAgICAvLyDmn7Hjga7mnbHopb/ljZfljJfjga7jgYTjgZrjgozjgYvjgavjgoLnn7Plo4HjgpLnva7jgY9cclxuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBbMCwgMCwgMCwgMF07XHJcbiAgICAgICAgY29uc3QgZGkgPSBDX1BvaW50TGluazJELmNhc3QocCk/LmRpID8/IFRfRGlyZWN0aW9uLlg7XHJcbiAgICAgICAgaWYgKGRpID09PSBUX0RpcmVjdGlvbi5YKSBjb250aW51ZTtcclxuICAgICAgICBkaXJlY3Rpb25bZGldID0gMTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRfY2VsbF94eXooXHJcbiAgICAgICAgICAgIHAueCAtIGRpcmVjdGlvbltUX0RpcmVjdGlvbi5XXSArIGRpcmVjdGlvbltUX0RpcmVjdGlvbi5FXSwgXHJcbiAgICAgICAgICAgIHAueSAtIGRpcmVjdGlvbltUX0RpcmVjdGlvbi5OXSArIGRpcmVjdGlvbltUX0RpcmVjdGlvbi5TXSwgXHJcbiAgICAgICAgICAgIGZsb29yLFxyXG4gICAgICAgICAgICBUX016S2luZC5TdG9uZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy8g6ZaJ6Y6W56m66ZaT44GM5Ye65p2l44Gm44GE44Gf44KJ5Ye65Y+j44KS5L2c44KLXHJcbiAgICAvLyDjg53jgqTjg7Pjg4jjgpLjg4jjg6zjg7zjgrnjgZfjgabjgIHml6Llh7rjga7jg53jgqTjg7Pjg4jjgavnuYvjgYzjgaPjgabjgYTjgZ/jgonplonpjpbnqbrplpNcclxuICAgIGZvciAoY29uc3Qgc2V0IG9mIHBvaW50cy5zZXQpIHtcclxuICAgICAgICBpZiAoc2V0ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBjb25zdCBbeW4sIHRyYWNlX3NldF0gPSB0aGlzLmNoZWNrX2Nsb3NlKHNldC54LCBzZXQueSwgcG9pbnRzLCBuZXcgQ19Qb2ludFNldDJEKCkpO1xyXG4gICAgICAgIGlmICh5bikge1xyXG4gICAgICAgICAgICB0aGlzLm9wZW5fZXhpdCh0cmFjZV9zZXQsIFRfTXpLaW5kLlVuZXhwLCBmbG9vcik7XHJcbiAgICAgICAgICAgIGlmICh0cmFjZV9zZXQgIT09IHVuZGVmaW5lZCkgZm9yIChjb25zdCB0IG9mIHRyYWNlX3NldC5zZXQpIHBvaW50cy5yZW1vdmUodCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuO1xyXG59XHJcblxyXG5wcm90ZWN0ZWQgY2hlY2tfY2xvc2UoeDogbnVtYmVyLCB5OiBudW1iZXIsIHBvaW50X3NldDogQ19Qb2ludFNldDJELCB0cmFjZV9zZXQ6IENfUG9pbnRTZXQyRHx1bmRlZmluZWQpOiBbYm9vbGVhbiwgQ19Qb2ludFNldDJEfHVuZGVmaW5lZF0ge1xyXG4gICAgaWYgKHggPCAyIHx8IHkgPCAyIHx8IHggPiB0aGlzLnNpemUuc2l6ZV94KCkgLSAyIHx8IHkgPiB0aGlzLnNpemUuc2l6ZV95KCkgLSAyKSByZXR1cm4gW2ZhbHNlLCB1bmRlZmluZWRdO1xyXG5cclxuICAgIGlmIChwb2ludF9zZXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtmYWxzZSwgdW5kZWZpbmVkXTtcclxuICAgIGlmIChwb2ludF9zZXQ/LmlzX2V4aXN0KHgsIHkpID09PSBmYWxzZSkgcmV0dXJuIFtmYWxzZSwgdW5kZWZpbmVkXTtcclxuXHJcbiAgICBpZiAodHJhY2Vfc2V0ICE9PSB1bmRlZmluZWQgJiYgdHJhY2Vfc2V0Py5pc19leGlzdCh4LCB5KSA9PT0gdHJ1ZSkgIHJldHVybiBbdHJ1ZSwgIHRyYWNlX3NldF07XHJcblxyXG4gICAgY29uc3QgcCA9IHBvaW50X3NldC5nZXRfcG9pbnQoeCwgeSk7XHJcbiAgICB0cmFjZV9zZXQgPz89IG5ldyBDX1BvaW50U2V0MkQoKTtcclxuICAgIHRyYWNlX3NldD8ucHVzaChuZXcgQ19Qb2ludExpbmsyRCh4LCB5LCBDX1BvaW50TGluazJELmNhc3QocCk/LmRpKSk7XHJcblxyXG4gICAgbGV0IG5leHRfeDogbnVtYmVyID0gMCwgbmV4dF95OiBudW1iZXIgPSAwO1xyXG4gICAgc3dpdGNoIChDX1BvaW50TGluazJELmNhc3QocCk/LmRpKSB7XHJcbiAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5OOiAgLy8g5YyXXHJcbiAgICAgICAgICAgIG5leHRfeCA9IHg7XHJcbiAgICAgICAgICAgIG5leHRfeSA9IHkgLSAyO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLkU6ICAvLyDmnbFcclxuICAgICAgICAgICAgbmV4dF94ID0geCArIDI7XHJcbiAgICAgICAgICAgIG5leHRfeSA9IHk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uUzogIC8vIOWNl1xyXG4gICAgICAgICAgICBuZXh0X3ggPSB4O1xyXG4gICAgICAgICAgICBuZXh0X3kgPSB5ICsgMjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5XOiAgLy8g6KW/XHJcbiAgICAgICAgICAgIG5leHRfeCA9IHggLSAyO1xyXG4gICAgICAgICAgICBuZXh0X3kgPSB5O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tfY2xvc2UobmV4dF94LCBuZXh0X3ksIHBvaW50X3NldCwgdHJhY2Vfc2V0KTtcclxufVxyXG5cclxucHJvdGVjdGVkIG9wZW5fZXhpdChwOiBDX1BvaW50U2V0MkR8dW5kZWZpbmVkLCBraW5kOiBUX016S2luZCwgZmxvb3I6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHAgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGNudCA9IF9pcmFuZCgwLCBwLnNldC5sZW5ndGggLSAxKTtcclxuICAgIGNvbnN0IHBwICA9ICBwLnNldFtjbnRdO1xyXG5cclxuICAgIGxldCBkaXJlY3Rpb24gPSBbMCwgMCwgMCwgMF07XHJcbiAgICBjb25zdCBkaSA9IENfUG9pbnRMaW5rMkQuY2FzdChwcCk/LmRpID8/IFRfRGlyZWN0aW9uLk5cclxuICAgIGRpcmVjdGlvbltkaV0gPSAxO1xyXG5cclxuICAgIHRoaXMuc2V0X2NlbGxfeHl6KFxyXG4gICAgICAgIHBwLnggLSBkaXJlY3Rpb25bVF9EaXJlY3Rpb24uV10gKyBkaXJlY3Rpb25bVF9EaXJlY3Rpb24uRV0sIFxyXG4gICAgICAgIHBwLnkgLSBkaXJlY3Rpb25bVF9EaXJlY3Rpb24uTl0gKyBkaXJlY3Rpb25bVF9EaXJlY3Rpb24uU10sIFxyXG4gICAgICAgIGZsb29yLFxyXG4gICAgICAgIGtpbmQgXHJcbiAgICApO1xyXG4gICAgcmV0dXJuO1xyXG59XHJcblxyXG4vKlxyXG5wdWJsaWMgc3RhdGljIGZyb21fb2JqX3RvX3N0cmluZyhvYTogQ19NYXplKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYSwgbnVsbCwgXCJcXHRcIik7XHJcbn1cclxucHVibGljIHN0YXRpYyBmcm9tX29iakFycmF5X3RvX3N0cmluZyhvYWE6IHtbdWlkOiBzdHJpbmddOiBDX01hemV9KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG9hID0gW10gYXMgQ19NYXplW107XHJcbiAgICBmb3IgKGNvbnN0IGlpIGluIG9hYSkgb2EucHVzaChvYWFbaWldKTtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYSwgbnVsbCwgXCJcXHRcIik7XHJcbn1cclxucHVibGljIHN0YXRpYyBmcm9tX3N0cmluZ190b19vYmoodHh0OiBzdHJpbmcpOiBDX01hemUge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBqICAgPSBKU09OLnBhcnNlKHR4dCkgYXMgSlNPTl9NYXplW107XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDX01hemUoKS5kZWNvZGUoaik7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IENfTWF6ZSgpO1xyXG4gICAgfTtcclxufVxyXG5wdWJsaWMgc3RhdGljIGZyb21fc3RyaW5nX3RvX29iakFycmF5KHR4dDogc3RyaW5nKToge1t1aWQ6IHN0cmluZ106IENfTWF6ZX0ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBqICAgPSBKU09OLnBhcnNlKHR4dCkgYXMgSlNPTl9NYXplW107XHJcbiAgICAgICAgY29uc3QgbXBhID0ge30gYXMge1tpZDogc3RyaW5nXTogQ19NYXplfTtcclxuICAgICAgICBmb3IgKGNvbnN0IGpqIG9mIGopIHtcclxuICAgICAgICAgICAgY29uc3QgYWFhID0gbmV3IENfTWF6ZSgpLmRlY29kZShqaik7XHJcbiAgICAgICAgICAgIG1wYVthYWEudWlkKCldID0gYWFhO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbXBhO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfTtcclxufVxyXG4qL1xyXG5cclxuICAgIHB1YmxpYyB0b19sZXR0ZXIocDogQ19Qb2ludCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2VsbHNbcC56XVtwLnldW3AueF0udG9fbGV0dGVyKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgdG9fc3RyaW5nKGZsb29yOiBudW1iZXIgPSAwLCBkZWJ1Z19tb2RlOiBib29sZWFuID0gZmFsc2UpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHNpemVfeCA9IHRoaXMuc2l6ZS5zaXplX3goKTtcclxuICAgICAgICBjb25zdCBzaXplX3kgPSB0aGlzLnNpemUuc2l6ZV95KCk7XHJcblxyXG4gICAgICAgIHZhciByZXRfc3RyOiBzdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHNpemVfeTsgeSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc2l6ZV94OyB4KyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IHRoaXMuZ2V0X29ial94eXooeCwgeSwgZmxvb3IpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkZWJ1Z19tb2RlICYmIHRoaXMubWFza3NbZmxvb3JdW3ldW3hdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0X3N0ciArPSAn77y4JztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqX2MgPSBvYmo/LnZpZXcoKT8ubGV0dGVyKG9iai5nZXRfcGQoKS5kKSA/PyBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmogPT09IG51bGwgfHwgb2JqX2MgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0X3N0ciArPSB0aGlzLmNlbGxzW2Zsb29yXVt5XVt4XS50b19sZXR0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRfc3RyICs9IG9ial9jO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXRfc3RyICs9IFwiXFxuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXRfc3RyO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGVuY29kZSgpOiBKU09OX01hemUge1xyXG4gICAgICAgIGNvbnN0IHNpemVfeCA9IHRoaXMuc2l6ZS5zaXplX3goKTtcclxuICAgICAgICBjb25zdCBzaXplX3kgPSB0aGlzLnNpemUuc2l6ZV95KCk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZV96ID0gdGhpcy5zaXplLnNpemVfeigpO1xyXG5cclxuICAgICAgICB2YXIgel9hcnJheTogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBmb3IgKHZhciB6ID0gMDsgeiA8IHNpemVfejsgeisrKSB7XHJcbiAgICAgICAgICAgIHZhciB5X2FycmF5OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHNpemVfeTsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeF9hcnJheTogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc2l6ZV94OyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB4X2FycmF5LnB1c2godGhpcy5jZWxsc1t6XVt5XVt4XS5lbmNvZGUoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB5X2FycmF5LnB1c2goeF9hcnJheS5qb2luKCdYJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHpfYXJyYXkucHVzaCh5X2FycmF5LmpvaW4oJ1knKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1hemVfc3RyID0gel9hcnJheS5qb2luKCdaJyk7XHJcblxyXG4gICAgICAgIHZhciB6X2FycmF5OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgc2l6ZV96OyB6KyspIHtcclxuICAgICAgICAgICAgdmFyIHlfYXJyYXk6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc2l6ZV95OyB5KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB4X2FycmF5OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBzaXplX3g7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHhfYXJyYXkucHVzaCh0aGlzLm1hc2tzW3pdW3ldW3hdID8gJzEnIDogJzAnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHlfYXJyYXkucHVzaCh4X2FycmF5LmpvaW4oJ1gnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgel9hcnJheS5wdXNoKHlfYXJyYXkuam9pbignWScpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWFza19zdHIgPSB6X2FycmF5LmpvaW4oJ1onKTtcclxuXHJcbiAgICAgICAgbGV0IG9ianMgPSBbXSBhcyBKU09OX01hemVPYmpbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGlpIGluIHRoaXMub2JqcykgIG9ianMucHVzaCh0aGlzLm9ianNbaWldLmVuY29kZSgpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6ICAgICAgdGhpcy5tYXplX2lkLFxyXG4gICAgICAgICAgICB1bmlxX2lkOiB0aGlzLnVuaXFfaWQsXHJcbiAgICAgICAgICAgIHNhdmVfaWQ6IHRoaXMuc2F2ZV9pZCxcclxuICAgICAgICAgICAgZmxvb3I6ICAgdGhpcy5mbG9vcixcclxuICAgICAgICAgICAgbmFtZTogICAgdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBvYmpzOiAgICBvYmpzLFxyXG4gICAgICAgICAgICBzaXplX3g6ICB0aGlzLnNpemUuc2l6ZV94KCksXHJcbiAgICAgICAgICAgIHNpemVfeTogIHRoaXMuc2l6ZS5zaXplX3koKSxcclxuICAgICAgICAgICAgc2l6ZV96OiAgdGhpcy5zaXplLnNpemVfeigpLFxyXG4gICAgICAgICAgICBtYXplOiAgICBtYXplX3N0cixcclxuICAgICAgICAgICAgbWFzazogICAgbWFza19zdHIsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGRlY29kZShhOiBKU09OX01hemV8dW5kZWZpbmVkKTogQ19NYXplIHtcclxuICAgICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKGEuaWQgICAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm1hemVfaWQgPSBhLmlkO1xyXG4gICAgICAgIGlmIChhLnVuaXFfaWQgIT09IHVuZGVmaW5lZCkgdGhpcy51bmlxX2lkID0gYS51bmlxX2lkO1xyXG4gICAgICAgIGlmIChhLnNhdmVfaWQgIT09IHVuZGVmaW5lZCkgdGhpcy5zYXZlX2lkID0gYS5zYXZlX2lkO1xyXG4gICAgICAgIGlmIChhLmZsb29yICAgIT09IHVuZGVmaW5lZCkgdGhpcy5mbG9vciAgID0gYS5mbG9vcjtcclxuICAgICAgICBpZiAoYS5uYW1lICAgICE9PSB1bmRlZmluZWQpIHRoaXMubmFtZSAgICA9IGEubmFtZTtcclxuXHJcbiAgICAgICAgaWYgKGEub2JqcyAgICAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2JqcyA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGpzb25fb2JqIG9mIGEub2Jqcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3X29iaiA9IG5ld19tYXplT2JqKGpzb25fb2JqKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Jqc1tuZXdfb2JqLnVpZCgpXSA9IG5ld19vYmo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhLnNpemVfeCAhPT0gdW5kZWZpbmVkICYmIGEuc2l6ZV95ICE9PSB1bmRlZmluZWQgJiYgYS5zaXplX3ogIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgID0gbmV3IENfUmFuZ2UoXHJcbiAgICAgICAgICAgICAgICBuZXcgQ19Qb2ludCgwLCAwLCAwKSwgXHJcbiAgICAgICAgICAgICAgICBuZXcgQ19Qb2ludChhLnNpemVfeCAtIDEsIGEuc2l6ZV95IC0gMSwgYS5zaXplX3ogLSAxKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5jZWxscyAgID0gdGhpcy5fX2luaXRfbWF6ZShUX016S2luZC5TdG9uZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWFza3MgICA9IHRoaXMuX19pbml0X21hc2sodHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX19pbml0X3VuY2xlYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNpemVfeCA9IHRoaXMuc2l6ZS5zaXplX3goKTtcclxuICAgICAgICBjb25zdCBzaXplX3kgPSB0aGlzLnNpemUuc2l6ZV95KCk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZV96ID0gdGhpcy5zaXplLnNpemVfeigpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGEubWF6ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbi8qXHJcbiAgICAgICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgc2l6ZV96OyB6KyspXHJcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgc2l6ZV95OyB5KyspXHJcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc2l6ZV94OyB4KyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbel1beV1beF0uc2V0KFRfTXpLaW5kLlN0b25lKTtcclxuICAgICAgICAgICAgfVxyXG4qL1xyXG4gICAgICAgICAgICBjb25zdCB6X2FycmF5OiBzdHJpbmdbXSA9IGEubWF6ZS5zcGxpdCgnWicpO1xyXG4gICAgICAgICAgICBjb25zdCB6X21heCA9IF9taW4oW3NpemVfeiwgel9hcnJheS5sZW5ndGhdKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgeiA9IDA7IHogPCB6X21heDsgeisrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5X2FycmF5OiBzdHJpbmdbXSA9IHpfYXJyYXlbel0uc3BsaXQoJ1knKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHlfbWF4ID0gIF9taW4oW3NpemVfeSwgeV9hcnJheS5sZW5ndGhdKTsgXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHlfbWF4OyB5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB4X2FycmF5OiBzdHJpbmdbXSA9IHlfYXJyYXlbeV0uc3BsaXQoJ1gnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB4X21heCA9ICBfbWluKFtzaXplX3gsIHhfYXJyYXkubGVuZ3RoXSk7IFxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgeF9tYXg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQga2luZCA9IHBhcnNlSW50KHhfYXJyYXlbeF0sIDE2KTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbel1beV1beF0gPSBDX01hemVDZWxsLm5ld09iaih7a2luZDoga2luZCwgcG9zOiB7eDp4LCB5OnksIHo6en19KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gIFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYS5tYXNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fX2luaXRfbWFzayh0cnVlKTtcclxuICAgICAgICAgICAgY29uc3Qgel9hcnJheTogc3RyaW5nW10gPSBhLm1hc2suc3BsaXQoJ1onKTtcclxuICAgICAgICAgICAgY29uc3Qgel9tYXggPSBfbWluKFtzaXplX3osIHpfYXJyYXkubGVuZ3RoXSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgel9tYXg7IHorKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeV9hcnJheTogc3RyaW5nW10gPSB6X2FycmF5W3pdLnNwbGl0KCdZJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5X21heCA9ICBfbWluKFtzaXplX3ksIHlfYXJyYXkubGVuZ3RoXSk7IFxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCB5X21heDsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeF9hcnJheTogc3RyaW5nW10gPSB5X2FycmF5W3ldLnNwbGl0KCdYJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeF9tYXggPSAgX21pbihbc2l6ZV94LCB4X2FycmF5Lmxlbmd0aF0pOyBcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHhfbWF4OyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhfYXJyYXlbeF0gIT09ICcwJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXNrc1t6XVt5XVt4XSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hc2tzW3pdW3ldW3hdID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fX2luaXRfdW5jbGVhcigpOyAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZW5jb2RlX2FsbChhbGxfbWF6ZTogQ19NYXplW10pOiBKU09OX01hemVbXSB7XHJcbiAgICAgICAgY29uc3QgYWxsX21hemVfZGF0YTogSlNPTl9NYXplW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtYXplIG9mIGFsbF9tYXplKSB7XHJcbiAgICAgICAgICAgIGFsbF9tYXplX2RhdGEucHVzaChtYXplLmVuY29kZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFsbF9tYXplX2RhdGE7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGRlY29kZV9hbGwoYWxsX21hemVfZGF0YTogSlNPTl9NYXplW10pOiBDX01hemVbXSB7XHJcbiAgICAgICAgY29uc3QgYWxsX21hemU6IENfTWF6ZVtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgbWF6ZV9kYXRhIG9mIGFsbF9tYXplX2RhdGEpIHtcclxuICAgICAgICAgICAgYWxsX21hemUucHVzaCgobmV3IENfTWF6ZSh7fSkpLmRlY29kZShtYXplX2RhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFsbF9tYXplO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgYWxlcnQoKTogdm9pZCB7XHJcbiAgICAgICAgYWxlcnQoXCJNYXplIEluZm86XCJcclxuICAgICAgICAgICAgKyBcIlxcbm1hemUgaWQgOlwiICsgKHRoaXMubWF6ZV9pZCA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5mbG9vcjogXCIgICArICh0aGlzLmZsb29yICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxudW5pcSBpZCA6XCIgKyAodGhpcy51bmlxX2lkID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnNhdmUgaWQgOlwiICsgKHRoaXMuc2F2ZV9pZCA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5uYW1lOiAgIFwiICArICh0aGlzLm5hbWUgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuc2l6ZV94OiBcIiAgKyAodGhpcy5zaXplLnNpemVfeCgpID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnNpemVfeTogXCIgICsgKHRoaXMuc2l6ZS5zaXplX3koKSA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5zaXplX3o6IFwiICArICh0aGlzLnNpemUuc2l6ZV96KCkgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuXCJcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFsZXJ0X21hemUoZmxvb3I6IG51bWJlciA9IDApOiB2b2lkIHtcclxuICAgICAgICBhbGVydChcIk1hemUgTWFwOlwiXHJcbiAgICAgICAgICAgICsgXCJtYXplOlxcblwiICAgICArICh0aGlzLnRvX3N0cmluZyhmbG9vciwgdHJ1ZSkgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcblwiXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhbGVydF9tYXNrKGZsb29yOiBudW1iZXIgPSAwKTogdm9pZCB7XHJcbiAgICAgICAgYWxlcnQoXCJNYXNrIE1hcDpcIlxyXG4gICAgICAgICAgICArIFwibWFzazpcXG5cIiAgICAgKyAodGhpcy50b19zdHJpbmcoZmxvb3IsIGZhbHNlKSA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5cIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBfZ2V0X3V1aWQgfSBmcm9tIFwiLi4vZF91dGwvRl9SYW5kXCI7XHJcbmltcG9ydCB7IFRfTXpLaW5kIH0gIGZyb20gXCIuL1RfTXpLaW5kXCI7XHJcbmltcG9ydCB7IEpTT05fQW55IH0gIGZyb20gXCIuL0NfU2F2ZUluZm9cIjtcclxuaW1wb3J0IHsgQ19NYXplT2JqLCBJX01hemVPYmosIEpTT05fTWF6ZU9iaiB9IGZyb20gXCIuL0NfTWF6ZU9ialwiO1xyXG5pbXBvcnQgeyBUX1dhbGwgfSAgICBmcm9tICcuL0NfV2FsbCc7XHJcbmltcG9ydCB7IFRfUmVjdCB9IGZyb20gXCIuL0NfTWF6ZU9ialZpZXdcIjtcclxuaW1wb3J0IHsgbmV3X21hemVPYmogfSBmcm9tIFwiLi9GX25ld19NYXplT2JqXCI7XHJcbmltcG9ydCB7IFRfRGlyZWN0aW9uIH0gZnJvbSBcIi4vQ19Qb2ludERpclwiO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9NYXplQ2VsbCBleHRlbmRzIEpTT05fQW55IHtcclxuICAgIGtpbmQ/OiBUX016S2luZFxyXG4gICAgb2JqPzogIEpTT05fTWF6ZU9iaixcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfTWF6ZUNlbGwgIHtcclxuICAgIHByb3RlY3RlZCBraW5kOiAgIFRfTXpLaW5kO1xyXG4gICAgcHJvdGVjdGVkIG15X29iajogSV9NYXplT2JqO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbmV3T2JqKGo6IEpTT05fTWF6ZUNlbGwpOiBDX01hemVDZWxsIHtcclxuICAgICAgICBzd2l0Y2ggKGoua2luZCkge1xyXG4gICAgICAgICAgICBjYXNlIFRfTXpLaW5kLk5vRGVmOiByZXR1cm4gbmV3IENfTWF6ZUNlbGxOb0RlZihqKTsgXHJcbiAgICAgICAgICAgIGNhc2UgVF9NektpbmQuVW5rd246IHJldHVybiBuZXcgQ19NYXplQ2VsbFVua3duKGopOyBcclxuICAgICAgICAgICAgY2FzZSBUX016S2luZC5FbXB0eTogcmV0dXJuIG5ldyBDX01hemVDZWxsRW1wdHkoaik7IFxyXG4gICAgICAgICAgICBjYXNlIFRfTXpLaW5kLkZsb29yOiByZXR1cm4gbmV3IENfTWF6ZUNlbGxGbG9vcihqKTtcclxuICAgICAgICAgICAgY2FzZSBUX016S2luZC5VbmV4cDogcmV0dXJuIG5ldyBDX01hemVDZWxsVW5leHAoaik7XHJcbiAgICAgICAgICAgIGNhc2UgVF9NektpbmQuU3RvbmU6IHJldHVybiBuZXcgQ19NYXplQ2VsbFN0b25lKGopO1xyXG4gICAgICAgICAgICBjYXNlIFRfTXpLaW5kLlN0clVwOiByZXR1cm4gbmV3IENfTWF6ZUNlbGxTdHJVcChqKTtcclxuICAgICAgICAgICAgY2FzZSBUX016S2luZC5TdHJEbjogcmV0dXJuIG5ldyBDX01hemVDZWxsU3RyRG4oaik7IFxyXG4gICAgICAgICAgICBjYXNlIFRfTXpLaW5kLlN0clVEOiByZXR1cm4gbmV3IENfTWF6ZUNlbGxTdHJVRChqKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDX01hemVDZWxsTm9EZWYoaik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGo6IEpTT05fTWF6ZUNlbGwpIHtcclxuICAgICAgICBqLm9iaiA/Pz0ge307XHJcbiAgICAgICAgai5vYmouY2xuYW1lID8/PSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XHJcblxyXG4gICAgICAgIHRoaXMua2luZCAgID0gai5raW5kID8/IFRfTXpLaW5kLk5vRGVmO1xyXG4gICAgICAgIHRoaXMubXlfb2JqID0gbmV3X21hemVPYmooai5vYmopO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldE9iaigpOiAgSV9NYXplT2JqIHtyZXR1cm4gdGhpcy5teV9vYmp9XHJcbiAgICBwdWJsaWMgZ2V0S2luZCgpOiBUX016S2luZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMua2luZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9fbGV0dGVyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXlfb2JqLnZpZXcoKT8ubGV0dGVyKDApID8/ICfvvLgnO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBmcm9tX2xldHRlcihsZXR0ZXI6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoVF9NektpbmQpKSB7XHJcbiAgICAgICAgICAgIGlmIChsZXR0ZXIgPT09IGtleSkgcmV0dXJuIFRfTXpLaW5kW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBUX016S2luZC5Ob0RlZjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJvdzJEKHJlY3Q6IFRfUmVjdCwgZGlyOiBudW1iZXIgPSAwKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5teV9vYmoudmlldygpPy5kcm93MkQocmVjdCwgZGlyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJvdzNEKFxyXG4gICAgICAgIGZyb3Q6IFRfV2FsbCwgXHJcbiAgICAgICAgYmFjazogVF9XYWxsLCBcclxuICAgICAgICBvX2RpcjogVF9EaXJlY3Rpb24gPSBUX0RpcmVjdGlvbi5OLCBcclxuICAgICAgICB0X2RpcjogVF9EaXJlY3Rpb24gPSBUX0RpcmVjdGlvbi5OXHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm15X29iai52aWV3KCk/LmRyb3czRChmcm90LCBiYWNrLCBvX2RpciwgdF9kaXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbmNvZGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5raW5kLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLFwiMFwiKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlKHN0cjogc3RyaW5nLCBqPzogSlNPTl9NYXplQ2VsbCk6IENfTWF6ZUNlbGx8dW5kZWZpbmVkIHtcclxuICAgICAgICAgY29uc3Qga2luZCA9IHBhcnNlSW50KHN0ciwgMTYpIGFzIFRfTXpLaW5kO1xyXG4gICAgICAgICByZXR1cm4gQ19NYXplQ2VsbC5uZXdPYmooe2tpbmQ6IGtpbmQsIHBvczogaj8ucG9zfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIENfTWF6ZUNlbGxOb0RlZiBleHRlbmRzIENfTWF6ZUNlbGwge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVDZWxsfHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGogPz89IHtraW5kOiBUX016S2luZC5Ob0RlZn07XHJcbiAgICAgICAgai5vYmogPz89IHt9O1xyXG5cclxuICAgICAgICBqLm9iai5jYW5fdGhyID0gJzAnO1xyXG4gICAgICAgIGoub2JqLmhpdF9kbWcgPSAgMTAwO1xyXG4gICAgICAgIGoub2JqLnBvcyAgICAgPSB7eDpqLngsIHk6ai55LCB6Omouen07XHJcbiAgICAgICAgai5vYmoudmlldyAgICA9ICB7XHJcbiAgICAgICAgICAgIGxheWVyOiAwLCBsZXR0ZXI6ICfnlpEnLCBcclxuICAgICAgICAgICAgc2hvdzNEOiAgJzAnLFxyXG4gICAgICAgICAgICBwYWRfdDogMC4wLCBwYWRfZDogMC4wLCBwYWRfczogMC4wLFxyXG4gICAgICAgICAgICBjb2xfZjogJycsIGNvbF9iOiAnJywgY29sX3M6ICcnLCBjb2xfdDogJycsIGNvbF9kOiAnJywgXHJcbiAgICAgICAgICAgIGNvbF9sOiAnJywgY29sXzI6ICcnLCBcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIoaik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIENfTWF6ZUNlbGxVbmt3biBleHRlbmRzIENfTWF6ZUNlbGwge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVDZWxsfHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGogPz89IHtraW5kOiBUX016S2luZC5Vbmt3bn07XHJcbiAgICAgICAgai5vYmogPz89IHt9O1xyXG5cclxuICAgICAgICBqLm9iai5jYW5fdGhyID0gJzAnO1xyXG4gICAgICAgIGoub2JqLmhpdF9kbWcgPSAgMTAwO1xyXG4gICAgICAgIGoub2JqLnBvcyAgICAgPSB7eDpqLngsIHk6ai55LCB6Omouen07XHJcbiAgICAgICAgai5vYmoudmlldyAgICA9ICB7XHJcbiAgICAgICAgICAgIGxheWVyOiAwLCBsZXR0ZXI6ICforI4nLCBcclxuICAgICAgICAgICAgc2hvdzNEOiAgJzAnLFxyXG4gICAgICAgICAgICBwYWRfdDogMC4wLCBwYWRfZDogMC4wLCBwYWRfczogMC4wLFxyXG4gICAgICAgICAgICBjb2xfZjogJycsIGNvbF9iOiAnJywgY29sX3M6ICcnLCBjb2xfdDogJycsIGNvbF9kOiAnJywgXHJcbiAgICAgICAgICAgIGNvbF9sOiAnJywgY29sXzI6ICcnLCBjb2xfTDogJycsICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKGopO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBDX01hemVDZWxsRW1wdHkgZXh0ZW5kcyBDX01hemVDZWxsIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihqPzogSlNPTl9NYXplQ2VsbHx1bmRlZmluZWQpIHtcclxuICAgICAgICBqID8/PSB7a2luZDogVF9NektpbmQuRW1wdHl9O1xyXG4gICAgICAgIGoub2JqID8/PSB7fTtcclxuXHJcbiAgICAgICAgai5vYmouY2FuX3RociA9ICcxJztcclxuICAgICAgICBqLm9iai5oaXRfZG1nID0gIDA7XHJcbiAgICAgICAgai5vYmoucG9zICAgICA9IHt4OmoueCwgeTpqLnksIHo6ai56fTtcclxuICAgICAgICBqLm9iai52aWV3ICAgID0gIHtcclxuICAgICAgICAgICAgbGF5ZXI6IDAsIGxldHRlcjogJ+eEoScsIFxyXG4gICAgICAgICAgICBzaG93M0Q6ICAnMCcsXHJcbiAgICAgICAgICAgIHBhZF90OiAwLjAsIHBhZF9kOiAwLjAsIHBhZF9zOiAwLjAsXHJcbiAgICAgICAgICAgIGNvbF9mOiAnJywgY29sX2I6ICcnLCBjb2xfczogJycsIGNvbF90OiAnJywgY29sX2Q6ICcnLCBcclxuICAgICAgICAgICAgY29sX2w6ICcnLCBjb2xfMjogJycsIGNvbF9MOiAnJywgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBzdXBlcihqKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgQ19NYXplQ2VsbEZsb29yIGV4dGVuZHMgQ19NYXplQ2VsbCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioaj86IEpTT05fTWF6ZUNlbGx8dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaiA/Pz0ge2tpbmQ6IFRfTXpLaW5kLkZsb29yfTtcclxuICAgICAgICBqLm9iaiA/Pz0ge307XHJcblxyXG4gICAgICAgIGoub2JqLmNhbl90aHIgPSAnMSc7XHJcbiAgICAgICAgai5vYmouaGl0X2RtZyA9ICAwO1xyXG4gICAgICAgIGoub2JqLnBvcyAgICAgPSB7eDpqLngsIHk6ai55LCB6Omouen07XHJcbiAgICAgICAgai5vYmoudmlldyAgICA9ICB7XHJcbiAgICAgICAgICAgIGxheWVyOiAwLCBsZXR0ZXI6ICfjgIAnLCBcclxuICAgICAgICAgICAgc2hvdzNEOiAgJzEnLFxyXG4gICAgICAgICAgICBwYWRfdDogMC4wLCBwYWRfZDogMC4wLCBwYWRfczogMC4wLFxyXG4gICAgICAgICAgICBjb2xfZjogJycsIGNvbF9iOiAnJywgY29sX3M6ICcnLCBjb2xfdDogJyM2NjY2ZmYnLCBjb2xfZDogJycsIFxyXG4gICAgICAgICAgICBjb2xfbDogJyM5OTk5ZmYnLCBjb2xfMjogJyMzMzMzZmYnLCBjb2xfTDogJyM2NjY2ZmYnLCBcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIoaik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIENfTWF6ZUNlbGxVbmV4cCBleHRlbmRzIENfTWF6ZUNlbGwge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVDZWxsfHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGogPz89IHtraW5kOiBUX016S2luZC5VbmV4cH07XHJcbiAgICAgICAgai5vYmogPz89IHt9O1xyXG5cclxuICAgICAgICBqLm9iai5jYW5fdGhyID0gJzEnO1xyXG4gICAgICAgIGoub2JqLmhpdF9kbWcgPSAgMDtcclxuICAgICAgICBqLm9iai5wb3MgICAgID0ge3g6ai54LCB5OmoueSwgejpqLnp9O1xyXG4gICAgICAgIGoub2JqLnZpZXcgICAgPSAge1xyXG4gICAgICAgICAgICBsYXllcjogMCwgbGV0dGVyOiAn44O7JywgXHJcbiAgICAgICAgICAgIHNob3czRDogICcxJyxcclxuICAgICAgICAgICAgcGFkX3Q6IDAuMCwgcGFkX2Q6IDAuMCwgcGFkX3M6IDAuMCxcclxuICAgICAgICAgICAgY29sX2Y6ICcnLCBjb2xfYjogJycsIGNvbF9zOiAnJywgY29sX3Q6ICcjNjZmZmZmJywgY29sX2Q6ICcnLCBcclxuICAgICAgICAgICAgY29sX2w6ICcjOTk5OWZmJywgY29sXzI6ICcjNjZmZmZmJywgY29sX0w6ICcjNjY2NmZmJywgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKGopO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBDX01hemVDZWxsU3RvbmUgZXh0ZW5kcyBDX01hemVDZWxsIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihqPzogSlNPTl9NYXplQ2VsbHx1bmRlZmluZWQpIHtcclxuICAgICAgICBqID8/PSB7a2luZDogVF9NektpbmQuU3RvbmV9O1xyXG4gICAgICAgIGoub2JqID8/PSB7fTtcclxuXHJcbiAgICAgICAgai5vYmouY2FuX3RociA9ICcwJztcclxuICAgICAgICBqLm9iai5oaXRfZG1nID0gIDEwO1xyXG4gICAgICAgIGoub2JqLnBvcyAgICAgPSB7eDpqLngsIHk6ai55LCB6Omouen07XHJcbiAgICAgICAgai5vYmoudmlldyAgICA9ICB7XHJcbiAgICAgICAgICAgIGxheWVyOiAwLCBsZXR0ZXI6ICfvvIMnLCBcclxuICAgICAgICAgICAgc2hvdzNEOiAgJzEnLFxyXG4gICAgICAgICAgICBwYWRfdDogMC4wLCBwYWRfZDogMC4wLCBwYWRfczogMC4wLFxyXG4gICAgICAgICAgICBjb2xfZjogJyMwMGZmMDAnLCBjb2xfYjogJycsIGNvbF9zOiAnIzAwZWUwMCcsIGNvbF90OiAnJywgY29sX2Q6ICcnLCBcclxuICAgICAgICAgICAgY29sX2w6ICcjMDAwMGZmJywgY29sXzI6ICcjMDBjYzAwJywgY29sX0w6ICcjNjY2NmZmJywgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyKGopO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBDX01hemVDZWxsU3RyVXAgZXh0ZW5kcyBDX01hemVDZWxsIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihqPzogSlNPTl9NYXplQ2VsbHx1bmRlZmluZWQpIHtcclxuICAgICAgICBqID8/PSB7a2luZDogVF9NektpbmQuU3RyVXB9O1xyXG4gICAgICAgIGoub2JqID8/PSB7fTtcclxuXHJcbiAgICAgICAgai5vYmouY2FuX3RociA9ICcxJztcclxuICAgICAgICBqLm9iai5oaXRfZG1nID0gIDA7XHJcbiAgICAgICAgai5vYmoucG9zICAgICA9IHt4OmoueCwgeTpqLnksIHo6ai56fTtcclxuICAgICAgICBqLm9iai52aWV3ICAgID0gIHtcclxuICAgICAgICAgICAgbGF5ZXI6IDAsIGxldHRlcjogJ+S4iicsIFxyXG4gICAgICAgICAgICBzaG93M0Q6ICAnMScsXHJcbiAgICAgICAgICAgIHBhZF90OiAwLjAsIHBhZF9kOiAwLjAsIHBhZF9zOiAwLjAsXHJcbiAgICAgICAgICAgIGNvbF9mOiAnJywgY29sX2I6ICcnLCBjb2xfczogJycsIGNvbF90OiAnJywgY29sX2Q6ICcjZmZmZmNjJywgXHJcbiAgICAgICAgICAgIGNvbF9sOiAnIzAwMDBmZicsIGNvbF8yOiAnI2ZmZmY2NicsIGNvbF9MOiAnIzY2NjZmZicsIFxyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihqKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgQ19NYXplQ2VsbFN0ckRuIGV4dGVuZHMgQ19NYXplQ2VsbCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioaj86IEpTT05fTWF6ZUNlbGx8dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaiA/Pz0ge2tpbmQ6IFRfTXpLaW5kLlN0ckRufTtcclxuICAgICAgICBqLm9iaiA/Pz0ge307XHJcblxyXG4gICAgICAgIGoub2JqLmNhbl90aHIgPSAnMSc7XHJcbiAgICAgICAgai5vYmouaGl0X2RtZyA9ICAwO1xyXG4gICAgICAgIGoub2JqLnBvcyAgICAgPSB7eDpqLngsIHk6ai55LCB6Omouen07XHJcbiAgICAgICAgai5vYmoudmlldyAgICA9ICB7XHJcbiAgICAgICAgICAgIGxheWVyOiAwLCBsZXR0ZXI6ICfkuIsnLCBcclxuICAgICAgICAgICAgc2hvdzNEOiAgJzEnLFxyXG4gICAgICAgICAgICBwYWRfdDogMC4wLCBwYWRfZDogMC4wLCBwYWRfczogMC4wLFxyXG4gICAgICAgICAgICBjb2xfZjogJycsIGNvbF9iOiAnJywgY29sX3M6ICcnLCBjb2xfdDogJyNmZmZmY2MnLCBjb2xfZDogJycsIFxyXG4gICAgICAgICAgICBjb2xfbDogJyMwMDAwZmYnLCBjb2xfMjogJyNmZmZmNjYnLCBjb2xfTDogJyM2NjY2ZmYnLCBcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIoaik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIENfTWF6ZUNlbGxTdHJVRCBleHRlbmRzIENfTWF6ZUNlbGwge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVDZWxsfHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGogPz89IHtraW5kOiBUX016S2luZC5TdHJVRH07XHJcbiAgICAgICAgai5vYmogPz89IHt9O1xyXG5cclxuICAgICAgICBqLm9iai5jYW5fdGhyID0gJzEnO1xyXG4gICAgICAgIGoub2JqLmhpdF9kbWcgPSAgMDtcclxuICAgICAgICBqLm9iai5wb3MgICAgID0ge3g6ai54LCB5OmoueSwgejpqLnp9O1xyXG4gICAgICAgIGoub2JqLnZpZXcgICAgPSAge1xyXG4gICAgICAgICAgICBsYXllcjogMCwgbGV0dGVyOiAn5q61JywgXHJcbiAgICAgICAgICAgIHNob3czRDogICcxJyxcclxuICAgICAgICAgICAgcGFkX3Q6IDAuMCwgcGFkX2Q6IDAuMCwgcGFkX3M6IDAuMCxcclxuICAgICAgICAgICAgY29sX2Y6ICcnLCBjb2xfYjogJycsIGNvbF9zOiAnJywgY29sX3Q6ICcjZmZmZmNjJywgY29sX2Q6ICcjZmZmZmNjJywgXHJcbiAgICAgICAgICAgIGNvbF9sOiAnIzAwMDBmZicsIGNvbF8yOiAnI2ZmZmY2NicsIGNvbF9MOiAnIzY2NjZmZicsIFxyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcihqKTtcclxuICAgIH1cclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IF9hbGVydCB9IGZyb20gXCIuLi9kX2Ntbi9nbG9iYWxcIjtcclxuaW1wb3J0IHsgQ19Ec3BNZXNzYWdlIH0gZnJvbSBcIi4uL2RfdXRsL0NfRHNwTWVzc2FnZVwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX01hemVJbmZvIHtcclxuICAgIG5hbWU6ICAgICAgc3RyaW5nO1xyXG4gICAgbWJuYW1lOiAgICBzdHJpbmc7XHJcbiAgICBsdjogICAgICAgIG51bWJlcjtcclxuICAgIHNpemVfeDogICAgbnVtYmVyO1xyXG4gICAgc2l6ZV95OiAgICBudW1iZXI7XHJcbiAgICBzaXplX3o6ICAgIG51bWJlcjtcclxuICAgIG1heF9yb29tOiAgbnVtYmVyO1xyXG4gICAgcm9vbV9zaXplOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbGVydF9tYXplaW5mb19pbmZvKGE/OiBKU09OX01hemVJbmZvKTogdm9pZCB7XHJcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcblxyXG4gICAgYWxlcnQoXCJNYXplSW5mbyBEYXRhOlwiXHJcbiAgICAgICAgKyBcIlxcbm5hbWUgOiBcIiAgICAgICArIChhLm5hbWUgICAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbm1ibmFtZTogXCIgICAgICArIChhLm1ibmFtZSAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmx2IDpcIiAgICAgICAgICArIChhLmx2ICAgICAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnNpemVfeDogXCIgICAgICArIChhLnNpemVfeCAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnNpemVfeTogXCIgICAgICArIChhLnNpemVfeSAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnNpemVfejogXCIgICAgICArIChhLnNpemVfeiAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbm1heF9vZl9yb29tOiBcIiArIChhLm1heF9yb29tICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnJvb21fc2l6ZTogXCIgICArIChhLnJvb21fc2l6ZSA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcblwiXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ19NYXplSW5mbyB7XHJcbiAgICBwdWJsaWMgbmFtZTogICAgICBzdHJpbmcgPSAnJztcclxuICAgIHB1YmxpYyBtYm5hbWU6ICAgIHN0cmluZyA9ICcnO1xyXG4gICAgcHVibGljIGx2OiAgICAgICAgbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBzaXplX3g6ICAgIG51bWJlciA9IDM7XHJcbiAgICBwdWJsaWMgc2l6ZV95OiAgICBudW1iZXIgPSAzO1xyXG4gICAgcHVibGljIHNpemVfejogICAgbnVtYmVyID0gMztcclxuICAgIHB1YmxpYyBtYXhfcm9vbTogIG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgcm9vbV9zaXplOiBudW1iZXIgPSAxO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRfdGJsX2FsbCgpOiBDX01hemVJbmZvW10ge1xyXG4gICAgICAgIGNvbnN0IG1hemVpbmZvOiBDX01hemVJbmZvW10gPSBbXTtcclxuICAgICAgICBtYXplaW5mby5wdXNoKFxyXG4gICAgICAgICAgICBuZXcgQ19NYXplSW5mbygpLmRlY29kZSh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAgIFx0J21hemUwMTAnLCBcclxuICAgICAgICAgICAgICAgIG1ibmFtZTogXHQn5pWZ57e05aC0JywgXHJcbiAgICAgICAgICAgICAgICBsdjogICAgIFx0IDEsIFxyXG4gICAgICAgICAgICAgICAgc2l6ZV94OiBcdDExLCBcclxuICAgICAgICAgICAgICAgIHNpemVfeTogXHQxMSwgXHJcbiAgICAgICAgICAgICAgICBzaXplX3o6IFx0IDMsIFxyXG4gICAgICAgICAgICAgICAgbWF4X3Jvb206IFx0IDIsIFxyXG4gICAgICAgICAgICAgICAgcm9vbV9zaXplOiBcdCAzIFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICApO1xyXG4gICAgICAgIG1hemVpbmZvLnB1c2goXHJcbiAgICAgICAgICAgIG5ldyBDX01hemVJbmZvKCkuZGVjb2RlKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICAgXHQnbWF6ZTAxMScsIFxyXG4gICAgICAgICAgICAgICAgbWJuYW1lOiBcdCflp4vjgb7jgorjga7ov7flrq4nLCBcclxuICAgICAgICAgICAgICAgIGx2OiAgICAgXHQgMSwgXHJcbiAgICAgICAgICAgICAgICBzaXplX3g6IFx0MjEsIFxyXG4gICAgICAgICAgICAgICAgc2l6ZV95OiBcdDIxLCBcclxuICAgICAgICAgICAgICAgIHNpemVfejogXHQgNSwgXHJcbiAgICAgICAgICAgICAgICBtYXhfcm9vbTogXHQgMywgXHJcbiAgICAgICAgICAgICAgICByb29tX3NpemU6IFx0IDMgXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbWF6ZWluZm8ucHVzaChcclxuICAgICAgICAgICAgbmV3IENfTWF6ZUluZm8oKS5kZWNvZGUoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogICBcdCdtYXplMDEyJywgXHJcbiAgICAgICAgICAgICAgICBtYm5hbWU6IFx0J+aal+OBjeajruOBrui/t+WuricsIFxyXG4gICAgICAgICAgICAgICAgbHY6ICAgICBcdCAxLCBcclxuICAgICAgICAgICAgICAgIHNpemVfeDogXHQyNSwgXHJcbiAgICAgICAgICAgICAgICBzaXplX3k6IFx0MjUsIFxyXG4gICAgICAgICAgICAgICAgc2l6ZV96OiBcdCA3LCBcclxuICAgICAgICAgICAgICAgIG1heF9yb29tOiBcdCA1LCBcclxuICAgICAgICAgICAgICAgIHJvb21fc2l6ZTogXHQgMyBcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgKVxyXG4gICAgICAgIG1hemVpbmZvLnB1c2goXHJcbiAgICAgICAgICAgIG5ldyBDX01hemVJbmZvKCkuZGVjb2RlKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICAgXHQnbWF6ZTAxMycsIFxyXG4gICAgICAgICAgICAgICAgbWJuYW1lOiBcdCfpu5LprZTjga7lnLDkuIvlopPlnLAnLCBcclxuICAgICAgICAgICAgICAgIGx2OiAgICAgXHQgMSwgXHJcbiAgICAgICAgICAgICAgICBzaXplX3g6IFx0MzEsIFxyXG4gICAgICAgICAgICAgICAgc2l6ZV95OiBcdDMxLCBcclxuICAgICAgICAgICAgICAgIHNpemVfejogXHQxMCwgXHJcbiAgICAgICAgICAgICAgICBtYXhfcm9vbTogXHQgNSwgXHJcbiAgICAgICAgICAgICAgICByb29tX3NpemU6IFx0IDUgXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgcmV0dXJuIG1hemVpbmZvO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChqPzogSlNPTl9NYXplSW5mbykge1xyXG4gICAgICAgIGlmIChqICE9PSB1bmRlZmluZWQpIHRoaXMuZGVjb2RlKGopO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGVuY29kZSgpOiBKU09OX01hemVJbmZvIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuYW1lOiAgICAgIHRoaXMubmFtZSxcclxuICAgICAgICAgICAgbWJuYW1lOiAgICB0aGlzLm1ibmFtZSxcclxuICAgICAgICAgICAgbHY6ICAgICAgICB0aGlzLmx2LFxyXG4gICAgICAgICAgICBzaXplX3g6ICAgIHRoaXMuc2l6ZV94LFxyXG4gICAgICAgICAgICBzaXplX3k6ICAgIHRoaXMuc2l6ZV95LFxyXG4gICAgICAgICAgICBzaXplX3o6ICAgIHRoaXMuc2l6ZV96LFxyXG4gICAgICAgICAgICBtYXhfcm9vbTogIHRoaXMubWF4X3Jvb20sXHJcbiAgICAgICAgICAgIHJvb21fc2l6ZTogdGhpcy5yb29tX3NpemUsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGRlY29kZShqPzogSlNPTl9NYXplSW5mbyk6IENfTWF6ZUluZm8ge1xyXG4gICAgICAgIGlmIChqID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoai5uYW1lICAgICAgIT09IHVuZGVmaW5lZCkgdGhpcy5uYW1lICAgICAgPSBqLm5hbWU7XHJcbiAgICAgICAgaWYgKGoubWJuYW1lICAgICE9PSB1bmRlZmluZWQpIHRoaXMubWJuYW1lICAgID0gai5tYm5hbWU7XHJcbiAgICAgICAgaWYgKGoubHYgICAgICAgICE9PSB1bmRlZmluZWQpIHRoaXMubHYgICAgICAgID0gai5sdjtcclxuICAgICAgICBpZiAoai5zaXplX3ggICAgIT09IHVuZGVmaW5lZCkgdGhpcy5zaXplX3ggICAgPSBqLnNpemVfeDtcclxuICAgICAgICBpZiAoai5zaXplX3kgICAgIT09IHVuZGVmaW5lZCkgdGhpcy5zaXplX3kgICAgPSBqLnNpemVfeTtcclxuICAgICAgICBpZiAoai5zaXplX3ogICAgIT09IHVuZGVmaW5lZCkgdGhpcy5zaXplX3ogICAgPSBqLnNpemVfejtcclxuICAgICAgICBpZiAoai5tYXhfcm9vbSAgIT09IHVuZGVmaW5lZCkgdGhpcy5tYXhfcm9vbSAgPSBqLm1heF9yb29tO1xyXG4gICAgICAgIGlmIChqLnJvb21fc2l6ZSAhPT0gdW5kZWZpbmVkKSB0aGlzLnJvb21fc2l6ZSA9IGoucm9vbV9zaXplO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGFsZXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGFsZXJ0KFwiTWF6ZUluZm8gRGF0YTpcIlxyXG4gICAgICAgICAgICArIFwiXFxubmFtZSA6IFwiICAgICAgICsgKHRoaXMubmFtZSAgICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbm1ibmFtZTogXCIgICAgICArICh0aGlzLm1ibmFtZSAgICA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5sdiA6XCIgICAgICAgICAgKyAodGhpcy5sdiAgICAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuc2l6ZV94OiBcIiAgICAgICsgKHRoaXMuc2l6ZV94ICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnNpemVfeTogXCIgICAgICArICh0aGlzLnNpemVfeSAgICA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5zaXplX3o6IFwiICAgICAgKyAodGhpcy5zaXplX3ogICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxubWF4X29mX3Jvb206IFwiICsgKHRoaXMubWF4X3Jvb20gID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnJvb21fc2l6ZTogXCIgICArICh0aGlzLnJvb21fc2l6ZSA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5cIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IENfUG9pbnQgfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuL0NfUG9pbnRcIjtcclxuaW1wb3J0IHsgQ19Qb2ludERpciwgSlNPTl9Qb2ludERpciB9ICAgICAgICAgZnJvbSBcIi4vQ19Qb2ludERpclwiO1xyXG5pbXBvcnQgeyBJX0Fic3RyYWN0LCBJX0pTT05fVW5pcSwgSlNPTl9BbnkgfSBmcm9tIFwiLi9DX1NhdmVJbmZvXCI7XHJcbmltcG9ydCB7IF9nZXRfdXVpZCB9ICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuLi9kX3V0bC9GX1JhbmRcIjtcclxuaW1wb3J0IHsgXHJcbiAgICBDX01hemVPYmpWaWV3LCBcclxuICAgIElfTWF6ZU9ialZpZXcsIFxyXG4gICAgSlNPTl9NYXplT2JqVmlldyBcclxufSBmcm9tIFwiLi9DX01hemVPYmpWaWV3XCI7XHJcblxyXG5pbXBvcnQgeyBDX1duZHJXYWxrZXIsIElfV25kcldhbGtlciB9IGZyb20gXCIuL0NfV25kcldhbGtlclwiO1xyXG5pbXBvcnQgeyBDX01hemVPYmpWaWV3MlgsIElfTWF6ZU9ialZpZXcyWCB9IGZyb20gXCIuL0NfTWF6ZU9ialZpZXcyWFwiO1xyXG5pbXBvcnQgeyBJX1dyZXMgfSBmcm9tIFwiLi9DX1dyZXNcIjtcclxuaW1wb3J0IHsgSV9XbmRyIH0gZnJvbSBcIi4vQ19XbmRyXCI7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX01hemVPYmpTVEFUIHtcclxuICAgIGNhbl90aHI/OiAgIHN0cmluZywgXHJcbiAgICBoaXRfZG1nPzogICBudW1iZXIsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9NYXplT2JqIGV4dGVuZHMgSlNPTl9Bbnkge1xyXG4gICAgY2xuYW1lPzogICAgc3RyaW5nLFxyXG4gICAgdW5pcV9pZD86ICAgc3RyaW5nLCBcclxuICAgIHBvcz86ICAgICAgIEpTT05fUG9pbnREaXIsXHJcbiAgICB2aWV3PzogICAgICBKU09OX01hemVPYmpWaWV3fHVuZGVmaW5lZCxcclxuICAgIGNhbl90aHI/OiAgIHN0cmluZywgXHJcbiAgICBoaXRfZG1nPzogICBudW1iZXIsXHJcbiAgICBzdGF0PzogICAgICBKU09OX01hemVPYmpTVEFULCAvLyBDX01hemVPYmrjga7jgrXjg5bjgq/jg6njgrnjga7liJ3mnJ/lgKTjgpLkv53mjIHjgZnjgotcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJX01hemVPYmogZXh0ZW5kcyBJX0pTT05fVW5pcSwgSV9BYnN0cmFjdCB7XHJcbiAgICBmcmVlOiAgICAgICAoKT0+dm9pZDtcclxuICAgIGdldF9wZDogICAgICgpPT5DX1BvaW50RGlyO1xyXG4gICAgc2V0X3BkOiAgICAgKHBkOkNfUG9pbnREaXIpPT52b2lkO1xyXG4gICAgd2l0aGluOiAgICAgKHA6IENfUG9pbnQpPT5ib29sZWFuO1xyXG4gICAgdmlldzJEOiAgICAgKCk9PklfTWF6ZU9ialZpZXcyWHx1bmRlZmluZWQ7XHJcbiAgICBzZXRWaWV3MkQ6ICAodmlldzogSV9NYXplT2JqVmlldzJYfHVuZGVmaW5lZCk9PnZvaWQ7XHJcbiAgICB2aWV3Mk06ICAgICAoKT0+SV9NYXplT2JqVmlldzJYfHVuZGVmaW5lZDtcclxuICAgIHNldFZpZXcyTTogICh2aWV3OiBJX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkKT0+dm9pZDtcclxuICAgIHZpZXc6ICAgICAgICgpPT5JX01hemVPYmpWaWV3fHVuZGVmaW5lZDtcclxuICAgIHNldFZpZXc6ICAgICh2aWV3OiBJX01hemVPYmpWaWV3fHVuZGVmaW5lZCk9PnZvaWQ7XHJcbiAgICB3YWxrZXI6ICAgICAoKT0+SV9XbmRyV2Fsa2VyfHVuZGVmaW5lZDtcclxuICAgIHNldF93YWxrZXI6ICh3ZHdhbGs6IElfV25kcldhbGtlcnx1bmRlZmluZWQpPT52b2lkO1xyXG4gICAgd3JlczogICAgICAgKCk9PklfV25kcltdfHVuZGVmaW5lZDtcclxuICAgIHNldF93cmVzOiAgICh3cmVzOiBJX1duZHJbXXx1bmRlZmluZWQpPT52b2lkO1xyXG4gICAgYWRkX3duZHI6ICAgKHduZHI6IElfV25kcik9PnZvaWQ7XHJcbiAgICBjYW5UaHJvdWdoOiAoKT0+Ym9vbGVhbjtcclxuICAgIGhpdERhbWFnZTogKCk9Pm51bWJlcjtcclxuICAgIGVuY29kZTogICAgICgpPT5KU09OX01hemVPYmo7XHJcbiAgICBkZWNvZGU6ICAgICAoaj86IEpTT05fTWF6ZU9ianx1bmRlZmluZWQpPT5JX01hemVPYmo7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDX01hemVPYmogaW1wbGVtZW50cyBJX01hemVPYmoge1xyXG4gICAgcHJvdGVjdGVkIGNsbmFtZTogICAgc3RyaW5nID0gJ0NfTWF6ZU9iaic7XHJcblxyXG4gICAgcHJpdmF0ZSAgIHVuaXFfaWQ6ICAgc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIHBvczogICAgICAgQ19Qb2ludERpcnx1bmRlZmluZWQ7XHJcbiAgICBwcm90ZWN0ZWQgbXlfdmlldzogICBJX01hemVPYmpWaWV3fHVuZGVmaW5lZDtcclxuICAgIHByb3RlY3RlZCBteV92aWV3MkQ6IElfTWF6ZU9ialZpZXcyWHx1bmRlZmluZWQ7XHJcbiAgICBwcm90ZWN0ZWQgbXlfdmlldzJNOiBJX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkO1xyXG4gICAgcHJvdGVjdGVkIG15X3dhbGtlcjogSV9XbmRyV2Fsa2VyfHVuZGVmaW5lZDsgLy8gQ19XYWxrZXLjgqrjg5bjgrjjgqfjgq/jg4go5oq96LGh44OX44Ot44OR44OG44KjKVxyXG4gICAgcHJvdGVjdGVkIG15X3dyZXMgIDogSV9XbmRyW118dW5kZWZpbmVkOyAgICAgLy8gQ19XbmRy44Gu6YWN5YiX44Kq44OW44K444Kn44Kv44OIKOaKveixoeODl+ODreODkeODhuOCoylcclxuICAgIHByb3RlY3RlZCBjYW5fdGhyOiAgIGJvb2xlYW47XHJcbiAgICBwcm90ZWN0ZWQgaGl0X2RtZzogICBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVPYmp8dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jbG5hbWUgICAgID0gICdDX01hemVPYmonOyAvLyDjgq/jg6njgrnlkI1cclxuICAgICAgICBpZiAoaj8uY2xuYW1lICAhPT0gdW5kZWZpbmVkKSB0aGlzLmNsbmFtZSA9IGouY2xuYW1lOyAvL1xyXG4gICAgICAgIHRoaXMudW5pcV9pZCAgICA9ICB0aGlzLmNsbmFtZSArICdfJyArIF9nZXRfdXVpZCgpO1xyXG4gICAgICAgIHRoaXMucG9zICAgICAgICA9ICBuZXcgQ19Qb2ludERpcih7eDowLCB5OjAsIHo6MCwgZDowfSk7XHJcbiAgICAgICAgdGhpcy5teV92aWV3ICAgID0gIHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLm15X3ZpZXcyRCAgPSAgdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMubXlfdmlldzJNICA9ICB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5teV93YWxrZXIgID0gIHVuZGVmaW5lZDsgLy8gQ19XYWxrZXLjgqrjg5bjgrjjgqfjgq/jg4jjga/liJ3mnJ/ljJbjgZfjgarjgYRcclxuICAgICAgICB0aGlzLm15X3dyZXMgICAgPSAgdW5kZWZpbmVkOyAvLyBDX1dyZXPjgqrjg5bjgrjjgqfjgq/jg4jjga/liJ3mnJ/ljJbjgZfjgarjgYRcclxuICAgICAgICB0aGlzLmNhbl90aHIgICAgPSAgdHJ1ZTtcclxuICAgICAgICB0aGlzLmhpdF9kbWcgICAgPSAgMDtcclxuXHJcbiAgICAgICAgaWYgKGogIT09IHVuZGVmaW5lZCkgdGhpcy5fX2luaXQoaik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9faW5pdChqOiBKU09OX01hemVPYmp8dW5kZWZpbmVkKTogQ19NYXplT2JqIHtcclxuICAgICAgICBpZiAoaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKGoudW5pcV9pZCAhPT0gdW5kZWZpbmVkKSB0aGlzLnVuaXFfaWQgICA9IGoudW5pcV9pZDtcclxuICAgICAgICBpZiAoai5jbG5hbWUgICE9PSB1bmRlZmluZWQpIHRoaXMuY2xuYW1lICAgID0gai5jbG5hbWU7XHJcbiAgICAgICAgaWYgKGoucG9zICAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLnBvcz8uZGVjb2RlKGoucG9zKTtcclxuICAgICAgICBpZiAoai52aWV3ICAgICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5teV92aWV3ICAgPSBDX01hemVPYmpWaWV3ICAubmV3T2JqKGoudmlldyk7IFxyXG4gICAgICAgICAgICB0aGlzLm15X3ZpZXcyRCA9IENfTWF6ZU9ialZpZXcyWC5uZXdPYmooai52aWV3KTsgXHJcbiAgICAgICAgICAgIHRoaXMubXlfdmlldzJNID0gQ19NYXplT2JqVmlldzJYLm5ld09iaihqLnZpZXcpOyBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoai5zdGF0ICAgICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8g44OH44O844K/44OZ44O844K544GL44KJ44Gu44OX44Ot44OR44OG44Kj44Gu5b6p5YWDKGouc3RhdOOBr0pTT07lvaLlvI8pXHJcbiAgICAgICAgICAgIGlmIChqPy5zdGF0Py5jYW5fdGhyICE9PSB1bmRlZmluZWQpIHRoaXMuY2FuX3RociA9IGouc3RhdC5jYW5fdGhyICE9PSAnMCcgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChqPy5zdGF0Py5oaXRfZG1nICE9PSB1bmRlZmluZWQpIHRoaXMuaGl0X2RtZyA9IGouc3RhdC5oaXRfZG1nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoai5jYW5fdGhyICE9PSB1bmRlZmluZWQpIHRoaXMuY2FuX3RociA9IGouY2FuX3RociAhPT0gJzAnID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIGlmIChqLmhpdF9kbWcgIT09IHVuZGVmaW5lZCkgdGhpcy5oaXRfZG1nID0gai5oaXRfZG1nO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG59XHJcblxyXG4gICAgcHVibGljIGZyZWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wb3MgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5teV92aWV3ICA/LmZyZWUoKTt0aGlzLm15X3ZpZXcgICAgPSAgdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMubXlfdmlldzJEPy5mcmVlKCk7dGhpcy5teV92aWV3MkQgID0gIHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLm15X3ZpZXcyTT8uZnJlZSgpO3RoaXMubXlfdmlldzJNICA9ICB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5teV93YWxrZXI/LmZyZWUoKTt0aGlzLm15X3dhbGtlciAgPSAgdW5kZWZpbmVkOyAvLyBDX1dhbGtlcuOCquODluOCuOOCp+OCr+ODiOOBr+WIneacn+WMluOBl+OBquOBhFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5teV93cmVzICAgID0gIHVuZGVmaW5lZDsgLy8gQ19XbmRy44Kq44OW44K444Kn44Kv44OI44Gv5Yid5pyf5YyW44GX44Gq44GEXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVpZCgpOiBzdHJpbmcge3JldHVybiB0aGlzLnVuaXFfaWR9XHJcblxyXG4gICAgcHVibGljIGNsYXNzTmFtZSgpOiBzdHJpbmcge3JldHVybiB0aGlzLmNsbmFtZX1cclxuXHJcbiAgICBwdWJsaWMgdmlldygpOiBJX01hemVPYmpWaWV3fHVuZGVmaW5lZCB7cmV0dXJuIHRoaXMubXlfdmlld31cclxuICAgIHB1YmxpYyBzZXRWaWV3KHZpZXc6IElfTWF6ZU9ialZpZXd8dW5kZWZpbmVkKTogdm9pZCB7dGhpcy5teV92aWV3ID0gdmlld31cclxuXHJcbiAgICBwdWJsaWMgdmlldzJEKCk6IElfTWF6ZU9ialZpZXcyWHx1bmRlZmluZWQge3JldHVybiB0aGlzLm15X3ZpZXcyRH1cclxuICAgIHB1YmxpYyBzZXRWaWV3MkQodmlldzJEOiBJX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkKTogdm9pZCB7dGhpcy5teV92aWV3MkQgPSB2aWV3MkR9XHJcblxyXG4gICAgcHVibGljIHZpZXcyTSgpOiBJX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkIHtyZXR1cm4gdGhpcy5teV92aWV3Mk19XHJcbiAgICBwdWJsaWMgc2V0VmlldzJNKHZpZXcyTTogSV9NYXplT2JqVmlldzJYfHVuZGVmaW5lZCk6IHZvaWQge3RoaXMubXlfdmlldzJNID0gdmlldzJNfVxyXG5cclxuICAgIHB1YmxpYyB3YWxrZXIoKTogSV9XbmRyV2Fsa2VyfHVuZGVmaW5lZCB7cmV0dXJuIHRoaXMubXlfd2Fsa2VyO31cclxuICAgIHB1YmxpYyBzZXRfd2Fsa2VyKHdhbGtlcjogSV9XbmRyV2Fsa2VyfHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubXlfd2Fsa2VyID0gd2Fsa2VyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB3cmVzKCk6IElfV25kcltdfHVuZGVmaW5lZCB7cmV0dXJuIHRoaXMubXlfd3Jlczt9XHJcbiAgICBwdWJsaWMgc2V0X3dyZXMod3JlczogSV9XbmRyW118dW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5teV93cmVzID0gd3JlcztcclxuICAgIH1cclxuICAgIHB1YmxpYyBhZGRfd25kcih3bmRyOiBJX1duZHIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm15X3dyZXMgPz89IFtdO1xyXG4gICAgICAgIHRoaXMubXlfd3Jlcy5wdXNoKHduZHIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjYW5UaHJvdWdoKCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLmNhbl90aHJ9XHJcbiAgICBwdWJsaWMgc2V0VGhyb3VnaCh0aHI6IGJvb2xlYW4pOiBib29sZWFuIHtyZXR1cm4gdGhpcy5jYW5fdGhyID0gdGhyfVxyXG5cclxuICAgIHB1YmxpYyBnZXRfcGQoKTogQ19Qb2ludERpciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDX1BvaW50RGlyKHRoaXMucG9zKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRfcGQocDogQ19Qb2ludERpcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucG9zID0gcDtcclxuICAgIH1cclxuICAgIHB1YmxpYyB3aXRoaW4ocDogQ19Qb2ludCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvcz8ud2l0aGluKHApID8/IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBoaXREYW1hZ2UoKSA6bnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oaXRfZG1nO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGVuY29kZSgpOiBKU09OX01hemVPYmogeyAgICAgICAgICAgICAgICAgICAgLy9hbGVydCgnQ19NYXplT2JqLmVuY29kZSgpJyk7XHJcbiAgICAgICAgY29uc3Qgc3RhdCA9IHtcclxuICAgICAgICAgICAgY2FuX3RocjogdGhpcy5jYW5fdGhyID8gJzEnIDogJzAnLFxyXG4gICAgICAgICAgICBoaXRfZG1nOiB0aGlzLmhpdF9kbWcsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVuaXFfaWQ6IHRoaXMudW5pcV9pZCxcclxuICAgICAgICAgICAgY2xuYW1lOiAgdGhpcy5jbG5hbWUsXHJcbiAgICAgICAgICAgIHBvczogICAgIHRoaXMucG9zPy5lbmNvZGUoKT8/e3g6MCx5OjAsejowLGQ6OTl9LFxyXG4gICAgICAgICAgICB2aWV3OiAgICB0aGlzLm15X3ZpZXc/LmVuY29kZSgpID8/IHt9LFxyXG4gICAgICAgICAgICBjYW5fdGhyOiB0aGlzLmNhbl90aHIgPyAnMScgOiAnMCcsXHJcbiAgICAgICAgICAgIGhpdF9kbWc6IHRoaXMuaGl0X2RtZyxcclxuICAgICAgICAgICAgc3RhdDogICAgc3RhdCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlY29kZShqPzogSlNPTl9NYXplT2JqfHVuZGVmaW5lZCk6IElfTWF6ZU9iaiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX19pbml0KGopO1xyXG4gICAgfVxyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgQ19NYXplT2JqLCBJX01hemVPYmosIEpTT05fTWF6ZU9iaiB9IGZyb20gXCIuL0NfTWF6ZU9ialwiO1xyXG5pbXBvcnQgeyBKU09OX1BvaW50RGlyIH0gZnJvbSBcIi4vQ19Qb2ludERpclwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX01hemVPYmpTaGFkb3cgZXh0ZW5kcyBKU09OX01hemVPYmoge1xyXG4gICAgcG9zPzogICBKU09OX1BvaW50RGlyLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fTWF6ZU9ialNob2dhaSBleHRlbmRzIEpTT05fTWF6ZU9iaiB7XHJcbiAgICBwb3M/OiAgIEpTT05fUG9pbnREaXIsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDX01hemVPYmpTaGFkb3cgZXh0ZW5kcyBDX01hemVPYmogaW1wbGVtZW50cyBJX01hemVPYmoge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVPYmpTaGFkb3cpIHtcclxuICAgICAgICBzdXBlcihqKTtcclxuICAgICAgICBjb25zdCBqaiA9IHtcclxuICAgICAgICAgICAgY2xuYW1lOiAgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLFxyXG4gICAgICAgICAgICBjYW5fdGhyOiAnMScsXHJcbiAgICAgICAgICAgIGhfd19kbWc6ICAwLFxyXG4gICAgICAgICAgICB2aWV3OiB7XHJcbiAgICAgICAgICAgICAgICBsYXllcjogICAyLFxyXG4gICAgICAgICAgICAgICAgbGV0dGVyOiAn5b2xJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kZWNvZGUoamopO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENfTWF6ZU9ialNob2dhaSBleHRlbmRzIENfTWF6ZU9iaiBpbXBsZW1lbnRzIElfTWF6ZU9iaiB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioaj86IEpTT05fTWF6ZU9ialNob2dhaSkge1xyXG4gICAgICAgIHN1cGVyKGopO1xyXG4gICAgICAgIGNvbnN0IGpqID0ge1xyXG4gICAgICAgICAgICBjbG5hbWU6ICB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsXHJcbiAgICAgICAgICAgIGNhbl90aHI6ICcwJyxcclxuICAgICAgICAgICAgaF93X2RtZzogIDEwMCxcclxuICAgICAgICAgICAgdmlldzoge1xyXG4gICAgICAgICAgICAgICAgbGF5ZXI6ICAgMixcclxuICAgICAgICAgICAgICAgIGxldHRlcjogJ+manCcsXHJcbiAgICAgICAgICAgICAgICBzaG93M0Q6ICAnMScsXHJcbiAgICAgICAgICAgICAgICBjb2xfMjogJyM5OTk5Y2MnLCBjb2xfTDogJyM2NjY2ZmYnLCBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRlY29kZShqaik7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBJX0Fic3RyYWN0LCBKU09OX0FueSB9IGZyb20gXCIuL0NfU2F2ZUluZm9cIjtcclxuaW1wb3J0IHsgVF9XYWxsIH0gICAgICAgICAgICAgICBmcm9tIFwiLi4vZF9tZGwvQ19XYWxsXCI7XHJcbmltcG9ydCB7IENfTWF6ZU9ialZpZXcyWCB9IGZyb20gXCIuL0NfTWF6ZU9ialZpZXcyWFwiO1xyXG5pbXBvcnQgeyBfbWF4LCBfbWluIH0gZnJvbSAnLi4vZF91dGwvRl9NYXRoJztcclxuaW1wb3J0IHsgcmVsYXRpdmVPcmllbnRhdGlvbiwgcmVsYXRpdmVPcmllbnRhdGlvbkRpciwgVF9PcmllbnRhdGlvbiB9IGZyb20gXCIuL1RfT3JpZW50YXRpb25cIjtcclxuaW1wb3J0IHsgVF9EaXJlY3Rpb24gfSBmcm9tIFwiLi9DX1BvaW50RGlyXCI7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJX01hemVPYmpWaWV3IGV4dGVuZHMgSV9BYnN0cmFjdCB7XHJcbiAgICBmcmVlOiAgICAoKT0+dm9pZDtcclxuICAgIC8vIOihqOekuumWouS/gigyRHByZSkuL0NfV2FsbFxyXG4gICAgbGF5ZXI6ICAgKCk9Pm51bWJlcjtcclxuICAgIGxldHRlcjogIChkaXI6IG51bWJlcik9PnN0cmluZ3xudWxsOyAvLyBudWxsOiDopovjgYjjgarjgYTjgIHkvZXjgoLjgarjgYRcclxuICAgIGRpcjogICAgICgpPT4gVF9EaXJlY3Rpb247IC8vIOaWueWQkSgyRHByZSlcclxuXHJcbiAgICAvLyDooajnpLrplqLkv4IoM0QpXHJcbiAgICBjYW5TaG93OiAoKT0+Ym9vbGVhbjtcclxuICAgIGRyb3cyRDogIChmbG9vcjogVF9SZWN0LCBkaXI6IG51bWJlcik9PnZvaWQ7XHJcbiAgICBkcm93M0Q6ICAoZnJvdDogIFRfV2FsbCwgYmFjazogVF9XYWxsLCBvYmplX2RpcjogVF9EaXJlY3Rpb24sIHRlYW1fZGlyOiBUX0RpcmVjdGlvbik9PnZvaWQ7XHJcblxyXG4gICAgcGFkX3Q6ICAgKCk9Pm51bWJlcjsgLy/kuIrlgbTjga7nqbrjgY0o5Ymy5ZCIOiAw44GL44KJMSkgXHJcbiAgICBwYWRfZDogICAoKT0+bnVtYmVyOyAvL+W6iuWBtOOBruepuuOBjSjlibLlkIg6IDDjgYvjgokxKSBcclxuICAgIHBhZF9zOiAgICgpPT5udW1iZXI7IC8v5qiq5YG044Gu56m644GNKOWJsuWQiDogMOOBi+OCiTEpIFxyXG4gICAgY29sX2Y6ICAgKCk9PnN0cmluZ3xudWxsOyAvL+ato+mdouOBruiJsihDU1Pjgqvjg6njg7wp44CCbnVsbOOBr+mAj+aYjlxyXG4gICAgY29sX2I6ICAgKCk9PnN0cmluZ3xudWxsOyAvL+iDjOmdouOBruiJsihDU1Pjgqvjg6njg7wp44CCbnVsbOOBr+mAj+aYjlxyXG4gICAgY29sX3M6ICAgKCk9PnN0cmluZ3xudWxsOyAvL+aoquWBtOOBruiJsihDU1Pjgqvjg6njg7wp44CCbnVsbOOBr+mAj+aYjlxyXG4gICAgY29sX3Q6ICAgKCk9PnN0cmluZ3xudWxsOyAvL+S4iumDqOOBruiJsihDU1Pjgqvjg6njg7wp44CCbnVsbOOBr+mAj+aYjuOAguOChOOChOOBk+OBl+OBhOOBjOOAgeeJqeS9k+OBruW6lemdouOBq+W9k+OBn+OCi1xyXG4gICAgY29sX2Q6ICAgKCk9PnN0cmluZ3xudWxsOyAvL+S4i+mDqOOBruiJsihDU1Pjgqvjg6njg7wp44CCbnVsbOOBr+mAj+aYjuOAguOChOOChOOBk+OBl+OBhOOBjOOAgeeJqeS9k+OBruWkqeS6leOBq+W9k+OBn+OCi1xyXG4gICAgY29sX2w6ICAgKCk9PnN0cmluZ3xudWxsOyAvL+ODqeOCpOODs+OBruiJsihDU1Pjgqvjg6njg7wpXHJcblxyXG4gICAgY29sXzI6ICAgKCk9PnN0cmluZ3xudWxsOyAvLzJE44Oe44OD44OX44Gu6ImyKENTU+OCq+ODqeODvClcclxuICAgIGNvbF9MOiAgICgpPT5zdHJpbmd8bnVsbDsgLy8yROODnuODg+ODl+OBrue3muOBruiJsihDU1Pjgqvjg6njg7wpXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9NYXplT2JqVmlldyBleHRlbmRzIEpTT05fQW55IHtcclxuICAgIGNsbmFtZT86IHN0cmluZyxcclxuICAgIGxheWVyPzogIG51bWJlcixcclxuICAgIGxldHRlcj86IHN0cmluZyxcclxuICAgIG15X2Rpcj86ICBUX0RpcmVjdGlvbiwgLy8g5pa55ZCRKDJEcHJlKVxyXG4gICAgc2hvdz86ICAgc3RyaW5nLFxyXG4gICAgcGFkX3Q/OiAgbnVtYmVyLCAvLyDjgqrjg5bjgrjjgqfjgq/jg4jkuIrpg6jjga7pmpnplpPjga7libLlkIgoMC4wIOOBi+OCiSAxLjApIFxyXG4gICAgcGFkX2Q/OiAgbnVtYmVyLCAvLyDjgqrjg5bjgrjjgqfjgq/jg4jkuIvpg6jjga7pmpnplpPjga7libLlkIgoMC4wIOOBi+OCiSAxLjApIFxyXG4gICAgcGFkX3M/OiAgbnVtYmVyLCAvLyDjgqrjg5bjgrjjgqfjgq/jg4jlkajlm7Ljga7pmpnplpPjga7libLlkIgoMC4wIOOBi+OCiSAxLjApIFxyXG4gICAgY29sX2Y/OiAgc3RyaW5nfG51bGwsIC8vIOOCquODluOCuOOCp+OCr+ODiOato+mdouOBrkNTU+OCq+ODqeODvCBcclxuICAgIGNvbF9iPzogIHN0cmluZ3xudWxsLCAvLyDjgqrjg5bjgrjjgqfjgq/jg4jmraPpnaLjga5DU1Pjgqvjg6njg7wgXHJcbiAgICBjb2xfcz86ICBzdHJpbmd8bnVsbCwgLy8g44Kq44OW44K444Kn44Kv44OI5YG06Z2i44GuQ1NT44Kr44Op44O8IFxyXG4gICAgY29sX3Q/OiAgc3RyaW5nfG51bGwsIC8vIOOCquODluOCuOOCp+OCr+ODiOS4iumdouOBrkNTU+OCq+ODqeODvCBcclxuICAgIGNvbF9kPzogIHN0cmluZ3xudWxsLCAvLyDjgqrjg5bjgrjjgqfjgq/jg4jlupXpnaLjga5DU1Pjgqvjg6njg7wgXHJcbiAgICBjb2xfbD86ICBzdHJpbmd8bnVsbCwgLy8g44Kq44OW44K444Kn44Kv44OI44Gu57ea44GuQ1NT44Kr44Op44O8IFxyXG4gICAgY29sXzI/OiAgc3RyaW5nfG51bGwsIC8vIDJE44Oe44OD44OX44Gu6Z2i44GuQ1NT44Kr44Op44O8XHJcbiAgICBjb2xfTD86ICBzdHJpbmd8bnVsbCwgLy8gMkTjg57jg4Pjg5fjga7nt5rjga5DU1Pjgqvjg6njg7xcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVF94eSAgID0ge3g6IG51bWJlciwgeTogbnVtYmVyfVxyXG5leHBvcnQgdHlwZSBUX1JlY3QgPSB7dGw6IFRfeHksIHRyOiBUX3h5LCBkbDogVF94eSwgZHI6IFRfeHl9O1xyXG5cclxuZXhwb3J0IGNsYXNzIENfTWF6ZU9ialZpZXcgaW1wbGVtZW50cyBJX01hemVPYmpWaWV3IHtcclxuICAgIHByb3RlY3RlZCBzdGF0aWMgY29uM0Q6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRHx1bmRlZmluZWQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldF9jb250ZXh0M0QoKTogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfHVuZGVmaW5lZCB7cmV0dXJuIHRoaXM/LmNvbjNEfVxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRfY29udGV4dDNEKGNvbjNEPzogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7dGhpcy5jb24zRCA9IGNvbjNEfVxyXG5cclxuICAgIHByb3RlY3RlZCBzdGF0aWMgY29uMkQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRHx1bmRlZmluZWQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldF9jb250ZXh0MkQoKTogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfHVuZGVmaW5lZCB7cmV0dXJuIHRoaXM/LmNvbjJEfVxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRfY29udGV4dDJEKGNvbjJEPzogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7dGhpcy5jb24yRCA9IGNvbjJEfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbmV3T2JqKGo/OiBKU09OX01hemVPYmpWaWV3fHVuZGVmaW5lZCk6IElfTWF6ZU9ialZpZXcge1xyXG4gICAgICAgIGogPz89IHt9O1xyXG4gICAgICAgIGouY2xuYW1lID8/PSAnQ19NYXplT2JqVmlldyc7XHJcbiAgICAgICAgc3dpdGNoIChqLmNsbmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlIENfTWF6ZU9ialZpZXcgIC5jb25zdHJ1Y3Rvci5uYW1lOiAgICAgcmV0dXJuIG5ldyBDX01hemVPYmpWaWV3KGopO1xyXG4gICAgICAgIH0gXHJcbiAgICAgICAgcmV0dXJuIG5ldyBDX01hemVPYmpWaWV3KGopO1xyXG4gICAgfVxyXG4gICAgcHVibGljIG5ld09iaihqPzogSlNPTl9NYXplT2JqVmlld3x1bmRlZmluZWQpOiBJX01hemVPYmpWaWV3IHtcclxuICAgICAgICByZXR1cm4gQ19NYXplT2JqVmlldy5uZXdPYmooaik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBjbG5hbWU6ICAgIHN0cmluZyA9ICdDX01hemVPYmpWaWV3JztcclxuXHJcbiAgICBwcm90ZWN0ZWQgbXlfb2JqZTogICBJX01hemVPYmpWaWV3fHVuZGVmaW5lZCA9IHVuZGVmaW5lZDsgLy8g6L+35a6u6KGo56S655So44Gu6Kaq44Kq44OW44K444Kn44Kv44OIXHJcblxyXG4gICAgcHJvdGVjdGVkIG15X2xheWVyOiAgbnVtYmVyOyAgICAgIC8vIDJE6KGo56S644Gu5pmC44GuQ1NT44Os44Kk44Ok44O844CC5ZCM5L2N572u44Gu44Kq44OW44K444Kn44Gu5YaF44GT44Gu5YCk44GM5aSn44GN44GE54mp44GM6KGo56S644GV44KM44KLXHJcbiAgICBwcm90ZWN0ZWQgbXlfbGV0dGVyOiBzdHJpbmd8bnVsbDsgLy8gMkTooajnpLrjga7mmYLjga7lhajop5LmloflrZfjgIJudWxs44Gq44KJ6YCP5piOXHJcbiAgICBwcm90ZWN0ZWQgbXlfZGlyOiAgICBUX0RpcmVjdGlvbiA9IFRfRGlyZWN0aW9uLk47IC8vIDJE6KGo56S644Gu5pmC44Gu5pa55ZCRKDA65YyXLCAxOuadsSwgMjrljZcsIDM66KW/KVxyXG5cclxuICAgIHByb3RlY3RlZCBteV9zaG93OiAgIGJvb2xlYW47XHJcbiAgICBwcm90ZWN0ZWQgbXlfcGFkX3Q6ICBudW1iZXI7IC8vIOOCquODluOCuOOCp+OCr+ODiOS4iumDqOOBrumamemWk+OBruWJsuWQiCgwLjAg44GL44KJIDEuMCkgXHJcbiAgICBwcm90ZWN0ZWQgbXlfcGFkX2Q6ICBudW1iZXI7IC8vIOOCquODluOCuOOCp+OCr+ODiOS4i+mDqOOBrumamemWk+OBruWJsuWQiCgwLjAg44GL44KJIDEuMCkgXHJcbiAgICBwcm90ZWN0ZWQgbXlfcGFkX3M6ICBudW1iZXI7IC8vIOOCquODluOCuOOCp+OCr+ODiOWRqOWbsuOBrumamemWk+OBruWJsuWQiCgwLjAg44GL44KJIDEuMCkgXHJcblxyXG4gICAgcHJvdGVjdGVkIG15X2NvbF9mOiAgc3RyaW5nfG51bGw7IC8vIOOCquODluOCuOOCp+OCr+ODiOato+mdouOBrkNTU+OCq+ODqeODvCBcclxuICAgIHByb3RlY3RlZCBteV9jb2xfYjogIHN0cmluZ3xudWxsOyAvLyDjgqrjg5bjgrjjgqfjgq/jg4jmraPpnaLjga5DU1Pjgqvjg6njg7wgXHJcbiAgICBwcm90ZWN0ZWQgbXlfY29sX3M6ICBzdHJpbmd8bnVsbDsgLy8g44Kq44OW44K444Kn44Kv44OI5YG06Z2i44GuQ1NT44Kr44Op44O8IFxyXG4gICAgcHJvdGVjdGVkIG15X2NvbF90OiAgc3RyaW5nfG51bGw7IC8vIOOCquODluOCuOOCp+OCr+ODiOS4iumdouOBrkNTU+OCq+ODqeODvCBcclxuICAgIHByb3RlY3RlZCBteV9jb2xfZDogIHN0cmluZ3xudWxsOyAvLyDjgqrjg5bjgrjjgqfjgq/jg4jlupXpnaLjga5DU1Pjgqvjg6njg7wgXHJcbiAgICBwcm90ZWN0ZWQgbXlfY29sX2w6ICBzdHJpbmd8bnVsbDsgLy8g44Kq44OW44K444Kn44Kv44OI44Gu57ea44GuQ1NT44Kr44Op44O8IFxyXG5cclxuICAgIHByb3RlY3RlZCBteV9jb2xfMjogIHN0cmluZ3xudWxsOyAvLyAyROODnuODg+ODl+OBrumdouOBrkNTU+OCq+ODqeODvCBcclxuICAgIHByb3RlY3RlZCBteV9jb2xfTDogIHN0cmluZ3xudWxsOyAvLyAyROODnuODg+ODl+OBrue3muOBrkNTU+OCq+ODqeODvCBcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3Ioaj86IEpTT05fTWF6ZU9ialZpZXd8dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jbG5hbWUgICAgID0gICdDX01hemVPYmpWaWV3JztcclxuXHJcbiAgICAgICAgdGhpcy5teV9sYXllciAgID0gIC0yO1xyXG4gICAgICAgIHRoaXMubXlfbGV0dGVyICA9ICBudWxsO1xyXG4gICAgICAgIHRoaXMubXlfZGlyICAgICA9ICBUX0RpcmVjdGlvbi5OOyAvLyDmlrnlkJEoMkRwcmUpXHJcblxyXG4gICAgICAgIHRoaXMubXlfcGFkX3QgICA9ICAwLjA7XHJcbiAgICAgICAgdGhpcy5teV9wYWRfZCAgID0gIDAuMDtcclxuICAgICAgICB0aGlzLm15X3BhZF9zICAgPSAgMC4wO1xyXG5cclxuICAgICAgICB0aGlzLm15X3Nob3cgICAgPSAgdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5teV9jb2xfZiAgID0gJyNmOGY4ZjgnOyBcclxuICAgICAgICB0aGlzLm15X2NvbF9iICAgPSAnI2FhYWFhYSc7IFxyXG4gICAgICAgIHRoaXMubXlfY29sX3MgICA9ICcjZGRkZGRkJzsgXHJcbiAgICAgICAgdGhpcy5teV9jb2xfdCAgID0gJyNmZmZmZmYnOyBcclxuICAgICAgICB0aGlzLm15X2NvbF9kICAgPSAnI2NjY2NjYyc7IFxyXG4gICAgICAgIHRoaXMubXlfY29sX2wgICA9ICcjMzMzMzMzJzsgXHJcblxyXG4gICAgICAgIHRoaXMubXlfY29sXzIgICA9ICcjY2NjY2NjJzsgXHJcbiAgICAgICAgdGhpcy5teV9jb2xfTCAgID0gJyM5OTk5ZmYnOyBcclxuXHJcbiAgICAgICAgaWYgKGogIT09IHVuZGVmaW5lZCkgdGhpcy5fX2luaXQoaik7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX19pbml0KGo6IEpTT05fTWF6ZU9ialZpZXd8dW5kZWZpbmVkKTogSV9NYXplT2JqVmlldyB7XHJcbiAgICAgICAgaWYgKGogPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgICAgIGlmIChqLmNsbmFtZSAgIT09IHVuZGVmaW5lZCkgdGhpcy5jbG5hbWUgICAgPSBqLmNsbmFtZTtcclxuICAgICAgICBpZiAoai5sYXllciAgICE9PSB1bmRlZmluZWQpIHRoaXMubXlfbGF5ZXIgID0gai5sYXllcjtcclxuICAgICAgICBpZiAoai5sZXR0ZXIgICE9PSB1bmRlZmluZWQpIHRoaXMubXlfbGV0dGVyID0gai5sZXR0ZXIgIT09ICcnICA/IGoubGV0dGVyIDogbnVsbDsgXHJcbiAgICAgICAgaWYgKGouZGlyICAgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm15X2RpciAgICA9IGouZGlyICAgICE9PSAnJyAgPyBqLmRpciA6IG51bGw7IFxyXG4gICAgICAgIGlmIChqLnBhZF90ICAgIT09IHVuZGVmaW5lZCkgdGhpcy5teV9wYWRfdCAgPSBqLnBhZF90OyBcclxuICAgICAgICBpZiAoai5wYWRfZCAgICE9PSB1bmRlZmluZWQpIHRoaXMubXlfcGFkX2QgID0gai5wYWRfZDsgXHJcbiAgICAgICAgaWYgKGoucGFkX3MgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm15X3BhZF9zICA9IGoucGFkX3M7IFxyXG4gICAgICAgIGlmIChqLnNob3cgICAgIT09IHVuZGVmaW5lZCkgdGhpcy5teV9zaG93ICAgPSBqLnNob3cgICAhPT0gJzAnID8gdHJ1ZSAgICAgOiBmYWxzZTsgXHJcbiAgICAgICAgaWYgKGouY29sX2YgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm15X2NvbF9mICA9IGouY29sX2YgICE9PSAnJyAgPyBqLmNvbF9mICA6IG51bGw7IFxyXG4gICAgICAgIGlmIChqLmNvbF9iICAgIT09IHVuZGVmaW5lZCkgdGhpcy5teV9jb2xfYiAgPSBqLmNvbF9iICAhPT0gJycgID8gai5jb2xfYiAgOiBudWxsOyBcclxuICAgICAgICBpZiAoai5jb2xfcyAgICE9PSB1bmRlZmluZWQpIHRoaXMubXlfY29sX3MgID0gai5jb2xfcyAgIT09ICcnICA/IGouY29sX3MgIDogbnVsbDsgXHJcbiAgICAgICAgaWYgKGouY29sX3QgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm15X2NvbF90ICA9IGouY29sX3QgICE9PSAnJyAgPyBqLmNvbF90ICA6IG51bGw7IFxyXG4gICAgICAgIGlmIChqLmNvbF9kICAgIT09IHVuZGVmaW5lZCkgdGhpcy5teV9jb2xfZCAgPSBqLmNvbF9kICAhPT0gJycgID8gai5jb2xfZCAgOiBudWxsOyBcclxuICAgICAgICBpZiAoai5jb2xfbCAgICE9PSB1bmRlZmluZWQpIHRoaXMubXlfY29sX2wgID0gai5jb2xfbCAgIT09ICcnICA/IGouY29sX2wgIDogbnVsbDsgXHJcbiAgICAgICAgaWYgKGouY29sXzIgICAhPT0gdW5kZWZpbmVkKSB0aGlzLm15X2NvbF8yICA9IGouY29sXzIgICE9PSAnJyAgPyBqLmNvbF8yICA6IG51bGw7IFxyXG4gICAgICAgIGlmIChqLmNvbF9MICAgIT09IHVuZGVmaW5lZCkgdGhpcy5teV9jb2xfTCAgPSBqLmNvbF9MICAhPT0gJycgID8gai5jb2xfTCAgOiBudWxsOyBcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZyZWUoKTp2b2lkIHt9XHJcblxyXG4gICAgcHVibGljIGdldF9vYmplKCk6IElfTWF6ZU9ialZpZXd8dW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5teV9vYmplO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldF9vYmplKG9iamU6IElfTWF6ZU9ialZpZXd8dW5kZWZpbmVkKTogSV9NYXplT2JqVmlld3x1bmRlZmluZWQge1xyXG4gICAgICAgIHRoaXMubXlfb2JqZSA9IG9iamU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXlfb2JqZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbGF5ZXIoKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5teV9sYXllcjt9XHJcbiAgICBwdWJsaWMgc2V0X2xheWVyKGxheWVyOiBudW1iZXIpIHt0aGlzLm15X2xheWVyID0gbGF5ZXJ9XHJcblxyXG4gICAgcHVibGljIGxldHRlcihkaXI6IG51bWJlciA9IDApOiAgc3RyaW5nfG51bGwge3JldHVybiB0aGlzLm15X2xldHRlcn1cclxuICAgIHB1YmxpYyBzZXRfbGV0dGVyKGxldHRlcjogc3RyaW5nfG51bGwpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfbGV0dGVyID0gbGV0dGVyfVxyXG5cclxuICAgIHB1YmxpYyBkaXIoKTogVF9EaXJlY3Rpb24ge3JldHVybiB0aGlzLm15X2Rpcn1cclxuICAgIHB1YmxpYyBzZXRfZGlyKGRpcjogVF9EaXJlY3Rpb24pOiBUX0RpcmVjdGlvbiB7cmV0dXJuIHRoaXMubXlfZGlyID0gZGlyfVxyXG5cclxuICAgIHB1YmxpYyBjYW5TaG93KCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLm15X3Nob3d9O1xyXG4gICAgcHVibGljIHNldFNob3coY2FuX3Nob3c6IGJvb2xlYW4pOiBib29sZWFuIHtyZXR1cm4gdGhpcy5teV9zaG93ID0gY2FuX3Nob3d9O1xyXG5cclxuICAgIHB1YmxpYyBwYWRfdCgpOiAgbnVtYmVyIHtyZXR1cm4gdGhpcy5teV9wYWRfdH1cclxuICAgIHB1YmxpYyBwYWRfZCgpOiAgbnVtYmVyIHtyZXR1cm4gdGhpcy5teV9wYWRfZH1cclxuICAgIHB1YmxpYyBwYWRfcygpOiAgbnVtYmVyIHtyZXR1cm4gdGhpcy5teV9wYWRfc31cclxuICAgIHB1YmxpYyBzZXRfcGFkX3QocGFkX3Q6IG51bWJlcik6IG51bWJlciB7cmV0dXJuIHRoaXMubXlfcGFkX3QgPSB0aGlzLm15X3BhZF9kICsgcGFkX3QgPCAxLjAgPyBwYWRfdCA6IDAuOTkgLSB0aGlzLm15X3BhZF9kfVxyXG4gICAgcHVibGljIHNldF9wYWRfZChwYWRfZDogbnVtYmVyKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5teV9wYWRfZCA9IHRoaXMubXlfcGFkX3QgKyBwYWRfZCA8IDEuMCA/IHBhZF9kIDogMC45OSAtIHRoaXMubXlfcGFkX3R9XHJcbiAgICBwdWJsaWMgc2V0X3BhZF9zKHBhZF9zOiBudW1iZXIpOiBudW1iZXIge3JldHVybiB0aGlzLm15X3BhZF9zID0gcGFkX3N9XHJcblxyXG4gICAgcHVibGljIGNvbF9mKCk6IHN0cmluZ3xudWxsIHtyZXR1cm4gdGhpcy5teV9jb2xfZn0gXHJcbiAgICBwdWJsaWMgY29sX2IoKTogc3RyaW5nfG51bGwge3JldHVybiB0aGlzLm15X2NvbF9ifSBcclxuICAgIHB1YmxpYyBjb2xfcygpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfY29sX3N9IFxyXG4gICAgcHVibGljIGNvbF90KCk6IHN0cmluZ3xudWxsIHtyZXR1cm4gdGhpcy5teV9jb2xfdH0gXHJcbiAgICBwdWJsaWMgY29sX2QoKTogc3RyaW5nfG51bGwge3JldHVybiB0aGlzLm15X2NvbF9kfSBcclxuICAgIHB1YmxpYyBjb2xfbCgpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfY29sX2x9IFxyXG4gICAgcHVibGljIHNldF9jb2xfZihjb2xfZjogc3RyaW5nfG51bGwpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfY29sX2YgPSBjb2xfZn0gXHJcbiAgICBwdWJsaWMgc2V0X2NvbF9iKGNvbF9iOiBzdHJpbmd8bnVsbCk6IHN0cmluZ3xudWxsIHtyZXR1cm4gdGhpcy5teV9jb2xfYiA9IGNvbF9ifSBcclxuICAgIHB1YmxpYyBzZXRfY29sX3MoY29sX3M6IHN0cmluZ3xudWxsKTogc3RyaW5nfG51bGwge3JldHVybiB0aGlzLm15X2NvbF9zID0gY29sX3N9IFxyXG4gICAgcHVibGljIHNldF9jb2xfdChjb2xfdDogc3RyaW5nfG51bGwpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfY29sX3QgPSBjb2xfdH0gXHJcbiAgICBwdWJsaWMgc2V0X2NvbF9kKGNvbF9kOiBzdHJpbmd8bnVsbCk6IHN0cmluZ3xudWxsIHtyZXR1cm4gdGhpcy5teV9jb2xfZCA9IGNvbF9kfSBcclxuICAgIHB1YmxpYyBzZXRfY29sX2woY29sX2w6IHN0cmluZ3xudWxsKTogc3RyaW5nfG51bGwge3JldHVybiB0aGlzLm15X2NvbF9sID0gY29sX2x9IFxyXG5cclxuICAgIHB1YmxpYyBjb2xfMigpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfY29sXzJ9XHJcbiAgICBwdWJsaWMgY29sX0woKTogc3RyaW5nfG51bGwge3JldHVybiB0aGlzLm15X2NvbF9MfVxyXG4gICAgcHVibGljIHNldF9jb2xfMihjb2xfMjogc3RyaW5nfG51bGwpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfY29sXzIgPSBjb2xfMn0gXHJcbiAgICBwdWJsaWMgc2V0X2NvbF9MKGNvbF9MOiBzdHJpbmd8bnVsbCk6IHN0cmluZ3xudWxsIHtyZXR1cm4gdGhpcy5teV9jb2xfTCA9IGNvbF9MfSBcclxuXHJcbiAgICBwdWJsaWMgZHJvdzJEKHJlY3Q6IFRfUmVjdCwgZGlyOiBudW1iZXIgPSAwKTogdm9pZCB7XHJcbiAgICAgICAgZHJvdzJEX2NlbGwocmVjdCwgdGhpcy5jb2xfMigpLCB0aGlzLmNvbF9MKCkgPz8gJyM5OTk5ZmYnKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJvdzNEKGZyb3Q6IFRfV2FsbCwgYmFjazogVF9XYWxsLCBvYmplX2RpcjogVF9EaXJlY3Rpb24gPSBUX0RpcmVjdGlvbi5OLCB0ZWFtX2RpcjogVF9EaXJlY3Rpb24gPSBUX0RpcmVjdGlvbi5OKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kcm93M0Rfb2JqX2JhY2sgICAgICAoZnJvdCwgYmFjayk7XHJcbiAgICAgICAgdGhpcy5kcm93M0Rfb2JqX2Rvd24gICAgICAoZnJvdCwgYmFjayk7XHJcbiAgICAgICAgdGhpcy5kcm93M0Rfb2JqX3RvcCAgICAgICAoZnJvdCwgYmFjayk7XHJcbiAgICAgICAgdGhpcy5kcm93M0Rfb2JqX3JpZ2h0X3NpZGUoZnJvdCwgYmFjayk7XHJcbiAgICAgICAgdGhpcy5kcm93M0Rfb2JqX2xlZnRfc2lkZSAoZnJvdCwgYmFjayk7XHJcbiAgICAgICAgdGhpcy5kcm93M0Rfb2JqX2Zyb250ICAgICAoZnJvdCwgYmFjaywgb2JqZV9kaXIsIHRlYW1fZGlyKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBkcm93M0Rfb2JqX2Rvd24oXHJcbiAgICAgICAgZnJvdDogIFRfV2FsbCwgXHJcbiAgICAgICAgYmFjazogIFRfV2FsbCwgXHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2FuU2hvdygpIHx8IHRoaXMuY29sX3QoKSA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLnBhZF9zKCkgPD0gMC4wICYmIHRoaXMucGFkX3QoKSA+PSAxLjApIHtcclxuICAgICAgICAgICAgZHJvdzNEX2NlbGxfZmxvb3IoZnJvdCwgYmFjaywgdGhpcy5jb2xfdCgpID8/ICcjNjY2NmZmJywgdGhpcy5jb2xfbCgpID8/ICcjOTk5OWZmJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjb25zdCBvID0gX19jYWxjX3BhZGRpbmdfb2JqKHRoaXMsIGZyb3QsIGJhY2spO1xyXG4gICAgICAgIGNvbnN0IHJlY3Q6IFRfUmVjdCA9IHtcclxuICAgICAgICAgICAgdGw6IG8uZmRsLFxyXG4gICAgICAgICAgICB0cjogby5mZHIsXHJcbiAgICAgICAgICAgIGRyOiBvLmJkcixcclxuICAgICAgICAgICAgZGw6IG8uYmRsLFxyXG4gICAgICAgIH1cclxuICAgICAgICBkcm93M0RfY2VsbChyZWN0LCB0aGlzLmNvbF90KCksIHRoaXMuY29sX2woKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGRyb3czRF9vYmpfdG9wKFxyXG4gICAgICAgIGZyb3Q6ICBUX1dhbGwsIFxyXG4gICAgICAgIGJhY2s6ICBUX1dhbGwsIFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhblNob3coKSB8fCB0aGlzLmNvbF9kKCkgPT09IG51bGwpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5wYWRfcygpIDw9IDAuMCAmJiB0aGlzLnBhZF9kKCkgPj0gMS4wKSB7XHJcbiAgICAgICAgICAgIGRyb3czRF9jZWxsX2NlaWxpbmcoZnJvdCwgYmFjaywgdGhpcy5jb2xfZCgpID8/ICcjYWFhYWFhJywgdGhpcy5jb2xfbCgpID8/ICcjOTk5OWZmJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjb25zdCBvID0gX19jYWxjX3BhZGRpbmdfb2JqKHRoaXMsIGZyb3QsIGJhY2spO1xyXG4gICAgICAgIGNvbnN0IHJlY3Q6IFRfUmVjdCA9IHtcclxuICAgICAgICAgICAgdGw6IG8uZnRsLFxyXG4gICAgICAgICAgICB0cjogby5mdHIsXHJcbiAgICAgICAgICAgIGRyOiBvLmJ0cixcclxuICAgICAgICAgICAgZGw6IG8uYnRsLFxyXG4gICAgICAgIH1cclxuICAgICAgICBkcm93M0RfY2VsbChyZWN0LCB0aGlzLmNvbF9kKCksIHRoaXMuY29sX2woKSk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgZHJvdzNEX29ial9mcm9udChcclxuICAgICAgICBmcm90OiAgVF9XYWxsLCBcclxuICAgICAgICBiYWNrOiAgVF9XYWxsLCBcclxuICAgICAgICBvYmplX2RpcjogVF9EaXJlY3Rpb24gPSBUX0RpcmVjdGlvbi5OLFxyXG4gICAgICAgIHRlYW1fZGlyOiBUX0RpcmVjdGlvbiA9IFRfRGlyZWN0aW9uLk4sXHJcbiAgICApOiBUX1JlY3R8dW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2FuU2hvdygpIHx8IHRoaXMuY29sX2YoKSA9PT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IG8gPSBfX2NhbGNfcGFkZGluZ19vYmoodGhpcywgZnJvdCwgYmFjayk7XHJcbiAgICAgICAgY29uc3QgcmVjdDogVF9SZWN0ID0ge1xyXG4gICAgICAgICAgICB0bDogby5mdGwsIFxyXG4gICAgICAgICAgICB0cjogby5mdHIsIFxyXG4gICAgICAgICAgICBkcjogby5mZHIsIFxyXG4gICAgICAgICAgICBkbDogby5mZGwsIFxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGRyb3czRF9jZWxsKHJlY3QsIHRoaXMuY29sX2YoKSwgdGhpcy5jb2xfbCgpKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9kcm93M0RfdGV4dFRPUChcclxuICAgICAgICAgICAgdGhpcy5teV9sZXR0ZXIgPz8gJycsIFxyXG4gICAgICAgICAgICByZWN0LCBcclxuICAgICAgICAgICAgXCIjMzMzMzMzXCIvKnRoaXMuY29sX2YoKSovLCBcclxuICAgICAgICAgICAgXCIjMDAwMDAwXCIvKnRoaXMuY29sX2woKSovXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLl9kcm93M0RfdGV4dEJUTShcclxuICAgICAgICAgICAgcmVsYXRpdmVPcmllbnRhdGlvbkRpcihvYmplX2RpciwgdGVhbV9kaXIpLFxyXG4gICAgICAgICAgICByZWN0LCBcclxuICAgICAgICAgICAgXCIjMzMzMzMzXCIvKnRoaXMuY29sX2YoKSovLCBcclxuICAgICAgICAgICAgXCIjMDAwMDAwXCIvKnRoaXMuY29sX2woKSovXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlY3Q7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgZHJvdzNEX29ial9iYWNrKFxyXG4gICAgICAgIGZyb3Q6ICBUX1dhbGwsIFxyXG4gICAgICAgIGJhY2s6ICBUX1dhbGwsIFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhblNob3coKSB8fCB0aGlzLmNvbF9iKCkgPT09IG51bGwpIHJldHVybjtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IG8gPSBfX2NhbGNfcGFkZGluZ19vYmoodGhpcywgZnJvdCwgYmFjayk7XHJcbiAgICAgICAgY29uc3QgcmVjdDogVF9SZWN0ID0ge1xyXG4gICAgICAgICAgICB0bDogby5idGwsIFxyXG4gICAgICAgICAgICB0cjogby5idHIsIFxyXG4gICAgICAgICAgICBkcjogby5iZHIsIFxyXG4gICAgICAgICAgICBkbDogby5iZGwsIFxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGRyb3czRF9jZWxsKHJlY3QsIHRoaXMuY29sX2IoKSwgdGhpcy5jb2xfbCgpKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBkcm93M0Rfb2JqX2xlZnRfc2lkZShcclxuICAgICAgICBmcm90OiAgVF9XYWxsLCBcclxuICAgICAgICBiYWNrOiAgVF9XYWxsLCBcclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5jYW5TaG93KCkgfHwgdGhpcy5jb2xfcygpID09PSBudWxsKSByZXR1cm47XHJcbiAgICBcclxuICAgICAgICBjb25zdCBvID0gX19jYWxjX3BhZGRpbmdfb2JqKHRoaXMsIGZyb3QsIGJhY2spO1xyXG4gICAgICAgIGNvbnN0IHJlY3Q6IFRfUmVjdCA9IHtcclxuICAgICAgICAgICAgdGw6IG8uYnRsLFxyXG4gICAgICAgICAgICB0cjogby5mdGwsXHJcbiAgICAgICAgICAgIGRyOiBvLmZkbCxcclxuICAgICAgICAgICAgZGw6IG8uYmRsLFxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGRyb3czRF9jZWxsKHJlY3QsIHRoaXMuY29sX3MoKSwgdGhpcy5jb2xfbCgpKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBkcm93M0Rfb2JqX3JpZ2h0X3NpZGUoXHJcbiAgICAgICAgZnJvdDogIFRfV2FsbCwgXHJcbiAgICAgICAgYmFjazogIFRfV2FsbCwgXHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2FuU2hvdygpIHx8IHRoaXMuY29sX3MoKSA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgbyA9IF9fY2FsY19wYWRkaW5nX29iaih0aGlzLCBmcm90LCBiYWNrKTtcclxuICAgICAgICBjb25zdCByZWN0OiBUX1JlY3QgPSB7XHJcbiAgICAgICAgICAgIHRsOiBvLmZ0cixcclxuICAgICAgICAgICAgdHI6IG8uYnRyLFxyXG4gICAgICAgICAgICBkcjogby5iZHIsXHJcbiAgICAgICAgICAgIGRsOiBvLmZkcixcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBkcm93M0RfY2VsbChyZWN0LCB0aGlzLmNvbF9zKCksIHRoaXMuY29sX2woKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9kcm93M0RfdGV4dFRPUCh0ZXh0OiBzdHJpbmcsICAgICAgICByOiBUX1JlY3QsIGZpbGw6IHN0cmluZ3xudWxsLCBsaW5lOiBzdHJpbmd8bnVsbCk6IHZvaWQge31cclxuICAgIHByb3RlY3RlZCBfZHJvdzNEX3RleHRCVE0oZGlyOiAgVF9PcmllbnRhdGlvbiwgcjogVF9SZWN0LCBmaWxsOiBzdHJpbmd8bnVsbCwgbGluZTogc3RyaW5nfG51bGwpOiB2b2lkIHt9XHJcbiAgICBcclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fTWF6ZU9ialZpZXcge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNsbmFtZTogIHRoaXMuY2xuYW1lLFxyXG4gICAgICAgICAgICBsYXllcjogICB0aGlzLm15X2xheWVyLFxyXG4gICAgICAgICAgICBsZXR0ZXI6ICB0aGlzLm15X2xldHRlciA/PyAnJyxcclxuICAgICAgICAgICAgZGlyOiAgICAgdGhpcy5teV9kaXIgPz8gVF9EaXJlY3Rpb24uTiwgLy8g5pa55ZCRKDJEcHJlKVxyXG4gICAgICAgICAgICBwYWRfdDogICB0aGlzLm15X3BhZF90LCBcclxuICAgICAgICAgICAgcGFkX2Q6ICAgdGhpcy5teV9wYWRfZCwgXHJcbiAgICAgICAgICAgIHBhZF9zOiAgIHRoaXMubXlfcGFkX3MsIFxyXG4gICAgICAgICAgICBzaG93OiAgICB0aGlzLmNhblNob3coKSA/ICcxJyA6ICcwJyxcclxuICAgICAgICAgICAgY29sX2Y6ICAgdGhpcy5teV9jb2xfZiA/PyAnJywgIFxyXG4gICAgICAgICAgICBjb2xfYjogICB0aGlzLm15X2NvbF9iID8/ICcnLCAgXHJcbiAgICAgICAgICAgIGNvbF9zOiAgIHRoaXMubXlfY29sX3MgPz8gJycsIFxyXG4gICAgICAgICAgICBjb2xfdDogICB0aGlzLm15X2NvbF90ID8/ICcnLCBcclxuICAgICAgICAgICAgY29sX2Q6ICAgdGhpcy5teV9jb2xfZCA/PyAnJywgXHJcbiAgICAgICAgICAgIGNvbF9sOiAgIHRoaXMubXlfY29sX2wgPz8gJycsIFxyXG4gICAgICAgICAgICBjb2xfMjogICB0aGlzLm15X2NvbF8yID8/ICcnLCBcclxuICAgICAgICAgICAgY29sX0w6ICAgdGhpcy5teV9jb2xfTCA/PyAnJywgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGRlY29kZShqOiBKU09OX01hemVPYmpWaWV3fHVuZGVmaW5lZCk6IElfTWF6ZU9ialZpZXcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9faW5pdChqKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZGVjb2RlKGo6IEpTT05fTWF6ZU9ialZpZXd8dW5kZWZpbmVkKTogSV9NYXplT2JqVmlldyB7XHJcbiAgICAgICAgcmV0dXJuIENfTWF6ZU9ialZpZXcubmV3T2JqKGopO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIF9fY2FsY19wYWRkaW5nX29iaihcclxuICAgIG9iajogICBJX01hemVPYmpWaWV3LFxyXG4gICAgZnJvdDogIFRfV2FsbCwgXHJcbiAgICBiYWNrOiAgVF9XYWxsLCBcclxuKToge1xyXG4gICAgLy8g6K2Y5Yil5a2Q44Gu5oSP5ZGzXHJcbiAgICAvLyDlt6bnq6/vvJrliY3lvozjga7ljLrliKXjgIBmOuWJjemdouOAgGI66IOM6Z2iXHJcbiAgICAvLyDkuK3lpK7vvJrkuIrkuIvjga7ljLrliKXjgIB0OuS4iui+uuOAgGQ65LiL6L66XHJcbiAgICAvLyDlj7Pnq6/vvJrlt6blj7Pjga7ljLrliKXjgIBsOuW3puWBtOOAgHI65Y+z5YG0XHJcbiAgICBmdGw6VF94eSwgZnRyOlRfeHksIGZkcjpUX3h5LCBmZGw6VF94eSwgXHJcbiAgICBidGw6VF94eSwgYnRyOlRfeHksIGJkcjpUX3h5LCBiZGw6VF94eSwgXHJcbn0ge1xyXG4gICAgY29uc3QgcmVjdF9mcm90ID0gZnJvdDtcclxuICAgIGNvbnN0IHJlY3RfYmFjayA9IGJhY2s7XHJcblxyXG4gICAgY29uc3QgcmF0aW9fWCAgID0gb2JqLnBhZF9zKCkgLyAyLjA7XHJcbiAgICBjb25zdCByYXRpb19UICAgPSBvYmoucGFkX3QoKTtcclxuICAgIGNvbnN0IHJhdGlvX0QgICA9IG9iai5wYWRfZCgpO1xyXG5cclxuICAgIGNvbnN0IGZyb3RfcGFkX1ggID0gTWF0aC5hYnMocmVjdF9mcm90Lm1heF94IC0gcmVjdF9mcm90Lm1pbl94KSAqIHJhdGlvX1g7XHJcbiAgICBjb25zdCBiYWNrX3BhZF9YICA9IE1hdGguYWJzKHJlY3RfYmFjay5tYXhfeCAtIHJlY3RfYmFjay5taW5feCkgKiByYXRpb19YO1xyXG5cclxuICAgIGNvbnN0IGZyb3RfcGFkX1QgID0gTWF0aC5hYnMocmVjdF9mcm90Lm1heF95IC0gcmVjdF9mcm90Lm1pbl95KSAqIHJhdGlvX1Q7XHJcbiAgICBjb25zdCBiYWNrX3BhZF9UICA9IE1hdGguYWJzKHJlY3RfYmFjay5tYXhfeSAtIHJlY3RfYmFjay5taW5feSkgKiByYXRpb19UO1xyXG5cclxuICAgIGNvbnN0IGZyb3RfcGFkX0QgID0gTWF0aC5hYnMocmVjdF9mcm90Lm1heF95IC0gcmVjdF9mcm90Lm1pbl95KSAqIHJhdGlvX0Q7XHJcbiAgICBjb25zdCBiYWNrX3BhZF9EICA9IE1hdGguYWJzKHJlY3RfYmFjay5tYXhfeSAtIHJlY3RfYmFjay5taW5feSkgKiByYXRpb19EO1xyXG5cclxuICAgIC8vIOODkeODh+OCo+ODs+OCsOioreWumuW+jOOBrlhZ5bqn5qiZ44KS6KiI566X44GZ44KL44Gf44KB44GrXHJcbiAgICAvLyDlv4XopoHjgarnt5rliIbjga7kvY3nva7msbrjgoHjgpLjgZnjgotcclxuICAgIGNvbnN0IGZyb3RfdG9wX2xmdCA9IHt4OiByZWN0X2Zyb3QubWluX3ggKyBmcm90X3BhZF9YLCB5OiByZWN0X2Zyb3QubWluX3kgKyBmcm90X3BhZF9UfVxyXG4gICAgY29uc3QgZnJvdF90b3Bfcmd0ID0ge3g6IHJlY3RfZnJvdC5tYXhfeCAtIGZyb3RfcGFkX1gsIHk6IHJlY3RfZnJvdC5taW5feSArIGZyb3RfcGFkX1R9XHJcbiAgICBjb25zdCBmcm90X2R3bl9sZnQgPSB7eDogcmVjdF9mcm90Lm1pbl94ICsgZnJvdF9wYWRfWCwgeTogcmVjdF9mcm90Lm1heF95IC0gZnJvdF9wYWRfRH1cclxuICAgIGNvbnN0IGZyb3RfZHduX3JndCA9IHt4OiByZWN0X2Zyb3QubWF4X3ggLSBmcm90X3BhZF9YLCB5OiByZWN0X2Zyb3QubWF4X3kgLSBmcm90X3BhZF9EfVxyXG5cclxuICAgIGNvbnN0IGJhY2tfdG9wX2xmdCA9IHt4OiByZWN0X2JhY2subWluX3ggKyBiYWNrX3BhZF9YLCB5OiByZWN0X2JhY2subWluX3kgKyBiYWNrX3BhZF9UfVxyXG4gICAgY29uc3QgYmFja190b3Bfcmd0ID0ge3g6IHJlY3RfYmFjay5tYXhfeCAtIGJhY2tfcGFkX1gsIHk6IHJlY3RfYmFjay5taW5feSArIGJhY2tfcGFkX1R9XHJcbiAgICBjb25zdCBiYWNrX2R3bl9sZnQgPSB7eDogcmVjdF9iYWNrLm1pbl94ICsgYmFja19wYWRfWCwgeTogcmVjdF9iYWNrLm1heF95IC0gYmFja19wYWRfRH1cclxuICAgIGNvbnN0IGJhY2tfZHduX3JndCA9IHt4OiByZWN0X2JhY2subWF4X3ggLSBiYWNrX3BhZF9YLCB5OiByZWN0X2JhY2subWF4X3kgLSBiYWNrX3BhZF9EfVxyXG5cclxuICAgIGxldCBmdGwgPSBfX2NhbGNfcGFkZGluZ194eShmcm90X3RvcF9sZnQsIGJhY2tfdG9wX2xmdCwgcmF0aW9fWCk7XHJcbiAgICBsZXQgZnRyID0gX19jYWxjX3BhZGRpbmdfeHkoZnJvdF90b3Bfcmd0LCBiYWNrX3RvcF9yZ3QsIHJhdGlvX1gpO1xyXG4gICAgbGV0IGZkbCA9IF9fY2FsY19wYWRkaW5nX3h5KGZyb3RfZHduX2xmdCwgYmFja19kd25fbGZ0LCByYXRpb19YKTtcclxuICAgIGxldCBmZHIgPSBfX2NhbGNfcGFkZGluZ194eShmcm90X2R3bl9yZ3QsIGJhY2tfZHduX3JndCwgcmF0aW9fWCk7XHJcblxyXG4gICAgbGV0IGJ0bCA9IF9fY2FsY19wYWRkaW5nX3h5KGJhY2tfdG9wX2xmdCwgZnJvdF90b3BfbGZ0LCByYXRpb19YKTtcclxuICAgIGxldCBidHIgPSBfX2NhbGNfcGFkZGluZ194eShiYWNrX3RvcF9yZ3QsIGZyb3RfdG9wX3JndCwgcmF0aW9fWCk7XHJcbiAgICBsZXQgYmRsID0gX19jYWxjX3BhZGRpbmdfeHkoYmFja19kd25fbGZ0LCBmcm90X2R3bl9sZnQsIHJhdGlvX1gpO1xyXG4gICAgbGV0IGJkciA9IF9fY2FsY19wYWRkaW5nX3h5KGJhY2tfZHduX3JndCwgZnJvdF9kd25fcmd0LCByYXRpb19YKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGZ0bDogZnRsLCBmdHI6IGZ0cixcclxuICAgICAgICBmZGw6IGZkbCwgZmRyOiBmZHIsXHJcbiAgICAgICAgYnRsOiBidGwsIGJ0cjogYnRyLFxyXG4gICAgICAgIGJkbDogYmRsLCBiZHI6IGJkcixcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBfX2NhbGNfcGFkZGluZ194eShmcm90OiBUX3h5LCBiYWNrOiBUX3h5LCByYXRpbzogbnVtYmVyKTogVF94eSB7XHJcbiAgICAgICAgLy8g57ea5YiGKEF4ICsgQiA9IHkp44Gu5pa556iL5byP44Gu5L+C5pWw44KS5rGC44KB44KLXHJcbiAgICAgICAgY29uc3QgQSA9IChmcm90LnkgLSBiYWNrLnkpIC8gKGZyb3QueCAtIGJhY2sueCk7XHJcbiAgICAgICAgY29uc3QgQiA9ICBmcm90LnkgLSBBICogZnJvdC54O1xyXG4gICAgXHJcbiAgICAgICAgLy8g44OR44OH44Kj44Oz44Kw6Kq/5pW05b6M44GuWFnluqfmqJnjga7oqIjnrpdcclxuICAgICAgICBjb25zdCBwX2Zyb3RfeCA9IGZyb3QueCArIChiYWNrLnggLSBmcm90LngpICogcmF0aW87XHJcbiAgICAgICAgY29uc3QgcF9mcm90X3kgPSBBICogcF9mcm90X3ggKyBCO1xyXG5cclxuICAgICAgICByZXR1cm4ge3g6IHBfZnJvdF94LCB5OiBwX2Zyb3RfeX07XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBkcm93M0RfY2VsbF9mbG9vcihcclxuICAgICAgICByZWN0X2Zyb3Q6IFRfV2FsbCwgXHJcbiAgICAgICAgcmVjdF9iYWNrOiBUX1dhbGwsIFxyXG4gICAgICAgIGZpbGw6IHN0cmluZyA9ICcjNjY2NmZmJywgXHJcbiAgICAgICAgbGluZTogc3RyaW5nID0gJyM5OTk5ZmYnXHJcbiAgICApOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCByZWN0OiBUX1JlY3QgPSB7XHJcbiAgICAgICAgdGw6IHt4OiByZWN0X2Zyb3QubWluX3gsIHk6IHJlY3RfZnJvdC5tYXhfeX0sXHJcbiAgICAgICAgdHI6IHt4OiByZWN0X2Zyb3QubWF4X3gsIHk6IHJlY3RfZnJvdC5tYXhfeX0sXHJcbiAgICAgICAgZHI6IHt4OiByZWN0X2JhY2subWF4X3gsIHk6IHJlY3RfYmFjay5tYXhfeX0sXHJcbiAgICAgICAgZGw6IHt4OiByZWN0X2JhY2subWluX3gsIHk6IHJlY3RfYmFjay5tYXhfeX1cclxuICAgIH1cclxuICAgIGRyb3czRF9jZWxsKHJlY3QsIGZpbGwsIGxpbmUpO1xyXG59XHJcbmZ1bmN0aW9uIGRyb3czRF9jZWxsX2NlaWxpbmcoXHJcbiAgICAgICAgcmVjdF9mcm90OiBUX1dhbGwsIFxyXG4gICAgICAgIHJlY3RfYmFjazogVF9XYWxsLCBcclxuICAgICAgICBmaWxsOiBzdHJpbmcgPSAnI2FhYWFhYScsIFxyXG4gICAgICAgIGxpbmU6IHN0cmluZyA9ICcjOTk5OWZmJ1xyXG4gICAgKTogdm9pZCB7XHJcblxyXG4gICAgY29uc3QgcmVjdDogVF9SZWN0ID0ge1xyXG4gICAgICAgIHRsOiB7eDogcmVjdF9mcm90Lm1pbl94LCB5OiByZWN0X2Zyb3QubWluX3l9LFxyXG4gICAgICAgIHRyOiB7eDogcmVjdF9mcm90Lm1heF94LCB5OiByZWN0X2Zyb3QubWluX3l9LFxyXG4gICAgICAgIGRyOiB7eDogcmVjdF9iYWNrLm1heF94LCB5OiByZWN0X2JhY2subWluX3l9LFxyXG4gICAgICAgIGRsOiB7eDogcmVjdF9iYWNrLm1pbl94LCB5OiByZWN0X2JhY2subWluX3l9XHJcbiAgICB9XHJcbiAgICBkcm93M0RfY2VsbChyZWN0LCBmaWxsLCBsaW5lKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJvdzJEX2NlbGwocjogVF9SZWN0LCBmaWxsOiBzdHJpbmd8bnVsbCwgbGluZTogc3RyaW5nfG51bGwpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbiA9IENfTWF6ZU9ialZpZXcuZ2V0X2NvbnRleHQyRCgpOyAgIC8vISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhXHJcbiAgICBpZiAoY29uID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICBjb24uYmVnaW5QYXRoKCk7XHJcbiAgICBjb24ubW92ZVRvKHIudGwueCwgci50bC55KTtcclxuICAgIGNvbi5saW5lVG8oci50ci54LCByLnRyLnkpO1xyXG4gICAgY29uLmxpbmVUbyhyLmRyLngsIHIuZHIueSk7XHJcbiAgICBjb24ubGluZVRvKHIuZGwueCwgci5kbC55KTtcclxuICAgIGNvbi5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICBpZiAoZmlsbCAhPSBudWxsKSB7XHJcbiAgICAgICAgY29uLmZpbGxTdHlsZSAgID0gZmlsbDtcclxuICAgICAgICBjb24uZmlsbCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICBjb24uc3Ryb2tlU3R5bGUgPSBsaW5lO1xyXG4gICAgICAgIGNvbi5saW5lV2lkdGggICA9IDE7XHJcbiAgICAgICAgY29uLnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcm93M0RfY2VsbChyOiBUX1JlY3QsIGZpbGw6IHN0cmluZ3xudWxsLCBsaW5lOiBzdHJpbmd8bnVsbCk6IHZvaWQge1xyXG4gICAgY29uc3QgY29uID0gQ19NYXplT2JqVmlldy5nZXRfY29udGV4dDNEKCk7XHJcbiAgICBpZiAoY29uID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICBjb24uYmVnaW5QYXRoKCk7XHJcbiAgICBjb24ubW92ZVRvKHIudGwueCwgci50bC55KTtcclxuICAgIGNvbi5saW5lVG8oci50ci54LCByLnRyLnkpO1xyXG4gICAgY29uLmxpbmVUbyhyLmRyLngsIHIuZHIueSk7XHJcbiAgICBjb24ubGluZVRvKHIuZGwueCwgci5kbC55KTtcclxuICAgIGNvbi5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICBpZiAoZmlsbCAhPSBudWxsKSB7XHJcbiAgICAgICAgY29uLmZpbGxTdHlsZSAgID0gZmlsbDtcclxuICAgICAgICBjb24uZmlsbCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICBjb24uc3Ryb2tlU3R5bGUgPSBsaW5lO1xyXG4gICAgICAgIGNvbi5saW5lV2lkdGggICA9IDE7XHJcbiAgICAgICAgY29uLnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IENfTWF6ZU9ialZpZXcsIElfTWF6ZU9ialZpZXcsIEpTT05fTWF6ZU9ialZpZXcgfSBmcm9tIFwiLi9DX01hemVPYmpWaWV3XCI7XHJcbmltcG9ydCB7IElfQWJzdHJhY3QsIEpTT05fQW55IH0gZnJvbSBcIi4vQ19TYXZlSW5mb1wiO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9NYXplT2JqVmlldzJYIGV4dGVuZHMgSV9BYnN0cmFjdCB7XHJcbiAgICBmcmVlOiAgICAoKT0+dm9pZDtcclxuICAgIC8vIOihqOekuumWouS/gigyRHByZSkuL0NfV2FsbFxyXG4gICAgbGF5ZXI6ICAgKCk9Pm51bWJlcjtcclxuICAgIGxldHRlcjogIChkaXI6IG51bWJlcik9PnN0cmluZ3xudWxsOyAvLyBudWxsOiDopovjgYjjgarjgYTjgIHkvZXjgoLjgarjgYRcclxuXHJcbiAgICAvLyDooajnpLrplqLkv4IoM0QpXHJcbiAgICBjYW5TaG93OiAoKT0+Ym9vbGVhbjtcclxuICAgIGRyb3cyWDogIChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRHxudWxsLCByZWN0OiBUX1JlY3QsIGRpcjogbnVtYmVyKT0+dm9pZDtcclxuXHJcbiAgICBjb2xfMjogICAoKT0+c3RyaW5nfG51bGw7IC8vMkTjg57jg4Pjg5fjga7oibIoQ1NT44Kr44Op44O8KVxyXG4gICAgY29sX0w6ICAgKCk9PnN0cmluZ3xudWxsOyAvLzJE44Oe44OD44OX44Gu57ea44Gu6ImyKENTU+OCq+ODqeODvClcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX01hemVPYmpWaWV3MlggZXh0ZW5kcyBKU09OX01hemVPYmpWaWV3IHtcclxuICAgIGNsbmFtZT86IHN0cmluZyxcclxuICAgIGxheWVyPzogIG51bWJlcixcclxuICAgIGxldHRlcj86IHN0cmluZyxcclxuICAgIHNob3c/OiAgIHN0cmluZyxcclxuICAgIGNvbF8yPzogIHN0cmluZ3xudWxsLCAvLyAyROODnuODg+ODl+OBrumdouOBrkNTU+OCq+ODqeODvFxyXG4gICAgY29sX0w/OiAgc3RyaW5nfG51bGwsIC8vIDJE44Oe44OD44OX44Gu57ea44GuQ1NT44Kr44Op44O8XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFRfeHkgICA9IHt4OiBudW1iZXIsIHk6IG51bWJlcn1cclxuZXhwb3J0IHR5cGUgVF9SZWN0ID0ge3RsOiBUX3h5LCB0cjogVF94eSwgZGw6IFRfeHksIGRyOiBUX3h5fTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDX01hemVPYmpWaWV3MlggaW1wbGVtZW50cyBJX01hemVPYmpWaWV3Mlgge1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBjdHgyWDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfHVuZGVmaW5lZDtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG5ld09iaihqPzogSlNPTl9NYXplT2JqVmlldzJYfHVuZGVmaW5lZCk6IElfTWF6ZU9ialZpZXcyWCB7XHJcbiAgICAgICAgaiA/Pz0ge307XHJcbiAgICAgICAgai5jbG5hbWUgPz89ICdDX01hemVPYmpWaWV3MlgnO1xyXG4gICAgICAgIHN3aXRjaCAoai5jbG5hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSBDX01hemVPYmpWaWV3MlguY29uc3RydWN0b3IubmFtZTogICAgIHJldHVybiBuZXcgQ19NYXplT2JqVmlldzJYKGopO1xyXG4gICAgICAgIH0gXHJcbiAgICAgICAgcmV0dXJuIG5ldyBDX01hemVPYmpWaWV3Mlgoaik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbmV3T2JqKGo/OiBKU09OX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkKTogSV9NYXplT2JqVmlldzJYIHtcclxuICAgICAgICByZXR1cm4gQ19NYXplT2JqVmlldzJYLm5ld09iaihqKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIGNsbmFtZTogICAgc3RyaW5nID0gJ0NfTWF6ZU9ialZpZXcyWCc7XHJcblxyXG4gICAgcHJvdGVjdGVkIG15X2xheWVyOiAgbnVtYmVyOyAgICAgIC8vIDJE6KGo56S644Gu5pmC44GuQ1NT44Os44Kk44Ok44O844CC5ZCM5L2N572u44Gu44Kq44OW44K444Kn44Gu5YaF44GT44Gu5YCk44GM5aSn44GN44GE54mp44GM6KGo56S644GV44KM44KLXHJcbiAgICBwcm90ZWN0ZWQgbXlfbGV0dGVyOiBzdHJpbmd8bnVsbDsgLy8gMkTooajnpLrjga7mmYLjga7lhajop5LmloflrZfjgIJudWxs44Gq44KJ6YCP5piOXHJcblxyXG4gICAgcHJvdGVjdGVkIG15X3Nob3c6ICAgYm9vbGVhbjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgbXlfY29sXzI6ICBzdHJpbmd8bnVsbDsgLy8gMkTjg57jg4Pjg5fjga7pnaLjga5DU1Pjgqvjg6njg7wgXHJcbiAgICBwcm90ZWN0ZWQgbXlfY29sX0w6ICBzdHJpbmd8bnVsbDsgLy8gMkTjg57jg4Pjg5fjga7nt5rjga5DU1Pjgqvjg6njg7wgXHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jbG5hbWUgICAgID0gICdDX01hemVPYmpWaWV3MlgnO1xyXG5cclxuICAgICAgICB0aGlzLm15X2xheWVyICAgPSAgLTI7XHJcbiAgICAgICAgdGhpcy5teV9sZXR0ZXIgID0gIG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMubXlfc2hvdyAgICA9ICB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLm15X2NvbF8yICAgPSAnI2NjY2NjYyc7IFxyXG4gICAgICAgIHRoaXMubXlfY29sX0wgICA9ICcjOTk5OWZmJzsgXHJcblxyXG4gICAgICAgIGlmIChqICE9PSB1bmRlZmluZWQpIHRoaXMuX19pbml0KGopO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9faW5pdChqOiBKU09OX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkKTogSV9NYXplT2JqVmlldzJYIHtcclxuICAgICAgICBpZiAoaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKGouY2xuYW1lICAhPT0gdW5kZWZpbmVkKSB0aGlzLmNsbmFtZSAgICA9IGouY2xuYW1lO1xyXG4gICAgICAgIGlmIChqLmxheWVyICAgIT09IHVuZGVmaW5lZCkgdGhpcy5teV9sYXllciAgPSBqLmxheWVyO1xyXG4gICAgICAgIGlmIChqLmxldHRlciAgIT09IHVuZGVmaW5lZCkgdGhpcy5teV9sZXR0ZXIgPSBqLmxldHRlciAhPT0gJycgID8gai5sZXR0ZXIgOiBudWxsOyBcclxuICAgICAgICBpZiAoai5zaG93ICAgICE9PSB1bmRlZmluZWQpIHRoaXMubXlfc2hvdyAgID0gai5zaG93ICAgIT09ICcwJyA/IHRydWUgICAgIDogZmFsc2U7IFxyXG4gICAgICAgIGlmIChqLmNvbF8yICAgIT09IHVuZGVmaW5lZCkgdGhpcy5teV9jb2xfMiAgPSBqLmNvbF8yICAhPT0gJycgID8gai5jb2xfMiAgOiBudWxsOyBcclxuICAgICAgICBpZiAoai5jb2xfTCAgICE9PSB1bmRlZmluZWQpIHRoaXMubXlfY29sX0wgID0gai5jb2xfTCAgIT09ICcnICA/IGouY29sX0wgIDogbnVsbDsgXHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmcmVlKCk6IHZvaWQge31cclxuXHJcbiAgICBwdWJsaWMgbGF5ZXIoKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5teV9sYXllcjt9XHJcbiAgICBwdWJsaWMgc2V0X2xheWVyKGxheWVyOiBudW1iZXIpIHt0aGlzLm15X2xheWVyID0gbGF5ZXJ9XHJcblxyXG4gICAgcHVibGljIGxldHRlcihkaXI6IG51bWJlciA9IDApOiAgc3RyaW5nfG51bGwge3JldHVybiB0aGlzLm15X2xldHRlcn1cclxuICAgIHB1YmxpYyBzZXRfbGV0dGVyKGxldHRlcjogc3RyaW5nfG51bGwpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfbGV0dGVyID0gbGV0dGVyfVxyXG5cclxuICAgIHB1YmxpYyBjYW5TaG93KCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLm15X3Nob3d9O1xyXG4gICAgcHVibGljIHNldFNob3coY2FuX3Nob3c6IGJvb2xlYW4pOiBib29sZWFuIHtyZXR1cm4gdGhpcy5teV9zaG93ID0gY2FuX3Nob3d9O1xyXG5cclxuICAgIHB1YmxpYyBjb2xfMigpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfY29sXzJ9XHJcbiAgICBwdWJsaWMgY29sX0woKTogc3RyaW5nfG51bGwge3JldHVybiB0aGlzLm15X2NvbF9MfVxyXG4gICAgcHVibGljIHNldF9jb2xfMihjb2xfMjogc3RyaW5nfG51bGwpOiBzdHJpbmd8bnVsbCB7cmV0dXJuIHRoaXMubXlfY29sXzIgPSBjb2xfMn0gXHJcbiAgICBwdWJsaWMgc2V0X2NvbF9MKGNvbF9MOiBzdHJpbmd8bnVsbCk6IHN0cmluZ3xudWxsIHtyZXR1cm4gdGhpcy5teV9jb2xfTCA9IGNvbF9MfSBcclxuXHJcbiAgICBwdWJsaWMgZHJvdzJYKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfG51bGwsIHJlY3Q6IFRfUmVjdCwgZGlyOiBudW1iZXIgPSAwKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGN0eCA9PT0gdW5kZWZpbmVkIHx8IGN0eCA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgIGRyb3cyWF9jZWxsKGN0eCwgcmVjdCwgdGhpcy5jb2xfMigpLCB0aGlzLmNvbF9MKCkgPz8gJyM5OTk5ZmYnKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fTWF6ZU9ialZpZXcyWCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2xuYW1lOiAgdGhpcy5jbG5hbWUsXHJcbiAgICAgICAgICAgIGxheWVyOiAgIHRoaXMubXlfbGF5ZXIsXHJcbiAgICAgICAgICAgIGxldHRlcjogIHRoaXMubXlfbGV0dGVyID8/ICcnLFxyXG4gICAgICAgICAgICBzaG93OiAgICB0aGlzLmNhblNob3coKSA/ICcxJyA6ICcwJyxcclxuICAgICAgICAgICAgY29sXzI6ICAgdGhpcy5teV9jb2xfMiA/PyAnJywgXHJcbiAgICAgICAgICAgIGNvbF9MOiAgIHRoaXMubXlfY29sX0wgPz8gJycsIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBkZWNvZGUoajogSlNPTl9NYXplT2JqVmlldzJYfHVuZGVmaW5lZCk6IElfTWF6ZU9ialZpZXcyWCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX19pbml0KGopO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBkZWNvZGUoajogSlNPTl9NYXplT2JqVmlldzJYfHVuZGVmaW5lZCk6IElfTWF6ZU9ialZpZXcyWCB7XHJcbiAgICAgICAgcmV0dXJuIENfTWF6ZU9ialZpZXcyWC5uZXdPYmooaik7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBkcm93MlhfY2VsbChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRHxudWxsLCByOiBUX1JlY3QsIGZpbGw6IHN0cmluZ3xudWxsLCBsaW5lOiBzdHJpbmd8bnVsbCk6IHZvaWQge1xyXG4gICAgaWYgKGN0eCA9PT0gdW5kZWZpbmVkIHx8IGN0eCA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5tb3ZlVG8oci50bC54LCByLnRsLnkpO1xyXG4gICAgY3R4LmxpbmVUbyhyLnRyLngsIHIudHIueSk7XHJcbiAgICBjdHgubGluZVRvKHIuZHIueCwgci5kci55KTtcclxuICAgIGN0eC5saW5lVG8oci5kbC54LCByLmRsLnkpO1xyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG5cclxuICAgIGlmIChmaWxsICE9IG51bGwpIHtcclxuICAgICAgICBjdHguZmlsbFN0eWxlICAgPSBmaWxsO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICB9XHJcbiAgICBpZiAobGluZSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxpbmU7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCAgID0gMTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBDX0xvY2F0aW9uLCBKU09OX0xvY2F0aW9uLCBUX0xja2QgfSBmcm9tIFwiLi9DX0xvY2F0aW9uXCI7XHJcbmltcG9ydCB7IElfSlNPTl9VbmlxIH0gICAgICAgICAgICAgICBmcm9tIFwiLi9DX1NhdmVJbmZvXCI7XHJcbmltcG9ydCB7IF9nZXRfdXVpZCB9ICAgICAgICAgICAgICAgICBmcm9tIFwiLi4vZF91dGwvRl9SYW5kXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fTW92YWJsZVBvaW50IGV4dGVuZHMgSlNPTl9Mb2NhdGlvbiB7XHJcbiAgICB1bmlxX2lkPzogIHN0cmluZyxcclxuICAgIGN1cl91cmw/OiAgc3RyaW5nLFxyXG4gICAgdGVhbV91aWQ/OiBzdHJpbmcsXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxlcnRfbXZwdF9pbmZvKGE6IEpTT05fTW92YWJsZVBvaW50fHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgYWxlcnQoXCJNdlB0IEluZm86XCIgXHJcbiAgICAgICAgKyBcIlxcbnVuaXFfaWQ6ICBcIiAgKyAoYS51bmlxX2lkICAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxuY3VyX3VybDogIFwiICArIChhLmN1cl91cmwgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG50ZWFtX3VpZDogXCIgICsgKGEudGVhbV91aWQgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmxja2Q6IFwiICAgICAgKyAoYS5raW5kICAgICAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxubGNubTogXCIgICAgICArIChhLm5hbWUgICAgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5sY2lkOiBcIiAgICAgICsgKGEubG9jX3VpZCAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmN1cl94OiBcIiAgICAgKyAoYS5sb2NfcG9zPy54ID8/ICc/JylcclxuICAgICAgICArIFwiXFxuY3VyX3k6IFwiICAgICArIChhLmxvY19wb3M/LnkgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5jdXJfejogXCIgICAgICsgKGEubG9jX3Bvcz8ueiA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmN1cl9kOiBcIiAgICAgKyAoYS5sb2NfcG9zPy5kID8/ICc/JylcclxuICAgICAgICArIFwiXFxuXCJcclxuICAgICk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ19Nb3ZhYmxlUG9pbnQgZXh0ZW5kcyBDX0xvY2F0aW9uIGltcGxlbWVudHMgSV9KU09OX1VuaXEge1xyXG4gICAgcHJvdGVjdGVkIHVuaXFfaWQ6ICBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgY3VyX3VybDogIHN0cmluZztcclxuICAgIHByb3RlY3RlZCB0ZWFtX3VpZDogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihqc29uPzogSlNPTl9Nb3ZhYmxlUG9pbnQpIHtcclxuICAgICAgICBzdXBlcihqc29uKTtcclxuICAgICAgICB0aGlzLmxvY19raW5kID0gVF9MY2tkLk1hemU7XHJcblxyXG4gICAgICAgIHRoaXMudW5pcV9pZCAgPSAnTXZQb2ludCMnICsgX2dldF91dWlkKCk7XHJcbiAgICAgICAgdGhpcy5jdXJfdXJsICA9ICcnO1xyXG4gICAgICAgIHRoaXMudGVhbV91aWQgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGlmIChqc29uICE9PSB1bmRlZmluZWQgJiYganNvbiAhPT0gbnVsbCkgdGhpcy5fX2luaXQoanNvbik7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX19pbml0KGo/OiBKU09OX01vdmFibGVQb2ludCk6IENfTW92YWJsZVBvaW50IHtcclxuICAgICAgICBzdXBlci5fX2luaXQoaik7XHJcbiAgICAgICAgaWYgKGogPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgaWYgKGoudW5pcV9pZCAgIT09IHVuZGVmaW5lZCkgdGhpcy51bmlxX2lkICA9IGoudW5pcV9pZDtcclxuICAgICAgICBpZiAoai5jdXJfdXJsICAhPT0gdW5kZWZpbmVkKSB0aGlzLmN1cl91cmwgID0gai5jdXJfdXJsO1xyXG4gICAgICAgIGlmIChqLnRlYW1fdWlkICE9PSB1bmRlZmluZWQpIHRoaXMudGVhbV91aWQgPSBqLnRlYW1fdWlkO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50ZWFtX3VpZCA9PT0gJycpIHRoaXMudGVhbV91aWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyB1aWQoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMudW5pcV9pZH1cclxuICAgIHB1YmxpYyB1cmwoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuY3VyX3VybH1cclxuICAgIHB1YmxpYyB0aWQoKTogc3RyaW5nfHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLnRlYW1fdWlkfVxyXG5cclxuICAgIHB1YmxpYyBuZXdfdWlkKCk6IHZvaWQge3RoaXMudW5pcV9pZCA9ICdNdlBvaW50IycgKyBfZ2V0X3V1aWQoKTt9XHJcbiAgICBwdWJsaWMgc2V0X3VybCh1cmw6IHN0cmluZyk6IHZvaWQgeyB0aGlzLmN1cl91cmwgID0gdXJsO31cclxuICAgIHB1YmxpYyBzZXRfdGlkKHRpZDogc3RyaW5nKTogdm9pZCB7IHRoaXMudGVhbV91aWQgPSB0aWQ7fVxyXG5cclxuICAgIHB1YmxpYyBjbG9uZSgpOiBDX01vdmFibGVQb2ludCB7XHJcbiAgICAgICAgY29uc3QgbXZwdCA9IG5ldyBDX01vdmFibGVQb2ludCh0aGlzLmVuY29kZSgpKTtcclxuICAgICAgICBtdnB0Lm5ld191aWQoKTtcclxuICAgICAgICByZXR1cm4gbXZwdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnJvbUpTT04odHh0OiBzdHJpbmcpOiBDX01vdmFibGVQb2ludCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgaiA9IEpTT04ucGFyc2UodHh0KSBhcyBKU09OX01vdmFibGVQb2ludDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKGopO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHRvSlNPTigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmVuY29kZSgpLCBudWxsLCBcIlxcdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21fb2JqX3RvX3N0cmluZyhvYTogQ19Nb3ZhYmxlUG9pbnQpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYS5lbmNvZGUoKSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21fb2JqQXJyYXlfdG9fc3RyaW5nKG9hYToge1t1aWQ6IHN0cmluZ106IENfTW92YWJsZVBvaW50fSk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3Qgb2EgPSBbXSBhcyBKU09OX01vdmFibGVQb2ludFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgaWkgaW4gb2FhKSBvYS5wdXNoKG9hYVtpaV0uZW5jb2RlKCkpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21fc3RyaW5nX3RvX29iaih0eHQ6IHN0cmluZyk6IENfTW92YWJsZVBvaW50IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBqICAgPSBKU09OLnBhcnNlKHR4dCkgYXMgSlNPTl9Nb3ZhYmxlUG9pbnRbXTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDX01vdmFibGVQb2ludCgpLmRlY29kZShqKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDX01vdmFibGVQb2ludCgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21fc3RyaW5nX3RvX29iakFycmF5KHR4dDogc3RyaW5nKToge1t1aWQ6IHN0cmluZ106IENfTW92YWJsZVBvaW50fSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgaiAgID0gSlNPTi5wYXJzZSh0eHQpIGFzIEpTT05fTW92YWJsZVBvaW50W107XHJcbiAgICAgICAgICAgIGNvbnN0IG1wYSA9IHt9IGFzIHtbaWQ6IHN0cmluZ106IENfTW92YWJsZVBvaW50fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBqaiBvZiBqKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhYWEgPSBuZXcgQ19Nb3ZhYmxlUG9pbnQoKS5kZWNvZGUoamopO1xyXG4gICAgICAgICAgICAgICAgbXBhW2FhYS51aWQoKV0gPSBhYWE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1wYTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVuY29kZSgpOiBKU09OX01vdmFibGVQb2ludCB7XHJcbiAgICAgICAgY29uc3QgaiA9IHN1cGVyLmVuY29kZSgpIGFzIEpTT05fTW92YWJsZVBvaW50O1xyXG4gICAgICAgIGoudW5pcV9pZCAgPSB0aGlzLnVuaXFfaWQ7XHJcbiAgICAgICAgai5jdXJfdXJsICA9IHRoaXMuY3VyX3VybDtcclxuICAgICAgICBqLnRlYW1fdWlkID0gdGhpcy50ZWFtX3VpZCA/PyAnJztcclxuICAgICAgICByZXR1cm4gajtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkZWNvZGUoaj86IEpTT05fTW92YWJsZVBvaW50KTogQ19Nb3ZhYmxlUG9pbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9faW5pdChqKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGFsZXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGFsZXJ0KFwiTXZQdCBJbmZvOlwiIFxyXG4gICAgICAgICAgICArIFwiXFxudW5pcV9pZDogIFwiICArICh0aGlzLnVuaXFfaWQgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuY3VyX3VybDogIFwiICArICh0aGlzLmN1cl91cmwgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxudGVhbV91aWQ6IFwiICArICh0aGlzLnRlYW1fdWlkICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxubGNrZDogXCIgICAgICArICh0aGlzLmxvY19raW5kICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxubGNubTogXCIgICAgICArICh0aGlzLmxvY19uYW1lICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxubGNpZDogXCIgICAgICArICh0aGlzLmxvY191aWQgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuY3VyX3g6IFwiICAgICArICh0aGlzLmxvY19wb3M/LnggPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuY3VyX3k6IFwiICAgICArICh0aGlzLmxvY19wb3M/LnkgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuY3VyX3o6IFwiICAgICArICh0aGlzLmxvY19wb3M/LnogPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuY3VyX2Q6IFwiICAgICArICh0aGlzLmxvY19wb3M/LmQgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuXCJcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgSV9KU09OLCBKU09OX0FueSB9IGZyb20gXCIuL0NfU2F2ZUluZm9cIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9Qb2ludCBleHRlbmRzIEpTT05fQW55IHtcclxuICAgIHg/OiBudW1iZXIsXHJcbiAgICB5PzogbnVtYmVyLFxyXG4gICAgej86IG51bWJlcixcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfUG9pbnQgaW1wbGVtZW50cyBJX0pTT057XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHB1YmxpYyB6OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeD86IG51bWJlcnxDX1BvaW50fEpTT05fUG9pbnR8dW5kZWZpbmVkLCB5PzogbnVtYmVyLCB6PzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy54ID0gdGhpcy55ID0gdGhpcy56ID0gLTM7XHJcblxyXG4gICAgICAgIGlmICh4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy54ID0gMDsgdGhpcy55ID0gMDsgdGhpcy56ID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHkgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHogPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgdGhpcy54ID0geDsgdGhpcy55ID0geTsgdGhpcy56ID0gejtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHggPT09IFwib2JqZWN0XCIpIHsgXHJcbiAgICAgICAgICAgIGlmICh4IGluc3RhbmNlb2YgQ19Qb2ludCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy54ID0geC54OyB0aGlzLnkgPSB4Lnk7IHRoaXMueiA9IHguejtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb2RlKHgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMueCA9IHRoaXMueSA9IHRoaXMueiA9IC0yO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0X3AoKTogQ19Qb2ludCB7cmV0dXJuIG5ldyBDX1BvaW50KHRoaXMpfSBcclxuICAgIHB1YmxpYyBzZXRfcChwOiBDX1BvaW50KTogQ19Qb2ludHx1bmRlZmluZWQge1xyXG4gICAgICAgIHRoaXMueCA9IHAueDsgdGhpcy55ID0gcC55OyB0aGlzLnogPSBwLno7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzX2V4aXN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKHggPT0gdGhpcy54ICYmIHkgPT0gdGhpcy55ICYmIHogPT0gdGhpcy56KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyB3aXRoaW4ocDogQ19Qb2ludCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAocC54ID09IHRoaXMueCAmJiBwLnkgPT0gdGhpcy55ICYmIHAueiA9PSB0aGlzLnopO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fUG9pbnQge1xyXG4gICAgICAgIHJldHVybiB7eDogdGhpcy54LCB5OiB0aGlzLnksIHo6IHRoaXMuen07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGVjb2RlKGE/OiBKU09OX1BvaW50KTogQ19Qb2ludCB7XHJcbiAgICAgICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgaWYgKGEueCA9PT0gdW5kZWZpbmVkIHx8IGEueSA9PT0gdW5kZWZpbmVkIHx8IGEueiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcztcclxuICAgICAgICB0aGlzLnggPSBhLng7IHRoaXMueSA9IGEueTsgdGhpcy56ID0gYS56O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgQ19Qb2ludCwgSlNPTl9Qb2ludCB9IGZyb20gJy4vQ19Qb2ludCc7XHJcbmltcG9ydCB7VF9NYWtlRW51bVR5cGV9ICAgICAgICBmcm9tIFwiLi4vZF91dGwvVF9NYWtlRW51bVR5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBUX0RpcmVjdGlvbjp7W2Rpcjogc3RyaW5nXTogbnVtYmVyfSA9IHtcclxuICAgIE46IDAsXHJcbiAgICBFOiAxLFxyXG4gICAgUzogMixcclxuICAgIFc6IDMsXHJcbiAgICBYOiA5OVxyXG59IGFzIGNvbnN0O1xyXG5leHBvcnQgdHlwZSBUX0RpcmVjdGlvbiA9IFRfTWFrZUVudW1UeXBlPHR5cGVvZiBUX0RpcmVjdGlvbj47XHJcblxyXG5mdW5jdGlvbiBfZGlyX2tleShkaXI6IFRfRGlyZWN0aW9uIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhUX0RpcmVjdGlvbikuZmluZChrZXkgPT4gVF9EaXJlY3Rpb25ba2V5XSA9PT0gZGlyKSA/PyBcIj8/Pz9cIjtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9Qb2ludERpciBleHRlbmRzIEpTT05fUG9pbnQge1xyXG4gICAgZD86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFsZXJ0X1BEX2luZm8oYTogSlNPTl9Qb2ludERpcnx1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgIGlmIChhID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgIGFsZXJ0KFwiUG9pbnREYXRhIEluZm86XCIgXHJcbiAgICAgICAgKyBcIlxcbng6IFwiICAgICArIChhPy54ID8/ICc/JylcclxuICAgICAgICArIFwiXFxueTogXCIgICAgICsgKGE/LnkgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG56OiBcIiAgICAgKyAoYT8ueiA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmQ6IFwiICAgICArIChhPy5kID8/ICc/JylcclxuICAgICAgICArIFwiXFxuXCJcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyAgQ19Qb2ludERpciBleHRlbmRzIENfUG9pbnQge1xyXG4gICAgcHVibGljIGQ6IFRfRGlyZWN0aW9uO1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGQ/OiBudW1iZXJ8VF9EaXJlY3Rpb258Q19Qb2ludERpcnxKU09OX1BvaW50RGlyKSB7XHJcbiAgICAgICAgc3VwZXIoZCk7XHJcbiAgICAgICAgdGhpcy5kID0gVF9EaXJlY3Rpb24uWDtcclxuXHJcbiAgICAgICAgaWYgKGQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgZCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICB0aGlzLmQgPSBkIGFzIFRfRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgZCA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mIENfUG9pbnREaXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZCA9IGQuZCBhcyBUX0RpcmVjdGlvbjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb2RlKGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kID0gVF9EaXJlY3Rpb24uWDtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X2RfbWJfbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDogIHJldHVybiAn5YyXJztcclxuICAgICAgICAgICAgY2FzZSAxOiAgcmV0dXJuICfmnbEnO1xyXG4gICAgICAgICAgICBjYXNlIDI6ICByZXR1cm4gJ+WNlyc7XHJcbiAgICAgICAgICAgIGNhc2UgMzogIHJldHVybiAn6KW/JztcclxuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuICforI4nO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRfZCgpOiBUX0RpcmVjdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXRfZChkOiBUX0RpcmVjdGlvbik6IENfUG9pbnREaXJ8dW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoIShfZGlyX2tleShkKSBpbiBUX0RpcmVjdGlvbikpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5kID0gZDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfcGQoKTogQ19Qb2ludERpciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0X3BkKGQ6IENfUG9pbnREaXJ8SlNPTl9Qb2ludERpcik6IENfUG9pbnREaXJ8dW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoZCBpbnN0YW5jZW9mIENfUG9pbnREaXIpIHtcclxuICAgICAgICAgICAgaWYgKCEoX2Rpcl9rZXkoZC5kKSBpbiBUX0RpcmVjdGlvbikpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHN1cGVyLnNldF9wKGQpO1xyXG4gICAgICAgICAgICB0aGlzLmQgPSBkLmQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIShfZGlyX2tleShkLmQpIGluIFRfRGlyZWN0aW9uKSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmRlY29kZShkKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fUG9pbnREaXIge1xyXG4gICAgICAgIGNvbnN0IGogPSBzdXBlci5lbmNvZGUoKSBhcyBKU09OX1BvaW50RGlyO1xyXG4gICAgICAgIGouZCAgICAgPSB0aGlzLmQgYXMgbnVtYmVyO1xyXG4gICAgICAgIHJldHVybiBqO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGRlY29kZShqPzogSlNPTl9Qb2ludERpcik6IENfUG9pbnREaXIge1xyXG4gICAgICAgIGlmIChqID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzO1xyXG4gICAgICAgIGlmICghKF9kaXJfa2V5KGouZCkgaW4gVF9EaXJlY3Rpb24pKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgc3VwZXIuZGVjb2RlKGopO1xyXG4gICAgICAgIHRoaXMuZCA9IGouZCBhcyBUX0RpcmVjdGlvbjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGFsZXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGFsZXJ0KFwiUG9pbnREYXRhIEluZm86XCIgXHJcbiAgICAgICAgICAgICsgXCJcXG54OiBcIiAgICAgKyAodGhpcy54ID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnk6IFwiICAgICArICh0aGlzLnkgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuejogXCIgICAgICsgKHRoaXMueiA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5kOiBcIiAgICAgKyAodGhpcy5kID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcblwiXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iLCJjbGFzcyBDX1BvaW50MkQge1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyID0gMCwgeTogbnVtYmVyID0gMClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggID0geDtcclxuICAgICAgICB0aGlzLnkgID0geTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBpc19leGlzdCh4OiBudW1iZXIsIHk6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAodGhpcy54ID09IHgpICYmICh0aGlzLnkgPT0geSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDX1BvaW50TGluazJEIGV4dGVuZHMgQ19Qb2ludDJEIHtcclxuICAgIHB1YmxpYyBkaTogbnVtYmVyO1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHg6IG51bWJlciA9IDAsIHk6IG51bWJlciA9IDAsIGRpOiBudW1iZXIgPSAtMSlcclxuICAgIHtcclxuICAgICAgICBzdXBlcih4LCB5KTtcclxuICAgICAgICB0aGlzLmRpID0gZGk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGNhc3QocDogQ19Qb2ludDJEfHVuZGVmaW5lZCk6IENfUG9pbnRMaW5rMkR8dW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAocD8ueCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChwPy55ID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuIHAgaW5zdGFuY2VvZiBDX1BvaW50TGluazJEID8gcCA6IG5ldyBDX1BvaW50TGluazJEKHAueCwgcC55KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDX1BvaW50U2V0MkQge1xyXG4gICAgcHVibGljIHNldDogQ19Qb2ludDJEW10gPVtdO1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgICBwdWJsaWMgcHVzaChwOiBDX1BvaW50MkQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldC5wdXNoKHApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfcG9pbnQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBDX1BvaW50MkR8dW5kZWZpbmVkIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHAgb2YgdGhpcy5zZXQpIHtcclxuICAgICAgICAgICAgaWYgKHA/LmlzX2V4aXN0KHgsIHkpKSByZXR1cm4gcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsgICAgICAgICAgICBcclxuICAgIH1cclxuICAgIHB1YmxpYyByZW1vdmUocDogQ19Qb2ludDJEKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVfeHkocC54LCBwLnkpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHB1YmxpYyByZW1vdmVfeHkoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5zZXQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2V0W2ldPy5pc19leGlzdCh4LCB5KSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2V0W2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQgPSBbLi4udGhpcy5zZXRdO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGlzX2V4aXN0KHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwIG9mIHRoaXMuc2V0KSBpZiAocD8uaXNfZXhpc3QoeCwgeSkpIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuLypcclxuY2xhc3MgUG9pbnQzRCB7XHJcbiAgICBwdWJsaWMgaW50ICR4O1xyXG4gICAgcHVibGljIGludCAkeTtcclxuICAgIHB1YmxpYyBpbnQgJHo7XHJcbiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoaW50ICR4ID0gMCwgaW50ICR5ID0gMCwgaW50ICR6ID0gMClcclxuICAgIHtcclxuICAgICAgICAkdGhpcy0+eCAgPSAkeDtcclxuICAgICAgICAkdGhpcy0+eSAgPSAkeTtcclxuICAgICAgICAkdGhpcy0+eiAgPSAkejtcclxuICAgIH1cclxuICAgIHB1YmxpYyBmdW5jdGlvbiBpc19leGlzdChpbnQgJHgsIGludCAkeSwgaW50ICR6KTogYm9vbCB7XHJcbiAgICAgICAgcmV0dXJuICgkdGhpcy0+eCA9PSAkeCkgJiYgKCR0aGlzLT55ID09ICR5KSAmJiAoJHRoaXMtPnogPT0gJHopO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGZ1bmN0aW9uIHdpdGhpbihQb2ludDNEICRwKTogYm9vbCB7XHJcbiAgICAgICAgcmV0dXJuICR0aGlzLT5pc19leGlzdCgkcC0+eCwgJHAtPnksICRwLT56KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBmdW5jdGlvbiBlbmNvZGUoKTogYXJyYXkge1xyXG4gICAgICAgICRhID0gW107XHJcbiAgICAgICAgJGFbJ3gnXSA9ICR0aGlzLT54O1xyXG4gICAgICAgICRhWyd5J10gPSAkdGhpcy0+eTtcclxuICAgICAgICAkYVsneiddID0gJHRoaXMtPno7XHJcblxyXG4gICAgICAgIHJldHVybiAkYTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBmdW5jdGlvbiBkZWNvZGUoYXJyYXkgJGEpOiBQb2ludDNEIHtcclxuICAgICAgICBpZiAoIWlzX251bGwoJGEpICYmIGlzX2FycmF5KCRhKSkge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBhcnJheV9rZXlfZXhpc3RzKCd4JywgJGEpICYmIChpc19udW1lcmljKCRhWyd4J10pICYmICRhWyd4J10gPiAgMClcclxuICAgICAgICAgICAgJiYgIGFycmF5X2tleV9leGlzdHMoJ3knLCAkYSkgJiYgKGlzX251bWVyaWMoJGFbJ3knXSkgJiYgJGFbJ3knXSA+ICAwKVxyXG4gICAgICAgICAgICAmJiAgYXJyYXlfa2V5X2V4aXN0cygneicsICRhKSAmJiAoaXNfbnVtZXJpYygkYVsneiddKSAmJiAkYVsneiddID49IDApXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgJHRoaXMtPnggPSAkYVsneCddO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMtPnkgPSAkYVsneSddO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMtPnogPSAkYVsneiddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAkdGhpcztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZGVjb2RlX2FuZF9uZXcoYXJyYXkgJGEpOiBQb2ludDNEIHtcclxuICAgICAgICBpZiAoIWlzX251bGwoJGEpICYmIGlzX2FycmF5KCRhKSkge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBhcnJheV9rZXlfZXhpc3RzKCd4JywgJGEpICYmIChpc19udW1lcmljKCRhWyd4J10pICYmICRhWyd4J10gPiAgMClcclxuICAgICAgICAgICAgJiYgIGFycmF5X2tleV9leGlzdHMoJ3knLCAkYSkgJiYgKGlzX251bWVyaWMoJGFbJ3knXSkgJiYgJGFbJ3knXSA+ICAwKVxyXG4gICAgICAgICAgICAmJiAgYXJyYXlfa2V5X2V4aXN0cygneicsICRhKSAmJiAoaXNfbnVtZXJpYygkYVsneiddKSAmJiAkYVsneiddID49IDApXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludDNEKCRhWyd4J10sICRhWyd5J10sICRhWyd6J10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQzRCgtMSwgLTEsIC0xKTtcclxuICAgIH1cclxufVxyXG4qL1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IF9tYXgsIF9taW4gfSAgICAgICAgICAgZnJvbSBcIi4uL2RfdXRsL0ZfTWF0aFwiO1xyXG5pbXBvcnQgeyBDX1BvaW50LCBKU09OX1BvaW50IH0gIGZyb20gXCIuL0NfUG9pbnRcIjtcclxuaW1wb3J0IHsgSlNPTl9BbnkgfSAgICAgICAgICAgICBmcm9tIFwiLi9DX1NhdmVJbmZvXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fUmFuZ2UgZXh0ZW5kcyBKU09OX0FueSB7XHJcbiAgICBtaW4/OiAgIEpTT05fUG9pbnQsIFxyXG4gICAgbWF4PzogICBKU09OX1BvaW50LCBcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfUmFuZ2Uge1xyXG4gICAgcHJvdGVjdGVkIG1pbjogQ19Qb2ludDtcclxuICAgIHByb3RlY3RlZCBtYXg6IENfUG9pbnQ7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocDE6IENfUG9pbnQsIHAyOiBDX1BvaW50KSB7XHJcbiAgICAgICAgdGhpcy5taW4gID0gbmV3IENfUG9pbnQoMCwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5tYXggID0gbmV3IENfUG9pbnQoMCwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5faW5pdChwMSwgcDIpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9pbml0KHAxOiBDX1BvaW50LCBwMjogQ19Qb2ludCk6IENfUmFuZ2Uge1xyXG4gICAgICAgIGNvbnN0IG1pbl94ID0gX21pbihbcDEueCwgcDIueF0pO1xyXG4gICAgICAgIGNvbnN0IG1heF94ID0gX21heChbcDEueCwgcDIueF0pO1xyXG5cclxuICAgICAgICBjb25zdCBtaW5feSA9IF9taW4oW3AxLnksIHAyLnldKTtcclxuICAgICAgICBjb25zdCBtYXhfeSA9IF9tYXgoW3AxLnksIHAyLnldKTtcclxuXHJcbiAgICAgICAgY29uc3QgbWluX3ogPSBfbWluKFtwMS56LCBwMi56XSk7XHJcbiAgICAgICAgY29uc3QgbWF4X3ogPSBfbWF4KFtwMS56LCBwMi56XSk7XHJcblxyXG4gICAgICAgIHRoaXMubWluICA9IG5ldyBDX1BvaW50KG1pbl94LCBtaW5feSwgbWluX3opO1xyXG4gICAgICAgIHRoaXMubWF4ICA9IG5ldyBDX1BvaW50KG1heF94LCBtYXhfeSwgbWF4X3opO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgd2l0aGluKGE6IENfUmFuZ2V8Q19Qb2ludHxudW1iZXIsIHk/OiBudW1iZXIsIHo/OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHkgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHogPT09IFwibnVtYmVyXCIpIHsgXHJcbiAgICAgICAgICAgIGlmICggYSA8IHRoaXMubWluLnggfHwgYSA+IHRoaXMubWF4LnggKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICggeSA8IHRoaXMubWluLnkgfHwgeSA+IHRoaXMubWF4LnkgKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICggeiA8IHRoaXMubWluLnogfHwgeiA+IHRoaXMubWF4LnogKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwib2JqZWN0XCIgJiYgYSBpbnN0YW5jZW9mIENfUG9pbnQpIHsgXHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSBhIGFzIENfUG9pbnQ7XHJcbiAgICAgICAgICAgIGlmICggcC54IDwgdGhpcy5taW4ueCB8fCBwLnggPiB0aGlzLm1heC54ICkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoIHAueSA8IHRoaXMubWluLnkgfHwgcC55ID4gdGhpcy5tYXgueSApIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCBwLnogPCB0aGlzLm1pbi56IHx8IHAueiA+IHRoaXMubWF4LnogKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwib2JqZWN0XCIgJiYgYSBpbnN0YW5jZW9mIENfUmFuZ2UpIHtcclxuICAgICAgICAgICAgY29uc3QgcCA9IGEgYXMgQ19SYW5nZTtcclxuICAgICAgICAgICAgaWYgKCBwLm1pbl94KCkgPCB0aGlzLm1pbi54IHx8IHAubWF4X3goKSA+IHRoaXMubWF4LnggKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICggcC5taW5feSgpIDwgdGhpcy5taW4ueSB8fCBwLm1heF95KCkgPiB0aGlzLm1heC55ICkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoIHAubWluX3ooKSA8IHRoaXMubWluLnogfHwgcC5tYXhfeigpID4gdGhpcy5tYXgueiApIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBtaW5feCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5taW4ueDt9XHJcbiAgICBwdWJsaWMgbWF4X3goKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMubWF4Lng7fVxyXG4gICAgcHVibGljIG1pbl95KCk6IG51bWJlciB7IHJldHVybiB0aGlzLm1pbi55O31cclxuICAgIHB1YmxpYyBtYXhfeSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5tYXgueTt9XHJcbiAgICBwdWJsaWMgbWluX3ooKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMubWluLno7fVxyXG4gICAgcHVibGljIG1heF96KCk6IG51bWJlciB7IHJldHVybiB0aGlzLm1heC56O31cclxuICAgIHB1YmxpYyBzaXplX3goKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXgueCAtIHRoaXMubWluLnggKyAxO1xyXG4gICAgfSBcclxuICAgIHB1YmxpYyBzaXplX3koKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXgueSAtIHRoaXMubWluLnkgKyAxO1xyXG4gICAgfSBcclxuICAgIHB1YmxpYyBzaXplX3ooKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXgueiAtIHRoaXMubWluLnogKyAxO1xyXG4gICAgfSBcclxuICAgIHB1YmxpYyBkb19hbGxfeHl6KGZuOiAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcikgPT4gYm9vbGVhbikge1xyXG4gICAgICAgIGZvciAodmFyIHogPSB0aGlzLm1pbi56OyB6IDw9IHRoaXMubWF4Lno7IHorKyApIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgeSA9IHRoaXMubWluLnk7IHkgPD0gdGhpcy5tYXgueTsgeSsrICkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IHRoaXMubWluLng7IHkgPD0gdGhpcy5tYXgueDsgeCsrICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZm4oeCwgeSwgeikpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkb19hbGxfcChmbjogKHA6IENfUG9pbnQpID0+IGJvb2xlYW4pIHtcclxuICAgICAgICBmb3IgKHZhciB6ID0gdGhpcy5taW4uejsgeiA8PSB0aGlzLm1heC56OyB6KysgKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSB0aGlzLm1pbi55OyB5IDw9IHRoaXMubWF4Lnk7IHkrKyApIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSB0aGlzLm1pbi54OyB5IDw9IHRoaXMubWF4Lng7IHgrKyApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZuKG5ldyBDX1BvaW50KHgsIHksIHopKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGVuY29kZSgpOiBKU09OX1JhbmdlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtaW46IHRoaXMubWluLmVuY29kZSgpLFxyXG4gICAgICAgICAgICBtYXg6IHRoaXMubWluLmVuY29kZSgpLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBkZWNvZGUoajogSlNPTl9SYW5nZSk6IENfUmFuZ2Uge1xyXG4gICAgICAgIGlmIChqID09PSB1bmRlZmluZWQpICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICBpZiAoai5taW4gPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgaWYgKGoubWF4ID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHAxID0gbmV3IENfUG9pbnQoai5taW4pO1xyXG4gICAgICAgIGNvbnN0IHAyID0gbmV3IENfUG9pbnQoai5tYXgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbml0KHAxLCBwMik7XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgQ19NYXplLCBKU09OX01hemUsIGFsZXJ0X21hemVfaW5mbyAgfSAgZnJvbSBcIi4vQ19NYXplXCI7XHJcbmltcG9ydCB7IENfR3VpbGQsIEpTT05fR3VpbGQsIGFsZXJ0X2d1bGRfaW5mbyB9IGZyb20gXCIuL0NfR3VpbGRcIjtcclxuaW1wb3J0IHsgQ19Nb3ZhYmxlUG9pbnQsIEpTT05fTW92YWJsZVBvaW50LCBhbGVydF9tdnB0X2luZm8gfSBmcm9tIFwiLi9DX01vdmFibGVQb2ludFwiO1xyXG5pbXBvcnQgeyBDX1RlYW0sIEpTT05fVGVhbSwgYWxlcnRfdGVhbV9pbmZvICB9ICBmcm9tIFwiLi9DX1RlYW1cIjtcclxuaW1wb3J0IHsgQ19TYXZlSW5mbywgSV9KU09OLCBKU09OX0FueSwgSlNPTl9TYXZlSW5mbyB9IGZyb20gXCIuL0NfU2F2ZUluZm9cIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9TYXZlRGF0YSBleHRlbmRzIEpTT05fU2F2ZUluZm8ge1xyXG4gICAgc2F2ZV9pZD86ICAgbnVtYmVyLFxyXG4gICAgcGxheWVyX2lkPzogbnVtYmVyLCBcclxuICAgIHVuaXFfbm8/OiAgIG51bWJlcixcclxuICAgIHRpdGxlPzogICAgIHN0cmluZyxcclxuICAgIGRldGFpbD86ICAgIHN0cmluZyxcclxuICAgIHBvaW50PzogICAgIHN0cmluZyxcclxuICAgIGF1dG9fbW9kZT86IHN0cmluZyxcclxuICAgIGlzX2FjdGl2ZT86IHN0cmluZyxcclxuICAgIGlzX2RlbGV0ZT86IHN0cmluZyxcclxuICAgIHNhdmVfdGltZT86IHN0cmluZyxcclxuXHJcbiAgICBhbGxfbXZwdD86ICBKU09OX01vdmFibGVQb2ludFtdLFxyXG4gICAgYWxsX21hemU/OiAgSlNPTl9NYXplW10sXHJcbiAgICBhbGxfdGVhbT86ICBKU09OX1RlYW1bXSxcclxuICAgIGFsbF9ndWxkPzogIEpTT05fR3VpbGRbXSxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFsZXJ0X3NhdmVfaW5mbyhhOiBKU09OX1NhdmVEYXRhfHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgYWxlcnQoXCJTYXZlIEluZm86XCIgXHJcbiAgICAgICAgKyBcIlxcbnNhdmVfaWQ6ICAgIFwiICsgKGEuc2F2ZV9pZCAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxucGxheWVyX2lkOiAgXCIgKyAoYS5wbGF5ZXJfaWQgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG51bmlxX25vOiAgICBcIiArIChhLnVuaXFfbm8gICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnRpdGxlOiAgICAgIFwiICsgKGEudGl0bGUgICAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxuZGV0YWlsOiAgICAgXCIgKyAoYS5kZXRhaWwgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5wb2ludDogICAgICBcIiArIChhLnBvaW50ICAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmF1dG9fbW9kZTogIFwiICsgKGEuYXV0b19tb2RlID8/ICc/JylcclxuICAgICAgICArIFwiXFxuaXNfYWN0aXZlOiAgXCIgKyAoYS5pc19hY3RpdmUgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5pc19kZWxldGU6ICBcIiArIChhLmlzX2RlbGV0ZSA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbm12cHRfY291bnQ6IFwiICsgKGEuYWxsX212cHQ/Lmxlbmd0aCA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbm1hemVfY291bnQ6IFwiICsgKGEuYWxsX21hemU/Lmxlbmd0aCA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmd1bGRfY291bnQ6IFwiICsgKGEuYWxsX2d1bGQ/Lmxlbmd0aCA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnRlYW1fY291bnQ6IFwiICsgKGEuYWxsX3RlYW0/Lmxlbmd0aCA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcblwiXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxlcnRfc2F2ZV9kZXRhaWwoYTogSlNPTl9TYXZlRGF0YXx1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgIGlmIChhID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICB0cnkgeyBcclxuLy8gICAgICAgIGFsZXJ0KFwiU2F2ZSBEZXRhaWwobXZwdCk6XCIpO1xyXG4gICAgICAgIGZvciAoY29uc3QgbXZwdCBvZiBhLmFsbF9tdnB0Pz9bXSkgYWxlcnRfbXZwdF9pbmZvKG12cHQpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7YWxlcnQoJ2FsZXJ0IG12cHQgZXJyb3I6ICcgKyBlcnIpfVxyXG5cclxuICAgIHRyeSB7IFxyXG4vLyAgICAgICAgYWxlcnQoXCJTYXZlIERldGFpbCh0ZWFtKTpcIik7XHJcbiAgICAgICAgZm9yIChjb25zdCB0ZWFtIG9mIGEuYWxsX3RlYW0/P1tdKSBhbGVydF90ZWFtX2luZm8odGVhbSk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHthbGVydCgnYWxlcnQgdGVhbSBlcnJvcjogJyArIGVycil9XHJcblxyXG4gICAgdHJ5IHsgXHJcbi8vICAgICAgICBhbGVydChcIlNhdmUgRGV0YWlsKG1hemUpOlwiKTtcclxuICAgICAgICBmb3IgKGNvbnN0IG1hemUgb2YgYS5hbGxfbWF6ZT8/W10pIGFsZXJ0X21hemVfaW5mbyhtYXplKTtcclxuICAgIH0gY2F0Y2ggKGVycikge2FsZXJ0KCdhbGVydCBtYXplIGVycm9yOiAnICsgZXJyKX1cclxuXHJcbiAgICB0cnkgeyBcclxuLy8gICAgICAgIGFsZXJ0KFwiU2F2ZSBEZXRhaWwoZ3VsZCk6XCIpO1xyXG4gICAgICAgIGZvciAoY29uc3QgZ3VsZCBvZiBhLmFsbF9ndWxkPz9bXSkgYWxlcnRfZ3VsZF9pbmZvKGd1bGQpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7YWxlcnQoJ2FsZXJ0IGd1bGQgZXJyb3I6ICcgKyBlcnIpfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENfU2F2ZURhdGEgZXh0ZW5kcyBDX1NhdmVJbmZvIGltcGxlbWVudHMgSV9KU09OIHtcclxuXHJcbi8qXHJcbiAgICBwdWJsaWMgc2F2ZV9pZDogICBudW1iZXI7XHJcbiAgICBwdWJsaWMgcGxheWVyX2lkOiBudW1iZXI7IFxyXG4gICAgcHVibGljIHVuaXFfbm86ICAgbnVtYmVyO1xyXG4gICAgcHVibGljIHRpdGxlOiAgICAgc3RyaW5nO1xyXG4gICAgcHVibGljIGRldGFpbDogICAgc3RyaW5nO1xyXG4gICAgcHVibGljIHBvaW50OiAgICAgc3RyaW5nO1xyXG4gICAgcHVibGljIGF1dG9fbW9kZTogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBpc19hY3RpdmU6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgaXNfZGVsZXRlOiBib29sZWFuO1xyXG4gICAgcHVibGljIHNhdmVfdGltZTogRGF0ZTtcclxuICAgIHB1YmxpYyBteXBvczogICAgIENfTW92YWJsZVBvaW50O1xyXG4qL1xyXG5cclxuICAgIHB1YmxpYyBhbGxfbXZwdDogIHtbdWlkOiBzdHJpbmddOiBDX01vdmFibGVQb2ludH07XHJcbiAgICBwdWJsaWMgYWxsX21hemU6ICB7W3VpZDogc3RyaW5nXTogQ19NYXplfTtcclxuICAgIHB1YmxpYyBhbGxfdGVhbTogIHtbdWlkOiBzdHJpbmddOiBDX1RlYW19O1xyXG4gICAgcHVibGljIGFsbF9ndWxkOiAge1t1aWQ6IHN0cmluZ106IENfR3VpbGR9O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhPzogSlNPTl9TYXZlRGF0YSkge1xyXG4gICAgICAgIHN1cGVyKGEpO1xyXG5cclxuICAgICAgICB0aGlzLmFsbF9tdnB0ICA9IHt9O1xyXG4gICAgICAgIHRoaXMuYWxsX21hemUgID0ge307XHJcbiAgICAgICAgdGhpcy5hbGxfdGVhbSAgPSB7fVxyXG4gICAgICAgIHRoaXMuYWxsX2d1bGQgID0ge307XHJcblxyXG4gICAgICAgIGlmIChhICE9PSB1bmRlZmluZWQpIHRoaXMuX19pbml0KGEpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9faW5pdChzOiBKU09OX1NhdmVEYXRhKTogQ19TYXZlRGF0YSB7XHJcbiAgICAgICAgc3VwZXIuX19pbml0KHMpO1xyXG5cclxuICAgICAgICBpZiAocy5hbGxfbXZwdCAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbF9tdnB0ID0ge307XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QganNvbl9tdnB0IG9mIHMuYWxsX212cHQpIHtcclxuICAgICAgICAgICAgICAgICBjb25zdCBtdnB0ID0gKG5ldyBDX01vdmFibGVQb2ludCgpKS5kZWNvZGUoanNvbl9tdnB0KTsgXHJcbiAgICAgICAgICAgICAgICAgdGhpcy5hbGxfbXZwdFttdnB0LnVpZCgpXSA9IG12cHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIGlmIChzLmFsbF9tYXplICAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsX21hemUgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBqc29uX21hemUgb2Ygcy5hbGxfbWF6ZSkge1xyXG4gICAgICAgICAgICAgICAgIGNvbnN0IG1hemUgPSAobmV3IENfTWF6ZSgpKS5kZWNvZGUoanNvbl9tYXplKTsgXHJcbiAgICAgICAgICAgICAgICAgdGhpcy5hbGxfbWF6ZVttYXplLnVpZCgpXSA9IG1hemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIGlmIChzLmFsbF90ZWFtICAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsX3RlYW0gPSB7fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBqc29uX3RlYW0gb2Ygcy5hbGxfdGVhbSkge1xyXG4gICAgICAgICAgICAgICAgIGNvbnN0IHRlYW0gPSAobmV3IENfVGVhbSgpKS5kZWNvZGUoanNvbl90ZWFtKTsgXHJcbiAgICAgICAgICAgICAgICAgdGhpcy5hbGxfdGVhbVt0ZWFtLnVpZCgpXSA9IHRlYW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIGlmIChzLmFsbF9ndWxkICAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsX2d1bGQgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBqc29uX2d1bGQgb2Ygcy5hbGxfZ3VsZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3VsZCA9IChuZXcgQ19HdWlsZCgpKS5kZWNvZGUoanNvbl9ndWxkKTsgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbF9ndWxkW2d1bGQudWlkKCldID0gZ3VsZDtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgfSBcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIG5ldyhhPzogSlNPTl9TYXZlRGF0YSk6IENfU2F2ZURhdGEge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ19TYXZlRGF0YShhKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fU2F2ZURhdGEge1xyXG4gICAgICAgIGxldCBzYXZlX2RhdGU6IHN0cmluZztcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBzYXZlX2RhdGEgICAgPSBzdXBlci5lbmNvZGUoKSBhcyBKU09OX1NhdmVEYXRhO1xyXG5cclxuICAgICAgICAgICAgc2F2ZV9kYXRhLmFsbF9tdnB0ID0gdGhpcy5fZW5jb2RlX2FsbF9kYXRhKHRoaXMuYWxsX212cHQpOyBcclxuICAgICAgICAgICAgc2F2ZV9kYXRhLmFsbF9tYXplID0gdGhpcy5fZW5jb2RlX2FsbF9kYXRhKHRoaXMuYWxsX21hemUpOyBcclxuICAgICAgICAgICAgc2F2ZV9kYXRhLmFsbF90ZWFtID0gdGhpcy5fZW5jb2RlX2FsbF9kYXRhKHRoaXMuYWxsX3RlYW0pOyBcclxuICAgICAgICAgICAgc2F2ZV9kYXRhLmFsbF9ndWxkID0gdGhpcy5fZW5jb2RlX2FsbF9kYXRhKHRoaXMuYWxsX2d1bGQpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2F2ZV9kYXRhO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBhbGVydCgnU2F2ZURhdGEgRW5jb2RlIEVycm9yOiAnICsgZXJyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfZW5jb2RlX2FsbF9kYXRhKGFsbF9kYXRhOiB7W3VpZDpzdHJpbmddOklfSlNPTn0pOiBKU09OX0FueVtdIHtcclxuICAgICAgICBjb25zdCBhbGxfSlNPTjogSlNPTl9BbnlbXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gYWxsX2RhdGEpIGFsbF9KU09OLnB1c2goYWxsX2RhdGFbaV0uZW5jb2RlKCkpO1xyXG4gICAgICAgIHJldHVybiBhbGxfSlNPTjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGVjb2RlKHM6IEpTT05fU2F2ZURhdGEpOiBDX1NhdmVEYXRhIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fX2luaXQocyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBhbGVydCgpOiB2b2lkIHtcclxuICAgICAgICBhbGVydChcIlNhdmUgSW5mbzpcIiBcclxuICAgICAgICAgICAgKyBcIlxcbnNhdmVfaWQ6ICAgIFwiICsgKHRoaXMuc2F2ZV9pZCAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnBsYXllcl9pZDogIFwiICsgKHRoaXMucGxheWVyX2lkID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnVuaXFfbm86ICAgIFwiICsgKHRoaXMudW5pcV9ubyAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnRpdGxlOiAgICAgIFwiICsgKHRoaXMudGl0bGUgICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbmRldGFpbDogICAgIFwiICsgKHRoaXMuZGV0YWlsICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnBvaW50OiAgICAgIFwiICsgKHRoaXMucG9pbnQgICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbmF1dG9fbW9kZTogIFwiICsgKHRoaXMuYXV0b19tb2RlPydZJzonTicpXHJcbiAgICAgICAgICAgICsgXCJcXG5pc19hY3RpdmU6ICBcIiArICh0aGlzLmlzX2FjdGl2ZT8nWSc6J04nKVxyXG4gICAgICAgICAgICArIFwiXFxuaXNfZGVsZXRlOiAgXCIgKyAodGhpcy5pc19kZWxldGU/J1knOidOJylcclxuICAgICAgICAgICAgKyBcIlxcbm12cHRfY291bnQ6IFwiICsgKHRoaXMuYWxsX212cHQ/Lmxlbmd0aCA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5tYXplX2NvdW50OiBcIiArICh0aGlzLmFsbF9tYXplPy5sZW5ndGggPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuZ3VsZF9jb3VudDogXCIgKyAodGhpcy5hbGxfZ3VsZD8ubGVuZ3RoID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnRlYW1fY291bnQ6IFwiICsgKHRoaXMuYWxsX3RlYW0/Lmxlbmd0aCA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5cIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFsZXJ0X2RldGFpbCgpOiB2b2lkIHtcclxuICAgICAgICB0cnkgeyBcclxuLy8gICAgICAgICAgICBhbGVydChcIlNhdmUgRGV0YWlsKG12cHQpOlwiKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpaSBpbiB0aGlzLmFsbF9tdnB0KSB0aGlzLmFsbF9tdnB0W2lpXS5hbGVydCgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge2FsZXJ0KCdhbGVydCBtdnB0IGVycm9yOiAnICsgZXJyKX1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgdHJ5IHsgXHJcbi8vICAgICAgICAgICAgYWxlcnQoXCJTYXZlIERldGFpbCh0ZWFtKTpcIik7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWkgaW4gdGhpcy5hbGxfdGVhbSkgdGhpcy5hbGxfdGVhbVtpaV0uYWxlcnQoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHthbGVydCgnYWxlcnQgdGVhbSBlcnJvcjogJyArIGVycil9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIHRyeSB7IFxyXG4vLyAgICAgICAgICAgIGFsZXJ0KFwiU2F2ZSBEZXRhaWwobWF6ZSk6XCIpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlpIGluIHRoaXMuYWxsX21hemUpIHRoaXMuYWxsX21hemVbaWldLmFsZXJ0KCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7YWxlcnQoJ2FsZXJ0IG1hemUgZXJyb3I6ICcgKyBlcnIpfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB0cnkgeyBcclxuLy8gICAgICAgICAgICBhbGVydChcIlNhdmUgRGV0YWlsKGd1bGQpOlwiKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpaSBpbiB0aGlzLmFsbF9ndWxkKSB0aGlzLmFsbF9ndWxkW2lpXS5hbGVydCgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge2FsZXJ0KCdhbGVydCBndWxkIGVycm9yOiAnICsgZXJyKX1cclxuICAgICAgICAgICAgXHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBDX01vdmFibGVQb2ludCwgSlNPTl9Nb3ZhYmxlUG9pbnQgfSBmcm9tIFwiLi9DX01vdmFibGVQb2ludFwiO1xyXG5cclxuLy8g44K144O844OQ44O85YG044Go44KE44KK44Go44KK44GZ44KLSlNPTuW9ouW8j+ODh+ODvOOCv+OBruODhuODs+ODl+ODrOODvOODiFxyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fQW55IHtcclxuICAgIFtrZXk6IHN0cmluZ106IGFueVxyXG59XHJcblxyXG4vLyDjgrXjg7zjg5Djg7zlgbTjgajjgoTjgorjgajjgorjgZnjgovjgq/jg6njgrnjgavlv4XopoHjgarjg6Hjgr3jg4Pjg4lcclxuZXhwb3J0IGludGVyZmFjZSBJX0pTT04ge1xyXG4gICAgZW5jb2RlOiAoKT0+SlNPTl9BbnksXHJcbiAgICBkZWNvZGU6IChqOkpTT05fQW55KT0+SV9KU09OLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElfSlNPTl9VbmlxIGV4dGVuZHMgSV9KU09OIHtcclxuICAgIHVpZDogKCk9PnN0cmluZyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJX0Fic3RyYWN0IHtcclxuICAgIG5ld09iaj86IChqPzpKU09OX0FueSk9PklfQWJzdHJhY3R8dW5kZWZpbmVkLFxyXG4gICAgZW5jb2RlOiAgKCk9PkpTT05fQW55LFxyXG4vLyAgc3RhdGljIGRlY29kZTogKGo6SlNPTl9BbnkpPT5JX0pTT04sXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9KU09OX0NsYXNzIHtcclxuICAgIG5ldzogKGo/OiBKU09OX0FueSk9PklfSlNPTixcclxufVxyXG5cclxuLy8g44K144O844OQ44O85YG044Go44KE44KK5Y+W44KK44GZ44KL6Zqb44Gr6Ieq6Lqr44KS5paH5a2X5YiX5YyW44GZ44KL44Kv44Op44K544Gu44Oh44K944OD44OJXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9KU09OVmFsdWUgZXh0ZW5kcyBJX0pTT057XHJcbiAgICBmcm9tSlNPTjogKCk9PnZvaWQsXHJcbiAgICB0b0pTT046ICAgKCk9PnZvaWQsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9TYXZlSW5mbyBleHRlbmRzIEpTT05fQW55IHtcclxuICAgIHNhdmVfaWQ/OiAgIG51bWJlcixcclxuICAgIHBsYXllcl9pZD86IG51bWJlciwgXHJcbiAgICB1bmlxX25vPzogICBudW1iZXIsXHJcbiAgICB0aXRsZT86ICAgICBzdHJpbmcsXHJcbiAgICBkZXRhaWw/OiAgICBzdHJpbmcsXHJcbiAgICBwb2ludD86ICAgICBzdHJpbmcsXHJcbiAgICBhdXRvX21vZGU/OiBzdHJpbmcsXHJcbiAgICBpc19hY3RpdmU/OiBzdHJpbmcsXHJcbiAgICBpc19kZWxldGU/OiBzdHJpbmcsXHJcbiAgICBzYXZlX3RpbWU/OiBzdHJpbmcsXHJcbiAgICBteXBvcz86ICAgICBKU09OX01vdmFibGVQb2ludCxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFsZXJ0X3NhdmVpbmZvX2luZm8oYTogSlNPTl9TYXZlSW5mb3x1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgIGlmIChhID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgIGFsZXJ0KFwiU2F2ZSBJbmZvOlwiIFxyXG4gICAgICAgICsgXCJcXG5zYXZlX2lkOiAgICBcIiArIChhLnNhdmVfaWQgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnBsYXllcl9pZDogIFwiICsgKGEucGxheWVyX2lkID8/ICc/JylcclxuICAgICAgICArIFwiXFxudW5pcV9ubzogICAgXCIgKyAoYS51bmlxX25vICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG50aXRsZTogICAgICBcIiArIChhLnRpdGxlICAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmRldGFpbDogICAgIFwiICsgKGEuZGV0YWlsICAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxucG9pbnQ6ICAgICAgXCIgKyAoYS5wb2ludCAgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5hdXRvX21vZGU6ICBcIiArIChhLmF1dG9fbW9kZSA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmlzX2FjdGl2ZTogIFwiICsgKGEuaXNfYWN0aXZlID8/ICc/JylcclxuICAgICAgICArIFwiXFxuaXNfZGVsZXRlOiAgXCIgKyAoYS5pc19kZWxldGUgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5zYXZlX3RpbWU6ICBcIiArIChhLnNhdmVfdGltZSA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbm15dXJsOiAgICAgIFwiICsgKGEubXlwb3M/LmN1cl91cmwgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbnRlYW1fdWlkOiAgIFwiICsgKGEubXlwb3M/LnRlYW1fdWlkICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmxvY19raW5kOiAgIFwiICsgKGEubXlwb3M/LmtpbmQgICAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmxvY19uYW1lOiAgIFwiICsgKGEubXlwb3M/Lm5hbWUgICAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmxvY191aWQ6ICAgIFwiICsgKGEubXlwb3M/LmxvY191aWQgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcblwiXHJcbiAgICApO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ19TYXZlSW5mbyBpbXBsZW1lbnRzIElfSlNPTiB7XHJcbiAgICBwdWJsaWMgc2F2ZV9pZDogICBudW1iZXI7XHJcbiAgICBwdWJsaWMgcGxheWVyX2lkOiBudW1iZXI7IFxyXG4gICAgcHVibGljIHVuaXFfbm86ICAgbnVtYmVyO1xyXG4gICAgcHVibGljIHRpdGxlOiAgICAgc3RyaW5nO1xyXG4gICAgcHVibGljIGRldGFpbDogICAgc3RyaW5nO1xyXG4gICAgcHVibGljIHBvaW50OiAgICAgc3RyaW5nO1xyXG4gICAgcHVibGljIGF1dG9fbW9kZTogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBpc19hY3RpdmU6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgaXNfZGVsZXRlOiBib29sZWFuO1xyXG4gICAgcHVibGljIHNhdmVfdGltZTogRGF0ZTtcclxuICAgIHB1YmxpYyBteXBvczogICAgIENfTW92YWJsZVBvaW50O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihhPzogSlNPTl9TYXZlSW5mbykge1xyXG4gICAgICAgIHRoaXMuc2F2ZV9pZCAgID0gLTE7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJfaWQgPSAtMTsgXHJcbiAgICAgICAgdGhpcy51bmlxX25vICAgPSAtMTtcclxuICAgICAgICB0aGlzLnRpdGxlICAgICA9ICcnO1xyXG4gICAgICAgIHRoaXMuZGV0YWlsICAgID0gJyc7XHJcbiAgICAgICAgdGhpcy5wb2ludCAgICAgPSAnJztcclxuICAgICAgICB0aGlzLmF1dG9fbW9kZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNfYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzX2RlbGV0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2F2ZV90aW1lID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5teXBvcyAgICAgPSBuZXcgQ19Nb3ZhYmxlUG9pbnQoKTtcclxuXHJcbiAgICAgICAgaWYgKGEgIT09IHVuZGVmaW5lZCkgdGhpcy5fX2luaXQoYSk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX19pbml0KHM6IEpTT05fU2F2ZUluZm8pOiBDX1NhdmVJbmZvIHtcclxuICAgICAgICB0aGlzLnNhdmVfaWQgICA9IHMuc2F2ZV9pZCAgID8/IHRoaXMuc2F2ZV9pZDtcclxuICAgICAgICB0aGlzLnBsYXllcl9pZCA9IHMucGxheWVyX2lkID8/IHRoaXMucGxheWVyX2lkOyBcclxuICAgICAgICB0aGlzLnVuaXFfbm8gICA9IHMudW5pcV9ubyAgID8/IHRoaXMudW5pcV9ubztcclxuICAgICAgICB0aGlzLnRpdGxlICAgICA9IHMudGl0bGUgICAgID8/IHRoaXMudGl0bGU7XHJcbiAgICAgICAgdGhpcy5kZXRhaWwgICAgPSBzLmRldGFpbCAgICA/PyB0aGlzLmRldGFpbDtcclxuICAgICAgICB0aGlzLnBvaW50ICAgICA9IHMucG9pbnQgICAgID8/IHRoaXMucG9pbnQ7XHJcbiAgICAgICAgaWYgKHMuYXV0b19tb2RlID09PSB1bmRlZmluZWQpIHRoaXMuYXV0b19tb2RlOyBlbHNlIHMuYXV0b19tb2RlICE9PSAnMCcgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgaWYgKHMuaXNfYWN0aXZlID09PSB1bmRlZmluZWQpIHRoaXMuaXNfYWN0aXZlOyBlbHNlIHMuaXNfYWN0aXZlICE9PSAnMCcgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgaWYgKHMuaXNfZGVsZXRlID09PSB1bmRlZmluZWQpIHRoaXMuaXNfZGVsZXRlOyBlbHNlIHMuaXNfZGVsZXRlICE9PSAnMCcgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgaWYgKHMuc2F2ZV90aW1lICE9PSB1bmRlZmluZWQpIHRoaXMuc2F2ZV90aW1lID0gbmV3IERhdGUocy5zYXZlX3RpbWUpOyBcclxuXHJcbiAgICAgICAgaWYgKHMubXlwb3MgICAgICE9PSB1bmRlZmluZWQpIHRoaXMubXlwb3MuZGVjb2RlKHMubXlwb3MpOyBcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBuZXcoYT86IEpTT05fU2F2ZUluZm8pOiBDX1NhdmVJbmZvIHtcclxuICAgICAgICByZXR1cm4gbmV3IENfU2F2ZUluZm8oYSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVuY29kZSgpOiBKU09OX1NhdmVJbmZvIHtcclxuICAgICAgICBsZXQgc2F2ZV9kYXRlOiBzdHJpbmc7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc2F2ZV9kYXRlID0gdGhpcy5zYXZlX3RpbWUudG9JU09TdHJpbmcoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgc2F2ZV9kYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNhdmVfaWQ6ICAgdGhpcy5zYXZlX2lkLCBcclxuICAgICAgICAgICAgICAgIHBsYXllcl9pZDogdGhpcy5wbGF5ZXJfaWQsICBcclxuICAgICAgICAgICAgICAgIHVuaXFfbm86ICAgdGhpcy51bmlxX25vLCBcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAgICAgdGhpcy50aXRsZSwgXHJcbiAgICAgICAgICAgICAgICBkZXRhaWw6ICAgIHRoaXMuZGV0YWlsLCBcclxuICAgICAgICAgICAgICAgIHBvaW50OiAgICAgdGhpcy5wb2ludCwgXHJcbiAgICAgICAgICAgICAgICBhdXRvX21vZGU6IHRoaXMuYXV0b19tb2RlID8gJzEnIDogJzAnLCBcclxuICAgICAgICAgICAgICAgIGlzX2FjdGl2ZTogdGhpcy5pc19hY3RpdmUgPyAnMScgOiAnMCcsIFxyXG4gICAgICAgICAgICAgICAgaXNfZGVsZXRlOiB0aGlzLmlzX2RlbGV0ZSA/ICcxJyA6ICcwJywgXHJcbiAgICAgICAgICAgICAgICBzYXZlX3RpbWU6IHNhdmVfZGF0ZSwgXHJcbiAgICAgICAgICAgICAgICBteXBvczogICAgIHRoaXMubXlwb3MuZW5jb2RlKCksXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ1NhdmVEYXRhIEVuY29kZSBFcnJvcjogJyArIGVycik7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlY29kZShzOiBKU09OX1NhdmVJbmZvKTogQ19TYXZlSW5mbyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX19pbml0KHMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgYWxlcnQoKTogdm9pZCB7XHJcbiAgICAgICAgYWxlcnQoXCJTYXZlSW5mbyBEQVRBOlwiIFxyXG4gICAgICAgICAgICArIFwiXFxuc2F2ZV9pZDogICAgXCIgKyAodGhpcy5zYXZlX2lkICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxucGxheWVyX2lkOiAgXCIgKyAodGhpcy5wbGF5ZXJfaWQgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxudW5pcV9ubzogICAgXCIgKyAodGhpcy51bmlxX25vICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxudGl0bGU6ICAgICAgXCIgKyAodGhpcy50aXRsZSAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuZGV0YWlsOiAgICAgXCIgKyAodGhpcy5kZXRhaWwgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxucG9pbnQ6ICAgICAgXCIgKyAodGhpcy5wb2ludCAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuYXV0b19tb2RlOiAgXCIgKyAodGhpcy5hdXRvX21vZGU/J1knOidOJylcclxuICAgICAgICAgICAgKyBcIlxcbmlzX2FjdGl2ZTogIFwiICsgKHRoaXMuaXNfYWN0aXZlPydZJzonTicpXHJcbiAgICAgICAgICAgICsgXCJcXG5pc19kZWxldGU6ICBcIiArICh0aGlzLmlzX2RlbGV0ZT8nWSc6J04nKVxyXG4gICAgICAgICAgICArIFwiXFxubXl1cmw6ICAgICAgXCIgKyAodGhpcy5teXBvcy51cmwoKSAgICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnRlYW1fdWlkOiAgIFwiICsgKHRoaXMubXlwb3MudGlkKCkgICAgICA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5sb2Nfa2luZDogICBcIiArICh0aGlzLm15cG9zLmdldF9sY2tkKCkgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxubG9jX25hbWU6ICAgXCIgKyAodGhpcy5teXBvcy5nZXRfbmFtZSgpID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbmxvY191aWQ6ICAgIFwiICsgKHRoaXMubXlwb3MuZ2V0X3VpZCgpICA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5cIlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBDX1BvaW50IH0gICAgICAgICAgICAgICBmcm9tIFwiLi9DX1BvaW50XCI7XHJcbmltcG9ydCB7IENfUG9pbnREaXIgfSAgICAgICAgICAgIGZyb20gJy4vQ19Qb2ludERpcic7XHJcbmltcG9ydCB7IENfTW92YWJsZVBvaW50IH0gICAgICAgIGZyb20gXCIuL0NfTW92YWJsZVBvaW50XCI7XHJcbmltcG9ydCB7IENfV2Fsa2VyLCBKU09OX1dhbGtlciB9IGZyb20gXCIuL0NfV2Fsa2VyXCI7XHJcbmltcG9ydCB7IENfSGVybywgSlNPTl9IZXJvIH0gICAgIGZyb20gXCIuL0NfSGVyb1wiO1xyXG5pbXBvcnQgeyBJX01hemVPYmogfSAgICAgICAgICAgICBmcm9tIFwiLi9DX01hemVPYmpcIjtcclxuaW1wb3J0IHsgSlNPTl9BbnkgfSAgICAgICAgICAgICAgZnJvbSBcIi4vQ19TYXZlSW5mb1wiO1xyXG5pbXBvcnQgeyBDX0N1cnJlbnRUZWFtVmlldyB9ICAgICBmcm9tIFwiLi9DX1RlYW1WaWV3XCI7XHJcbmltcG9ydCB7IElfTWF6ZU9ialZpZXcsIEpTT05fTWF6ZU9ialZpZXcgfSAgZnJvbSBcIi4vQ19NYXplT2JqVmlld1wiO1xyXG5pbXBvcnQgeyBDX0dvb2QsICBUX0dvb2RLaW5kIH0gICBmcm9tIFwiLi9DX0dvb2RcIjtcclxuaW1wb3J0IHsgQ19Hb29kc0xpc3QsIEpTT05fR29vZHNMaXN0IH0gZnJvbSBcIi4vQ19Hb29kc0xpc3ROR1wiO1xyXG5pbXBvcnQgeyBfZ2V0X3V1aWQgfSAgICAgICAgICAgICBmcm9tIFwiLi4vZF91dGwvRl9SYW5kXCI7XHJcbmltcG9ydCB7IENfV25kcldhbGtlciwgSV9XbmRyV2Fsa2VyIH0gICAgICAgICAgZnJvbSBcIi4vQ19XbmRyV2Fsa2VyXCI7XHJcbmltcG9ydCB7IElfTWF6ZU9ialZpZXcyWCB9IGZyb20gXCIuL0NfTWF6ZU9ialZpZXcyWFwiO1xyXG5pbXBvcnQgeyBDX0N1cnJlbnRUZWFtVmlldzJYIH0gZnJvbSBcIi4vQ19UZWFtVmlldzJYXCI7XHJcbmltcG9ydCB7IElfV3JlcyB9IGZyb20gXCIuL0NfV3Jlc1wiO1xyXG5pbXBvcnQgeyBJX1duZHIgfSBmcm9tIFwiLi9DX1duZHJcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9UZWFtIGV4dGVuZHMgSlNPTl9Bbnkge1xyXG4gICAgaWQ/OiAgICAgICAgbnVtYmVyLCBcclxuICAgIHVuaXFfaWQ/OiAgIHN0cmluZywgXHJcbiAgICBzYXZlX2lkPzogICBudW1iZXIsIFxyXG4gICAgbmFtZT86ICAgICAgc3RyaW5nLCBcclxuICAgIGxvY2F0ZT86ICAgIEpTT05fV2Fsa2VyLFxyXG4gICAgZ29sZD86ICAgICAgbnVtYmVyLFxyXG4vLyAgICBnb29kcz86ICAgICBKU09OX0dvb2RzTGlzdCxcclxuICAgIGhlcm9lcz86ICAgIEpTT05fSGVyb1tdLCBcclxuICAgIG1vdGlvbj86ICAgIHN0cmluZyxcclxuICAgIHZpZXc/OiAgICAgIEpTT05fTWF6ZU9ialZpZXd8dW5kZWZpbmVkLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxlcnRfdGVhbV9pbmZvKGE6IEpTT05fVGVhbXx1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgIGlmIChhID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgIGFsZXJ0KFwiVGVhbSBJbmZvOlwiIFxyXG4gICAgICAgICsgXCJcXG5pZDogICAgXCIgICAgICsgKGEuaWQgICAgICAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxudW5pcV9pZDogIFwiICArIChhLnVuaXFfaWQgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbm5hbWU6ICBcIiAgICAgKyAoYS5uYW1lICAgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5zYXZlX2lkOiBcIiAgICsgKGEuc2F2ZV9pZCAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxudXJsOiAgXCIgICAgICArIChhLmxvY2F0ZT8uY3VyX3VybCAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmxja2Q6IFwiICAgICAgKyAoYS5sb2NhdGU/LmtpbmQgICAgICAgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5sY25tOiBcIiAgICAgICsgKGEubG9jYXRlPy5uYW1lICAgICAgID8/ICc/JylcclxuICAgICAgICArIFwiXFxubGNpZDogXCIgICAgICArIChhLmxvY2F0ZT8ubG9jX3VpZCAgICA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmN1cl94OiBcIiAgICAgKyAoYS5sb2NhdGU/LmxvY19wb3M/LnggPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5jdXJfeTogXCIgICAgICsgKGEubG9jYXRlPy5sb2NfcG9zPy55ID8/ICc/JylcclxuICAgICAgICArIFwiXFxuY3VyX3o6IFwiICAgICArIChhLmxvY2F0ZT8ubG9jX3Bvcz8ueiA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcbmN1cl9kOiBcIiAgICAgKyAoYS5sb2NhdGU/LmxvY19wb3M/LmQgPz8gJz8nKVxyXG4gICAgICAgICsgXCJcXG5nb2xkOiBcIiAgICAgICsgKGEuZ29sZCAgICAgID8/ICAwIClcclxuLy8gICAgICAgICsgXCJcXG5nb29kczogXCIgICAgICsgKE9iamVjdC5rZXlzKGEuZ29vZHM/P1tdKS5sZW5ndGgpXHJcbiAgICAgICAgKyBcIlxcbmhlcm9lczogXCIgICAgKyAoYS5oZXJvZXM/Lmxlbmd0aCA/PyAnPycpXHJcbiAgICAgICAgKyBcIlxcblwiXHJcbiAgICApO1xyXG5cclxuLy8gICAgaWYgKGEuaGVyb2VzICE9PSB1bmRlZmluZWQpIGFsZXJ0X2hlcm9lc19pbmZvKGEuaGVyb2VzKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDX1RlYW0gaW1wbGVtZW50cyBJX01hemVPYmoge1xyXG4gICAgcHJvdGVjdGVkIG15X2lkOiAgICAgbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIG15X25hbWU6ICAgc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIHVuaXFfaWQ6ICAgc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIHNhdmVfaWQ6ICAgbnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIG15V2Fsa2VyOiAgQ19XYWxrZXI7XHJcbiAgICBwcm90ZWN0ZWQgbXlXa1dhbGtlcjpJX1duZHJXYWxrZXJ8dW5kZWZpbmVkO1xyXG4gICAgcHJvdGVjdGVkIGdvbGQ6ICAgICAgbnVtYmVyO1xyXG4vLyAgICBwcm90ZWN0ZWQgZ29vZHM6ICAgICBDX0dvb2RzTGlzdDtcclxuICAgIHByb3RlY3RlZCBoZXJvZXM6ICAgIHtbdWlkOiBzdHJpbmddOiBDX0hlcm99O1xyXG5cclxuICAgIHByb3RlY3RlZCBteVZpZXc6ICAgIElfTWF6ZU9ialZpZXcgIHx1bmRlZmluZWQ7XHJcbiAgICBwcm90ZWN0ZWQgbXlWaWV3MkQ6ICBJX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkO1xyXG4gICAgcHJvdGVjdGVkIG15VmlldzJNOiAgSV9NYXplT2JqVmlldzJYfHVuZGVmaW5lZDtcclxuICAgIHByb3RlY3RlZCBob3BlX21vdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihqPzogSlNPTl9UZWFtKSB7XHJcblxyXG4gICAgICAgIHRoaXMubXlfaWQgICAgID0gIDA7XHJcbiAgICAgICAgdGhpcy5teV9uYW1lICAgPSAnTmVvIFRlYW0/JztcclxuICAgICAgICB0aGlzLnVuaXFfaWQgICA9ICdtYWlfdGVhbSMnICsgX2dldF91dWlkKCk7XHJcbiAgICAgICAgdGhpcy5zYXZlX2lkICAgPSAgMDtcclxuXHJcbiAgICAgICAgdGhpcy5teVZpZXcgICAgPSBuZXcgQ19DdXJyZW50VGVhbVZpZXcgICh0aGlzKSBhcyBJX01hemVPYmpWaWV3O1xyXG4gICAgICAgIHRoaXMubXlWaWV3MkQgID0gbmV3IENfQ3VycmVudFRlYW1WaWV3MlgodGhpcykgYXMgSV9NYXplT2JqVmlldzJYO1xyXG4gICAgICAgIHRoaXMubXlWaWV3Mk0gID0gbmV3IENfQ3VycmVudFRlYW1WaWV3MlgodGhpcykgYXMgSV9NYXplT2JqVmlldzJYO1xyXG5cclxuICAgICAgICB0aGlzLm15V2Fsa2VyICA9IG5ldyBDX1dhbGtlcigpO1xyXG4gICAgICAgIHRoaXMubXlXYWxrZXIuc2V0X3RpZCh0aGlzLnVpZCgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5nb2xkICAgPSAwO1xyXG4vLyAgICAgICAgdGhpcy5nb29kcyAgPSBuZXcgQ19Hb29kc0xpc3QoKTtcclxuICAgICAgICB0aGlzLmhlcm9lcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuaG9wZV9tb3Rpb24gPSAnTk9QJzsgICAgXHJcbiAgICAgICAgaWYgKGogIT09IHVuZGVmaW5lZCkgdGhpcy5kZWNvZGUoaik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZnJlZSgpOnZvaWQge307XHJcbiAgICBwdWJsaWMgc2V0X3BycChhcmcgOiBKU09OX1RlYW0pIHtcclxuICAgICAgICB0aGlzLmRlY29kZShhcmcpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1aWQoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMudW5pcV9pZH1cclxuXHJcbiAgICBwdWJsaWMgd2l0aGluKHA6IENfUG9pbnQpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBoZXJlID0gdGhpcy5teVdhbGtlcj8uZ2V0X3AoKTtcclxuICAgICAgICByZXR1cm4gaGVyZT8ud2l0aGluKHApID8/IGZhbHNlOyBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdmlldygpOiAgICAgICBJX01hemVPYmpWaWV3fHVuZGVmaW5lZCB7cmV0dXJuIHRoaXMubXlWaWV3fVxyXG4gICAgcHVibGljIHNldFZpZXcodmlldzogSV9NYXplT2JqVmlld3x1bmRlZmluZWQpOiB2b2lkIHt0aGlzLm15VmlldyA9IHZpZXd9XHJcblxyXG4gICAgcHVibGljIHZpZXcyRCgpOiAgICAgICAgIElfTWF6ZU9ialZpZXcyWHx1bmRlZmluZWQge3JldHVybiB0aGlzLm15VmlldzJEfVxyXG4gICAgcHVibGljIHNldFZpZXcyRCh2aWV3MkQ6IElfTWF6ZU9ialZpZXcyWHx1bmRlZmluZWQpOiB2b2lkIHt0aGlzLm15VmlldzJEID0gdmlldzJEfVxyXG5cclxuICAgIHB1YmxpYyB2aWV3Mk0oKTogICAgICAgICBJX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkIHtyZXR1cm4gdGhpcy5teVZpZXcyTX1cclxuICAgIHB1YmxpYyBzZXRWaWV3Mk0odmlldzJNOiBJX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkKTogdm9pZCB7dGhpcy5teVZpZXcyTSA9IHZpZXcyTX1cclxuICAgIFxyXG4gICAgcHVibGljIGdldFdhbGtlcigpOiAgQ19XYWxrZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm15V2Fsa2VyO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHdhbGtlcigpOiBJX1duZHJXYWxrZXJ8dW5kZWZpbmVkIHtyZXR1cm4gdGhpcy5teVdrV2Fsa2VyfVxyXG4gICAgcHVibGljIHNldF93YWxrZXIod2R3YWxrZXI6IElfV25kcldhbGtlcnx1bmRlZmluZWQpOiB2b2lkIHt0aGlzLm15V2tXYWxrZXIgPSB3ZHdhbGtlcn1cclxuXHJcbiAgICBwdWJsaWMgd3JlcygpOiAgIElfV25kcltdfHVuZGVmaW5lZCB7cmV0dXJuIHVuZGVmaW5lZH1cclxuICAgIHB1YmxpYyBzZXRfd3Jlcyh3cmVzOiBJX1duZHJbXXx1bmRlZmluZWQpOiB2b2lkIHtyZXR1cm59XHJcbiAgICBwdWJsaWMgYWRkX3duZHIod25kcjogSV9XbmRyKTogdm9pZCB7cmV0dXJufVxyXG5cclxuICAgIHB1YmxpYyBjYW5UaHJvdWdoKCk6IGJvb2xlYW4ge3JldHVybiB0cnVlfVxyXG4gICAgcHVibGljIGhpdERhbWFnZSgpOiBudW1iZXIgIHtyZXR1cm4gMH1cclxuXHJcbiAgICBwdWJsaWMgaHJlcygpOiAgQ19IZXJvW10ge1xyXG4gICAgICAgIGNvbnN0IGhyZXM6IENfSGVyb1tdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaWkgaW4gdGhpcy5oZXJvZXMpIGhyZXMucHVzaCh0aGlzLmhlcm9lc1tpaV0pO1xyXG4gICAgICAgIHJldHVybiBocmVzO1xyXG4gICAgfSBcclxuICAgIHB1YmxpYyBjbGVhcl9ocmVzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaGVyb2VzID0ge307XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkX2hlcm8oaGVybzogQ19IZXJvKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5oZXJvZXNbaGVyby51aWQoKV0gPSBoZXJvO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJtdl9oZXJvKGhlcm86IENfSGVybyk6IHZvaWQge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmhlcm9lc1toZXJvLnVpZCgpXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0X2xvYygpOiBDX01vdmFibGVQb2ludCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXlXYWxrZXI7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0X2xvYyhsb2M6IENfTW92YWJsZVBvaW50KTogdm9pZCB7XHJcbiAgICAgICAgKHRoaXMubXlXYWxrZXIgPz89IG5ldyBDX1dhbGtlcigpKS5kZWNvZGUobG9jLmVuY29kZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0X3BkKCk6IENfUG9pbnREaXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm15V2Fsa2VyLmdldF9wZCgpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldF9wZChwZDogQ19Qb2ludERpcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubXlXYWxrZXIuc2V0X3BkKHBkKTtcclxuICAgIH1cclxuXHJcbi8qXHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21fb2JqX3RvX3N0cmluZyhvYTogQ19UZWFtKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2EsIG51bGwsIFwiXFx0XCIpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBmcm9tX29iakFycmF5X3RvX3N0cmluZyhvYWE6IHtbdWlkOiBzdHJpbmddOiBDX1RlYW19KTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBvYSA9IFtdIGFzIENfVGVhbVtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgaWkgaW4gb2FhKSBvYS5wdXNoKG9hYVtpaV0pO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYSwgbnVsbCwgXCJcXHRcIik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb21fc3RyaW5nX3RvX29iaih0eHQ6IHN0cmluZyk6IENfVGVhbSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgaiAgID0gSlNPTi5wYXJzZSh0eHQpIGFzIENfVGVhbVtdO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENfVGVhbShqKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDX1RlYW0oKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBmcm9tX3N0cmluZ190b19vYmpBcnJheSh0eHQ6IHN0cmluZyk6IHtbdWlkOiBzdHJpbmddOiBDX1RlYW19IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBqICAgPSBKU09OLnBhcnNlKHR4dCkgYXMgSlNPTl9UZWFtW107XHJcbiAgICAgICAgICAgIGNvbnN0IG1wYSA9IHt9IGFzIHtbaWQ6IHN0cmluZ106IENfVGVhbX07XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgamogb2Ygaikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWFhID0gbmV3IENfVGVhbSgpLmRlY29kZShqaik7XHJcbiAgICAgICAgICAgICAgICBtcGFbYWFhLnVpZCgpXSA9IGFhYTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbXBhO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuKi9cclxuICAgIFxyXG4gICAgcHVibGljIGVuY29kZSgpOiBKU09OX1RlYW0ge1xyXG4gICAgICAgIHRoaXMuZ2V0X2xvYygpOyAvLyBMb2NhdGlvbuaDheWgseOCkuacgOaWsOOBq+abtOaWsFxyXG5cclxuICAgICAgICBjb25zdCBqc29uX2hlcm9lczogSlNPTl9IZXJvW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpaSBpbiB0aGlzLmhlcm9lcykganNvbl9oZXJvZXMucHVzaCh0aGlzLmhlcm9lc1tpaV0uZW5jb2RlKCkpOyAgXHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiAgICAgICAgdGhpcy5teV9pZCxcclxuICAgICAgICAgICAgbmFtZTogICAgICB0aGlzLm15X25hbWUsXHJcbiAgICAgICAgICAgIHVuaXFfaWQ6ICAgdGhpcy51bmlxX2lkLFxyXG4gICAgICAgICAgICBzYXZlX2lkOiAgIHRoaXMuc2F2ZV9pZCxcclxuICAgICAgICAgICAgbG9jYXRlOiAgICB0aGlzLm15V2Fsa2VyLmVuY29kZSgpLFxyXG4gICAgICAgICAgICBnb2xkOiAgICAgIHRoaXMuZ29sZCxcclxuLy8gICAgICAgICAgICBnb29kczogICAgIHRoaXMuZ29vZHMuZW5jb2RlKCksXHJcbiAgICAgICAgICAgIGhlcm9lczogICAganNvbl9oZXJvZXMsXHJcbiAgICAgICAgICAgIG1vdGlvbjogICAgdGhpcy5ob3BlX21vdGlvbixcclxuICAgICAgICAgICAgdmlldzogICAgICB0aGlzLm15Vmlldz8uZW5jb2RlKCkgPz8ge30sXHJcbiAgICAgICAgICAgIHZpZXcyRDogICAgdGhpcy5teVZpZXcyRD8uZW5jb2RlKCkgPz8ge30sXHJcbiAgICAgICAgICAgIHZpZXcyTTogICAgdGhpcy5teVZpZXcyTT8uZW5jb2RlKCkgPz8ge30sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkZWNvZGUoYTogSlNPTl9UZWFtfHVuZGVmaW5lZCk6IENfVGVhbSB7XHJcbiAgICAgICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgIHJldHVybiB0aGlzO1xyXG5cclxuICAgICAgICBpZiAoYS5pZCAgICE9PSB1bmRlZmluZWQpICAgIHRoaXMubXlfaWQgICAgICAgPSBhLmlkO1xyXG4gICAgICAgIGlmIChhLm5hbWUgIT09IHVuZGVmaW5lZCkgICAgdGhpcy5teV9uYW1lICAgICA9IGEubmFtZTtcclxuICAgICAgICBpZiAoYS51bmlxX2lkICE9PSB1bmRlZmluZWQpIHRoaXMudW5pcV9pZCAgICAgPSBhLnVuaXFfaWQ7XHJcbiAgICAgICAgaWYgKGEuc2F2ZV9pZCAhPT0gdW5kZWZpbmVkKSB0aGlzLnNhdmVfaWQgICAgID0gYS5zYXZlX2lkO1xyXG4gICAgICAgIGlmIChhLm1vdGlvbiAhPT0gdW5kZWZpbmVkKSAgdGhpcy5ob3BlX21vdGlvbiA9IGEubW90aW9uO1xyXG5cclxuICAgICAgICBpZiAoYS5sb2NhdGUgIT09IHVuZGVmaW5lZCkgIHRoaXMubXlXYWxrZXIuZGVjb2RlKGEubG9jYXRlKTtcclxuICAgICAgICBpZiAoYS5nb2xkICAgIT09IHVuZGVmaW5lZCkgIHRoaXMuZ29sZCA9IGEuZ29sZDtcclxuLy8gICAgICAgIGlmIChhLmdvb2RzICAhPT0gdW5kZWZpbmVkKSAgdGhpcy5nb29kcy5kZWNvZGUoYS5nb29kcyk7XHJcblxyXG4gICAgICAgIGlmIChhLmhlcm9lcyAhPT0gdW5kZWZpbmVkKSAge1xyXG4gICAgICAgICAgICB0aGlzLmhlcm9lcyA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGpzb25faGVybyBvZiBhLmhlcm9lcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVybyA9IG5ldyBDX0hlcm8oanNvbl9oZXJvKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGVyb2VzW2hlcm8udWlkKCldID0gaGVybztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuLypcclxuICAgICAgICBpZiAoYS52aWV3ICAgICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGEudmlldykubGVuZ3RoID4gMCkgdGhpcy5teVZpZXcgPSBDX01hemVPYmpWaWV3Lm5ld09iaihhLnZpZXcpOyBcclxuICAgICAgICAgICAgZWxzZSB0aGlzLm15VmlldyA9IG5ldyBDX0N1cnJlbnRUZWFtVmlldyh0aGlzKSBhcyBJX01hemVPYmpWaWV3OyBcclxuICAgICAgICB9XHJcbiovXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGVuY29kZV9hbGwoYWxsX3RlYW06IENfVGVhbVtdKTogSlNPTl9UZWFtW10ge1xyXG4gICAgICAgIGNvbnN0IGFsbF90ZWFtX2RhdGE6IEpTT05fVGVhbVtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgdGVhbSBvZiBhbGxfdGVhbSkge1xyXG4gICAgICAgICAgICBhbGxfdGVhbV9kYXRhLnB1c2godGVhbS5lbmNvZGUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbGxfdGVhbV9kYXRhO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBkZWNvZGVfYWxsKGFsbF90ZWFtX2RhdGE6IEpTT05fVGVhbVtdKTogQ19UZWFtW10ge1xyXG4gICAgICAgIGNvbnN0IGFsbF90ZWFtOiBDX1RlYW1bXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IHRlYW1fZGF0YSBvZiBhbGxfdGVhbV9kYXRhKSB7XHJcbiAgICAgICAgICAgIGFsbF90ZWFtLnB1c2goKG5ldyBDX1RlYW0oKSkuZGVjb2RlKHRlYW1fZGF0YSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWxsX3RlYW07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBhbGVydCgpOiB2b2lkIHtcclxuICAgICAgICBhbGVydChcIlRlYW0gSW5mbzpcIiBcclxuICAgICAgICAgICAgKyBcIlxcbmlkOiAgICBcIiAgICAgKyAodGhpcy5teV9pZCAgICAgICAgICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnVuaXFfaWQ6ICBcIiAgKyAodGhpcy51bmlxX2lkICAgICAgICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbm5hbWU6ICBcIiAgICAgKyAodGhpcy5teV9uYW1lICAgICAgICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnNhdmVfaWQ6IFwiICAgKyAodGhpcy5zYXZlX2lkICAgICAgICAgID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbnVybDogIFwiICAgICAgKyAodGhpcy5teVdhbGtlci51cmwoKSAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxubGNrZDogXCIgICAgICArICh0aGlzLm15V2Fsa2VyLmdldF9sY2tkX3N0cigpID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbmxjbm06IFwiICAgICAgKyAodGhpcy5teVdhbGtlci5nZXRfbmFtZSgpICAgICA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5sY2lkOiBcIiAgICAgICsgKHRoaXMubXlXYWxrZXIuZ2V0X3VpZCgpICAgICAgPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuY3VyX3g6IFwiICAgICArICh0aGlzLm15V2Fsa2VyLmdldF9wKCkueCA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5jdXJfeTogXCIgICAgICsgKHRoaXMubXlXYWxrZXIuZ2V0X3AoKS55ID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcbmN1cl96OiBcIiAgICAgKyAodGhpcy5teVdhbGtlci5nZXRfcCgpLnogPz8gJz8nKVxyXG4gICAgICAgICAgICArIFwiXFxuY3VyX2Q6IFwiICAgICArICh0aGlzLm15V2Fsa2VyLmdldF9kKCkgICA/PyAnPycpXHJcbiAgICAgICAgICAgICsgXCJcXG5nb2xkOiBcIiAgICAgICsgKE9iamVjdC5rZXlzKHRoaXMuZ29sZCA/PyB7fSkubGVuZ3RoKVxyXG4gICAgICAgICAgICArIFwiXFxuaGVyb2VzOiBcIiAgICArICh0aGlzLmhlcm9lcz8ubGVuZ3RoID8/ICc/JylcclxuICAgICAgICAgICAgKyBcIlxcblwiXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBhbGVydF9ocmVzKCk6IHZvaWQge1xyXG4vLyAgICAgICAgYWxlcnQoXCJUZWFtIEluZm86XCIpO1xyXG4gICAgICAgIGZvciAoY29uc3QgaWkgaW4gdGhpcy5oZXJvZXMpIHRoaXMuaGVyb2VzW2lpXS5hbGVydCgpO1xyXG4gICAgfVxyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgVF9EaXJlY3Rpb24gfSAgICAgICBmcm9tICcuL0NfUG9pbnREaXInO1xyXG5pbXBvcnQgeyBDX1RlYW0sIEpTT05fVGVhbSB9IGZyb20gXCIuL0NfVGVhbVwiO1xyXG5pbXBvcnQgeyBUX1dhbGwgfSAgICAgICAgICAgIGZyb20gXCIuLi9kX21kbC9DX1dhbGxcIjtcclxuaW1wb3J0IHsgQ19NYXplT2JqVmlldywgSV9NYXplT2JqVmlldywgSlNPTl9NYXplT2JqVmlldywgVF9SZWN0IH0gIGZyb20gXCIuL0NfTWF6ZU9ialZpZXdcIjtcclxuXHJcbnR5cGUgVF94eSA9IHt4OiBudW1iZXIsIHk6IG51bWJlcn07XHJcblxyXG5leHBvcnQgY2xhc3MgQ19DdXJyZW50VGVhbVZpZXcgIGltcGxlbWVudHMgSV9NYXplT2JqVmlldyB7XHJcbiAgICBwcml2YXRlIG15X3RlYW06IENfVGVhbTtcclxuICAgIHByaXZhdGUgbXlfbGF5ZXI6ICBudW1iZXIgPSA5OTtcclxuICAgIHB1YmxpYyAgY29uc3RydWN0b3IodGVhbTogQ19UZWFtKSB7XHJcbiAgICAgICAgdGhpcy5teV90ZWFtID0gdGVhbTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBmcmVlKCk6IHZvaWQge31cclxuXHJcbiAgICBwdWJsaWMgbGF5ZXIoKTogbnVtYmVyICAgICAgICAge3JldHVybiB0aGlzLm15X2xheWVyO31cclxuICAgIHB1YmxpYyBzZXRfbGF5ZXIobGF5ZXI6IG51bWJlcik6IHZvaWQge3RoaXMubXlfbGF5ZXIgPSBsYXllcjt9XHJcbiAgICBwdWJsaWMgbGV0dGVyKCk6IHN0cmluZ3xudWxsIHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMubXlfdGVhbS5nZXRXYWxrZXIoKS5nZXRfZCgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjogcmV0dXJuICfihpEnO1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLkU6IHJldHVybiAn4oaSJztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5TOiByZXR1cm4gJ+KGkyc7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzogcmV0dXJuICfihpAnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gJ/CfjIAnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRpcigpOiBUX0RpcmVjdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXlfdGVhbS5nZXRXYWxrZXIoKS5nZXRfZCgpID8/IFRfRGlyZWN0aW9uLk47XHJcbiAgICB9XHJcbiAgICBzZXRfZGlyKGQ6IFRfRGlyZWN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5teV90ZWFtLmdldFdhbGtlcigpLnNldF9kKGQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgY2FuU2hvdygpOiBib29sZWFue3JldHVybiBmYWxzZX1cclxuICAgIHB1YmxpYyBwYWRfdCgpOiAgIG51bWJlciB7cmV0dXJuIDAuMH0gXHJcbiAgICBwdWJsaWMgcGFkX2QoKTogICBudW1iZXIge3JldHVybiAwLjB9IFxyXG4gICAgcHVibGljIHBhZF9zKCk6ICAgbnVtYmVyIHtyZXR1cm4gMC4wfSBcclxuICAgIHB1YmxpYyBjb2xfZigpOiAgIHN0cmluZ3xudWxsIHtyZXR1cm4gbnVsbH0gXHJcbiAgICBwdWJsaWMgY29sX2IoKTogICBzdHJpbmd8bnVsbCB7cmV0dXJuIG51bGx9IFxyXG4gICAgcHVibGljIGNvbF9zKCk6ICAgc3RyaW5nfG51bGwge3JldHVybiBudWxsfSBcclxuICAgIHB1YmxpYyBjb2xfdCgpOiAgIHN0cmluZ3xudWxsIHtyZXR1cm4gbnVsbH0gXHJcbiAgICBwdWJsaWMgY29sX2QoKTogICBzdHJpbmd8bnVsbCB7cmV0dXJuIG51bGx9IFxyXG4gICAgcHVibGljIGNvbF9sKCk6ICAgc3RyaW5nfG51bGwge3JldHVybiBudWxsfSBcclxuICAgIHB1YmxpYyBjb2xfMigpOiAgIHN0cmluZ3xudWxsIHtyZXR1cm4gbnVsbH0gXHJcbiAgICBwdWJsaWMgY29sX0woKTogICBzdHJpbmd8bnVsbCB7cmV0dXJuIG51bGx9IFxyXG5cclxuICAgIHB1YmxpYyBkcm93M0QoZnJvdDogVF9XYWxsLCBiYWNrOiBUX1dhbGwpOiB2b2lkIHt9XHJcblxyXG4gICAgcHVibGljIGRyb3cyRChyOiAgVF9SZWN0KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbiA9IENfTWF6ZU9ialZpZXcuZ2V0X2NvbnRleHQyRCgpO1xyXG4gICAgICAgIGlmIChjb24gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICBcclxuICAgIC8qKioqKioqKioqKioqKioqKioqXHJcbiAgICAgICAgY29uLmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbi5tb3ZlVG8oci50bC54LCByLnRsLnkpO1xyXG4gICAgICAgIGNvbi5saW5lVG8oci50ci54LCByLnRyLnkpO1xyXG4gICAgICAgIGNvbi5saW5lVG8oci5kci54LCByLmRyLnkpO1xyXG4gICAgICAgIGNvbi5saW5lVG8oci5kbC54LCByLmRsLnkpO1xyXG4gICAgICAgIGNvbi5jbG9zZVBhdGgoKTtcclxuICAgIFxyXG4gICAgICAgIGNvbi5maWxsU3R5bGUgICA9IFwiI2ZmMzMzM1wiO1xyXG4gICAgICAgIGNvbi5maWxsKCk7XHJcbiAgICAqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgICAgICAgLy8gRHJhdyB0aGUgYXJyb3dcclxuICAgICAgICBzd2l0Y2ggKHRoaXMubXlfdGVhbS5nZXRXYWxrZXIoKS5nZXRfZCgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjogIC8vIOKGkVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm93MkRfYXJyb3coe3g6IChyLnRsLnggKyByLnRyLngpLzIsIHk6ci50bC55fSwgci5kbCwgci5kcik7YnJlYWtcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5FOiAgLy8g4oaSXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3cyRF9hcnJvdyh7eTogKHIudHIueSArIHIuZHIueSkvMiwgeDpyLnRyLnh9LCByLnRsLCByLmRsKTticmVhaztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5TOiAvLyDihpNcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJvdzJEX2Fycm93KHt4OiAoci5kbC54ICsgci5kci54KS8yLCB5OnIuZGwueX0sIHIudHIsIHIudGwpO2JyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlc6IC8vIOKGkFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm93MkRfYXJyb3coe3k6IChyLnRsLnkgKyByLmRsLnkpLzIsIHg6ci50bC54fSwgci5kciwgci50cik7YnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGRyb3cyRF9hcnJvdyh0b3A6IFRfeHksIGxlZnQ6IFRfeHksIHJpZ2h0OiBUX3h5KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY29uID0gQ19NYXplT2JqVmlldy5nZXRfY29udGV4dDJEKCk7XHJcbiAgICAgICAgaWYgKGNvbiA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbi5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb24ubW92ZVRvKHRvcC54LCB0b3AueSk7XHJcbiAgICAgICAgY29uLmxpbmVUbyhyaWdodC54LCByaWdodC55KTtcclxuICAgICAgICBjb24ubGluZVRvKGxlZnQueCwgbGVmdC55KTtcclxuICAgICAgICBjb24uY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICAgIGNvbi5maWxsU3R5bGUgICA9IFwiI2ZmNjY2NlwiO1xyXG4gICAgICAgIGNvbi5maWxsKCk7XHJcblxyXG4gICAgICAgIGNvbi5zdHJva2VTdHlsZSA9IFwiI2ZmMzMzM1wiO1xyXG4gICAgICAgIGNvbi5saW5lV2lkdGggICA9IDI7XHJcbiAgICAgICAgY29uLnN0cm9rZSgpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbmNvZGUoKTogSlNPTl9NYXplT2JqVmlldyB7cmV0dXJuIHtjbmFtZTogJ0N1cnJlbnRUZWFtVmlldyd9fVxyXG4gICAgcHVibGljIGRlY29kZShqOiBKU09OX01hemVPYmpWaWV3fHVuZGVmaW5lZCk6IElfTWF6ZU9ialZpZXcge3JldHVybiB0aGlzIGFzIElfTWF6ZU9ialZpZXd9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBJX01hemVPYmpWaWV3MlgsIEpTT05fTWF6ZU9ialZpZXcyWCwgVF9SZWN0IH0gZnJvbSAnLi9DX01hemVPYmpWaWV3MlgnO1xyXG5pbXBvcnQgeyBUX0RpcmVjdGlvbiB9ICAgICAgIGZyb20gJy4vQ19Qb2ludERpcic7XHJcbmltcG9ydCB7IENfVGVhbSwgSlNPTl9UZWFtIH0gZnJvbSBcIi4vQ19UZWFtXCI7XHJcbmltcG9ydCB7IFRfV2FsbCB9ICAgICAgICAgICAgZnJvbSBcIi4vQ19XYWxsXCI7XHJcblxyXG50eXBlIFRfeHkgPSB7eDogbnVtYmVyLCB5OiBudW1iZXJ9O1xyXG5cclxuZXhwb3J0IGNsYXNzIENfQ3VycmVudFRlYW1WaWV3MlggIGltcGxlbWVudHMgSV9NYXplT2JqVmlldzJYIHtcclxuICAgIHByaXZhdGUgbXlfdGVhbTogQ19UZWFtO1xyXG4gICAgcHJpdmF0ZSBteV9sYXllcjogIG51bWJlciA9IDk5O1xyXG4gICAgcHVibGljICBjb25zdHJ1Y3Rvcih0ZWFtOiBDX1RlYW0pIHtcclxuICAgICAgICB0aGlzLm15X3RlYW0gPSB0ZWFtO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGZyZWUoKTogdm9pZCB7fVxyXG5cclxuICAgIHB1YmxpYyBsYXllcigpOiBudW1iZXIgICAgICAgICB7cmV0dXJuIHRoaXMubXlfbGF5ZXI7fVxyXG4gICAgcHVibGljIHNldF9sYXllcihsYXllcjogbnVtYmVyKTogdm9pZCB7dGhpcy5teV9sYXllciA9IGxheWVyO31cclxuICAgIHB1YmxpYyBsZXR0ZXIoKTogc3RyaW5nfG51bGwge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5teV90ZWFtLmdldFdhbGtlcigpLmdldF9kKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5OOiByZXR1cm4gJ+KGkSc7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uRTogcmV0dXJuICfihpInO1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlM6IHJldHVybiAn4oaTJztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5XOiByZXR1cm4gJ+KGkCc7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAn8J+MgCc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGNhblNob3coKTogYm9vbGVhbntyZXR1cm4gZmFsc2V9XHJcbiAgICBwdWJsaWMgY29sXzIoKTogICBzdHJpbmd8bnVsbCB7cmV0dXJuIG51bGx9IFxyXG4gICAgcHVibGljIGNvbF9MKCk6ICAgc3RyaW5nfG51bGwge3JldHVybiBudWxsfSBcclxuXHJcbiAgICBwdWJsaWMgZHJvdzJYKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgbnVsbCwgcjogIFRfUmVjdCwgZGlyOiBudW1iZXIpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKGN0eCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgIFxyXG4gICAgLyoqKioqKioqKioqKioqKioqKipcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4Lm1vdmVUbyhyLnRsLngsIHIudGwueSk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhyLnRyLngsIHIudHIueSk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhyLmRyLngsIHIuZHIueSk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhyLmRsLngsIHIuZGwueSk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgXHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSAgID0gXCIjZmYzMzMzXCI7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICoqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuICAgICAgICAvLyBEcmF3IHRoZSBhcnJvd1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5teV90ZWFtLmdldFdhbGtlcigpLmdldF9kKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5OOiAgLy8g4oaRXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3cyWF9hcnJvdyhjdHgsIHt4OiAoci50bC54ICsgci50ci54KS8yLCB5OnIudGwueX0sIHIuZGwsIHIuZHIpO2JyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uRTogIC8vIOKGklxyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm93MlhfYXJyb3coY3R4LCB7eTogKHIudHIueSArIHIuZHIueSkvMiwgeDpyLnRyLnh9LCByLnRsLCByLmRsKTticmVhaztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5TOiAvLyDihpNcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJvdzJYX2Fycm93KGN0eCwge3g6IChyLmRsLnggKyByLmRyLngpLzIsIHk6ci5kbC55fSwgci50ciwgci50bCk7YnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzogLy8g4oaQXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3cyWF9hcnJvdyhjdHgsIHt5OiAoci50bC55ICsgci5kbC55KS8yLCB4OnIudGwueH0sIHIuZHIsIHIudHIpO2JyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBkcm93MlhfYXJyb3coY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgfCBudWxsLCB0b3A6IFRfeHksIGxlZnQ6IFRfeHksIHJpZ2h0OiBUX3h5KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGN0eCA9PT0gdW5kZWZpbmVkIHx8IGN0eCA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4Lm1vdmVUbyh0b3AueCwgdG9wLnkpO1xyXG4gICAgICAgIGN0eC5saW5lVG8ocmlnaHQueCwgcmlnaHQueSk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhsZWZ0LngsIGxlZnQueSk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG5cclxuICAgICAgICBjdHguZmlsbFN0eWxlICAgPSBcIiNmZjY2NjZcIjtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIiNmZjMzMzNcIjtcclxuICAgICAgICBjdHgubGluZVdpZHRoICAgPSAyO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fTWF6ZU9ialZpZXcyWCB7cmV0dXJuIHtjbmFtZTogJ0N1cnJlbnRUZWFtVmlldyd9fVxyXG4gICAgcHVibGljIGRlY29kZShqOiBKU09OX01hemVPYmpWaWV3Mlh8dW5kZWZpbmVkKTogSV9NYXplT2JqVmlldzJYIHtyZXR1cm4gdGhpcyBhcyBJX01hemVPYmpWaWV3Mlh9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBDX1BvaW50RGlyLCBUX0RpcmVjdGlvbiB9ICAgICAgICAgICBmcm9tIFwiLi9DX1BvaW50RGlyXCI7XHJcbmltcG9ydCB7IENfTW92YWJsZVBvaW50LCBKU09OX01vdmFibGVQb2ludCB9IGZyb20gXCIuL0NfTW92YWJsZVBvaW50XCI7XHJcbmltcG9ydCB7IElfTG9jYXRlIH0gICAgIGZyb20gXCIuL0NfTG9jYXRpb25cIjtcclxuaW1wb3J0IHsgSV9Ib3BlQWN0aW9uIH0gZnJvbSBcIi4vQ19Ib3BlXCI7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX1dhbGtlciBleHRlbmRzIEpTT05fTW92YWJsZVBvaW50IHtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfV2Fsa2VyIGV4dGVuZHMgQ19Nb3ZhYmxlUG9pbnQge1xyXG4gICAgY29uc3RydWN0b3Ioaj86IEpTT05fV2Fsa2VyKSB7XHJcbiAgICAgICAgc3VwZXIoaik7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X3goKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5sb2NfcG9zLnh9XHJcbiAgICBwdWJsaWMgZ2V0X3koKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5sb2NfcG9zLnl9XHJcbiAgICBwdWJsaWMgZ2V0X3ooKTogbnVtYmVyIHtyZXR1cm4gdGhpcy5sb2NfcG9zLnp9XHJcblxyXG4gICAgcHVibGljIHNldF94KHg6IG51bWJlcik6IHZvaWQge3RoaXMubG9jX3Bvcy54ID0geH1cclxuICAgIHB1YmxpYyBzZXRfeSh5OiBudW1iZXIpOiB2b2lkIHt0aGlzLmxvY19wb3MueSA9IHl9XHJcbiAgICBwdWJsaWMgc2V0X3ooejogbnVtYmVyKTogdm9pZCB7dGhpcy5sb2NfcG9zLnogPSB6fVxyXG5cclxuICAgIHB1YmxpYyBzZXRfcGxhY2UoXHJcbiAgICAgICAgcGxhY2U6IElfTG9jYXRlLCBcclxuICAgICAgICB1cmw/OiAgc3RyaW5nLCBcclxuICAgICAgICBwb3M/OiAgQ19Qb2ludERpcikge1xyXG5cclxuICAgICAgICB0aGlzLnNldF91aWQgKHBsYWNlLnVpZCgpKTtcclxuICAgICAgICB0aGlzLnNldF9sY2tkKHBsYWNlLmdldF9sY2tkKCkpO1xyXG4gICAgICAgIHRoaXMuc2V0X25hbWUocGxhY2UuZ2V0X25hbWUoKSk7XHJcblxyXG4gICAgICAgIGlmICh1cmwgIT09IHVuZGVmaW5lZCkgdGhpcy5zZXRfdXJsKHVybCk7XHJcbiAgICAgICAgaWYgKHBvcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X3BkKHBvcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgcHVibGljIGhvcGVfcF9md2QoKTogSV9Ib3BlQWN0aW9uIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBoYXNfaG9wZTogdHJ1ZSwgXHJcbiAgICAgICAgICAgIGhvcGU6IFwiTW92ZVwiLFxyXG4gICAgICAgICAgICBzdWJqOiB0aGlzLmdldF9wX2Z3ZCgpLFxyXG4gICAgICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaG9wZV9wX2JhaygpOiBJX0hvcGVBY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhhc19ob3BlOiB0cnVlLCBcclxuICAgICAgICAgICAgaG9wZTogXCJNb3ZlXCIsXHJcbiAgICAgICAgICAgIHN1Ymo6IHRoaXMuZ2V0X3BfYmFrKCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGhvcGVfcF9sZnQoKTogSV9Ib3BlQWN0aW9uIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBoYXNfaG9wZTogdHJ1ZSwgXHJcbiAgICAgICAgICAgIGhvcGU6IFwiTW92ZVwiLFxyXG4gICAgICAgICAgICBzdWJqOiB0aGlzLmdldF9wX2xmdCgpLFxyXG4gICAgICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaG9wZV9wX3JndCgpOiBJX0hvcGVBY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhhc19ob3BlOiB0cnVlLCBcclxuICAgICAgICAgICAgaG9wZTogXCJNb3ZlXCIsXHJcbiAgICAgICAgICAgIHN1Ymo6IHRoaXMuZ2V0X3Bfcmd0KCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBob3BlX3R1cm5fcigpOiBJX0hvcGVBY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhhc19ob3BlOiB0cnVlLCBcclxuICAgICAgICAgICAgaG9wZTogXCJUdXJuXCIsXHJcbiAgICAgICAgICAgIHN1Ymo6IHRoaXMuZ2V0X3Rfcmd0KCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBob3BlX3R1cm5fbCgpOiBJX0hvcGVBY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhhc19ob3BlOiB0cnVlLCBcclxuICAgICAgICAgICAgaG9wZTogXCJUdXJuXCIsXHJcbiAgICAgICAgICAgIHN1Ymo6IHRoaXMuZ2V0X3RfbGZ0KCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGhvcGVfcF91cCgpOiBJX0hvcGVBY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhhc19ob3BlOiB0cnVlLCBcclxuICAgICAgICAgICAgaG9wZTogXCJVcFwiLFxyXG4gICAgICAgICAgICBzdWJqOiB0aGlzLmdldF9wX3VwKCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBob3BlX3BfZG93bigpOiBJX0hvcGVBY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGhhc19ob3BlOiB0cnVlLCBcclxuICAgICAgICAgICAgaG9wZTogXCJEb3duXCIsXHJcbiAgICAgICAgICAgIHN1Ymo6IHRoaXMuZ2V0X3BfZG93bigpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldF9wX2Z3ZCgpOiBDX1BvaW50RGlyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fX2dldF9wX21vdmUoMSwgMCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X3BfYmFrKCk6IENfUG9pbnREaXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9fZ2V0X3BfbW92ZSgtMSwgMCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X3BfbGZ0KCk6IENfUG9pbnREaXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9fZ2V0X3BfbW92ZSgwLCAtMSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X3Bfcmd0KCk6IENfUG9pbnREaXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9fZ2V0X3BfbW92ZSgwLCAxKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfdF9yZ3QoKTogQ19Qb2ludERpciB7XHJcbiAgICAgICAgY29uc3QgcGQgPSBuZXcgQ19Qb2ludERpcih0aGlzLmxvY19wb3MpO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5sb2NfcG9zLmQpIHtcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5OOiBwZC5kID0gVF9EaXJlY3Rpb24uRTticmVhaztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5FOiBwZC5kID0gVF9EaXJlY3Rpb24uUzticmVhaztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5TOiBwZC5kID0gVF9EaXJlY3Rpb24uVzticmVhaztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5XOiBwZC5kID0gVF9EaXJlY3Rpb24uTjticmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBkXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0X3RfbGZ0KCk6IENfUG9pbnREaXIge1xyXG4gICAgICAgIGNvbnN0IHBkID0gbmV3IENfUG9pbnREaXIodGhpcy5sb2NfcG9zKTtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMubG9jX3Bvcy5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjogcGQuZCA9IFRfRGlyZWN0aW9uLlc7YnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uRTogcGQuZCA9IFRfRGlyZWN0aW9uLk47YnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uUzogcGQuZCA9IFRfRGlyZWN0aW9uLkU7YnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzogcGQuZCA9IFRfRGlyZWN0aW9uLlM7YnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfcF91cCgpOiBDX1BvaW50RGlyIHtcclxuICAgICAgICBjb25zdCBwID0gbmV3IENfUG9pbnREaXIodGhpcy5sb2NfcG9zKTtcclxuICAgICAgICBwLnotLTtcclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfcF9kb3duKCk6IENfUG9pbnREaXIge1xyXG4gICAgICAgIGNvbnN0IHAgPSBuZXcgQ19Qb2ludERpcih0aGlzLmxvY19wb3MpO1xyXG4gICAgICAgIHAueisrO1xyXG4gICAgICAgIHJldHVybiBwO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9fZ2V0X3BfbW92ZShvZmZzZXRGQjogbnVtYmVyLCBvZmZzZXRMUjogbnVtYmVyKTogQ19Qb2ludERpciB7XHJcbiAgICAgICAgY29uc3QgcCA9IG5ldyBDX1BvaW50RGlyKHRoaXMubG9jX3Bvcyk7XHJcbiAgICAgICAgaWYgKG9mZnNldEZCICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5sb2NfcG9zLmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjogcC55IC09IG9mZnNldEZCO2JyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5FOiBwLnggKz0gb2Zmc2V0RkI7YnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlM6IHAueSArPSBvZmZzZXRGQjticmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzogcC54IC09IG9mZnNldEZCO2JyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvZmZzZXRMUiAhPT0gMCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMubG9jX3Bvcy5kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLk46IHAueCArPSBvZmZzZXRMUjticmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uRTogcC55ICs9IG9mZnNldExSO2JyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5TOiBwLnggLT0gb2Zmc2V0TFI7YnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlc6IHAueSAtPSBvZmZzZXRMUjticmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfYXJvdW5kKGZyb250OiBudW1iZXIsIHJpZ2h0Om51bWJlciwgdXA6IG51bWJlciA9IDApOiBDX1BvaW50RGlyIHtcclxuICAgICAgICB2YXIgdGFyZ2V0X3ggID0gdGhpcy5sb2NfcG9zLng7XHJcbiAgICAgICAgdmFyIHRhcmdldF95ICA9IHRoaXMubG9jX3Bvcy55O1xyXG4gICAgICAgIHZhciB0YXJnZXRfeiAgPSB0aGlzLmxvY19wb3MueiAtIHVwO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5sb2NfcG9zLmQpIHtcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5OOlxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0X3ggKz0gcmlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRfeSAtPSBmcm9udDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLkU6XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRfeCArPSBmcm9udDtcclxuICAgICAgICAgICAgICAgIHRhcmdldF95ICs9IHJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uUzpcclxuICAgICAgICAgICAgICAgIHRhcmdldF94IC09IHJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0X3kgKz0gZnJvbnQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5XOlxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0X3ggLT0gZnJvbnQ7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRfeSAtPSByaWdodDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IENfUG9pbnREaXIoe3g6IHRhcmdldF94LCB5OiB0YXJnZXRfeSwgejogdGFyZ2V0X3osIGQ6IHRoaXMubG9jX3Bvcy5kfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fV2Fsa2VyIHtcclxuICAgICAgICBjb25zdCBqID0gc3VwZXIuZW5jb2RlKCkgYXMgSlNPTl9XYWxrZXI7XHJcbiAgICAgICAgcmV0dXJuIGo7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGVjb2RlKGE6IEpTT05fV2Fsa2VyKTogQ19XYWxrZXIge1xyXG4gICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzO1xyXG4gICAgICAgIHN1cGVyLmRlY29kZShhKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBfcm91bmQgfSAgZnJvbSBcIi4uL2RfdXRsL0ZfTWF0aFwiO1xyXG5pbXBvcnQgeyBDX1JhbmdlIH0gZnJvbSBcIi4vQ19SYW5nZVwiO1xyXG5cclxuZXhwb3J0IHR5cGUgVF9XYWxsID0ge1xyXG4gICAgbWluX3g6IG51bWJlcixcclxuICAgIG1heF94OiBudW1iZXIsXHJcbiAgICBtaW5feTogbnVtYmVyLFxyXG4gICAgbWF4X3k6IG51bWJlcixcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfV2FsbCB7XHJcbiAgICBwcm90ZWN0ZWQgdzogVF9XYWxsW11bXTtcclxuICAgIHByb3RlY3RlZCBkOiBudW1iZXJcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihkZXB0aDogbnVtYmVyID0gNSwgc2l6ZTogQ19SYW5nZSkge1xyXG4gICAgICAgIGlmIChkZXB0aCA8IDMpIGRlcHRoID0gNTtcclxuICAgICAgICBpZiAoZGVwdGggJSAyICE9PSAxKSBkZXB0aCsrOyAgLy8g5aWH5pWw44Gu44G/5a++5b+c44CCXHJcblxyXG4gICAgICAgIGNvbnN0IG1pbl94OiBudW1iZXIgPSBzaXplLm1pbl94KCk7XHJcbiAgICAgICAgY29uc3QgbWluX3k6IG51bWJlciA9IHNpemUubWluX3koKTtcclxuICAgICAgICBjb25zdCBtYXhfeDogbnVtYmVyID0gc2l6ZS5tYXhfeCgpO1xyXG4gICAgICAgIGNvbnN0IG1heF95OiBudW1iZXIgPSBzaXplLm1heF95KCk7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBjZW50ZXJfeDogbnVtYmVyID0gKG1heF94IC0gbWluX3gpIC8gMjtcclxuICAgIFxyXG4gICAgICAgIC8vIOWfuua6luOBqOOBquOCi+WjgSjkuIDnlarpgaDjgY/jga7lo4Ep44Gu5q2j6Z2i44K144Kk44K6KOaoquW5hSnjgpLmsYLjgoHjgotcclxuICAgICAgICAvLyDkuIDnlarpgaDjgY8oZGVwdGggLSAxKeOBruWjgeOBruaVsOOBjGRlcHRo5YCL44Gr44Gq44KL44KI44GG44Gr6Kq/5pW044GZ44KLXHJcbiAgICAgICAgY29uc3QgZnJvbnRfd2FsbF9zaXplX3g6IG51bWJlciA9IChtYXhfeCAtIG1pbl94KSAvIGRlcHRoO1xyXG5cclxuICAgICAgICAvLyDln7rmupbjgajjgarjgovlgbTlo4Hjga7jgrXjgqTjgroo5qiq5bmFKeOCkuaxguOCgeOCi1xyXG4gICAgICAgIC8vIOS4gOeVqumBoOOBj+OBruWjgSjkuK3lpK4p44Gu5bem56uv44GL44KJZGVwdGjlgIvjga7lgbTlo4HjgpLlj5bjgozjgovjgojjgYbjgavjgrXjgqTjgrroqr/mlbTjgZnjgotcclxuICAgICAgICBjb25zdCBzaWRlX3dhbGxfc2l6ZV94OiAgbnVtYmVyID0gKGNlbnRlcl94IC0gZnJvbnRfd2FsbF9zaXplX3ggLyAyKSAvIGRlcHRoO1xyXG4gICAgXHJcbiAgICAgICAgLy8g5ZCEZGVwdGjliKXjga7mraPpnaLlo4Hjga7mqKrluYXjgpLmsYLjgoHjgovjgIJcclxuICAgICAgICAvLyDoqIjnrpfjga7liKnkvr/mgKfjgpLogIPmha7jgZfjgabjgIHjg4/jg7zjg5XjgrXjgqTjgrrjgpLmsYLjgoHjgotcclxuICAgICAgICBjb25zdCBmcm9udF93YWxsX0hfc2l6ZV94OiBudW1iZXJbXSA9IG5ldyBBcnJheShkZXB0aCArIDEpO1xyXG4gICAgXHJcbiAgICAgICAgZnJvbnRfd2FsbF9IX3NpemVfeFtkZXB0aF0gPSBmcm9udF93YWxsX3NpemVfeCAvIDI7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGRlcHRoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgZnJvbnRfd2FsbF9IX3NpemVfeFtpXSA9IGZyb250X3dhbGxfSF9zaXplX3hbaSArIDFdICsgc2lkZV93YWxsX3NpemVfeDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOWfuua6luOBqOOBquOCi+WjgSjkuIDnlarpgaDjgY/jga7lo4Ep44Gu5q2j6Z2i44K144Kk44K6KOe4puW5hSnjgpLmsYLjgoHjgotcclxuICAgICAgICAvLyDkuIDnlarpgaDjgY8oZGVwdGggLSAxKeOBruWjgeOBruaVsOOBjGRlcHRo5YCL44Gr44Gq44KL44KI44GG44Gr6Kq/5pW044GZ44KLXHJcbiAgICAgICAgY29uc3QgZnJvbnRfd2FsbF9zaXplX3k6IG51bWJlciA9IChtYXhfeSAtIG1pbl95KSAvIGRlcHRoO1xyXG5cclxuICAgICAgICAvLyDlpKnkupXjga7nuKbluYXjga7lopfliIbjgpLmsYLjgoHjgovjgILlibLlkIjjga/pganlvZPvvIjnrJHvvIlcclxuICAgICAgICAvLyDjgq3jg6Pjg7Pjg5Djgrnjga7pq5jjgZUobWF4X3kgLSBtaW5feSnjgYvjgonkuIDnlarpgaDjgY/jga7lo4Hjga7pq5jjgZXjgpLlvJXjgYTjgaZcclxuICAgICAgICAvLyDmt7HjgZUoZGVwdGggKyAxKeOBp+WJsuOCi+OBk+OBqOOBq+OCiOOCiuWil+WIhuOBqOOBl+OBn1xyXG4gICAgICAgIGNvbnN0IHNpZGVfd2FsbF9zaXplX1QgPSAgKG1heF95IC0gbWluX3kgLSBmcm9udF93YWxsX3NpemVfeSkgLyAoZGVwdGggKiAyKTtcclxuXHJcbiAgICAgICAgLy8g5bqK44Gu5aKX5YiG44KS5rGC44KB44KL44CC5rGC44KB5pa544Gv5LiK6KiY44Go5ZCM44GYXHJcbiAgICAgICAgY29uc3Qgc2lkZV93YWxsX3NpemVfQiA9ICAobWF4X3kgLSBtaW5feSAtIGZyb250X3dhbGxfc2l6ZV95KSAvIChkZXB0aCAqIDIpO1xyXG5cclxuICAgICAgICAvLyDku6XkuIrjga7lgKTjgpLnlKjjgYTjgablkITot53pm6IoZGVwdGgp44Gu5q2j6Z2i5aOB44Gu5L2N572u5rG644KB44KS44GZ44KLXHJcbiAgICAgICAgLy8gd2FsbOOBruesrOS4gOW8leaVsOOBr+i3nembouOAgeesrOS6jOW8leaVsOOBr+W3puWPs+OBruS9jee9ru+8iOS4gOeVquW3puOBjDDjgIHkuIDnlarlj7PjgYxkZXB0aC0xKVxyXG4gICAgICAgIGNvbnN0IHdhbGw6IFRfV2FsbFtdW10gPSBuZXcgQXJyYXkoZGVwdGggKyAxKTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRlcHRoICsgMTsgaisrKSB7XHJcbiAgICAgICAgICAgIHdhbGxbal0gPSBuZXcgQXJyYXkoZGVwdGggKyAxKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBkZXB0aCArIDE7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2tfeCA9IGNlbnRlcl94IC0gZnJvbnRfd2FsbF9IX3NpemVfeFtqXSAqIChkZXB0aCAtIDIgKiBrKTtcclxuICAgICAgICAgICAgICAgIHdhbGxbal1ba10gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluX3g6IF9yb3VuZCh3a194LCAwKSxcclxuICAgICAgICAgICAgICAgICAgICBtYXhfeDogX3JvdW5kKHdrX3ggICsgZnJvbnRfd2FsbF9IX3NpemVfeFtqXSAqIDIsIDApLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbl95OiBfcm91bmQobWluX3kgKyBzaWRlX3dhbGxfc2l6ZV9UICogaiwgMCksXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4X3k6IF9yb3VuZChtYXhfeSAtIHNpZGVfd2FsbF9zaXplX0IgKiBqLCAwKSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmQgPSBkZXB0aDtcclxuICAgICAgICB0aGlzLncgPSB3YWxsO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldF9kZXB0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0KGRlcHRoOiBudW1iZXIsIG9mZnNldDogbnVtYmVyKTogVF9XYWxsIHtcclxuICAgICAgICBjb25zdCBIX2RlcHQgPSAodGhpcy5kIC0gMSkgLyAyO1xyXG4gICAgICAgIHJldHVybiB0aGlzLndbZGVwdGhdW0hfZGVwdCArIG9mZnNldF07XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgX2dldF91dWlkLCBfcmFuZG9tX3N0ciB9IGZyb20gXCIuLi9kX3V0bC9GX1JhbmRcIjtcclxuaW1wb3J0IHsgQ19IZXJvLCBJX0hlcm8sIEpTT05fSGVybyB9IGZyb20gXCIuL0NfSGVyb1wiO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9XbmRyIGV4dGVuZHMgSlNPTl9IZXJvIHtcclxuICAgIGJvc3NfbGV2ZWw/OiBudW1iZXI7XHJcbiAgICBmYW1pbHk/OiAgICAgc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElfV25kciBleHRlbmRzIElfSGVybyB7XHJcbiAgICBib3NzX2xldmVsKCk6ICAgICAgICAgICAgICAgbnVtYmVyO1xyXG4gICAgc2V0X2Jvc3NfbGV2ZWwobjogbnVtYmVyKTogIElfV25kcjtcclxuICAgIGhlcm9fYm9udXMobjogbnVtYmVyKTogICAgICBudW1iZXI7XHJcbiAgICByYW5kb21fbWFrZShsdj86IG51bWJlcik6ICAgQ19XbmRyO1xyXG4gICAgZW5jb2RlKCk6ICAgICAgICAgICAgICAgICAgIEpTT05fV25kcjtcclxuICAgIGRlY29kZShqPzogSlNPTl9XbmRyKTogICAgICBJX1duZHI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDX1duZHIgZXh0ZW5kcyBDX0hlcm8gaW1wbGVtZW50cyBJX1duZHIge1xyXG4gICAgcHJvdGVjdGVkIF9ib3NzX2xldmVsOiBudW1iZXIgPSAwOyAgICAvLyDjg5zjgrnjg6zjg5njg6sgMDrpgJrluLgsIDE65bCP44Oc44K5LCAyOuS4reODnOOCuSwgMzrlpKfjg5zjgrlcclxuICAgIHByb3RlY3RlZCBfZmFtaWx5OiBzdHJpbmcgPSAn5pS+5rWq6ICFJzsgLy8g5pS+5rWq6ICFLCBXYW5kZXJlclxyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihqPzogSlNPTl9XbmRyKSB7XHJcbiAgICAgICAgc3VwZXIoaik7XHJcbiAgICAgICAgdGhpcy5teV9uYW1lICAgID0gJ05vIE5hbWUgV29uZGVyJztcclxuICAgICAgICBpZiAoaiAhPT0gdW5kZWZpbmVkKSB0aGlzLl9faW5pdChqKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX19pbml0KGo/OiBKU09OX1duZHIpOiBDX1duZHIge1xyXG4gICAgICAgIHN1cGVyLl9faW5pdChqKTtcclxuICAgICAgICBpZiAoaj8uYm9zc19sZXZlbCAhPT0gdW5kZWZpbmVkKSB0aGlzLl9ib3NzX2xldmVsID0gai5ib3NzX2xldmVsO1xyXG4gICAgICAgIGlmIChqPy5mYW1pbHkgICAgICE9PSB1bmRlZmluZWQpIHRoaXMuX2ZhbWlseSA9IGouZmFtaWx5O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGZyZWUoKSB7XHJcbiAgICAgICAgc3VwZXIuZnJlZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBib3NzX2xldmVsKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jvc3NfbGV2ZWw7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0X2Jvc3NfbGV2ZWwobjogbnVtYmVyKTogQ19XbmRyIHtcclxuICAgICAgICBpZiAobiA8IDAgfHwgbiA+IDMpIHsgLy8g44Oc44K544Os44OZ44Or44GvMOOBi+OCiTPjgb7jgadcclxuICAgICAgICAgICAgbiA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2Jvc3NfbGV2ZWwgPSBuO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBoZXJvX2JvbnVzKG46IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIG4gKiAoIHRoaXMubHYgKyB0aGlzLl9ib3NzX2xldmVsICsgMSApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByYW5kb21fbWFrZShoZXJvX2xldmVsOiBudW1iZXIgPSAwKTogQ19XbmRyIHtcclxuICAgICAgICBzdXBlci5yYW5kb21fbWFrZShoZXJvX2xldmVsKTtcclxuICAgICAgICB0aGlzLm15X25hbWUgID0gdGhpcy5fZmFtaWx5ICsgX3JhbmRvbV9zdHIoNSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVuY29kZSgpOiBKU09OX1duZHIge1xyXG4gICAgICAgIGNvbnN0IGogPSBzdXBlci5lbmNvZGUoKTtcclxuICAgICAgICBqLmJvc3NfbGV2ZWwgPSB0aGlzLl9ib3NzX2xldmVsO1xyXG4gICAgICAgIGouZmFtaWx5ICAgICA9IHRoaXMuX2ZhbWlseTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlY29kZShqPzogSlNPTl9XbmRyKTogQ19XbmRyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fX2luaXQoaik7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBcclxuICAgIENfTWF6ZU9iaiwgXHJcbiAgICBJX01hemVPYmosIFxyXG4gICAgSlNPTl9NYXplT2JqLCBcclxuICAgIEpTT05fTWF6ZU9ialNUQVQgXHJcbn0gZnJvbSBcIi4vQ19NYXplT2JqXCI7XHJcblxyXG5pbXBvcnQgeyBDX1duZHJWaWV3LCBKU09OX1duZHJWaWV3IH0gICAgICBmcm9tIFwiLi9DX1duZHJWaWV3XCI7XHJcbmltcG9ydCB7IElfV25kcldhbGtlciwgSlNPTl9XbmRyV2Fsa2VyIH0gIGZyb20gXCIuL0NfV25kcldhbGtlclwiO1xyXG5pbXBvcnQgeyBDX1BvaW50RGlyIH0gICBmcm9tICcuL0NfUG9pbnREaXInO1xyXG5pbXBvcnQgeyBfanNvbl9jb25zb2xlLCBfanNvbl9vdXRwdXQgfSBmcm9tIFwiLi4vZF91dGwvRl9VdGlsaXR5XCI7XHJcbmltcG9ydCB7IENfV25kclZpZXcyWCB9IGZyb20gXCIuL0NfV25kclZpZXcyWFwiO1xyXG5pbXBvcnQgeyBuZXdfd2Fsa2VyIH0gZnJvbSBcIi4vRl9uZXdfV2Fsa2VyXCI7XHJcbmltcG9ydCB7IENfV25kciwgSV9XbmRyLCBKU09OX1duZHIgfSBmcm9tIFwiLi9DX1duZHJcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9XbmRyT2JqU1RBVCBleHRlbmRzIEpTT05fTWF6ZU9ialNUQVQge1xyXG4gICAgd28/OiB7XHJcbiAgICAgICAgZG15PzogICAgICAgc3RyaW5nLCAvLyDjg4Djg5/jg7zlpInmlbBcclxuICAgIH1cclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIEpTT05fV25kck9iaiBleHRlbmRzIEpTT05fTWF6ZU9iaiB7XHJcbiAgICBjbG5hbWU/OiAgICBzdHJpbmcsXHJcbiAgICB2aWV3PzogICAgICBKU09OX1duZHJWaWV3ICB8dW5kZWZpbmVkLFxyXG4gICAgd2Fsaz86ICAgICAgSlNPTl9XbmRyV2Fsa2VyfHVuZGVmaW5lZCxcclxuICAgIHduZHI/OiAgICAgIEpTT05fV25kcltdICAgIHx1bmRlZmluZWQsXHJcbiAgICBzdGF0PzogICAgICBKU09OX1duZHJPYmpTVEFULCAvLyBDX1duZHJPYmrjga7jgrXjg5bjgq/jg6njgrnjga7liJ3mnJ/lgKTjgpLkv53mjIHjgZnjgotcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJX1duZHJPYmogZXh0ZW5kcyBJX01hemVPYmoge1xyXG4gICAgZnJlZSgpOiAgICB2b2lkO1xyXG4gICAgd2Fsa2VyKCk6ICBJX1duZHJXYWxrZXJ8dW5kZWZpbmVkOyAgICAgICAvLyBDX1duZHJXYWxrZXLjgqrjg5bjgrjjgqfjgq/jg4jjgpLlkbzlh7pcclxuICAgIHNldF93YWxrZXIod2FsazogSV9XbmRyV2Fsa2VyfHVuZGVmaW5lZCk6IHZvaWQ7IC8vIENfV25kcldhbGtlcuOCquODluOCuOOCp+OCr+ODiOOCkuioreWumlxyXG4gICAgd3JlcygpOiAgICBJX1duZHJbXXx1bmRlZmluZWQ7ICAgICAgICAgICAvLyBDX1duZHJXYWxrZXLjgqrjg5bjgrjjgqfjgq/jg4jjgpLlkbzlh7pcclxuICAgIHNldF93cmVzICAod3JlczogICBJX1duZHJbXXx1bmRlZmluZWQpOiAgIHZvaWQ7IC8vIENfV25kcldhbGtlcuOCquODluOCuOOCp+OCr+ODiOOCkuioreWumlxyXG4gICAgYWRkX3duZHIod25kcjogSV9XbmRyKTogdm9pZDsgICAgICAgICAgICAvLyBDX1duZHLjgqrjg5bjgrjjgqfjgq/jg4jjgpLov73liqBcclxuICAgIGVuY29kZSgpOiAgSlNPTl9XbmRyT2JqOyAgICAgICAgICAgICAgICAgLy8gSlNPTl9XbmRyT2Jq5b2i5byP44Gn44Ko44Oz44Kz44O844OJXHJcbiAgICBkZWNvZGUoajogIEpTT05fV25kck9ianx1bmRlZmluZWQpOiBJX1duZHJPYmo7ICAvLyBKU09OX1duZHJPYmrlvaLlvI/jgafjg4fjgrPjg7zjg4lcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfV25kck9iaiAgZXh0ZW5kcyBDX01hemVPYmogaW1wbGVtZW50cyBJX1duZHJPYmoge1xyXG4gICAgcHVibGljIGNsbmFtZTogc3RyaW5nID0gJ0NfV25kck9iaic7XHJcbiAgICBwcm90ZWN0ZWQgd2FsazogSV9XbmRyV2Fsa2VyfHVuZGVmaW5lZCA9IHVuZGVmaW5lZDsgLy8gV25kcldhbGtlcuOCquODluOCuOOCp+OCr+ODiFxyXG4gICAgcHJvdGVjdGVkIG15X3dyZXM6IElfV25kcltdICB8dW5kZWZpbmVkID0gdW5kZWZpbmVkOyAvLyBXbmRy44Kq44OW44K444Kn44Kv44OI44Gu6YWN5YiXXHJcbiAgICBwcml2YXRlICAgZG15OiAgICBzdHJpbmcgPSAn44OA44Of44O8JzsgLy8g44OA44Of44O85aSJ5pWwXHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVPYmopIHtcclxuICAgICAgICBzdXBlcihqKTtcclxuICAgICAgICB0aGlzLmNsbmFtZSAgICA9ICdDX1duZHJPYmonO1xyXG5cclxuICAgICAgICB0aGlzLmNhbl90aHIgPSB0cnVlOyAvLyDlo4HjgpLpgJrpgY7lj6/og71cclxuICAgICAgICB0aGlzLmhpdF9kbWcgPSAwOyAgICAvLyDlo4HjgavlvZPjgZ/jgaPjgZ/jgajjgY3jga7jg4Djg6Hjg7zjgrjnhKHjgZdcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCcjIyMjIyMjIyMjIyMjIycpO19qc29uX291dHB1dChqPz97fSk7IC8vIOODh+ODkOODg+OCsOeUqO+8mkNfV25kck9iauOBruWIneacn+WMluaZguOBq2rjga7lhoXlrrnjgpLlh7rliptcclxuXHJcbi8vICAgICAgICBqID8/PSB7fSBhcyBKU09OX1duZHJPYmo7IC8vIGrjgYzmnKrlrprnvqnjga7loLTlkIjjga/nqbrjga7jgqrjg5bjgrjjgqfjgq/jg4jjgpLnlKjmhI9cclxuICAgICAgICBpZiAoaiA9PT0gdW5kZWZpbmVkKSByZXR1cm47IC8vIGrjgYzmnKrlrprnvqnjga7loLTlkIjjga9WaWV344KEd2Fsa2Vy562J44Gu5Yid5pyf5YyW44Gv44GX44Gq44GEXHJcblxyXG4gICAgICAgIC8vIGxvY19wb3PjgYzmnKrlrprnvqnjga7loLTlkIjjga/liJ3mnJ/kvY3nva7jgpLoqK3lrppcclxuICAgICAgICAvLyBkZWNvZGUoainjgad0aGlzLnNldF9wZCgp44KS5ZG844Gz5Ye644GZXHJcbiAgICAgICAgaWYgKGoucG9zID09PSB1bmRlZmluZWQpIGoucG9zID8/PSBqLndhbGs/LmxvY19wb3MgPz8ge3g6MSwgeToxLCB6OjAsIGQ6MH07IFxyXG5cclxuICAgICAgICAvLyB2aWV344GM5pyq5a6a576p44Gu5aC05ZCI44Gv44GT44KM44KS5Yid5pyf5YyWXHJcbiAgICAgICAgLy8gVmlld+OBr2RlY29kZShqKeOBp0pTT05fV25kcldhbGtlclZpZXfjgpLkvb/nlKjjgZfjgabnlJ/miJDjgZnjgotcclxuICAgICAgICBqLnZpZXcgPz89IHtcclxuICAgICAgICAgICAgICAgIGxheWVyOiAwLCBsZXR0ZXI6ICfmvIInLCBcclxuICAgICAgICAgICAgICAgIHNob3czRDogICcxJyxcclxuICAgICAgICAgICAgICAgIHBhZF90OiAwLjIsIHBhZF9kOiAwLjAsIHBhZF9zOiAwLjM4LFxyXG4gICAgICAgICAgICAgICAgY29sX2Y6ICcjZmY5OWZmJywgY29sX2I6ICcjZGQ4OGRkJywgY29sX3M6ICcjZGQ4OGRkJywgY29sX3Q6ICcjZGQ4OGRkJywgY29sX2Q6ICcjZGQ4OGRkJywgXHJcbiAgICAgICAgICAgICAgICBjb2xfbDogJyM5OTk5ZmYnLCBjb2xfMjogJycsICAgICAgICBjb2xfTDogJyM2NjY2ZmYnLCBcclxuICAgICAgICAgICAgICAgIGNvbF8yX2FydzogJyNmZmZmZmYnLCBjb2xfMl90cmk6ICcjY2M2NjY2JyxcclxuICAgICAgICB9IGFzIEpTT05fV25kclZpZXc7XHJcbiAgICAgICAgXHJcbi8vICAgICAgICBqLndhbGsgICA/Pz0ge30gYXMgSlNPTl9XbmRyV2Fsa2VyO1xyXG4vLyAgICAgICAgai53cmVzICAgPz89IFtdIGFzIEpTT05fV25kcltdO1xyXG5cclxuICAgICAgICBpZiAoaiAhPT0gdW5kZWZpbmVkKSB0aGlzLl9faW5pdChqKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX19pbml0KGo6IEpTT05fV25kck9ianx1bmRlZmluZWQpOiBDX1duZHJPYmoge1xyXG4gICAgICAgIHN1cGVyLl9faW5pdChqKTtcclxuICAgICAgICBpZiAoaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcztcclxuICAgICAgICBpZiAoaj8uY2xuYW1lICAgIT09IHVuZGVmaW5lZCkgdGhpcy5jbG5hbWUgICAgPSBqLmNsbmFtZTtcclxuXHJcbiAgICAgICAgLy8gbG9jX3Bvc+OBjOacquWumue+qeOBruWgtOWQiOOBr+WIneacn+S9jee9ruOCkuioreWumlxyXG4gICAgICAgIGlmIChqPy5wb3MgID09PSB1bmRlZmluZWQgJiYgai53YWxrPy5sb2NfcG9zICAhPT0gdW5kZWZpbmVkKSAgai5wb3MgPSBqLndhbGsubG9jX3BvczsgXHJcbiAgICAgICAgaWYgKGo/LnBvcyAgIT09IHVuZGVmaW5lZCkgIHRoaXMuc2V0X3BkKG5ldyBDX1BvaW50RGlyKGoucG9zKSk7IFxyXG5cclxuICAgICAgICBpZiAoaj8udmlldyAgICAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFZpZXcgIChuZXcgQ19XbmRyVmlldyAgKGoudmlldykpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFZpZXcyRChuZXcgQ19XbmRyVmlldzJYKGoudmlldykpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFZpZXcyTShuZXcgQ19XbmRyVmlldzJYKGoudmlldykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGo/LndhbGsgICAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGoud2Fsay5sb2NfcG9zID8/PSAoIGo/LnBvcyA/PyB7eDoxLCB5OjEsIHo6MCwgZDowfSApOyAvLyBsb2NfcG9z44GM5pyq5a6a576p44Gu5aC05ZCI44Gv5Yid5pyf5L2N572u44KS6Kit5a6aXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdDX1duZHJPYmouX19pbml0KCkganNvbl9vdXRwdXQgPSAnKTtfanNvbl9vdXRwdXQoaik7IC8vIOODh+ODkOODg+OCsOeUqO+8mndhbGvjga7lhoXlrrnjgpLlh7rliptcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2FsayAgICAgICAgPSBuZXdfd2Fsa2VyKGoud2Fsayk7XHJcbiAgICAgICAgICAgIHRoaXMud2Fsaz8uc2V0X21hemVPYmoodGhpcyk7IC8vIE1hemVPYmrjgpLoqK3lrppcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGo/LndyZXMgIT09IHVuZGVmaW5lZCAmJiAoai53cmVzPy5sZW5ndGg/PzApID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLm15X3dyZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBqdyBvZiBqLndyZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChqdyA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGlmIChqdy5uYW1lID09PSBcIk5vIE5hbWUgV29uZGVyXCIpIGNvbnRpbnVlOyAvLyDliJ3mnJ/oqK3lrprjgZXjgozjgabjgYTjgarjgYRXbmRy44Gv54Sh6KaW77yI5a++55eH55mC5rOV77yJXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgd25kciA9IG5ldyBDX1duZHIoancpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5teV93cmVzLnB1c2god25kcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChqPy5zdGF0Py53byAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG15ID0gai5zdGF0LndvLmRteSA/PyAnJzsgLy8g44OA44Of44O85aSJ5pWwXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGZyZWUoKTp2b2lkIHtcclxuICAgICAgICB0aGlzLndhbGs/LmZyZWUoKTsgdGhpcy53YWxrID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGZvciAoY29uc3Qgd25kciBvZiB0aGlzLm15X3dyZXMgPz8gW10pIHtcclxuICAgICAgICAgICAgaWYgKHduZHIgPT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgICAgIHduZHIuZnJlZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgd2Fsa2VyKCk6IElfV25kcldhbGtlcnx1bmRlZmluZWQge3JldHVybiB0aGlzLndhbGs7fVxyXG4gICAgcHVibGljIHNldF93YWxrZXIod2FsazogSV9XbmRyV2Fsa2VyfHVuZGVmaW5lZCk6IHZvaWQge3RoaXMud2FsayA9IHdhbGs7fVxyXG5cclxuICAgIHB1YmxpYyB3cmVzKCk6ICBJX1duZHJbXXx1bmRlZmluZWQge3JldHVybiB0aGlzLm15X3dyZXM/P3VuZGVmaW5lZDt9XHJcbiAgICBwdWJsaWMgc2V0X3dyZXMod3JlczogSV9XbmRyW118dW5kZWZpbmVkKTogdm9pZCB7dGhpcy5teV93cmVzID0gd3Jlczt9XHJcbiAgICBwdWJsaWMgYWRkX3duZHIod25kcjogSV9XbmRyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5teV93cmVzID8/PSBbXTtcclxuICAgICAgICB0aGlzLm15X3dyZXMucHVzaCh3bmRyKTtcclxuICAgIH0gICBcclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fV25kck9iaiB7XHJcbiAgICAgICAgY29uc3Qgd3JlczogSlNPTl9XbmRyW118dW5kZWZpbmVkID0gdGhpcy5teV93cmVzPy5tYXAoKHduZHIpID0+IHduZHIuZW5jb2RlKCkpO1xyXG5cclxuXHJcbiAgICAgICAgY29uc3QgaiAgICA9IHN1cGVyLmVuY29kZSgpIGFzIEpTT05fV25kck9iajtcclxuICAgICAgICBqLmNsbmFtZSAgID0gdGhpcy5jbG5hbWU7XHJcbiAgICAgICAgai53YWxrICAgICA9IHRoaXMud2Fsaz8uZW5jb2RlKCkgICA/PyB1bmRlZmluZWQ7XHJcbiAgICAgICAgai53cmVzICAgICA9IHdyZXM7XHJcbiAgICAgICAgai5zdGF0ICAgICA/Pz0ge307XHJcbiAgICAgICAgai5zdGF0LndvICA9IHtkbXk6IHRoaXMuZG15fTsgLy8g44OA44Of44O85aSJ5pWwXHJcbiAgICAgICAgcmV0dXJuIGo7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGVjb2RlKGo6IEpTT05fV25kck9ianx1bmRlZmluZWQpOiBJX1duZHJPYmoge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9faW5pdChqKTtcclxuICAgIH1cclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IF9qc29uX2NvbnNvbGUgfSBmcm9tIFwiLi4vZF91dGwvRl9VdGlsaXR5XCI7XHJcbmltcG9ydCB7IEpTT05fTWF6ZU9iaiB9ICAgICAgICAgICAgICAgZnJvbSBcIi4vQ19NYXplT2JqXCI7XHJcbmltcG9ydCB7IENfV25kck9iaiwgSlNPTl9XbmRyT2JqIH0gICAgZnJvbSBcIi4vQ19XbmRyT2JqXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ19XbmRyT2JqQm9zczIgZXh0ZW5kcyBDX1duZHJPYmoge1xyXG4gICAgcHVibGljIGNsbmFtZTogc3RyaW5nID0gJ0NfV25kck9iakJvc3MyJztcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioaj86IEpTT05fV25kck9iaikge1xyXG4gICAgICAgIHN1cGVyKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgdGhpcy5jbG5hbWUgPSAnQ19XbmRyT2JqQm9zczInO1xyXG4gICAgICAgIGlmIChqID09PSB1bmRlZmluZWQpIHJldHVybjsgLy8gauOBjOacquWumue+qeOBruWgtOWQiOOBr1ZpZXfjgoR3YWxrZXLnrYnjga7liJ3mnJ/ljJbjga/jgZfjgarjgYRcclxuXHJcbiAgICAgICAgLy8g54m55a6a44Gu5Yid5pyf5YyW5Yem55CG44GM5b+F6KaB44Gq5aC05ZCI44Gv44GT44GT44Gr6L+95YqgKF9faW5pdCgp44Gu5Yem55CG44Gv44Oe44K544OIKVxyXG5cclxuICAgICAgICAvLyBXbmRyT2Jq44Gu5Z+65pys5oOF5aCx44KS6Kit5a6aXHJcbiAgICAgICAgai5wb3MgICAgPz89IGoud2Fsaz8ubG9jX3BvcyA/PyB7eDoxLCB5OjEsIHo6MCwgZDowfTsgLy8g5L2N572u44Gv6Kaq44Gu5L2N572u44KS5byV44GN57aZ44GQXHJcblxyXG4gICAgICAgIC8vIOODk+ODpeODvOOBruioreWumlxyXG4gICAgICAgIGNvbnN0IG5ld192aWV3ID0ge1xyXG4gICAgICAgICAgICAgICAgbGF5ZXI6IDAsIGxldHRlcjogJ+ODnCcsIFxyXG4gICAgICAgICAgICAgICAgc2hvdzNEOiAgJzEnLFxyXG4gICAgICAgICAgICAgICAgcGFkX3Q6IDAuMSwgcGFkX2Q6IDAuMCwgcGFkX3M6IDAuMyxcclxuICAgICAgICAgICAgICAgIGNvbF9mOiAnI0I5QzNDOScsIGNvbF9iOiAnI0RDRERERCcsIGNvbF9zOiAnIzlFQUNCMycsIGNvbF90OiAnI0RDRERERCcsIGNvbF9kOiAnIzlFQUNCMycsIFxyXG4gICAgICAgICAgICAgICAgY29sX2w6ICcjOTk5OWZmJywgY29sXzI6ICcjQjlDM0M5JywgY29sX0w6ICcjNjY2NmZmJywgXHJcbiAgICAgICAgICAgICAgICBjb2xfMl9hcnc6ICcjOUVBQ0IzJywgY29sXzJfdHJpOiAnI0RDRERERCcsXHJcbiAgICAgICAgfSBhcyB7W2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHVuZGVmaW5lZH07XHJcblxyXG4gICAgICAgIGoudmlldyA/Pz0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3X3ZpZXcpIHtcclxuICAgICAgICAgICAgaWYgKGoudmlld1trZXldICE9PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBqLnZpZXdba2V5XSA9IG5ld192aWV3W2tleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDjgqbjgqnjg7zjgq/jga7oqK3lrppcclxuICAgICAgICBjb25zdCBuZXdfd2FsayA9IHtcclxuICAgICAgICAgICAgICAgIGNvbmQ6IHsgY2FuTW92ZTogJzAnLCBjYW5TbGlkOiBcIjBcIiwgY2FuVXBEbjogXCIwXCIsIGNhblRocnU6IFwiMVwiIH0sXHJcbiAgICAgICAgICAgICAgICBsb2NfcG9zOiBqPy53YWxrPy5sb2NfcG9zID8/IGo/LnBvcyA/PyB7eDoxLCB5OjEsIHo6MCwgZDowfSwgLy8g5L2N572u44Gv6Kaq44Gu5L2N572u44KS5byV44GN57aZ44GQXHJcbiAgICAgICAgfSBhcyB7W2tleTogc3RyaW5nXTogYW55fTtcclxuXHJcbiAgICAgICAgai53YWxrID8/PSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdfd2Fsaykge1xyXG4gICAgICAgICAgICBpZiAoai53YWxrW2tleV0gIT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGoud2Fsa1trZXldID0gbmV3X3dhbGtba2V5XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFduZHLjga7oqK3lrppcclxuICAgICAgICBjb25zdCBuZXdfd3JlcyA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYm9zc19sZXZlbDogMixcclxuICAgICAgICAgICAgICAgIGZhbWlseTogICAgJ+S4reODnOOCuScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSBhcyBKU09OX1duZHJPYmpbXTtcclxuXHJcbiAgICAgICAgai53cmVzID8/PSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IG5ld193bmRyIG9mIG5ld193cmVzKSB7XHJcbiAgICAgICAgICAgIGlmICgoai53cmVzPy5sZW5ndGggPz8gNCkgPiAzICkgYnJlYWs7XHJcbiAgICAgICAgICAgIGoud3Jlcy5wdXNoKG5ld193bmRyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX19pbml0KGopO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBfX2luaXQoajogSlNPTl9XbmRyT2JqfHVuZGVmaW5lZCk6IENfV25kck9iakJvc3MyIHtcclxuXHJcbiAgICAgICAgLy9fanNvbl9jb25zb2xlKGosICdDX1duZHJPYmpCb3NzMi5fX2luaXQoKSBqc29uX291dHB1dCA9ICcpOyAvLyDjg4fjg5Djg4PjgrDnlKjvvJrliJ3mnJ/ljJbmmYLjgatq44Gu5YaF5a6544KS5Ye65YqbXHJcbiAgICAgICAgc3VwZXIuX19pbml0KGopO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENfV25kck9iakJvc3MzIGV4dGVuZHMgQ19XbmRyT2JqIHtcclxuICAgIHB1YmxpYyBjbG5hbWU6IHN0cmluZyA9ICdDX1duZHJPYmpCb3NzMyc7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGo/OiBKU09OX01hemVPYmopIHtcclxuICAgICAgICBzdXBlcih1bmRlZmluZWQpO1xyXG4gICAgICAgIHRoaXMuY2xuYW1lID0gJ0NfV25kck9iakJvc3MzJztcclxuICAgICAgICBpZiAoaiA9PT0gdW5kZWZpbmVkKSByZXR1cm47IC8vIGrjgYzmnKrlrprnvqnjga7loLTlkIjjga9WaWV344KEd2Fsa2Vy562J44Gu5Yid5pyf5YyW44Gv44GX44Gq44GEXHJcblxyXG4gICAgICAgIC8vIOeJueWumuOBruWIneacn+WMluWHpueQhuOBjOW/heimgeOBquWgtOWQiOOBr+OBk+OBk+OBq+i/veWKoChfX2luaXQoKeOBruWHpueQhuOBr+ODnuOCueODiClcclxuXHJcbiAgICAgICAgLy8gV25kck9iauOBruWfuuacrOaDheWgseOCkuioreWumlxyXG4gICAgICAgIGoucG9zICAgID8/PSBqLndhbGs/LmxvY19wb3MgPz8ge3g6MSwgeToxLCB6OjAsIGQ6MH07IC8vIOS9jee9ruOBr+imquOBruS9jee9ruOCkuW8leOBjee2meOBkFxyXG5cclxuICAgICAgICAvLyDjg5Pjg6Xjg7zjga7oqK3lrppcclxuICAgICAgICBjb25zdCBuZXdfdmlldyA9IHtcclxuICAgICAgICAgICAgICAgIGxheWVyOiAwLCBsZXR0ZXI6ICfjg5wnLCBcclxuICAgICAgICAgICAgICAgIHNob3czRDogICcxJyxcclxuICAgICAgICAgICAgICAgIHBhZF90OiAwLjEsIHBhZF9kOiAwLjAsIHBhZF9zOiAwLjMsXHJcbiAgICAgICAgICAgICAgICBjb2xfZjogJyNGNUQxMDAnLCBjb2xfYjogJyNCRjkyMjMnLCBjb2xfczogJyNEQkIzMDAnLCBjb2xfdDogJyNGNUQxMDAnLCBjb2xfZDogJyNGNUQxMDAnLCBcclxuICAgICAgICAgICAgICAgIGNvbF9sOiAnIzk5OTlmZicsIGNvbF8yOiAnI0Y1RDEwMCcsIGNvbF9MOiAnIzY2NjZmZicsIFxyXG4gICAgICAgICAgICAgICAgY29sXzJfYXJ3OiAnI0JGOTIyMycsIGNvbF8yX3RyaTogJyNGNUQxMDAnLFxyXG4gICAgICAgIH0gYXMge1trZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCB1bmRlZmluZWR9O1xyXG5cclxuICAgICAgICBqLnZpZXcgPz89IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld192aWV3KSB7XHJcbiAgICAgICAgICAgIGlmIChqLnZpZXdba2V5XSAhPT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgai52aWV3W2tleV0gPSBuZXdfdmlld1trZXldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g44Km44Kp44O844Kv44Gu6Kit5a6aXHJcbiAgICAgICAgY29uc3QgbmV3X3dhbGsgPSB7XHJcbiAgICAgICAgICAgICAgICBjb25kOiB7IGNhbk1vdmU6ICcwJywgY2FuU2xpZDogXCIwXCIsIGNhblVwRG46IFwiMFwiLCBjYW5UaHJ1OiBcIjFcIiB9LFxyXG4gICAgICAgICAgICAgICAgbG9jX3Bvczogaj8ud2Fsaz8ubG9jX3BvcyA/PyBqPy5wb3MgPz8ge3g6MSwgeToxLCB6OjAsIGQ6MH0sIC8vIOS9jee9ruOBr+imquOBruS9jee9ruOCkuW8leOBjee2meOBkFxyXG4gICAgICAgIH0gYXMge1trZXk6IHN0cmluZ106IGFueX07XHJcblxyXG4gICAgICAgIGoud2FsayA/Pz0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV3X3dhbGspIHtcclxuICAgICAgICAgICAgaWYgKGoud2Fsa1trZXldICE9PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBqLndhbGtba2V5XSA9IG5ld193YWxrW2tleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXbmRy44Gu6Kit5a6aXHJcbiAgICAgICAgY29uc3QgbmV3X3dyZXMgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJvc3NfbGV2ZWw6IDMsXHJcbiAgICAgICAgICAgICAgICBmYW1pbHk6ICAgICflpKfjg5zjgrknLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0gYXMgSlNPTl9XbmRyT2JqW107XHJcblxyXG4gICAgICAgIGoud3JlcyA/Pz0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBuZXdfd25kciBvZiBuZXdfd3Jlcykge1xyXG4gICAgICAgICAgICBpZiAoKGoud3Jlcz8ubGVuZ3RoID8/IDQpID4gMyApIGJyZWFrO1xyXG4gICAgICAgICAgICBqLndyZXMucHVzaChuZXdfd25kcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9faW5pdChqKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBfX2luaXQoajogSlNPTl9XbmRyT2JqfHVuZGVmaW5lZCk6IENfV25kck9iakJvc3MyIHtcclxuXHJcbiAgICAgICAgLy9fanNvbl9jb25zb2xlKGosICdDX1duZHJPYmpCb3NzMi5fX2luaXQoKSBqc29uX291dHB1dCA9ICcpOyAvLyDjg4fjg5Djg4PjgrDnlKjvvJrliJ3mnJ/ljJbmmYLjgatq44Gu5YaF5a6544KS5Ye65YqbXHJcbiAgICAgICAgc3VwZXIuX19pbml0KGopO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufSAiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IF9taW4gfSBmcm9tICcuLi9kX3V0bC9GX01hdGgnO1xyXG5pbXBvcnQgeyBDX01hemVPYmpWaWV3LCBJX01hemVPYmpWaWV3LCBKU09OX01hemVPYmpWaWV3LCBUX1JlY3QgfSBmcm9tICcuL0NfTWF6ZU9ialZpZXcnO1xyXG5pbXBvcnQgeyBUX0RpcmVjdGlvbiB9IGZyb20gJy4vQ19Qb2ludERpcic7XHJcbmltcG9ydCB7IFRfV2FsbCB9IGZyb20gJy4vQ19XYWxsJztcclxuaW1wb3J0IHsgVF9PcmllbnRhdGlvbiB9IGZyb20gJy4vVF9PcmllbnRhdGlvbic7XHJcblxyXG50eXBlIFRfeHkgPSB7eDogbnVtYmVyLCB5OiBudW1iZXJ9O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OX1duZHJWaWV3IGV4dGVuZHMgSlNPTl9NYXplT2JqVmlldyB7XHJcbiAgICBjb2xfMl9hcnc/OiBzdHJpbmc7ICAvLyDnn6LljbDjga7oibJcclxuICAgIGNvbF8yX3RyaT86IHN0cmluZzsgIC8vIOefouWNsOOBrui8qumDreOBruiJslxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ19XbmRyVmlldyAgZXh0ZW5kcyBDX01hemVPYmpWaWV3IGltcGxlbWVudHMgSV9NYXplT2JqVmlldyB7XHJcbiAgICBwdWJsaWMgY2xuYW1lOiBzdHJpbmcgPSAnV25kclZpZXcnOyAvLyDjgq/jg6njgrnlkI1cclxuICAgIHB1YmxpYyBjb2xfMl9hcnc6IHN0cmluZ3xudWxsID0gbnVsbDsgLy8g55+i5Y2w44Gu6ImyXHJcbiAgICBwdWJsaWMgY29sXzJfdHJpOiBzdHJpbmd8bnVsbCA9IG51bGw7IC8vIOefouWNsOOBrui8qumDreOBruiJslxyXG4gICAgXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoajogSlNPTl9XbmRyVmlldykge1xyXG4gICAgICAgIHN1cGVyKGopO1xyXG4gICAgICAgIHRoaXMuY2xuYW1lICAgID0gJ1duZHJWaWV3JztcclxuICAgICAgICBpZiAoaiAhPT0gdW5kZWZpbmVkKSB0aGlzLl9faW5pdChqKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfX2luaXQoajogSlNPTl9XbmRyVmlld3x1bmRlZmluZWQpOiBJX01hemVPYmpWaWV3IHtcclxuICAgICAgICBpZiAoaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgc3VwZXIuX19pbml0KGopO1xyXG4gICAgICAgIGlmIChqPy5jbG5hbWUgICAgIT09IHVuZGVmaW5lZCkgdGhpcy5jbG5hbWUgICA9IGouY2xuYW1lO1xyXG4gICAgICAgIGlmIChqPy5jb2xfMl9hcncgIT09IHVuZGVmaW5lZCkgdGhpcy5jb2xfMl9hcncgPSBqLmNvbF8yX2FydztcclxuICAgICAgICBpZiAoaj8uY29sXzJfdHJpICE9PSB1bmRlZmluZWQpIHRoaXMuY29sXzJfdHJpID0gai5jb2xfMl90cmk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGZyZWUoKTogdm9pZCB7fVxyXG5cclxuICAgIHB1YmxpYyBsZXR0ZXIoZGlyOiBudW1iZXIgPSAwKTogc3RyaW5nfG51bGwge1xyXG4gICAgICAgIHN3aXRjaCAoZGlyKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjogcmV0dXJuICfwn5GGJztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5FOiByZXR1cm4gJ/CfkYknO1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlM6IHJldHVybiAn8J+Rhyc7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzogcmV0dXJuICfwn5GIJztcclxuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuICfwn4yAJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgcHVibGljIGRyb3cyRChyOiBUX1JlY3QsIGRpcjogbnVtYmVyID0gMCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmRyb3cyRChyKTtcclxuICAgICAgICBjb25zdCBjb24gPSBDX01hemVPYmpWaWV3LmdldF9jb250ZXh0MkQoKTtcclxuICAgICAgICBpZiAoY29uID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgIFxyXG4gICAgICAgIC8vIERyYXcgdGhlIGFycm93XHJcbiAgICAgICAgc3dpdGNoIChkaXIpIHtcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5OOiAgLy8g4oaRXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3cyRF9hcnJvdyh7eDogKHIudGwueCArIHIudHIueCkvMiwgeTpyLnRsLnl9LCByLmRsLCByLmRyKTticmVha1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLkU6ICAvLyDihpJcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJvdzJEX2Fycm93KHt5OiAoci50ci55ICsgci5kci55KS8yLCB4OnIudHIueH0sIHIudGwsIHIuZGwpO2JyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlM6IC8vIOKGk1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm93MkRfYXJyb3coe3g6IChyLmRsLnggKyByLmRyLngpLzIsIHk6ci5kbC55fSwgci50ciwgci50bCk7YnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzogLy8g4oaQXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyb3cyRF9hcnJvdyh7eTogKHIudGwueSArIHIuZGwueSkvMiwgeDpyLnRsLnh9LCByLmRyLCByLnRyKTticmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcm93MkRfYXJyb3codG9wOiBUX3h5LCBsZWZ0OiBUX3h5LCByaWdodDogVF94eSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGNvbiA9IENfTWF6ZU9ialZpZXcuZ2V0X2NvbnRleHQyRCgpO1xyXG4gICAgICAgIGlmIChjb24gPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb24uYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29uLm1vdmVUbyh0b3AueCwgdG9wLnkpO1xyXG4gICAgICAgIGNvbi5saW5lVG8ocmlnaHQueCwgcmlnaHQueSk7XHJcbiAgICAgICAgY29uLmxpbmVUbyhsZWZ0LngsIGxlZnQueSk7XHJcbiAgICAgICAgY29uLmNsb3NlUGF0aCgpO1xyXG5cclxuICAgICAgICBjb24uZmlsbFN0eWxlICAgPSB0aGlzLmNvbF8yX2FydyA/PyBcIiNmZjMzMzNcIjtcclxuICAgICAgICBjb24uZmlsbCgpO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBjb24uc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbF8yX3RyaSA/PyBcIiNmZjk5OTlcIjtcclxuICAgICAgICBjb24ubGluZVdpZHRoICAgPSAyO1xyXG4gICAgICAgIGNvbi5zdHJva2UoKTtcclxuICAgIH1cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgICBwcm90ZWN0ZWQgZHJvdzNEX29ial9mcm9udChcclxuICAgICAgICBmcm90OiAgVF9XYWxsLCBcclxuICAgICAgICBiYWNrOiAgVF9XYWxsLCBcclxuICAgICAgICBvYmplX2RpcjogVF9EaXJlY3Rpb24gPSBUX0RpcmVjdGlvbi5OLCBcclxuICAgICAgICB0ZWFtX2RpcjogVF9EaXJlY3Rpb24gPSBUX0RpcmVjdGlvbi5OLFxyXG4gICAgKTogVF9SZWN0fHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgcmVjdCA9IHN1cGVyLmRyb3czRF9vYmpfZnJvbnQoZnJvdCwgYmFjaywgb2JqZV9kaXIsIHRlYW1fZGlyKTtcclxuICAgICAgICBpZiAocmVjdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiByZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfZHJvdzNEX3RleHRUT1AodGV4dDogc3RyaW5nLCByOiBUX1JlY3QsIGZpbGw6IHN0cmluZ3xudWxsLCBsaW5lOiBzdHJpbmd8bnVsbCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNpemVfeCA9ICggci50ci54IC0gci50bC54ICk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZV95ID0gKCByLmRsLnkgLSByLnRsLnkgKSAvIDI7XHJcblxyXG4gICAgICAgIHRoaXMuX2Ryb3czRF90ZXh0KFxyXG4gICAgICAgICAgICB0ZXh0LCBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgeDogci50bC54ICsgKHNpemVfeCAvIDIpLFxyXG4gICAgICAgICAgICAgICAgeTogKHIudGwueSArIDAgKiBzaXplX3kpICsgKHNpemVfeSAvIDIpXHJcbiAgICAgICAgICAgIH0sIFxyXG4gICAgICAgICAgICBfbWluKFtzaXplX3gsIHNpemVfeV0pLCAvLyDmloflrZfjga7mnIDlpKfluYVcclxuICAgICAgICAgICAgZmlsbCwgXHJcbiAgICAgICAgICAgIGxpbmVcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9kcm93M0RfdGV4dEJUTShvcmk6IFRfT3JpZW50YXRpb24sIHI6IFRfUmVjdCwgZmlsbDogc3RyaW5nfG51bGwsIGxpbmU6IHN0cmluZ3xudWxsKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRleHQ6IHN0cmluZztcclxuICAgICAgICBzd2l0Y2ggKG9yaSkge1xyXG4gICAgICAgICAgICBjYXNlIFRfT3JpZW50YXRpb24uRjogdGV4dCA9ICfliY0nOyBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBUX09yaWVudGF0aW9uLkw6IHRleHQgPSAn5bemJzsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVF9PcmllbnRhdGlvbi5COiB0ZXh0ID0gJ+W+jCc7IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRfT3JpZW50YXRpb24uUjogdGV4dCA9ICflj7MnOyBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDogdGV4dCA9ICforI4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2l6ZV94ID0gKCByLnRyLnggLSByLnRsLnggKTtcclxuICAgICAgICBjb25zdCBzaXplX3kgPSAoIHIuZGwueSAtIHIudGwueSApIC8gMztcclxuXHJcbiAgICAgICAgdGhpcy5fZHJvdzNEX3RleHQoXHJcbiAgICAgICAgICAgIHRleHQsIFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB4OiByLnRsLnggKyAoc2l6ZV94IC8gMiksXHJcbiAgICAgICAgICAgICAgICB5OiAoci50bC55ICsgMiAqIHNpemVfeSkgKyAoc2l6ZV95IC8gMylcclxuICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgICAgIF9taW4oW3NpemVfeCwgc2l6ZV95XSksIC8vIOaWh+Wtl+OBruacgOWkp+W5hVxyXG4gICAgICAgICAgICBmaWxsLCBcclxuICAgICAgICAgICAgbGluZVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9kcm93M0RfdGV4dChjaDogc3RyaW5nLCBwb3M6IFRfeHksIG1heF93aWR0aDogbnVtYmVyLCBmaWxsOiBzdHJpbmd8bnVsbCwgbGluZTogc3RyaW5nfG51bGwpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjb24gPSBDX01hemVPYmpWaWV3LmdldF9jb250ZXh0M0QoKTtcclxuICAgICAgICBpZiAoY29uID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy9jb24uZm9udCA9ICcxNnB4IHNhbnMtc2VyaWYnO1xyXG4gICAgICAgIGNvbnN0IGZvbnRfc2l6ZSA9IE1hdGguZmxvb3IoIDAuOTUgKiBtYXhfd2lkdGggLyBjaC5sZW5ndGggKTtcclxuICAgICAgICBjb24uZm9udCA9IGAke2ZvbnRfc2l6ZX1weCBzYW5zLXNlcmlmYDtcclxuICAgICAgICBjb24udGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgICAgY29uLnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xyXG5cclxuICAgICAgICBpZiAoZmlsbCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbi5maWxsU3R5bGUgICA9IGZpbGw7XHJcbiAgICAgICAgICAgIGNvbi5maWxsVGV4dChjaCwgcG9zLngsIHBvcy55LCBtYXhfd2lkdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGluZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb24uc3Ryb2tlU3R5bGUgPSBsaW5lO1xyXG4gICAgICAgICAgICBjb24ubGluZVdpZHRoICAgPSAxO1xyXG4gICAgICAgICAgICBjb24uc3Ryb2tlVGV4dChjaCwgcG9zLngsIHBvcy55LCBtYXhfd2lkdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fV25kclZpZXcge1xyXG4gICAgICAgIGNvbnN0IGogPSBzdXBlci5lbmNvZGUoKTtcclxuICAgICAgICBqLmNvbF8yX2FydyA9IHRoaXMuY29sXzJfYXJ3ID8/IG51bGw7IC8vIOefouWNsOOBruiJslxyXG4gICAgICAgIGouY29sXzJfdHJpID0gdGhpcy5jb2xfMl90cmkgPz8gbnVsbDsgLy8g55+i5Y2w44Gu6Lyq6YOt44Gu6ImyXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGo7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGVjb2RlKGo6IEpTT05fV25kclZpZXd8dW5kZWZpbmVkKTogSV9NYXplT2JqVmlldyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX19pbml0KGopO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgQ19NYXplT2JqVmlldywgSV9NYXplT2JqVmlldywgSlNPTl9NYXplT2JqVmlldywgVF9SZWN0IH0gZnJvbSAnLi9DX01hemVPYmpWaWV3JztcclxuaW1wb3J0IHsgQ19NYXplT2JqVmlldzJYLCBJX01hemVPYmpWaWV3MlgsIEpTT05fTWF6ZU9ialZpZXcyWCB9IGZyb20gJy4vQ19NYXplT2JqVmlldzJYJztcclxuaW1wb3J0IHsgVF9EaXJlY3Rpb24gfSBmcm9tICcuL0NfUG9pbnREaXInO1xyXG5cclxudHlwZSBUX3h5ID0ge3g6IG51bWJlciwgeTogbnVtYmVyfTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9XbmRyVmlldzJYIGV4dGVuZHMgSlNPTl9NYXplT2JqVmlldzJYIHtcclxuICAgIGNvbF8yX2Fydz86IHN0cmluZzsgIC8vIOefouWNsOOBruiJslxyXG4gICAgY29sXzJfdHJpPzogc3RyaW5nOyAgLy8g55+i5Y2w44Gu6Lyq6YOt44Gu6ImyXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9XbmRyVmlldzJYIGV4dGVuZHMgSV9NYXplT2JqVmlldzJYIHt9XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENfV25kclZpZXcyWCAgZXh0ZW5kcyBDX01hemVPYmpWaWV3MlggaW1wbGVtZW50cyBJX01hemVPYmpWaWV3Mlgge1xyXG4gICAgcHVibGljIGNsbmFtZTogc3RyaW5nID0gJ1duZHJWaWV3JzsgICAgLy8g44Kv44Op44K55ZCNXHJcbiAgICBwdWJsaWMgY29sXzJfYXJ3OiAgc3RyaW5nfG51bGwgPSBudWxsOyAvLyDnn6LljbDjga7oibJcclxuICAgIHB1YmxpYyBjb2xfMl90cmk6ICBzdHJpbmd8bnVsbCA9IG51bGw7IC8vIOefouWNsOOBrui8qumDreOBruiJslxyXG4gICAgXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoajogSlNPTl9XbmRyVmlldzJYKSB7XHJcbiAgICAgICAgc3VwZXIoaik7XHJcbiAgICAgICAgdGhpcy5jbG5hbWUgICAgPSAnV25kclZpZXcnO1xyXG4gICAgICAgIGlmIChqICE9PSB1bmRlZmluZWQpIHRoaXMuX19pbml0KGopO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9faW5pdChqOiBKU09OX1duZHJWaWV3Mlh8dW5kZWZpbmVkKTogSV9NYXplT2JqVmlldzJYIHtcclxuICAgICAgICBpZiAoaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgc3VwZXIuX19pbml0KGopO1xyXG4gICAgICAgIGlmIChqPy5jbG5hbWUgICAgICE9PSB1bmRlZmluZWQpIHRoaXMuY2xuYW1lICAgICA9IGouY2xuYW1lO1xyXG4gICAgICAgIGlmIChqPy5jb2xfMl9hcncgICE9PSB1bmRlZmluZWQpIHRoaXMuY29sXzJfYXJ3ICA9IGouY29sXzJfYXJ3O1xyXG4gICAgICAgIGlmIChqPy5jb2xfMl90cmkgICE9PSB1bmRlZmluZWQpIHRoaXMuY29sXzJfdHJpICA9IGouY29sXzJfdHJpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHB1YmxpYyBmcmVlKCk6IHZvaWQge31cclxuXHJcbiAgICBwdWJsaWMgbGV0dGVyKGRpcjogbnVtYmVyID0gMCk6IHN0cmluZ3xudWxsIHtcclxuICAgICAgICBzd2l0Y2ggKGRpcikge1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLk46IHJldHVybiAn8J+Rhic7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uRTogcmV0dXJuICfwn5GJJztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5TOiByZXR1cm4gJ/CfkYgnO1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlc6IHJldHVybiAn8J+Rhyc7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAn8J+MgCc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGRyb3cyWChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB8IG51bGwsIHI6IFRfUmVjdCwgZGlyOiBudW1iZXIgPSAwKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuZHJvdzJYKGN0eCwgciwgZGlyKTtcclxuICAgICAgICBpZiAoY3R4ID09PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgLy8gRHJhdyB0aGUgYXJyb3dcclxuICAgICAgICBzd2l0Y2ggKGRpcikge1xyXG4gICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLk46ICAvLyDihpFcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3cyWF9hcnJvdyhjdHgsIHt4OiAoci50bC54ICsgci50ci54KS8yLCB5OnIudGwueX0sIHIuZGwsIHIuZHIpO2JyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uRTogIC8vIOKGklxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJvdzJYX2Fycm93KGN0eCwge3k6IChyLnRyLnkgKyByLmRyLnkpLzIsIHg6ci50ci54fSwgci50bCwgci5kbCk7YnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uUzogLy8g4oaTXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcm93MlhfYXJyb3coY3R4LCB7eDogKHIuZGwueCArIHIuZHIueCkvMiwgeTpyLmRsLnl9LCByLnRyLCByLnRsKTticmVhaztcclxuICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5XOiAvLyDihpBcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3cyWF9hcnJvdyhjdHgsIHt5OiAoci50bC55ICsgci5kbC55KS8yLCB4OnIudGwueH0sIHIuZHIsIHIudHIpO2JyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2Ryb3cyWF9hcnJvdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCB8IG51bGwsIHRvcDogVF94eSwgbGVmdDogVF94eSwgcmlnaHQ6IFRfeHkpOiB2b2lkIHtcclxuICAgICAgICBpZiAoY3R4ID09PSB1bmRlZmluZWQgfHwgY3R4ID09PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHgubW92ZVRvKHRvcC54LCB0b3AueSk7XHJcbiAgICAgICAgY3R4LmxpbmVUbyhyaWdodC54LCByaWdodC55KTtcclxuICAgICAgICBjdHgubGluZVRvKGxlZnQueCwgbGVmdC55KTtcclxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgICA9IHRoaXMuY29sXzJfYXJ3ID8/IFwiI2ZmMzMzM1wiO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY29sXzJfdHJpID8/IFwiI2ZmOTk5OVwiO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggICA9IDI7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbmNvZGUoKTogSlNPTl9XbmRyVmlldzJYIHtcclxuICAgICAgICBjb25zdCBqID0gc3VwZXIuZW5jb2RlKCk7XHJcbiAgICAgICAgai5jb2xfMl9hcncgID0gdGhpcy5jb2xfMl9hcncgID8/IG51bGw7IC8vIOefouWNsOOBruiJslxyXG4gICAgICAgIGouY29sXzJfdHJpICA9IHRoaXMuY29sXzJfdHJpICA/PyBudWxsOyAvLyDnn6LljbDjga7ovKrpg63jga7oibJcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gajtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkZWNvZGUoajogSlNPTl9XbmRyVmlldzJYfHVuZGVmaW5lZCk6IElfV25kclZpZXcyWCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX19pbml0KGopO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgSV9NYXplT2JqIH0gICAgICAgICAgICAgICAgICBmcm9tIFwiLi9DX01hemVPYmpcIjtcclxuaW1wb3J0IHsgQ19XYWxrZXIsIEpTT05fV2Fsa2VyIH0gICAgICBmcm9tIFwiLi9DX1dhbGtlclwiO1xyXG5pbXBvcnQgeyBJX0hvcGVBY3Rpb24sIENfSG9wZUFjdGlvbiB9IGZyb20gJy4vQ19Ib3BlJztcclxuaW1wb3J0IHsgQ19Qb2ludERpciB9ICAgICAgICAgICAgICAgICBmcm9tIFwiLi9DX1BvaW50RGlyXCI7XHJcbmltcG9ydCB7IElfSlNPTl9VbmlxIH0gICAgICAgICAgICAgICAgZnJvbSBcIi4vQ19TYXZlSW5mb1wiO1xyXG5pbXBvcnQgeyBfaXJhbmQsIF9zZWxlY3RJdGVtLCBfc2VsZWN0SXRlbTIsIFRfU2VsZWN0SXRlbSwgVF9TZWxlY3RJdGVtMiB9ICAgICAgICAgICAgICAgICAgICAgZnJvbSBcIi4uL2RfdXRsL0ZfUmFuZFwiO1xyXG5pbXBvcnQgeyBfanNvbl9vdXRwdXQsIF9qc29uX3RvX3N0ciB9IGZyb20gXCIuLi9kX3V0bC9GX1V0aWxpdHlcIjtcclxuaW1wb3J0IHsgVF9NYWtlRW51bVR5cGUgfSBmcm9tIFwiLi4vZF91dGwvVF9NYWtlRW51bVR5cGVcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSlNPTl9XbmRyV2Fsa2VyIGV4dGVuZHMgSlNPTl9XYWxrZXIge31cclxuXHJcbnR5cGUgVF9Db25kaXRpb24gPSB7XHJcbiAgICBjYW5Nb3ZlOiAgYm9vbGVhbjsgLy8g56e75YuV5Y+v6IO9XHJcbiAgICBjYW5UdXJuOiAgYm9vbGVhbjsgLy8g5ZCR44GN5aSJ5pu05Y+v6IO9XHJcbiAgICBjYW5TbGlkOiAgYm9vbGVhbjsgLy8g44K544Op44Kk44OJ5Y+v6IO9XHJcbiAgICBjYW5VcERuOiAgYm9vbGVhbjsgLy8g5LiK5LiL56e75YuV5Y+v6IO9XHJcbiAgICBjYW5UaHJ1OiAgYm9vbGVhbjsgLy8g5aOB44KS6YCa6YGO5Y+v6IO9XHJcbiAgICBjYXJlV2FsOiAgYm9vbGVhbjsgLy8g5aOB44KS5rCX44Gr44GZ44KLXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBUX0FjdGlvbiA9XHJcbiAgICAgICdXYWl0XycgICAgICAvLyDlvoXmqZ9cclxuICAgIHwgJ01vdmVGJyAgICAgIC8vIOWJjeOBq+enu+WLlVxyXG4gICAgfCAnTW92ZUInICAgICAgLy8g5b6M44KN44Gr56e75YuV77yI44K544Km44Kn44Kk44OQ44OD44Kv77yJXHJcbiAgICB8ICdUdXJuTCcgICAgICAvLyDlt6bjgavjgr/jg7zjg7NcclxuICAgIHwgJ1R1cm5SJyAgICAgIC8vIOWPs+OBq+OCv+ODvOODs1xyXG4gICAgfCAnU2xpZEYnICAgICAgLy8g5YmN44Gr44K544Op44Kk44OJXHJcbiAgICB8ICdTbGlkQicgICAgICAvLyDlvozjgo3jgavjgrnjg6njgqTjg4lcclxuICAgIHwgJ1NsaWRMJyAgICAgIC8vIOW3puOBq+OCueODqeOCpOODiVxyXG4gICAgfCAnU2xpZFInICAgICAgLy8g5Y+z44Gr44K544Op44Kk44OJXHJcbiAgICB8ICdGbG9yVScgICAgICAvLyDkuIrjgavnp7vli5VcclxuICAgIHwgJ0Zsb3JEJyAgICAgIC8vIOS4i+OBq+enu+WLlVxyXG4gICAgO1xyXG5cclxuZXhwb3J0IHR5cGUgVF9XbmRyV2Fsa2VyQWN0aW9uID0ge1thY3Rpb246IHN0cmluZ106IG51bWJlcn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9XbmRyV2Fsa2VyIGV4dGVuZHMgSV9KU09OX1VuaXEge1xyXG4gICAgZnJlZSgpOiAgICB2b2lkO1xyXG4gICAgZ2V0X3BkKCk6ICBDX1BvaW50RGlyOyAgICAgICAgICAgICAgIC8vIENfUG9pbnREaXLjgpLlj5blvpdcclxuICAgIHNldF9wZChwZDogQ19Qb2ludERpcik6IENfUG9pbnREaXI7ICAvLyBDX1BvaW50RGly44KS6Kit5a6aXHJcbiAgICBlbmNvZGUoKTogIEpTT05fV25kcldhbGtlcjsgICAgICAgICAgLy8gSlNPTl9XbmRycldhbGtlcuW9ouW8j+OBp+OCqOODs+OCs+ODvOODiVxyXG4gICAgZGVjb2RlKGo6ICBKU09OX1duZHJXYWxrZXIpOiBDX1duZHJXYWxrZXI7IC8vIEpTT05fV25kcldhbGtlcuW9ouW8j+OBp+ODh+OCs+ODvOODiVxyXG4gICAgXHJcbiAgICBnZXRfbWF6ZU9iaigpOiBJX01hemVPYmp8dW5kZWZpbmVkOyAvLyBJX01hemVPYmrjgpLlj5blvpdcclxuICAgIHNldF9tYXplT2JqKG1vOiBJX01hemVPYmopOiB2b2lkOyAgIC8vIElfTWF6ZU9iauOCkuioreWumlxyXG4gICAgZ2V0X3dhaXQoKTogVF9XbmRyV2Fsa2VyQWN0aW9uO1xyXG4gICAgc2V0X3dhaXQod2FpdDogVF9XbmRyV2Fsa2VyQWN0aW9uKTogdm9pZDtcclxuICAgIHdvbmRlcigpOiBJX0hvcGVBY3Rpb247ICAgICAgICAgICAgIC8vIOODqeODs+ODgOODoOOBq+ihjOWLleOCkumBuOaKnlxyXG5cclxuICAgIGNhbk1vdmUoKTogYm9vbGVhbjtcclxuICAgIGNhblR1cm4oKTogYm9vbGVhbjtcclxuICAgIGNhblNsaWQoKTogYm9vbGVhbjtcclxuICAgIGNhblVwRG4oKTogYm9vbGVhbjtcclxuICAgIGNhblRocnUoKTogYm9vbGVhbjtcclxuICAgIGNhcmVXYWwoKTogYm9vbGVhbjtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDX1duZHJXYWxrZXIgZXh0ZW5kcyBDX1dhbGtlciB7XHJcbiAgICBwcm90ZWN0ZWQgY2xuYW1lOiBzdHJpbmcgPSAnQ19XbmRyV2Fsa2VyJzsgLy8g44Kv44Op44K55ZCNXHJcbiAgICBwcm90ZWN0ZWQgbWF6ZU9iajogSV9NYXplT2JqfHVuZGVmaW5lZDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgYWN0aW9uOiBUX0FjdGlvbltdID0gW107IC8vIOmBuOaKnuOBp+OBjeOCi+ihjOWLleOBrumFjeWIl1xyXG4gICAgcHJvdGVjdGVkIHdhaXQ6ICAgVF9XbmRyV2Fsa2VyQWN0aW9uID0ge307IC8vIOihjOWLlemBuOaKnuOBrumHjeOBv+S7mOOBkVxyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgY29uZDogICAgVF9Db25kaXRpb24gPSB7XHJcbiAgICAgICAgY2FuTW92ZTogIHRydWUsICAgIC8vIOenu+WLleWPr+iDvVxyXG4gICAgICAgIGNhblR1cm46ICB0cnVlLCAgICAvLyDlkJHjgY3lpInmm7Tlj6/og71cclxuICAgICAgICBjYW5TbGlkOiAgdHJ1ZSwgICAgLy8g44K544Op44Kk44OJ5Y+v6IO9XHJcbiAgICAgICAgY2FuVXBEbjogIGZhbHNlLCAgIC8vIOS4iuS4i+enu+WLleWPr+iDvVxyXG4gICAgICAgIGNhblRocnU6ICBmYWxzZSwgICAvLyDlo4HjgpLpgJrpgY7lj6/og71cclxuICAgICAgICBjYXJlV2FsOiAgZmFsc2UsICAgLy8g5aOB44KS5rCX44Gr44GZ44KLXHJcbiAgICB9OyBcclxuICAgIHB1YmxpYyBjYW5Nb3ZlKCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLmNvbmQuY2FuTW92ZX1cclxuICAgIHB1YmxpYyBjYW5UdXJuKCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLmNvbmQuY2FuVHVybn1cclxuICAgIHB1YmxpYyBjYW5TbGlkKCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLmNvbmQuY2FuU2xpZH1cclxuICAgIHB1YmxpYyBjYW5VcERuKCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLmNvbmQuY2FuVXBEbn1cclxuICAgIHB1YmxpYyBjYW5UaHJ1KCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLmNvbmQuY2FuVGhydX1cclxuICAgIHB1YmxpYyBjYXJlV2FsKCk6IGJvb2xlYW4ge3JldHVybiB0aGlzLmNvbmQuY2FyZVdhbH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihqPzogSlNPTl9XbmRyV2Fsa2VyKSB7XHJcbiAgICAgICAgc3VwZXIoaik7XHJcblxyXG4gICAgICAgIHRoaXMud2FpdCA9IHtcclxuICAgICAgICAgICAgJ1dhaXRfJzogIDEwLCAgICAvLyDlvoXmqZ9cclxuICAgICAgICAgICAgJ01vdmVGJzogIDEwLCAgICAvLyDliY3jgavnp7vli5VcclxuICAgICAgICAgICAgJ01vdmVCJzogIDEwLCAgICAvLyDlvozjgo3jgavnp7vli5XvvIjjgrnjgqbjgqfjgqTjg5Djg4Pjgq/vvIlcclxuICAgICAgICAgICAgJ1R1cm5MJzogIDEwLCAgICAvLyDlt6bjgavjgr/jg7zjg7NcclxuICAgICAgICAgICAgJ1R1cm5SJzogIDEwLCAgICAvLyDlj7Pjgavjgr/jg7zjg7NcclxuICAgICAgICAgICAgJ1NsaWRGJzogIDEwLCAgICAvLyDliY3jgavjgrnjg6njgqTjg4lcclxuICAgICAgICAgICAgJ1NsaWRCJzogIDEwLCAgICAvLyDlvozjgo3jgavjgrnjg6njgqTjg4lcclxuICAgICAgICAgICAgJ1NsaWRMJzogIDEwLCAgICAvLyDlt6bjgavjgrnjg6njgqTjg4lcclxuICAgICAgICAgICAgJ1NsaWRSJzogIDEwLCAgICAvLyDlj7Pjgavjgrnjg6njgqTjg4lcclxuICAgICAgICAgICAgJ0Zsb3JVJzogIDEwLCAgICAvLyDkuIrjgavnp7vli5VcclxuICAgICAgICAgICAgJ0Zsb3JEJzogIDEwLCAgICAvLyDkuIvjgavnp7vli5VcclxuICAgICAgICB9O1xyXG4vLyAgICAgICAgZm9yIChjb25zdCBhY3Rpb24gb2YgdGhpcy5hY3Rpb24pIHRoaXMud2FpdFtUX0FjdGlvbl0gPSAxLjA7IFxyXG5cclxuICAgICAgICBpZiAoaiAhPT0gdW5kZWZpbmVkKSB0aGlzLl9faW5pdChqKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfX2luaXQoYT86IEpTT05fV25kcldhbGtlcik6IENfV25kcldhbGtlciB7XHJcbiAgICAgICAgc3VwZXIuX19pbml0KGEpO1xyXG4gICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL19qc29uX291dHB1dChhLGBDX1duZHJXYWxrZXLjga7jgrPjg7Pjgrnjg4jjg6njgq/jgr/jgYzlkbzjgbDjgozjgb7jgZfjgZ/jgILjgq/jg6njgrkg77ydIDogYCk7IC8vIOODh+ODkOODg+OCsOeUqO+8muOCs+ODs+OCueODiOODqeOCr+OCv+OBruW8leaVsOOCkuWHuuWKm1xyXG5cclxuICAgICAgICBpZiAoYS5jbG5hbWUgIT09IHVuZGVmaW5lZCkgdGhpcy5jbG5hbWUgPSBhLmNsbmFtZTtcclxuICAgICAgICBpZiAoYS5jb25kICAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmQgPz89IHt9IGFzIFRfQ29uZGl0aW9uOyAvLyDliJ3mnJ/ljJZcclxuICAgICAgICAgICAgaWYgKGEuY29uZD8uY2FuTW92ZSAhPT0gdW5kZWZpbmVkKSB0aGlzLmNvbmQuY2FuTW92ZSAgPSBhLmNvbmQuY2FuTW92ZSAhPT0gJzAnID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoYS5jb25kPy5jYW5UdXJuICE9PSB1bmRlZmluZWQpIHRoaXMuY29uZC5jYW5UdXJuICA9IGEuY29uZC5jYW5UdXJuICE9PSAnMCcgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChhLmNvbmQ/LmNhblNsaWQgIT09IHVuZGVmaW5lZCkgdGhpcy5jb25kLmNhblNsaWQgID0gYS5jb25kLmNhblNsaWQgIT09ICcwJyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGEuY29uZD8uY2FuVXBEbiAhPT0gdW5kZWZpbmVkKSB0aGlzLmNvbmQuY2FuVXBEbiAgPSBhLmNvbmQuY2FuVXBEbiAhPT0gJzAnID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoYS5jb25kPy5jYW5UaHJ1ICE9PSB1bmRlZmluZWQpIHRoaXMuY29uZC5jYW5UaHJ1ICA9IGEuY29uZC5jYW5UaHJ1ICE9PSAnMCcgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChhLmNvbmQ/LmNhcmVXYWwgIT09IHVuZGVmaW5lZCkgdGhpcy5jb25kLmNhcmVXYWwgID0gYS5jb25kLmNhcmVXYWwgIT09ICcwJyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAvKiogICAgIG1hemVPYmrjgpLjg4fjgrPjg7zjg4njgZnjgovjgajnhKHpmZDjg6vjg7zjg5fjgavjgarjgotcclxuICAgICAqICAgICAg5ZCR44GT44GG44Gn44KC44GT44Gu44Kv44Op44K544KSZGVjb2Rl44GZ44KL44Gu44Gn44CCXHJcbiAgICAgICAgaWYgKGEuY29uZD8ubWF6ZU9iaj8/ZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXplT2JqID0gbmV3IENfTWF6ZU9iaihhLmNvbmQubWF6ZU9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgKiovXHJcbiAgICAgICAgaWYgKGEubG9jX3BvcyAhPT0gdW5kZWZpbmVkKSB0aGlzLnNldF9wZChuZXcgQ19Qb2ludERpcihhLmxvY19wb3MpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZnJlZSgpOiB2b2lkIHt9XHJcblxyXG5cclxuICAgIHB1YmxpYyBnZXRfbWF6ZU9iaigpOiBJX01hemVPYmp8dW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXplT2JqO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldF9tYXplT2JqKG1vOiBJX01hemVPYmopOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1hemVPYmogPSBtbztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0X3dhaXQoKTogVF9XbmRyV2Fsa2VyQWN0aW9uICAgICB7cmV0dXJuIHsuLi50aGlzLndhaXR9fVxyXG4gICAgcHVibGljIHNldF93YWl0KHdhaXQ6IFRfV25kcldhbGtlckFjdGlvbikge3RoaXMud2FpdCA9IHsuLi53YWl0fTt9XHJcblxyXG4gICAgcHVibGljIHNldF9wZChwZDogQ19Qb2ludERpcik6IENfUG9pbnREaXIge1xyXG4gICAgICAgIHN1cGVyLnNldF9wZChwZCk7XHJcbiAgICAgICAgaWYgKHRoaXMubWF6ZU9iaiAhPT0gdW5kZWZpbmVkKSB0aGlzLm1hemVPYmouc2V0X3BkKHBkKTtcclxuICAgICAgICByZXR1cm4gcGQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHdvbmRlcigpOiBJX0hvcGVBY3Rpb24ge1xyXG4gICAgICAgIGNvbnN0IGFjdGlvbnMgPSB0aGlzLnNlbGVjdGFibGVfYWN0aW9uKCk7XHJcbiAgICAgICAgaWYgKGFjdGlvbnMubGVuZ3RoIDw9IDApIHJldHVybiB0aGlzLl93YWl0KCk7XHJcblxyXG4gICAgICAgIGxldCBpdGVtczpUX1NlbGVjdEl0ZW0yW10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBhY3Rpb25zKSBpdGVtcy5wdXNoKHtrZXk6YWN0aW9uLCByYXRpbzp0aGlzLndhaXRbYWN0aW9uXX0pO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkX2lkeCA9IF9zZWxlY3RJdGVtMihpdGVtcyk7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgICAgID0gc2VsZWN0ZWRfaWR4Pz8nVHVyblInO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yZXR1cm5faG9wZV9hY3Rpb24oc2VsZWN0ZWQgYXMgVF9BY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3dhaXQoKTogSV9Ib3BlQWN0aW9uIHtcclxuICAgICAgICByZXR1cm4gbmV3IENfSG9wZUFjdGlvbih7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6YG45oqe5Y+v6IO944Gq6KGM5YuV44Gu6YWN5YiX44KS6L+U44GZXHJcbiAgICBwcm90ZWN0ZWQgc2VsZWN0YWJsZV9hY3Rpb24oKTogVF9BY3Rpb25bXSB7XHJcbiAgICAgICAgbGV0IHNlbGVjdGVkOlRfQWN0aW9uW10gPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZC5jYW5Nb3ZlKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkLnB1c2goJ01vdmVGJyk7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkLnB1c2goJ01vdmVCJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbmQuY2FuVHVybikge1xyXG4gICAgICAgICAgICBzZWxlY3RlZC5wdXNoKCdUdXJuTCcpO1xyXG4gICAgICAgICAgICBzZWxlY3RlZC5wdXNoKCdUdXJuUicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb25kLmNhblNsaWQpIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWQucHVzaCgnU2xpZEYnKTtcclxuICAgICAgICAgICAgc2VsZWN0ZWQucHVzaCgnU2xpZEInKTtcclxuICAgICAgICAgICAgc2VsZWN0ZWQucHVzaCgnU2xpZEwnKTtcclxuICAgICAgICAgICAgc2VsZWN0ZWQucHVzaCgnU2xpZFInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZC5jYW5VcERuKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkLnB1c2goJ0Zsb3JVJyk7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkLnB1c2goJ0Zsb3JEJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHJldHVybl9ob3BlX2FjdGlvbihhY3Rpb246IFRfQWN0aW9uKTogSV9Ib3BlQWN0aW9uIHtcclxuICAgICAgICBzd2l0Y2ggKGFjdGlvbikgeyBcclxuICAgICAgICAgICAgY2FzZSAnV2FpdF8nOiByZXR1cm4gdGhpcy5fd2FpdCgpO1xyXG4gICAgICAgICAgICBjYXNlICdNb3ZlRic6IHJldHVybiB0aGlzLmhvcGVfcF9md2QoKTtcclxuICAgICAgICAgICAgY2FzZSAnTW92ZUInOiByZXR1cm4gdGhpcy5ob3BlX3BfYmFrKCk7XHJcbiAgICAgICAgICAgIGNhc2UgJ1R1cm5MJzogcmV0dXJuIHRoaXMuaG9wZV90dXJuX2woKTtcclxuICAgICAgICAgICAgY2FzZSAnVHVyblInOiByZXR1cm4gdGhpcy5ob3BlX3R1cm5fcigpO1xyXG4gICAgICAgICAgICBjYXNlICdTbGlkRic6IHJldHVybiB0aGlzLmhvcGVfcF9md2QoKTtcclxuICAgICAgICAgICAgY2FzZSAnU2xpZEInOiByZXR1cm4gdGhpcy5ob3BlX3BfYmFrKCk7XHJcbiAgICAgICAgICAgIGNhc2UgJ1NsaWRMJzogcmV0dXJuIHRoaXMuaG9wZV9wX2xmdCgpO1xyXG4gICAgICAgICAgICBjYXNlICdTbGlkUic6IHJldHVybiB0aGlzLmhvcGVfcF9yZ3QoKTtcclxuICAgICAgICAgICAgY2FzZSAnRmxvclUnOiByZXR1cm4gdGhpcy5ob3BlX3BfdXAoKTtcclxuICAgICAgICAgICAgY2FzZSAnRmxvckQnOiByZXR1cm4gdGhpcy5ob3BlX3BfZG93bigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5jb2RlKCk6IEpTT05fV25kcldhbGtlciB7XHJcbiAgICAgICAgY29uc3QgaiA9IHN1cGVyLmVuY29kZSgpIGFzIEpTT05fV25kcldhbGtlcjtcclxuXHJcbiAgICAgICAgai5jbG5hbWUgPSB0aGlzLmNsbmFtZTtcclxuICAgICAgICBqLmNvbmQgID0ge1xyXG4gICAgICAgICAgICBjYW5Nb3ZlOiAgKHRoaXMuY29uZC5jYW5Nb3ZlKSA/ICcxJyA6ICcwJyxcclxuICAgICAgICAgICAgY2FuVHVybjogICh0aGlzLmNvbmQuY2FuVHVybikgPyAnMScgOiAnMCcsXHJcbiAgICAgICAgICAgIGNhblNsaWQ6ICAodGhpcy5jb25kLmNhblNsaWQpID8gJzEnIDogJzAnLFxyXG4gICAgICAgICAgICBjYW5VcERuOiAgKHRoaXMuY29uZC5jYW5VcERuKSA/ICcxJyA6ICcwJyxcclxuICAgICAgICAgICAgY2FuVGhydTogICh0aGlzLmNvbmQuY2FuVGhydSkgPyAnMScgOiAnMCcsXHJcbiAgICAgICAgICAgIGNhcmVXYWw6ICAodGhpcy5jb25kLmNhcmVXYWwpID8gJzEnIDogJzAnLFxyXG4vKiogICAgICAgICBtYXplT2Jq44KS44Ko44Oz44Kz44O844OJ44GZ44KL44Go54Sh6ZmQ44Or44O844OX44Gr44Gq44KL44CC5ZCR44GT44GG44Gn44KC44GT44Gu44Kv44Op44K544KSZW5jb2Rl44GZ44KL44Gu44Gn44CCXHJcbiAgICAgICAgICAgIG1hemVPYmo6ICB0aGlzLm1hemVPYmo/LmVuY29kZSgpPz97fSxcclxuKiovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gajtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkZWNvZGUoYT86IEpTT05fV25kcldhbGtlcik6IENfV25kcldhbGtlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX19pbml0KGEpO1xyXG4gICAgfVxyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgXHJcbiAgICBDX01hemVPYmosIFxyXG4gICAgSV9NYXplT2JqLCBcclxuICAgIEpTT05fTWF6ZU9iaiBcclxufSBmcm9tIFwiLi9DX01hemVPYmpcIjtcclxuXHJcbmltcG9ydCB7IFxyXG4gICAgQ19NYXplT2JqU2hhZG93LCBcclxuICAgIENfTWF6ZU9ialNob2dhaSwgXHJcbiAgICBKU09OX01hemVPYmpTaGFkb3csIFxyXG4gICAgSlNPTl9NYXplT2JqU2hvZ2FpIFxyXG59ICAgZnJvbSAnLi9DX01hemVPYmpFdGMnO1xyXG5cclxuaW1wb3J0IHsgQ19XbmRyT2JqLCBKU09OX1duZHJPYmogfSBmcm9tIFwiLi9DX1duZHJPYmpcIjtcclxuaW1wb3J0IHsgQ19XbmRyT2JqQm9zczIsIENfV25kck9iakJvc3MzIH0gZnJvbSBcIi4vQ19XbmRyT2JqQm9zc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5ld19tYXplT2JqKGo6IEpTT05fTWF6ZU9ianx1bmRlZmluZWQpOiBJX01hemVPYmoge1xyXG4gICAgLy8gQ19NYXplT2Jq44Gu44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GZ44KLXHJcbiAgICAvLyBq44GvSlNPTl9NYXplT2Jq5b2i5byP44Gn44GC44KL44GT44Go44KS5pyf5b6F44GZ44KLXHJcbiAgICBpZiAoaiA9PT0gdW5kZWZpbmVkKSAgcmV0dXJuIG5ldyBDX01hemVPYmooaik7XHJcblxyXG4gICAgc3dpdGNoIChqLmNsbmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ0NfTWF6ZU9iaicgICAgICA6IHJldHVybiBuZXcgQ19NYXplT2JqKGopO1xyXG4gICAgICAgIGNhc2UgJ0NfV25kck9iaicgICAgICA6IHJldHVybiBuZXcgQ19XbmRyT2JqICAgICAgKGogYXMgSlNPTl9XbmRyT2JqKTtcclxuICAgICAgICBjYXNlICdDX1duZHJPYmpCb3NzMicgOiByZXR1cm4gbmV3IENfV25kck9iakJvc3MyIChqIGFzIEpTT05fV25kck9iaik7XHJcbiAgICAgICAgY2FzZSAnQ19XbmRyT2JqQm9zczMnIDogcmV0dXJuIG5ldyBDX1duZHJPYmpCb3NzMyAoaiBhcyBKU09OX1duZHJPYmopO1xyXG4gICAgICAgIGNhc2UgJ0NfTWF6ZU9ialNoYWRvdyc6IHJldHVybiBuZXcgQ19NYXplT2JqU2hhZG93KGogYXMgSlNPTl9NYXplT2JqU2hhZG93KTtcclxuICAgICAgICBjYXNlICdDX01hemVPYmpTaG9nYWknOiByZXR1cm4gbmV3IENfTWF6ZU9ialNob2dhaShqIGFzIEpTT05fTWF6ZU9ialNob2dhaSk7XHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIG5ldyBDX01hemVPYmooaik7IC8vIENfVGVhbeOChENfTWF6ZUNlbGzns7vjga7loLTlkIjnrYlcclxuICAgIH1cclxufVxyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBDX1duZHJXYWxrZXIsIEpTT05fV25kcldhbGtlciB9IGZyb20gXCIuL0NfV25kcldhbGtlclwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5ld193YWxrZXIoaj86IEpTT05fV25kcldhbGtlcik6IENfV25kcldhbGtlciB7XHJcbiAgICAvLyBDX1duZHJXYWxrZXLjga7jgqTjg7Pjgrnjgr/jg7PjgrnjgpLnlJ/miJDjgZnjgotcclxuICAgIC8vIGrjga9KU09OX1duZHJXYWxrZXLlvaLlvI/jgafjgYLjgovjgZPjgajjgpLmnJ/lvoXjgZnjgotcclxuICAgIGlmIChqID09PSB1bmRlZmluZWQpIHJldHVybiBuZXcgQ19XbmRyV2Fsa2VyKGopO1xyXG4gICAgc3dpdGNoIChqPy5jbG5hbWU/PycnKSB7XHJcbiAgICAgICAgY2FzZSBDX1duZHJXYWxrZXIuY29uc3RydWN0b3IubmFtZTogbmV3IENfV25kcldhbGtlcihqKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgQ19XbmRyV2Fsa2VyKGopOyAvLyDjgZPjgZPjgavliLDpgZTjgZnjgovjgZPjgajjga/jgarjgYTjgYzjgIHlnovjga7mlbTlkIjmgKfjga7jgZ/jgoHjgatDX1duZHJXYWxrZXLjgpLov5TjgZlcclxufVxyXG5cclxuXHJcblxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7VF9NYWtlRW51bVR5cGV9IGZyb20gXCIuLi9kX3V0bC9UX01ha2VFbnVtVHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRfRGlyZWN0aW9uID0ge1xyXG4gICAgTjogICAwLFxyXG4gICAgRTogICAxLFxyXG4gICAgUzogICAyLFxyXG4gICAgVzogICAzLFxyXG4gICAgWDogIDk5LFxyXG4gICAgTUFYOiAzXHJcbn0gYXMgY29uc3Q7XHJcbmV4cG9ydCB0eXBlIFRfRGlyZWN0aW9uID0gVF9NYWtlRW51bVR5cGU8dHlwZW9mIFRfRGlyZWN0aW9uPjtcclxuXHJcbmV4cG9ydCB2YXIgRGlyZWN0aW9uTmFtZSA9IHtcclxuICAgIDA6ICAn5YyXJyxcclxuICAgIDE6ICAn5p2xJyxcclxuICAgIDI6ICAn5Y2XJyxcclxuICAgIDM6ICAn6KW/JyxcclxuICAgIDk5OiAn6KyOJ1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIC8vIOS4gOiIrOOBq+S9v+OBiOOCi+ODpuODvOODhuOCo+ODquODhuOCo+OBquWRquaWh1xyXG4gICAgLy8g44Kq44OW44K444Kn44Kv44OI44KS5YiX5oyZ5Z6L44Go44GX44Gm5Z6L5YyW44GZ44KL44Gu44Gr5Yip55SoXHJcbiAgICBpbXBvcnQge1RfTWFrZUVudW1UeXBlfSBmcm9tIFwiLi4vZF91dGwvVF9NYWtlRW51bVR5cGVcIjtcclxuXHJcbiAgICAvLyDjg4Djg7Pjgrjjg6fjg7Pjg57jg4Pjg5fjga7jgrvjg6vjga7nqK7poZ7jgpLooajjgZnliJfmjJnlnotcclxuICAgIC8vIE5vRGVmOiDmnKrlrprnvqnjg7vkuI3mmI5cclxuICAgIC8vIEZsb29yOiDluopcclxuICAgIC8vIFVuZXhwOiDmnKrouI/lnLBcclxuICAgIC8vIFN0b25lOiDnn7Plo4FcclxuICAgIC8vIFN0clVwOiDkuIrjgorpmo7mrrVcclxuICAgIC8vIFN0ckRuOiDkuIvjgorpmo7mrrVcclxuICAgIC8vIEVtcHR5OiDliJ3mnJ/nirbmhYvjg7vkvZXjgoLjgarjgZdcclxuICAgIC8vIFxyXG4gICAgLy8gZnVuY3Rpb24gdG9faW50KE16S2luZCk6ICAgICAgaW50ICAgICAgICDliJfmjJnlnovjgavlr77lv5zjgZnjgovlgKQo5pW05pWw5YCkKeOCkui/lOOBmVxyXG4gICAgLy8gZnVuY3Rpb24gZnJvbV9pbnQoaW50KTogICAgICAgVF9NektpbmQgICAgIOaVtOaVsOWApOOBq+WvvuW/nOOBmeOCi+WIl+aMmeWei+OCkui/lOOBmSjjgq/jg6njgrnjg6Hjgr3jg4Pjg4kpXHJcbiAgICAvLyBmdW5jdGlvbiB0b19sZXR0ZXIoTXpLaW5kKTogICBzdHJpbmcgICAgIOWIl+aMmeWei+OBq+WvvuW/nOOBmeOCi+aWh+Wtl+OCkui/lOOBmSjjg4Djg7Pjgrjjg6fjg7Pjga4yROihqOekuueUqClcclxuICAgIC8vIGZ1bmN0aW9uIGZyb21fbGV0dGVyKHN0cmluZyk6IFRfTXpLaW5kICAgICDmloflrZfjgavlr77lv5zjgZnjgovliJfmjJnlnovjgpLov5TjgZko44Kv44Op44K544Oh44K944OD44OJKVxyXG5cclxuICAgIGV4cG9ydCBjb25zdCBUX016S2luZDp7W2tleTogc3RyaW5nXTogbnVtYmVyfSAgPSB7XHJcbiAgICAgICAgTm9EZWY6ICAgMCxcclxuICAgICAgICBGbG9vcjogICAxLFxyXG4gICAgICAgIFVuZXhwOiAgIDIsXHJcbiAgICAgICAgU3RvbmU6ICAgMyxcclxuICAgICAgICBVbmt3bjogICA0LFxyXG4gICAgICAgIFN0clVwOiAgIDUsXHJcbiAgICAgICAgU3RyRG46ICAgNixcclxuICAgICAgICBTdHJVRDogICA3LFxyXG4gICAgICAgIEVtcHR5OiAyNTUsXHJcbiAgICB9IGFzIGNvbnN0O1xyXG4gICAgZXhwb3J0IHR5cGUgVF9NektpbmQgICA9IFRfTWFrZUVudW1UeXBlPHR5cGVvZiBUX016S2luZD47XHJcblxyXG4gICAgZXhwb3J0IGNvbnN0IFRfUnZNektpbmQ6e1trZXk6IG51bWJlcl06IFRfTXpLaW5kfSAgPSB7XHJcbiAgICAgICAgMDogICBUX016S2luZC5Ob0RlZixcclxuICAgICAgICAxOiAgIFRfTXpLaW5kLkZsb29yLFxyXG4gICAgICAgIDI6ICAgVF9NektpbmQuVW5leHAsXHJcbiAgICAgICAgMzogICBUX016S2luZC5TdG9uZSxcclxuICAgICAgICA0OiAgIFRfTXpLaW5kLlVua3duLFxyXG4gICAgICAgIDU6ICAgVF9NektpbmQuU3RyVXAsXHJcbiAgICAgICAgNjogICBUX016S2luZC5TdHJEbixcclxuICAgICAgICA3OiAgIFRfTXpLaW5kLlN0clVELFxyXG4gICAgICAgIDI1NTogVF9NektpbmQuRW1wdHksXHJcbiAgICB9IGFzIGNvbnN0O1xyXG4gICAgZXhwb3J0IHR5cGUgVF9Sdk16S2luZCA9IFRfTWFrZUVudW1UeXBlPHR5cGVvZiBUX1J2TXpLaW5kPjtcclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHtUX01ha2VFbnVtVHlwZX0gZnJvbSBcIi4uL2RfdXRsL1RfTWFrZUVudW1UeXBlXCI7XHJcbmltcG9ydCB7IENfUG9pbnREaXIsIFRfRGlyZWN0aW9uIH0gZnJvbSBcIi4vQ19Qb2ludERpclwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRfT3JpZW50YXRpb24gPSB7XHJcbiAgICBGOiAgIDAsXHJcbiAgICBMOiAgIDEsXHJcbiAgICBCOiAgIDIsXHJcbiAgICBSOiAgIDMsXHJcbiAgICBYOiAgOTksXHJcbiAgICBNQVg6IDNcclxufSBhcyBjb25zdDtcclxuZXhwb3J0IHR5cGUgVF9PcmllbnRhdGlvbiA9IFRfTWFrZUVudW1UeXBlPHR5cGVvZiBUX09yaWVudGF0aW9uPjtcclxuXHJcbmV4cG9ydCB2YXIgT3JpZW50YXRpb25OYW1lID0ge1xyXG4gICAgMDogICfliY0nLFxyXG4gICAgMTogICflt6YnLFxyXG4gICAgMjogICflvownLFxyXG4gICAgMzogICflj7MnLFxyXG4gICAgOTk6ICforI4nXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRPcmllbnRhdGlvbk5hbWUob3JpOiBUX09yaWVudGF0aW9uKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBPcmllbnRhdGlvbk5hbWVbb3JpXSA/PyAn6KyOJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbGF0aXZlT3JpZW50YXRpb24oXHJcbiAgICBwZDogQ19Qb2ludERpcixcclxuICAgIG1lOiBDX1BvaW50RGlyLCBcclxuKTogVF9PcmllbnRhdGlvbiB7XHJcbiAgICByZXR1cm4gcmVsYXRpdmVPcmllbnRhdGlvbkRpcihwZC5kLCBtZS5kKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbGF0aXZlT3JpZW50YXRpb25EaXIoXHJcbiAgICBwZF9kOiBUX0RpcmVjdGlvbixcclxuICAgIG1lX2Q6IFRfRGlyZWN0aW9uLCBcclxuKTogVF9PcmllbnRhdGlvbiB7XHJcbiAgICBpZiAobWVfZCA9PT0gVF9EaXJlY3Rpb24uWCB8fCBwZF9kID09PSBUX0RpcmVjdGlvbi5YKSByZXR1cm4gVF9PcmllbnRhdGlvbi5YO1xyXG4gICAgc3dpdGNoIChwZF9kKSB7XHJcbiAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5OOlxyXG4gICAgICAgICAgICBzd2l0Y2ggKG1lX2QpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjogcmV0dXJuIFRfT3JpZW50YXRpb24uQjtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uRTogcmV0dXJuIFRfT3JpZW50YXRpb24uTDtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uUzogcmV0dXJuIFRfT3JpZW50YXRpb24uRjtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzogcmV0dXJuIFRfT3JpZW50YXRpb24uUjtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBUX09yaWVudGF0aW9uLlg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLkU6XHJcbiAgICAgICAgICAgIHN3aXRjaCAobWVfZCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5OOiByZXR1cm4gVF9PcmllbnRhdGlvbi5SO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5FOiByZXR1cm4gVF9PcmllbnRhdGlvbi5CO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5TOiByZXR1cm4gVF9PcmllbnRhdGlvbi5MO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5XOiByZXR1cm4gVF9PcmllbnRhdGlvbi5GO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIFRfT3JpZW50YXRpb24uWDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uUzpcclxuICAgICAgICAgICAgc3dpdGNoIChtZV9kKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLk46IHJldHVybiBUX09yaWVudGF0aW9uLkY7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLkU6IHJldHVybiBUX09yaWVudGF0aW9uLlI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlM6IHJldHVybiBUX09yaWVudGF0aW9uLkI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlc6IHJldHVybiBUX09yaWVudGF0aW9uLkw7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gVF9PcmllbnRhdGlvbi5YO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5XOlxyXG4gICAgICAgICAgICBzd2l0Y2ggKG1lX2QpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjogcmV0dXJuIFRfT3JpZW50YXRpb24uTDtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uRTogcmV0dXJuIFRfT3JpZW50YXRpb24uRjtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uUzogcmV0dXJuIFRfT3JpZW50YXRpb24uUjtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzogcmV0dXJuIFRfT3JpZW50YXRpb24uQjtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBUX09yaWVudGF0aW9uLlg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gVF9PcmllbnRhdGlvbi5YO1xyXG4gICAgICAgIH1cclxufSIsImludGVyZmFjZSBKU09OQWJsZSB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBhbnlcclxufVxyXG5leHBvcnQgdHlwZSBUX0F0dHIgPSB7W2tleTogc3RyaW5nXTogc3RyaW5nfG51bWJlcnxvYmplY3R9O1xyXG5cclxuZXhwb3J0IGNsYXNzIENfVXJsT3B0IHtcclxuICAgIHByb3RlY3RlZCB2OiBUX0F0dHI7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iocz86IHN0cmluZyk7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodD86IFRfQXR0cik7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYT86IGFueSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICB0aGlzLnYgPSB7fSBhcyBUX0F0dHI7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0X2Zyb21fc3RyaW5nKGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgdGhpcy52ID0gYSBhcyBUX0F0dHI7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy52ID0ge30gYXMgVF9BdHRyO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRfa2V5cygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgY29uc3Qga2V5X2xpc3Q6IHN0cmluZ1tdID0gbmV3IEFycmF5IGFzIHN0cmluZ1tdO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnYpIHtcclxuICAgICAgICAgICAga2V5X2xpc3QucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ga2V5X2xpc3Q7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IChrZXk6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLnYpIHtcclxuICAgICAgICAgICAgaWYgICh0eXBlb2YgdGhpcy52W2tleV0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZba2V5XS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICAodHlwZW9mIHRoaXMudltrZXldID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy52W2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZba2V5XSBhcyBzdHJpbmc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIHNldChzdHI6IHN0cmluZyk6ICB2b2lkO1xyXG4gICAgcHVibGljIHNldChhdHI6IFRfQXR0cik6ICB2b2lkO1xyXG4gICAgcHVibGljIHNldChrZXk6IHN0cmluZywgdmFsPzogc3RyaW5nKTogdm9pZDtcclxuICAgIHB1YmxpYyBzZXQoa2V5OiBzdHJpbmcsIHZhbD86IG51bWJlcik6IHZvaWQ7XHJcbiAgICBwdWJsaWMgc2V0KGtleTogc3RyaW5nLCB2YWw/OiBvYmplY3QpOiB2b2lkO1xyXG4gICAgcHVibGljIHNldCh1a246IGFueSwgICAgdmFsPzogc3RyaW5nfG51bWJlcnxvYmplY3QpOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIHVrbiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRfZnJvbV9zdHJpbmcodWtuKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZbdWtuXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZbdWtuXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZbdWtuXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudlt1a25dID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHVrbiA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cjogVF9BdHRyID0gdWtuIGFzIFRfQXR0cjtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIGluIGF0dHIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudltpdGVtXSA9IGF0dHJbaXRlbV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaXNzZXQoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKGtleSBpbiB0aGlzLnYpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJlbW92ZShrZXk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy52KSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnZba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52ID0ge30gYXMgVF9BdHRyO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgbGVuOiBudW1iZXIgPSAgT2JqZWN0LmtleXModGhpcy52KS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGxlbiA8IDEpICByZXR1cm4gXCJcIjtcclxuXHJcbiAgICAgICAgdmFyIHN0cl9hcnJheTogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnYpIHtcclxuICAgICAgICAgICAgc3RyX2FycmF5LnB1c2goa2V5ICsgXCI9XCIgKyB0aGlzLnZba2V5XSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3RyX2FycmF5LmpvaW4oXCImXCIpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHRvSlNPTigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnYpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHRvRm9ybURhdGEoKTogRm9ybURhdGF8dW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBsZW46IG51bWJlciA9ICBPYmplY3Qua2V5cyh0aGlzLnYpLmxlbmd0aDtcclxuICAgICAgICBpZiAobGVuIDwgMSkgIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHZhciBmb3JtX2RhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnYpIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWU6IHN0cmluZ3xudW1iZXJ8b2JqZWN0ID0gdGhpcy52W2tleV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgICAgICBmb3JtX2RhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICAgICAgZm9ybV9kYXRhLmFwcGVuZChrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGZvcm1fZGF0YS5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmb3JtX2RhdGE7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgc2V0X2Zyb21fc3RyaW5nKHM6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmFkZF9mcm9tX3N0cmluZyhzKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBhZGRfZnJvbV9zdHJpbmcoczogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgc3RyID0gcy5yZXBsYWNlKC9eKFxcPz8pKC4qKSQvLCAnJDInKTtcclxuICAgICAgICBjb25zdCBzdHJfYXJyYXk6IHN0cmluZ1tdID0gc3RyLnNwbGl0KFwiJlwiKTtcclxuICAgICAgICBzdHJfYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlfdmFsdWUgPSBpdGVtLnNwbGl0KFwiPVwiKTtcclxuICAgICAgICAgICAgaWYgKGtleV92YWx1ZS5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZba2V5X3ZhbHVlWzBdXSA9ICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52W2tleV92YWx1ZVswXV0gPSBrZXlfdmFsdWVbMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCIvLyDmlbDlgKTjg4Hjgqfjg4Pjgq9cclxuZXhwb3J0IGZ1bmN0aW9uIF9pc051bShudW1WYWw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgLy8g44OB44Kn44OD44Kv5p2h5Lu244OR44K/44O844OzXHJcbiAgICBjb25zdCBwYXR0ZXJuID0gL15bLStdPyhbMS05XVxcZCp8MCkoXFwuXFxkKyk/JC87XHJcbiAgICAvLyDmlbDlgKTjg4Hjgqfjg4Pjgq9cclxuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobnVtVmFsKTtcclxufVxyXG5cclxuLy8g5pWw5YCk5Y+W44KK5Ye644GXXHJcbmV4cG9ydCBmdW5jdGlvbiBfZ2V0TnVtKG51bVZhbDogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIC8vIOODgeOCp+ODg+OCr+adoeS7tuODkeOCv+ODvOODs1xyXG4vLyAgICBjb25zdCBwYXR0ZXJuID0gL1stXT8oWzEtOV1cXGQqfDApKFxcLlxcZCspPy87XHJcbiAgICBjb25zdCBwYXR0ZXJuID0gLyhbXjAtOV0pL2c7XHJcbiAgICBjb25zdCB2YWxzdHIgID0gbnVtVmFsLnJlcGxhY2UocGF0dGVybiwnJyk7XHJcbiAgICAvLyDmlbDlgKTjg4Hjgqfjg4Pjgq9cclxuICAgIHJldHVybiBOdW1iZXIodmFsc3RyKTtcclxufVxyXG5cclxuLy8g5Zub5o2o5LqU5YWlXHJcbmV4cG9ydCBmdW5jdGlvbiBfcm91bmQobnVtOiBudW1iZXIsIGRpZ2l0OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgbXVsdGlwbGllciA9IE1hdGgucG93KDEwLCBkaWdpdCk7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW0gKiBtdWx0aXBsaWVyKSAvIG11bHRpcGxpZXI7XHJcbn1cclxuXHJcbi8vIOWIh+OCiuS4iuOBklxyXG5leHBvcnQgZnVuY3Rpb24gX2NlaWwobnVtOiBudW1iZXIsIGRpZ2l0OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgbXVsdGlwbGllciA9IE1hdGgucG93KDEwLCBkaWdpdCk7XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKG51bSAqIG11bHRpcGxpZXIpIC8gbXVsdGlwbGllcjtcclxufVxyXG5cclxuXHJcbi8vIOWIh+OCiuS4i+OBklxyXG5leHBvcnQgZnVuY3Rpb24gX2Zsb29yKG51bTogbnVtYmVyLCBkaWdpdDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgZGlnaXQpO1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IobnVtICogbXVsdGlwbGllcikgLyBtdWx0aXBsaWVyO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9taW4oYTogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGEucmVkdWNlKChuMTogbnVtYmVyLCBuMjogbnVtYmVyKSA9PiBNYXRoLm1pbihuMSwgbjIpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9tYXgoYTogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGEucmVkdWNlKChuMTogbnVtYmVyLCBuMjogbnVtYmVyKSA9PiBNYXRoLm1heChuMSwgbjIpKTtcclxufVxyXG4iLCJpbXBvcnQgeyBfbWF4LCBfbWluLCBfcm91bmQgfSBmcm9tIFwiLi9GX01hdGhcIjtcclxuXHJcbi8vIOS5seaVsOmWouaVsOWRvOOBs+WHuuOBl+eUqOOBruWei+Wuo+iogFxyXG50eXBlIFRfZnJhbmQgPSAoKT0+bnVtYmVyXHJcbmNvbnN0IGZyYW5kOiBUX2ZyYW5kID0gICgpPT57cmV0dXJuIE1hdGgucmFuZG9tKCl9XHJcblxyXG4vLyDkuIDmp5jkubHmlbAo5pW05pWwKVxyXG5leHBvcnQgZnVuY3Rpb24gX2lyYW5kKG1pbjogbnVtYmVyID0gMCwgbWF4OiBudW1iZXIgPSAxLCByYW5kOiBUX2ZyYW5kID0gZnJhbmQpOiBudW1iZXIge1xyXG4gICAgY29uc3QgZl9yYW5kID0gTWF0aC5mbG9vcihyYW5kKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xyXG4gICAgcmV0dXJuIF9yb3VuZChmX3JhbmQsIDApO1xyXG59XHJcblxyXG4vLyDmraPopo/liIbluIPjgoLjganjgY3kubHmlbAo5pW05pWwKVxyXG5leHBvcnQgZnVuY3Rpb24gX2lncmFuZChtaW46IG51bWJlciA9IDAsIG1heDogbnVtYmVyID0gMSwgcmFuZDogVF9mcmFuZCA9IGZyYW5kKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBfaXJhbmQobWluLCBtYXgsICgpPT57cmV0dXJuIF9ncmFuZCgwLCAxLCByYW5kKX0pXHJcbn1cclxuXHJcbi8vIOato+imj+WIhuW4g+OCguOBqeOBjeS5seaVsCjlrp/mlbApXHJcbmV4cG9ydCBmdW5jdGlvbiBfZ3JhbmQobWluOiBudW1iZXIgPSAwLCBtYXg6IG51bWJlciA9IDEsIHJhbmQ6IFRfZnJhbmQgPSBmcmFuZCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihfX19nYXVzc2lhblJhbmQocmFuZCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pO1xyXG59XHJcbmZ1bmN0aW9uIF9fX2dhdXNzaWFuUmFuZChyYW5kOiBUX2ZyYW5kID0gZnJhbmQpIHtcclxuICAgIGxldCBzdW0gPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpICs9IDEpIHtcclxuICAgICAgICBzdW0gKz0gcmFuZCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1bSAvIDY7XHJcbn1cclxuXHJcbi8vIOWwkeOBl+ecn+mdouebruOBquato+imj+WIhuW4g+S5seaVsCjmlbTmlbApXHJcbmV4cG9ydCBmdW5jdGlvbiBfaW5yYW5kKG1pbjogbnVtYmVyID0gMCwgbWF4OiBudW1iZXIgPSAxLCBkZDogbnVtYmVyID0gMy4wLCByYW5kOiBUX2ZyYW5kID0gZnJhbmQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoX25yYW5kKG1pbiwgbWF4LCBkZCwgcmFuZCkpO1xyXG59XHJcblxyXG4vLyDlsJHjgZfnnJ/pnaLnm67jgarmraPopo/liIbluIPkubHmlbAo5a6f5pWwKVxyXG4vLyDkuIDmp5jnorrnjoflpInmlbBhLGLjgpLlpInmlbDplqLmlbDjgpLnlKjjgYTjgaYgeD1mKGEsYiksIHk9ZyhhLGIp44Go44GX44GmMuOBpOOBruato+imj+WIhuW4g+S5seaVsHgseeOCkuW+l+OCi1xyXG4vLyB4ID0gZihhLGIpID0gc3FydCgtMipsb2coYSkpICogc2luKDIqz4AqYikgXHJcbi8vIHkgPSBnKGEsYikgPSBzcXJ0KC0yKmxvZyhhKSkgKiBjb3MoMirPgCpiKSBcclxuZXhwb3J0IGZ1bmN0aW9uIF9ucmFuZChtaW46IG51bWJlciA9IDAuMCwgbWF4OiBudW1iZXIgPSAxLjAsIGRkOiBudW1iZXIgPSAzLjAsIHJhbmQ6IFRfZnJhbmQgPSBmcmFuZCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBhdmUgPSAwLjU7XHJcbiAgICBjb25zdCBhID0gcmFuZCgpO1xyXG4gICAgY29uc3QgYiA9IHJhbmQoKTtcclxuICAgIGxldCB4ID0gYXZlICsgX2ZhYihhLCBiKSAvICgyLjAgKiBkZCk7IC8vIOOBk+OBk+OBvuOBp+OAgU4oMCwxKeOBruato+imj+WIhuW4g+S5seaVsOOBruS9nOaIkFxyXG5cclxuICAgIHggPSBtaW4gKyB4ICogKG1heCAtIG1pbik7XHJcbiAgICB4ID0gX21heChbbWluLCB4XSk7XHJcbiAgICB4ID0gX21pbihbbWF4LCB4XSk7XHJcbiAgICByZXR1cm4geDtcclxufVxyXG5mdW5jdGlvbiBfZmFiKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQoLTIuMCAqIE1hdGgubG9nKGEpKSAqIE1hdGguc2luKDIuMCAqIE1hdGguUEkgKiBiKTtcclxufVxyXG5mdW5jdGlvbiBfZ2FiKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQoLTIuMCAqIE1hdGgubG9nKGEpKSAqIE1hdGguY29zKDIuMCAqIE1hdGguUEkgKiBiKTtcclxufVxyXG5cclxuXHJcbi8vIOOCt+ODvOODieWApOOCkueUqOOBhOOBn+S5seaVsFxyXG5leHBvcnQgY2xhc3MgQ19TZWVkZWRSYW5kIHtcclxuICAgIHByb3RlY3RlZCBzZWVkOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgZmlyc3Rfc2VlZDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzZWVkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnNlZWQgPSBzZWVkO1xyXG4gICAgICAgIHRoaXMuZmlyc3Rfc2VlZCA9IHNlZWQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5zZWVkID0gdGhpcy5maXJzdF9zZWVkO1xyXG4gICAgfVxyXG4gICAgLy8g5Lmx5pWw55Sf5oiQ44Oh44K944OD44OJXHJcbiAgICBwdWJsaWMgcmFuZG9tKCk6IG51bWJlciB7XHJcbiAgICAgICAgdGhpcy5zZWVkID0gKHRoaXMuc2VlZCAqIDkzMDEgKyA0OTI5NykgJSAyMzMyODA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VlZCAvIDIzMzI4MC4wO1xyXG4gICAgfVxyXG59XHJcblxyXG4vL+ODpuODi+ODvOOCr0lEKHV1aWQp44Gu55Sf5oiQXHJcbmV4cG9ydCBmdW5jdGlvbiBfZ2V0X3V1aWQobGVuOiBudW1iZXIgPSAyMCwgcmFuZDogVF9mcmFuZCA9IGZyYW5kKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGxmdCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkudG9TdHJpbmcoMTYpOyAvLyDjgZ/jgbbjgpMxM+ahgVxyXG4gICAgY29uc3Qgcmd0X2xlbiA9IF9tYXgoW2xlbiAtIGxmdC5sZW5ndGgsIDFdKTtcclxuXHJcbiAgICBjb25zdCByZ3QgPSBNYXRoLmZsb29yKE1hdGgucG93KDEwLCByZ3RfbGVuKSAqIHJhbmQoKSkudG9TdHJpbmcoMTYpO1xyXG4gICAgcmV0dXJuIGxmdCArIHJndDtcclxufVxyXG5cclxuLy8g56K6546H44Gr5Z+644Gl44GP6KaB57Sg6YG45oqeXHJcbmV4cG9ydCB0eXBlIFRfU2VsZWN0SXRlbSA9IHtcclxuICAgIHJhdGlvOiBudW1iZXIsXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIF9zZWxlY3RJdGVtKGl0ZW1zOiBUX1NlbGVjdEl0ZW1bXSwgcmFuZDogVF9mcmFuZCA9IGZyYW5kKTogVF9TZWxlY3RJdGVtIHwgdW5kZWZpbmVkIHtcclxuICAgIHZhciB0dGw6bnVtYmVyID0gMDtcclxuICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlbXMpIHR0bCArPSBpdGVtLnJhdGlvO1xyXG5cclxuICAgIGNvbnN0IHRhcmdldCA9IF9pcmFuZCgwLCB0dGwsIHJhbmQpO1xyXG4gICAgdmFyIHN1bSA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcclxuICAgICAgICBzdW0gKz0gaXRlbS5yYXRpbztcclxuICAgICAgICBpZiAodGFyZ2V0IDwgc3VtKSB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9IFxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufVxyXG5cclxuLy8g56K6546H44Gr5Z+644Gl44GP6KaB57Sg6YG45oqe77yI5pys5ZG977yJXHJcbmV4cG9ydCB0eXBlIFRfU2VsZWN0SXRlbTIgPSB7XHJcbiAgICBrZXk6ICAgc3RyaW5nLFxyXG4gICAgcmF0aW86IG51bWJlcixcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gX3NlbGVjdEl0ZW0yKGl0ZW1zOiBUX1NlbGVjdEl0ZW0yW10sIHJhbmQ6IFRfZnJhbmQgPSBmcmFuZCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICB2YXIgdHRsOm51bWJlciA9IDA7XHJcbiAgICBmb3IgKGxldCBpdGVtIG9mIGl0ZW1zKSB0dGwgKz0gaXRlbS5yYXRpbztcclxuXHJcbiAgICBjb25zdCB0YXJnZXQgPSBfaXJhbmQoMCwgdHRsKTtcclxuICAgIHZhciBzdW0gPSAwO1xyXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XHJcbiAgICAgICAgc3VtICs9IGl0ZW0ucmF0aW87XHJcbiAgICAgICAgaWYgKHRhcmdldCA8IHN1bSkge1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0ua2V5O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0ua2V5O1xyXG59XHJcblxyXG4vLyDphY3liJfjga7jgrfjg6Pjg4Pjg5Xjg6tcclxuZXhwb3J0IGZ1bmN0aW9uIF9zaHVmZmxlQXJyYXk8VD4oYXJyYXk6IFRbXSwgcmFuZDogVF9mcmFuZCA9IGZyYW5kKTogVFtdIHtcclxuICAgIGxldCBzaHVmZmxlZEFycmF5ID0gWy4uLmFycmF5XTsgLy8g5YWD44Gu6YWN5YiX44KS5aSJ5pu044GX44Gq44GE44KI44GG44Gr44Kz44OU44O844GZ44KLXHJcbiAgICBmb3IgKGxldCBpID0gc2h1ZmZsZWRBcnJheS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgLy8g44Op44Oz44OA44Og44Gq5L2N572u44KS5rG65a6aXHJcbiAgICAgICAgY29uc3QgaiA9IF9pcmFuZCgwLCBpLCByYW5kKTtcclxuICAgICAgICAvLyDopoHntKDjga7lhaXjgozmm7/jgYhcclxuICAgICAgICBbc2h1ZmZsZWRBcnJheVtpXSwgc2h1ZmZsZWRBcnJheVtqXV0gPSBbc2h1ZmZsZWRBcnJheVtqXSwgc2h1ZmZsZWRBcnJheVtpXV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2h1ZmZsZWRBcnJheTsgLy8g44K344Oj44OD44OV44Or44GV44KM44Gf6YWN5YiX44KS6L+U44GZXHJcbn1cclxuXHJcbi8vIOS5seaVsOOBq+OCiOOCi+aWh+Wtl+WIl+eUn+aIkFxyXG5leHBvcnQgZnVuY3Rpb24gX3JhbmRvbV9zdHIobGVuZ3RoOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHN0ciA9ICcnO1xyXG4gICAgZm9yIChsZXQgaT0wOyBpIDwgbGVuZ3RoOyBpKyspIHN0ciArPSBfcmFuZG9tX0NoYXIoKTtcclxuICAgIHJldHVybiBzdHI7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIF9yYW5kb21fVXBwZXJTdHIobGVuZ3RoOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgbGV0IHN0ciA9ICcnO1xyXG4gICAgZm9yIChsZXQgaT0wOyBpIDwgbGVuZ3RoOyBpKyspIHN0ciArPSBfcmFuZG9tX1VwcGVyQ2hhcigpO1xyXG4gICAgcmV0dXJuIHN0cjtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gX3JhbmRvbV9Mb3dlclN0cihsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBsZXQgc3RyID0gJyc7XHJcbiAgICBmb3IgKGxldCBpPTA7IGkgPCBsZW5ndGg7IGkrKykgc3RyICs9IF9yYW5kb21fTG93ZXJDaGFyKCk7XHJcbiAgICByZXR1cm4gc3RyO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBfcmFuZG9tX1VwcGVyQ2hhcigpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgdmFsID0gX2lyYW5kKDAsMjYpXHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSt2YWwpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBfcmFuZG9tX0xvd2VyQ2hhcigpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgdmFsID0gX2lyYW5kKDAsMjYpXHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg5NSt2YWwpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBfcmFuZG9tX051bUNoYXIoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHZhbCA9IF9pcmFuZCgwLDkpXHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg0OCt2YWwpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBfcmFuZG9tX0NoYXIoKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHZhbCA9IF9pcmFuZCgwLDYxKVxyXG4gICAgaWYgKHZhbCA8IDI2KSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSt2YWwpO1xyXG4gICAgaWYgKHZhbCA8IDUyKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg5Nyt2YWwtMjYpO1xyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoNDgrdmFsLTUyKTtcclxufVxyXG4iLCJleHBvcnQgY2xhc3MgQ19EaXNwbGF5TWVzc2FnZSB7XHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljICBtZTogQ19EaXNwbGF5TWVzc2FnZTtcclxuICAgIHByb3RlY3RlZCBpZDogIHN0cmluZztcclxuICAgIHByb3RlY3RlZCBkaXY6IEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihjb246IEhUTUxFbGVtZW50LCBpZDogc3RyaW5nID0gJ2NsaWVudF9tZXNzYWdlJykge1xyXG4gICAgICAgIENfRGlzcGxheU1lc3NhZ2UubWUgPSB0aGlzO1xyXG5cclxuICAgICAgICB0aGlzLmlkICAgPSBpZDtcclxuICAgICAgICB0aGlzLmRpdiAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICBpZiAodGhpcy5kaXYgPT09IG51bGwpIGFsZXJ0KCdDYW4gbm90IGZvdW5uZCBEaXYjY2xpZW50X21lc3NhZ2UhJyk7XHJcbiAgICAgICAgdGhpcy5kaXYuc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMuaWQpO1xyXG5cclxuICAgICAgICBjb24uaW5zZXJ0QmVmb3JlKHRoaXMuZGl2LCBjb24uZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgQ19EaXNwbGF5TWVzc2FnZS5tZS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE9iaihjb246IEhUTUxFbGVtZW50fG51bGwgPSBudWxsLCBpZDogc3RyaW5nID0gJ2NsaWVudF9tZXNzYWdlJylcclxuICAgICAgICAgICAgICAgIDogQ19EaXNwbGF5TWVzc2FnZSAge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5tZSAhPT0gXCJvYmplY3RcIiB8fCAhKHRoaXMubWUgaW5zdGFuY2VvZiBDX0Rpc3BsYXlNZXNzYWdlKSkgeyBcclxuICAgICAgICAgICAgaWYgKGNvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tZSA9IG5ldyBDX0Rpc3BsYXlNZXNzYWdlKGNvbiwgaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5tZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkaXNwbGF5X21lc3NhZ2UobWVzOiBzdHJpbmcsIGZyX2NvbG9yID0gJ2luaGVyaXQnLCBiZ19jb2xvcjogc3RyaW5nID0gJ2luaGVyaXQnKSB7XHJcbiAgICAgICAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKSBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuICAgICAgICBwLnN0eWxlLnNldFByb3BlcnR5KCdjb2xvcicsICAgICAgICAgICAgZnJfY29sb3IpO1xyXG4gICAgICAgIHAuc3R5bGUuc2V0UHJvcGVydHkoJ2JhY2tncm91bmQtY29sb3InLCBiZ19jb2xvcik7XHJcbiAgICAgICAgcC5pbm5lckhUTUwgPSBtZXM7XHJcbiAgICAgICAgLy8g6KiY6Yyy5Z6L44Oh44OD44K744O844K444Gq44Gu44Gn5YWI6aCt44Gr6L+95Yqg44GX44Gm44GE44GPXHJcbiAgICAgICAgdGhpcy5kaXYuaW5zZXJ0QmVmb3JlKHAsIHRoaXMuZGl2LmZpcnN0Q2hpbGQpOyBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXJfbWVzc2FnZSgpIHtcclxuICAgICAgICB3aGlsZSAodGhpcy5kaXYuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICB0aGlzLmRpdi5yZW1vdmVDaGlsZCh0aGlzLmRpdi5maXJzdENoaWxkKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcHVibGljIG5vcm1hbF9tZXNzYWdlKG1lczogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5X21lc3NhZ2UobWVzKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBub3RpY2VfbWVzc2FnZShtZXM6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuZGlzcGxheV9tZXNzYWdlKG1lcywgJyMwMDY2MDAnLCAnI2NjZmZjYycpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHdhcm5pbmdfbWVzc2FnZShtZXM6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuZGlzcGxheV9tZXNzYWdlKG1lcywgJyNmZmZmZmYnLCAnI2ZmMDAwMCcpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBDX09uZUxpbmVWaWV3TWVzc2FnZSB7XHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljICBtZSA6IHtbaWQ6IHN0cmluZ106IENfT25lTGluZVZpZXdNZXNzYWdlfTtcclxuICAgIHByb3RlY3RlZCBwICA6IEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBwYXJlbnQ/OiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIENfT25lTGluZVZpZXdNZXNzYWdlLm1lID8/PSB7fVxyXG4gICAgICAgIENfT25lTGluZVZpZXdNZXNzYWdlLm1lW2lkXSA9IHRoaXM7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICB0aGlzLnAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgICAgIHRoaXMucC5pZCA9IGlkO1xyXG5cclxuICAgICAgICAgICAgcGFyZW50ID8/PSBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5wKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQ19PbmVMaW5lVmlld01lc3NhZ2UubWVbaWRdLmNsZWFyX21lc3NhZ2UoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0T2JqKGlkOiBzdHJpbmcsIHBhcmVudD86IEhUTUxFbGVtZW50KTogQ19PbmVMaW5lVmlld01lc3NhZ2UgIHtcclxuICAgICAgICBDX09uZUxpbmVWaWV3TWVzc2FnZS5tZSA/Pz0ge31cclxuICAgICAgICB0aGlzLm1lW2lkXSA/Pz0gbmV3IENfT25lTGluZVZpZXdNZXNzYWdlKGlkLCBwYXJlbnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lW2lkXTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkaXNwbGF5X21lc3NhZ2UobWVzOiBzdHJpbmcsIGZyX2NvbG9yID0gJ2luaGVyaXQnLCBiZ19jb2xvcjogc3RyaW5nID0gJ2luaGVyaXQnKSB7XHJcbiAgICAgICAgdGhpcy5wLnN0eWxlLnNldFByb3BlcnR5KCdjb2xvcicsICAgICAgICAgICAgZnJfY29sb3IpO1xyXG4gICAgICAgIHRoaXMucC5zdHlsZS5zZXRQcm9wZXJ0eSgnYmFja2dyb3VuZC1jb2xvcicsIGJnX2NvbG9yKTtcclxuICAgICAgICB0aGlzLnAuaW5uZXJIVE1MID0gbWVzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhcl9tZXNzYWdlKCkge1xyXG4gICAgICAgIHRoaXMuZGlzcGxheV9tZXNzYWdlKCfjgIAnKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBub3JtYWxfbWVzc2FnZShtZXM6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuZGlzcGxheV9tZXNzYWdlKG1lcyk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbm90aWNlX21lc3NhZ2UobWVzOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXlfbWVzc2FnZShtZXMsICcjMDA2NjAwJywgJyNjY2ZmY2MnKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyB3YXJuaW5nX21lc3NhZ2UobWVzOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXlfbWVzc2FnZShtZXMsICcjZmZmZmZmJywgJyNmZjAwMDAnKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBnX2RlYnVnIH0gICAgICAgIGZyb20gXCIuLi9kX2Ntbi9nbG9iYWxcIjtcclxuaW1wb3J0IHsgZ19tYXplLCBnX3RlYW0gfSBmcm9tIFwiLi9nbG9iYWxfZm9yX21hemVcIjtcclxuaW1wb3J0IHsgXHJcbiAgICBkb19pbnN0YW50X2xvYWQsIFxyXG4gICAgZG9faW5zdGFudF9zYXZlLCBcclxuICAgIGRvX21vdmVfYm90dG9tX2hhbGYgXHJcbn0gICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBcIi4vRl9zZXRfbW92ZV9tb2RlXCI7XHJcblxyXG5cclxuZXhwb3J0IHR5cGUgVF9DdGxzPSB7XHJcbiAgICBuYW1lOiAgc3RyaW5nLFxyXG4gICAgZG9fVT86IFRfbWFyZywgXHJcbiAgICBkb19EPzogVF9tYXJnLCBcclxuICAgIGRvX0w/OiBUX21hcmcsIFxyXG4gICAgZG9fUj86IFRfbWFyZywgXHJcbiAgICBpc09LPzogVF9tYXJnLCBcclxuICAgIGlzTkc/OiBUX21hcmcsIFxyXG4gICAgaXNTTD86IFRfbWFyZywgXHJcbiAgICBpc1JUPzogVF9tYXJnLCBcclxuICAgIG1lbnU/OiBUX21hcmcsIFxyXG4gICAgY3BPSz86IFRfbWFyZywgXHJcbiAgICBjcE5HPzogVF9tYXJnLCBcclxuICAgIGNwU0w/OiBUX21hcmcsIFxyXG4gICAgY3BSVD86IFRfbWFyZywgXHJcbiAgICBrZXlFdmVudD86IFRfa2FyZyxcclxufVxyXG50eXBlIFRfbWZuYyA9IChlPzogTW91c2VFdmVudCk9Pih2b2lkfGJvb2xlYW4pO1xyXG50eXBlIFRfbWFyZyA9IFRfbWZuYyB8IHVuZGVmaW5lZDtcclxuIFxyXG50eXBlIFRfa2ZuYyA9IChlOiBLZXlib2FyZEV2ZW50KT0+KHZvaWR8Ym9vbGVhbik7XHJcbnR5cGUgVF9rYXJnID0gVF9rZm5jIHwgdW5kZWZpbmVkO1xyXG5cclxuZXhwb3J0IGNsYXNzIENfRGVmYXVsdEN0bHMge1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBtZTogQ19EZWZhdWx0Q3RscztcclxuICAgIHByb3RlY3RlZCBjdGxzOiB7W25hbWU6IHN0cmluZ106IFRfQ3Rsc307XHJcbiAgICBwcm90ZWN0ZWQgZmxnczoge1tuYW1lOiBzdHJpbmddOiBib29sZWFufTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgdV9hcnI6IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIGRfYXJyOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByb3RlY3RlZCBsX2FycjogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBwcm90ZWN0ZWQgcl9hcnI6IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIHlfYnRuOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByb3RlY3RlZCBuX2J0bjogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBwcm90ZWN0ZWQgc19idG46IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIHJfYnRuOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByb3RlY3RlZCBtX2J0bjogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBwcm90ZWN0ZWQgeV9jcDE6IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIG5fY3AxOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHByb3RlY3RlZCBzX2NwMTogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBwcm90ZWN0ZWQgcl9jcDE6IEhUTUxCdXR0b25FbGVtZW50O1xyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmN0bHMgPSB7fTtcclxuICAgICAgICB0aGlzLmZsZ3MgPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy51X2FyciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1X2FycicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHRoaXMuZF9hcnIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZF9hcnInKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICB0aGlzLmxfYXJyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xfYXJyJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5yX2FyciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyX2FycicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHRoaXMueV9idG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneV9idG4nKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICB0aGlzLm5fYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25fYnRuJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5zX2J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzX2J0bicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHRoaXMucl9idG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncl9idG4nKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICB0aGlzLm1fYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21fYnRuJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy55X2NwMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd5X2NwMScpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHRoaXMubl9jcDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbl9jcDEnKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICB0aGlzLnNfY3AxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NfY3AxJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5yX2NwMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyX2NwMScpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5cclxuICAgICAgICB0aGlzLnVfYXJyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5kX2Fyci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMubF9hcnIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0aGlzLnJfYXJyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy55X2J0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMubl9idG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0aGlzLnNfYnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5yX2J0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMubV9idG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0aGlzLnlfY3AxLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5uX2NwMS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMuc19jcDEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0aGlzLnJfY3AxLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE9iaigpOiBDX0RlZmF1bHRDdGxzIHtcclxuICAgICAgICB0aGlzLm1lID8/PSAgbmV3IENfRGVmYXVsdEN0bHMoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5tZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBjbHIoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdGhpcy5jdGxzID0ge307XHJcbiAgICAgICAgdGhpcy5mbGdzID0ge307XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0KG5hbWU6IHN0cmluZ3xUX0N0bHMsIGN0bHM/OlRfQ3Rscyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgY3RscyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0bHNbbmFtZV0gPSBjdGxzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mbGdzW25hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gbmFtZSBhcyBUX0N0bHM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN0bHNbYy5uYW1lXSA9IGM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZsZ3NbYy5uYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIHJtdihjdGxzOiBzdHJpbmd8VF9DdGxzKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHR5cGVvZiBjdGxzID09PSAnc3RyaW5nJyA/IGN0bHMgOiBjdGxzLm5hbWU7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmN0bHNbbmFtZV07XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmZsZ3NbbmFtZV07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGVhY3QoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpaSBpbiB0aGlzLmN0bHMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3Rsc1tpaV0ubmFtZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9ybXZfZGVmYXVsdF9jdGxzKHRoaXMuY3Rsc1tpaV0ubmFtZSBhcyBzdHJpbmcpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFjdChjdGxzOiBzdHJpbmd8VF9DdGxzKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuZGVhY3QoKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdHlwZW9mIGN0bHMgPT09ICdzdHJpbmcnID8gY3RscyA6IGN0bHMubmFtZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZF9kZWZhdWx0X2N0bHMobmFtZSk7XHJcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNfYWN0KGN0bHM6IHN0cmluZ3xUX0N0bHMpOiBib29sZWFuIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdHlwZW9mIGN0bHMgPT09ICdzdHJpbmcnID8gY3RscyA6IGN0bHMubmFtZTtcclxuICAgICAgICAgICAgcmV0dXJuICB0aGlzLmZsZ3NbbmFtZV0gPz8gZmFsc2U7XHJcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMga2V5c19vZl9hZGQoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IGtleV9saXN0ID0gW10gYXMgc3RyaW5nW107XHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMuY3Rscykga2V5X2xpc3QucHVzaChuYW1lKTtcclxuICAgICAgICByZXR1cm4ga2V5X2xpc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGtleXNfb2ZfYWN0KCk6IHN0cmluZ1tdIHtcclxuICAgICAgICBjb25zdCBrZXlfbGlzdCA9IFtdIGFzIHN0cmluZ1tdO1xyXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB0aGlzLmZsZ3MpIGlmICh0aGlzLmZsZ3NbbmFtZV0pIGtleV9saXN0LnB1c2gobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGtleV9saXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfcm12X2RlZmF1bHRfY3RscyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICAvLyBmbGdzW25hbWVd44GM5a6a576p44GV44KM44Gm44GE44Gq44GEXHJcbiAgICAgICAgLy8g44Gk44G+44KKX2FkZF9kZWZhdWx0X2N0bHPjgYzjgb7jgaDlkbzjgbDjgozjgabjgarjgYQoY3Rsc+OBjGFkZOOBleOCjOOBpuOBquOBhCnjgYvjgIFcclxuICAgICAgICAvLyBfYWxsX2N0bHNfbmFtZVtjYWxsLm5hbWVd44GMZmFsc2Uo5pei44GrY3RsbHPjgYxyZW1vdmXjgZXjgozjgabjgYTjgosp44Gq44KJ44CBXHJcbiAgICAgICAgLy8g5L2V44KC44GX44Gq44GE44CCXHJcbiAgICAgICAgdGhpcy5mbGdzW25hbWVdID8/PSBmYWxzZTsgXHJcbiAgICBcclxuICAgICAgICBpZiAoIXRoaXMuZmxnc1tuYW1lXSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgdGhpcy5mbGdzW25hbWVdID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN0bHNbbmFtZV07XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICBcclxuICAgICAgICAgICAgaWYgKF9jKGM/LmRvX1UpKSB0aGlzLnVfYXJyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLmRvX1UgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5kb19EKSkgdGhpcy5kX2Fyci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5kb19EIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoX2MoYz8uZG9fTCkpIHRoaXMubF9hcnIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMuZG9fTCBhcyBUX21mbmMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9jKGM/LmRvX1IpKSB0aGlzLnJfYXJyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLmRvX1IgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5pc09LKSkgdGhpcy55X2J0bi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5pc09LIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoX2MoYz8uaXNORykpIHRoaXMubl9idG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMuaXNORyBhcyBUX21mbmMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9jKGM/LmlzU0wpKSB0aGlzLnNfYnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLmlzU0wgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5pc1JUKSkgdGhpcy5yX2J0bi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5pc1JUIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoX2MoYz8ubWVudSkpIHRoaXMubV9idG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMubWVudSBhcyBUX21mbmMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9jKGM/LmNwT0spKSB0aGlzLnlfY3AxLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLmNwT0sgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5jcE5HKSkgdGhpcy5uX2NwMS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5jcE5HIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoX2MoYz8uY3BTTCkpIHRoaXMuc19jcDEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMuY3BTTCBhcyBUX21mbmMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9jKGM/LmNwUlQpKSB0aGlzLnJfY3AxLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLmNwUlQgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChjPy5rZXlFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGMua2V5RXZlbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlfcHJlc3NfZnVuY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMudV9hcnIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5kX2Fyci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLmxfYXJyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMucl9hcnIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy55X2J0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLm5fYnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMuc19idG4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5yX2J0bi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLm1fYnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMueV9jcDEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5uX2NwMS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLnNfY3AxLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMucl9jcDEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgYWxlcnQoJ0Vycm9yIE9jY3VlcmQgYXQgUmVtb3ZlIERlZmF1bHQgQ3Rscy4nKTtcclxuICAgICAgICAgICAgYWxlcnQoJycgKyBlcnIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfYWRkX2RlZmF1bHRfY3RscyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICB0aGlzLmZsZ3NbbmFtZV0gPz89IGZhbHNlOyBcclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmZsZ3NbbmFtZV0pIHJldHVybiB0cnVlO1xyXG4gICAgICAgIHRoaXMuZmxnc1tuYW1lXSA9IHRydWU7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBjID0gdGhpcy5jdGxzW25hbWVdO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5kb19VKSkgdGhpcy51X2Fyci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5kb19VIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoX2MoYz8uZG9fRCkpIHRoaXMuZF9hcnIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMuZG9fRCBhcyBUX21mbmMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9jKGM/LmRvX0wpKSB0aGlzLmxfYXJyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLmRvX0wgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5kb19SKSkgdGhpcy5yX2Fyci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5kb19SIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoX2MoYz8uaXNPSykpIHRoaXMueV9idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMuaXNPSyBhcyBUX21mbmMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9jKGM/LmlzTkcpKSB0aGlzLm5fYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLmlzTkcgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5pc1NMKSkgdGhpcy5zX2J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5pc1NMIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoX2MoYz8uaXNSVCkpIHRoaXMucl9idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMuaXNSVCBhcyBUX21mbmMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9jKGM/Lm1lbnUpKSB0aGlzLm1fYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLm1lbnUgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5jcE9LKSkgdGhpcy55X2NwMS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5jcE9LIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAoX2MoYz8uY3BORykpIHRoaXMubl9jcDEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGMuY3BORyBhcyBUX21mbmMsIGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKF9jKGM/LmNwU0wpKSB0aGlzLnNfY3AxLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjLmNwU0wgYXMgVF9tZm5jLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmIChfYyhjPy5jcFJUKSkgdGhpcy5yX2NwMS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYy5jcFJUIGFzIFRfbWZuYywgZmFsc2UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoYz8ua2V5RXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjLmtleUV2ZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywga2V5X3ByZXNzX2Z1bmN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnVfYXJyLnN0eWxlLmRpc3BsYXkgPSBfYyhjPy5kb19VKSA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMuZF9hcnIuc3R5bGUuZGlzcGxheSA9IF9jKGM/LmRvX0QpID8gJ2Jsb2NrJyA6ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5sX2Fyci5zdHlsZS5kaXNwbGF5ID0gX2MoYz8uZG9fTCkgPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLnJfYXJyLnN0eWxlLmRpc3BsYXkgPSBfYyhjPy5kb19SKSA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMueV9idG4uc3R5bGUuZGlzcGxheSA9IF9jKGM/LmlzT0spID8gJ2Jsb2NrJyA6ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5uX2J0bi5zdHlsZS5kaXNwbGF5ID0gX2MoYz8uaXNORykgPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLnNfYnRuLnN0eWxlLmRpc3BsYXkgPSBfYyhjPy5pc1NMKSA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMucl9idG4uc3R5bGUuZGlzcGxheSA9IF9jKGM/LmlzUlQpID8gJ2Jsb2NrJyA6ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5tX2J0bi5zdHlsZS5kaXNwbGF5ID0gX2MoYz8ubWVudSkgPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLnlfY3AxLnN0eWxlLmRpc3BsYXkgPSBfYyhjPy5jcE9LKSA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMubl9jcDEuc3R5bGUuZGlzcGxheSA9IF9jKGM/LmNwTkcpID8gJ2Jsb2NrJyA6ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5zX2NwMS5zdHlsZS5kaXNwbGF5ID0gX2MoYz8uY3BTTCkgPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLnJfY3AxLnN0eWxlLmRpc3BsYXkgPSBfYyhjPy5jcFJUKSA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KCdFcnJvciBPY2N1ZXJkIGF0IEFwcGVuZCBEZWZhdWx0IEN0bHMuJyk7XHJcbiAgICAgICAgICAgIGFsZXJ0KCcnICsgZXJyKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gX2MoYzogVF9tYXJnKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoYyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoYyA9PT0gbnVsbCkgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24ga2V5X3ByZXNzX2Z1bmN0aW9uKGU6IEtleWJvYXJkRXZlbnQpOnZvaWQgIHtcclxuICAgIGNvbnN0IG5lID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpPy52YWx1ZSA9PT0gdW5kZWZpbmVkIC8vIE5vdCBFZGl0dGluZyBJbnB1dEVsZW1lbnRcclxuXHJcbiAgICBzd2l0Y2goZS5jb2RlKSB7IC8vIEFycm9344Gv5Y+N5b+c44Gb44GaKOOCpOODmeODs+ODiOiHquS9k+OBjOeZuueUn+OBm+OBmilcclxuICAgICAgICBjYXNlICdBcnJvd1VwJzogXHJcbiAgICAgICAgY2FzZSAnTnVtcGFkNSc6IFxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1X2FycicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0tleUsnOlxyXG4gICAgICAgICAgICAgICAgaWYgKG5lKSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VfYXJyJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzogXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RfYXJyJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnTnVtcGFkMic6IFxyXG4gICAgICAgIGNhc2UgJ0tleUonOlxyXG4gICAgICAgICAgICAgICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkX2FycicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ1NlbWljb2xvbic6XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5lKSBicmVhazsgXHJcbiAgICAgICAgICAgICAgICBpZiAoZ19kZWJ1Zy5pc09OKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkb19pbnN0YW50X2xvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICBjYXNlICdLZXlMJzpcclxuICAgICAgICAgICAgICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncl9hcnInKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6IFxyXG4gICAgICAgIGNhc2UgJ051bXBhZDEnOiBcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbF9hcnInKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdLZXlIJzpcclxuICAgICAgICAgICAgICAgIGlmIChuZSkgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsX2FycicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOiBcclxuICAgICAgICBjYXNlICdOdW1wYWQzJzogXHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JfYXJyJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnRW50ZXInOlxyXG4gICAgICAgIGNhc2UgJ051bXBhZEVudGVyJzpcclxuICAgICAgICBjYXNlICdGMTAnOlxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbl9idG4nKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlICAgICAgICAgICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd5X2J0bicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0tleVknOlxyXG4gICAgICAgIGNhc2UgJ0tleVAnOlxyXG4gICAgICAgIGNhc2UgJ0RpZ2l0MCc6XHJcbiAgICAgICAgICAgICAgICBpZiAobmUpIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneV9idG4nKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdGMSc6XHJcbiAgICAgICAgY2FzZSAnTnVtcGFkMCc6XHJcbiAgICAgICAgY2FzZSAnTnVtcGFkQWRkJzpcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbl9idG4nKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdLZXlOJzpcclxuICAgICAgICBjYXNlICdLZXlJJzpcclxuICAgICAgICBjYXNlICdEaWdpdDgnOlxyXG4gICAgICAgICAgICAgICAgaWYgKG5lKSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25fYnRuJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnS2V5VSc6XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5lKSBicmVhaztcclxuICAgICAgICAgICAgICAgIGlmIChnX2RlYnVnLmlzT04oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHogPSBnX3RlYW0uZ2V0V2Fsa2VyKCkuZ2V0X3ooKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeiA+IDApIGdfdGVhbS5nZXRXYWxrZXIoKS5zZXRfeih6IC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9fbW92ZV9ib3R0b21faGFsZignYmxpbmtfb2ZmJyk7XHJcbi8vICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndV9hcnInKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdLZXlEJzpcclxuICAgICAgICAgICAgICAgIGlmICghbmUpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdfZGVidWcuaXNPTigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeiA9IGdfdGVhbS5nZXRXYWxrZXIoKS5nZXRfeigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh6IDwgZ19tYXplLmdldF96X21heCgpLTEpIGdfdGVhbS5nZXRXYWxrZXIoKS5zZXRfeih6ICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9fbW92ZV9ib3R0b21faGFsZignYmxpbmtfb2ZmJyk7XHJcbi8vICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vLyAgICAgICAgICAgICAgICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndV9hcnInKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdLZXlNJzpcclxuICAgICAgICBjYXNlICdOdW1wYWQ3JzpcclxuICAgICAgICAgICAgICAgIGlmIChuZSkgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtX2J0bicpICAgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnRjcnOlxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzX2J0bicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0NvbW1hJzpcclxuICAgICAgICAgICAgICAgIGlmIChuZSkgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzX2J0bicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0tleVMnOlxyXG4gICAgICAgICAgICAgICAgaWYgKCFuZSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ19kZWJ1Zy5pc09OKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkb19pbnN0YW50X3NhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBkb19tb3ZlX2JvdHRvbV9oYWxmKCdibGlua19vZmYnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzX2J0bicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0YzJzpcclxuICAgICAgICBjYXNlICdOdW1wYWQ4JzpcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncl9idG4nKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdLZXlSJzpcclxuICAgICAgICBjYXNlICdQZXJpb2QnOlxyXG4gICAgICAgICAgICAgICAgaWYgKG5lKSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JfYnRuJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyDms6jmhI/vvJrjgIDjgZPjga7jgq/jg6njgrnnvqTjgafjga/jgrDjg63jg7zjg5Djg6vlpInmlbAgZ19tYXplLCBnX3RlYW0g44KS5L2/55So44GX44Gm44GE44KL44CCXHJcblxyXG5pbXBvcnQgeyBDX1BvaW50RGlyIH0gICAgICAgICBmcm9tIFwiLi4vZF9tZGwvQ19Qb2ludERpclwiO1xyXG5pbXBvcnQgeyBDX01hemUgfSAgICAgICAgICAgICBmcm9tICcuLi9kX21kbC9DX01hemUnO1xyXG5pbXBvcnQgeyBJX01hemVPYmpWaWV3MlgsIFRfUmVjdCB9IGZyb20gXCIuLi9kX21kbC9DX01hemVPYmpWaWV3MlhcIjtcclxuaW1wb3J0IHsgQ19NYXplT2JqVmlldzJYIH0gICAgZnJvbSBcIi4uL2RfbWRsL0NfTWF6ZU9ialZpZXcyWFwiO1xyXG5pbXBvcnQgeyBfbWF4LCBfbWluLCBfcm91bmQgfSBmcm9tIFwiLi4vZF91dGwvRl9NYXRoXCI7XHJcbmltcG9ydCB7IElfTWF6ZU9iaiB9ICAgICAgICAgIGZyb20gXCIuLi9kX21kbC9DX01hemVPYmpcIjtcclxuaW1wb3J0IHsgZ19kZWJ1ZyB9ICAgICAgICAgICAgZnJvbSBcIi4uL2RfY21uL2dsb2JhbFwiO1xyXG5pbXBvcnQgeyBnX21hemUsIGdfdGVhbSB9ICAgICBmcm9tIFwiLi9nbG9iYWxfZm9yX21hemVcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSV9Ecm93TWFwMlh7XHJcbiAgICBzZXRfeHlfbWF4KHhfbWF4OiBudW1iZXIsIHlfbWF4OiBudW1iZXIpIDogdm9pZDtcclxuICAgIGNhbGNfbWFwX3RvcChwZDogQ19Qb2ludERpcik6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFRfRHJvd01hcDJYID0ge1xyXG4gICAgZGl2X2lkOiBzdHJpbmcsXHJcbiAgICBjYW52YXNfaWQ6IHN0cmluZyxcclxuICAgIHhfbWluOiBudW1iZXIsXHJcbiAgICB5X21pbjogbnVtYmVyLFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBUX0Ryb3dNYXAyWF9PcHQgPSB7XHJcbiAgICB4X21pbjogIG51bWJlcixcclxuICAgIHlfbWluOiAgbnVtYmVyLFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ19Ecm93TWFwMlgge1xyXG4gICAgc3RhdGljIG1lOiB7W2lkOiBzdHJpbmddOiBDX0Ryb3dNYXAyWH18dW5kZWZpbmVkPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgc3RhdGljIGdldE9iaihhOiBUX0Ryb3dNYXAyWCk6IENfRHJvd01hcDJYIHtcclxuICAgICAgICBDX0Ryb3dNYXAyWC5tZSA/Pz0ge307XHJcbiAgICAgICAgaWYgKENfRHJvd01hcDJYLm1lW2EuY2FudmFzX2lkXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoYS5jYW52YXNfaWQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21hemVfdmlldzJEX2NhbnZhcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgQ19Ecm93TWFwMlgubWVbYS5jYW52YXNfaWRdID0gbmV3IENfRHJvd01hcDJEKGEpOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21hemVfdmlldzJNX2NhbnZhcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgQ19Ecm93TWFwMlgubWVbYS5jYW52YXNfaWRdID0gbmV3IENfRHJvd01hcDJNKGEpOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgQ19Ecm93TWFwMlgubWVbYS5jYW52YXNfaWRdID0gbmV3IENfRHJvd01hcDJYKGEpOyBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gQ19Ecm93TWFwMlgubWVbYS5jYW52YXNfaWRdO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgY2VsbF9tYXNrcyA9IENfTWF6ZU9ialZpZXcyWC5uZXdPYmooe1xyXG4gICAgICAgIGxheWVyOiAwLCBsZXR0ZXI6ICfvvLgnLCBcclxuICAgICAgICBzaG93M0Q6ICcxJyxcclxuICAgICAgICBjb2xfMjogJyMzMzMzMzMnLCBjb2xfTDogJyM2NjY2ZmYnLCBcclxuICAgIH0pXHJcblxyXG4vKioqKioqKioqKioqKioqKipcclxuICAgIHByb3RlY3RlZCBjZWxsX21hc2tzID0gQ19NYXplT2JqVmlldzJYLm5ld09iaih7XHJcbiAgICAgICAgbGF5ZXI6IDAsIGxldHRlcjogJ++8uCcsIFxyXG4gICAgICAgIHNob3czRDogJzEnLFxyXG4gICAgICAgIHBhZF90OiAwLjAsIHBhZF9kOiAwLjAsIHBhZF9zOiAwLjAsXHJcbiAgICAgICAgY29sX2Y6ICcnLCBjb2xfYjogJycsIGNvbF9zOiAnJywgY29sX3Q6ICcnLCBjb2xfZDogJycsIFxyXG4gICAgICAgIGNvbF9sOiAnIzAwMDBmZicsIGNvbF8yOiAnIzMzMzMzMycsIGNvbF9MOiAnIzY2NjZmZicsIFxyXG4gICAgfSlcclxuXHJcbiAgICBwcm90ZWN0ZWQgY2VsbF91bmV4cCA9IENfTWF6ZU9ialZpZXcyWC5uZXdPYmooe1xyXG4gICAgICAgICAgICBsYXllcjogMCwgbGV0dGVyOiAn6KyOJywgXHJcbiAgICAgICAgICAgIHNob3czRDogICcxJyxcclxuICAgICAgICAgICAgcGFkX3Q6IDAuMCwgcGFkX2Q6IDAuMCwgcGFkX3M6IDAuMCxcclxuICAgICAgICAgICAgY29sX2Y6ICcnLCBjb2xfYjogJycsIGNvbF9zOiAnJywgY29sX3Q6ICcnLCBjb2xfZDogJycsIFxyXG4gICAgICAgICAgICBjb2xfbDogJyMwMDAwZmYnLCBjb2xfMjogJyNmZjAwZmYnLCBjb2xfTDogJyM2NjY2ZmYnLCBcclxuICAgIH0pXHJcbioqKioqKioqKioqKioqKiovXHJcblxyXG4gICAgXHJcbiAgICBkaXY6IEhUTUxEaXZFbGVtZW50fCBudWxsID0gbnVsbDtcclxuICAgIGN2czogSFRNTENhbnZhc0VsZW1lbnR8bnVsbCA9IG51bGw7XHJcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRHxudWxsID0gbnVsbDtcclxuXHJcbiAgICBweF9zaXplX3g6IG51bWJlciA9IDA7XHJcbiAgICBweF9zaXplX3k6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHhfbWluX3g6ICBudW1iZXIgPSAzO1xyXG4gICAgcHhfbWluX3k6ICBudW1iZXIgPSAzO1xyXG5cclxuICAgIHZpZXdfd2R0aDogbnVtYmVyID0gMDtcclxuICAgIHZpZXdfaGdodDogbnVtYmVyID0gMDtcclxuICAgIG1hcF93ZHRoOiAgbnVtYmVyID0gMDtcclxuICAgIG1hcF9oZ2h0OiAgbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoYTogVF9Ecm93TWFwMlgpIHtcclxuICAgICAgICB0aGlzLmluaXQoYSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaW5pdChhOiBUX0Ryb3dNYXAyWCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYS5kaXZfaWQpICAgIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgIGlmICh0aGlzLmRpdiA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLmN2cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEuY2FudmFzX2lkKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgICAgICBpZiAodGhpcy5jdnMgPT09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5jdHggPSB0aGlzLmN2cy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIGlmICh0aGlzLmN0eCA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLnNldF94eSh7eF9taW46IGEueF9taW4sIHlfbWluOiBhLnlfbWlufSBhcyBUX0Ryb3dNYXAyWF9PcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRfeHkoYTogVF9Ecm93TWFwMlhfT3B0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGEueF9taW4gPCAzIHx8IGEueV9taW4gPCAzKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRpdiA9PT0gbnVsbCB8fCB0aGlzLmN2cyA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMucHhfbWluX3ggPSBhLnhfbWluO1xyXG4gICAgICAgIHRoaXMucHhfbWluX3kgPSBhLnlfbWluOyBcclxuICAgICAgICB0aGlzLl9jYWxjX21hcF9zaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9jYWxjX21hcF9zaXplKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmRpdiA9PT0gbnVsbCB8fCB0aGlzLmN2cyA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLnZpZXdfd2R0aCAgPSB0aGlzLmRpdi5jbGllbnRXaWR0aDtcclxuICAgICAgICB0aGlzLnZpZXdfaGdodCAgPSB0aGlzLmRpdi5jbGllbnRIZWlnaHQ7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbCA9IGdfbWF6ZS5nZXRfeF9tYXgoKSArIDA7XHJcbiAgICAgICAgY29uc3Qgcm93ID0gZ19tYXplLmdldF95X21heCgpICsgMDtcclxuXHJcbiAgICAgICAgY29uc3QgY29sX3B4ID0gdGhpcy5jdnMud2lkdGggIC8gY29sO1xyXG4gICAgICAgIGNvbnN0IHJvd19weCA9IHRoaXMuY3ZzLmhlaWdodCAvIHJvdztcclxuXHJcbiAgICAgICAgdGhpcy5weF9zaXplX3ggPSBfbWF4KFt0aGlzLnB4X21pbl94LCBfcm91bmQoMS4wMCAqICBfbWluKFtjb2xfcHgsIHJvd19weF0pLCAyKV0pO1xyXG4gICAgICAgIHRoaXMucHhfc2l6ZV95ID0gX21heChbdGhpcy5weF9taW5feSwgX3JvdW5kKDEuMDAgKiAgX21pbihbY29sX3B4LCByb3dfcHhdKSwgMildKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXBfd2R0aCAgPSB0aGlzLnB4X3NpemVfeCAqIF9taW4oW2NvbCwgcm93XSk7XHJcbiAgICAgICAgdGhpcy5tYXBfaGdodCAgPSB0aGlzLnB4X3NpemVfeSAqIF9taW4oW2NvbCwgcm93XSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1hcF93ZHRoIDwgdGhpcy52aWV3X3dkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXBfd2R0aCA9IHRoaXMudmlld193ZHRoO1xyXG4gICAgICAgICAgICB0aGlzLnB4X3NpemVfeCAgPSBfcm91bmQodGhpcy52aWV3X3dkdGggLyBjb2wsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tYXBfaGdodCA8IHRoaXMudmlld19oZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwX2hnaHQgPSB0aGlzLnZpZXdfaGdodDtcclxuICAgICAgICAgICAgdGhpcy5weF9zaXplX3kgID0gX3JvdW5kKHRoaXMudmlld19oZ2h0IC8gcm93LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY3ZzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAgdGhpcy5tYXBfd2R0aC50b1N0cmluZygpKTtcclxuICAgICAgICB0aGlzLmN2cy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMubWFwX2hnaHQudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyb3dfbWFwMlgoKTogdm9pZCB7IFxyXG4gICAgICAgIGlmICh0aGlzLmN2cyAhPT0gbnVsbCkge3RoaXMuX3RvXzJYKCk7dGhpcy5fY2FsY19tYXBfdG9wKCl9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfY2FsY19tYXBfdG9wKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHBkID0gZ190ZWFtLmdldF9wZCgpO1xyXG5cclxuICAgICAgICB0aGlzLnZpZXdfd2R0aCAgPSB0aGlzLmRpdj8uY2xpZW50V2lkdGggID8/IDA7XHJcbiAgICAgICAgdGhpcy52aWV3X2hnaHQgID0gdGhpcy5kaXY/LmNsaWVudEhlaWdodCA/PyAwO1xyXG5cclxuICAgICAgICBsZXQgdG9wX3ggPSAgdGhpcy52aWV3X3dkdGggLyAyIC0gcGQueCAqIHRoaXMucHhfc2l6ZV94O1xyXG4gICAgICAgIGlmICh0b3BfeCA+IDApIHRvcF94ID0gMDsgLy8g5bem56uv5Yi26ZmQXHJcbiAgICAgICAgaWYgKHRvcF94IDwgdGhpcy52aWV3X3dkdGggLSB0aGlzLm1hcF93ZHRoKSB0b3BfeCA9IHRoaXMudmlld193ZHRoIC0gdGhpcy5tYXBfd2R0aDsgLy8g5Y+z56uv5Yi26ZmQXHJcblxyXG4gICAgICAgIGxldCB0b3BfeSA9ICB0aGlzLnZpZXdfaGdodCAvIDIgLSBwZC55ICogdGhpcy5weF9zaXplX3k7XHJcbiAgICAgICAgaWYgKHRvcF95ID4gMCkgdG9wX3kgPSAwOyAvLyDkuIrnq6/liLbpmZBcclxuICAgICAgICBpZiAodG9wX3kgPCB0aGlzLnZpZXdfaGdodCAtIHRoaXMubWFwX2hnaHQpIHRvcF95ID0gdGhpcy52aWV3X2hnaHQgLSB0aGlzLm1hcF9oZ2h0OyAvLyDkuIvnq6/liLbpmZBcclxuXHJcbiAgICAgICAgdGhpcy5jdnM/LnN0eWxlLnNldFByb3BlcnR5KCdsZWZ0JywgICAgICBgJHt0b3BfeH1weGApO1xyXG4gICAgICAgIHRoaXMuY3ZzPy5zdHlsZS5zZXRQcm9wZXJ0eSgndG9wJywgICAgICAgYCR7dG9wX3l9cHhgKTtcclxuXHJcbiAgICAvLyAgICAgICAgYWxlcnQoYFZpZXcyRDogJHt0aGlzLnZpZXdfd2R0aH14JHt0aGlzLnZpZXdfaGdodH0gcHgsIENlbGw6ICR7dGhpcy5weF9zaXplX3h9eCR7dGhpcy5weF9zaXplX3l9IHB4YCk7XHJcbiAgICAvLyAgICAgICAgYWxlcnQoYFZpZXcyRDogJHt0b3BfeH1weCAqICR7dG9wX3l9cHgsIFBEOiAke3BkLnh9LCR7cGQueX0sJHtwZC56fWApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3RvXzJYKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNpemVfeCA9IGdfbWF6ZS5nZXRfeF9tYXgoKTtcclxuICAgICAgICBjb25zdCBzaXplX3kgPSBnX21hemUuZ2V0X3lfbWF4KCk7XHJcbiAgICAgICAgY29uc3QgcGQgICAgID0gZ190ZWFtLmdldF9wZCgpO1xyXG4gICAgICAgIGNvbnN0IGZsb29yICA9IHBkLnpcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBzaXplX3k7IHkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHNpemVfeDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVjdF8yZDogVF9SZWN0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRsOiB7IHg6ICggeCAgICAgKSAqIHRoaXMucHhfc2l6ZV94LCB5OiAoIHkgICAgICkgKiB0aGlzLnB4X3NpemVfeSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRyOiB7IHg6ICggeCArIDEgKSAqIHRoaXMucHhfc2l6ZV94LCB5OiAoIHkgICAgICkgKiB0aGlzLnB4X3NpemVfeSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRsOiB7IHg6ICggeCAgICAgKSAqIHRoaXMucHhfc2l6ZV94LCB5OiAoIHkgKyAxICkgKiB0aGlzLnB4X3NpemVfeSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRyOiB7IHg6ICggeCArIDEgKSAqIHRoaXMucHhfc2l6ZV94LCB5OiAoIHkgKyAxICkgKiB0aGlzLnB4X3NpemVfeSB9LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWdfZGVidWcuaXNPTigpICYmIGdfbWF6ZS5pc19tYXNrZWRfeHl6KHgsIHksIGZsb29yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOODnuOCueOCr+OBleOCjOOBpuOBhOOCi+OCu+ODq+OBr+OAgeODnuOCueOCr+ihqOekulxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN0eCAhPT0gbnVsbCkgdGhpcy5jZWxsX21hc2tzLmRyb3cyWCh0aGlzLmN0eCwgcmVjdF8yZCwgMCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyBcclxuICAgICAgICAgICAgICAgICAgICAvLyDjg57jgrnjgq/jgZXjgozjgabjgYTjgarjgYTjgrvjg6vjga/jgIHpgJrluLjooajnpLpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5bqK44Gu44OT44Ol44O844KS5o+P5YaZXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxyX29iaiA9IGdfbWF6ZS5nZXRfY2VsbF94eXooeCwgeSwgZmxvb3IpPy5nZXRPYmooKTtcclxuICAgICAgICAgICAgICAgICAgICBmbHJfb2JqPy52aWV3MkQoKT8uZHJvdzJYKHRoaXMuY3R4LCByZWN0XzJkLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBmbHJfb2JqPy52aWV3Mk0oKT8uZHJvdzJYKHRoaXMuY3R4LCByZWN0XzJkLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g44Kq44OW44K444Kn44Kv44OI44GM5a2Y5Zyo44GZ44KL5aC05ZCI44Gv44CB44Gd44Gu44OT44Ol44O844KS5o+P55S7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqX2NlbGwgPSBnX21hemUuZ2V0X29ial94eXooeCwgeSwgZmxvb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmpfY2VsbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZV92aWV3Mlgob2JqX2NlbGwpPy5kcm93MlgodGhpcy5jdHgsIHJlY3RfMmQsIG9ial9jZWxsPy5nZXRfcGQoKS5kPz8wKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDJE44GLMk3jgYvjgILjgrXjg5bjgq/jg6njgrnjgaflrp/oo4Uo5ZG844Gw44KM44KL44GT44Go44GM54Sh44GE5oq96LGh44Oh44K944OD44OJKVxyXG4gICAgcHJvdGVjdGVkIG9iamVfdmlldzJYKG9ial9jZWxsOiBJX01hemVPYmp8bnVsbCk6IElfTWF6ZU9ialZpZXcyWHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyAyROODnuODg+ODl+OBruOCteODluOCr+ODqeOCuVxyXG4vLyAyROODnuODg+ODl+OBr+OAgUNfRHJvd01hcDJY44KS57aZ5om/44GX44GmXHJcbi8vIDJE44Oe44OD44OX44Gu5o+P55S744KS6KGM44GG44Kv44Op44K544KS5L2c5oiQ44GZ44KL44CCXHJcbmV4cG9ydCBjbGFzcyBDX0Ryb3dNYXAyRCBleHRlbmRzIENfRHJvd01hcDJYIHtcclxuICAgIGNvbnN0cnVjdG9yKGE6IFRfRHJvd01hcDJYID0ge1xyXG4gICAgICAgIGRpdl9pZDogICAgJ2Rpdl9tYXplX3Z3MkQnLFxyXG4gICAgICAgIGNhbnZhc19pZDogJ21hemVfdmlldzJEX2NhbnZhcycsXHJcbiAgICAgICAgeF9taW46ICAgICAxNSxcclxuICAgICAgICB5X21pbjogICAgIDE1LFxyXG4gICAgfSkge1xyXG4gICAgICAgIHN1cGVyKGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDJE44Oe44OD44OX44Gu44Kq44OW44K444Kn44Kv44OI44OT44Ol44O844KS5Y+W5b6XXHJcbiAgICBwdWJsaWMgIG9iamVfdmlldzJYKG9ial9jZWxsOiBJX01hemVPYmp8bnVsbCk6IElfTWF6ZU9ialZpZXcyWHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gb2JqX2NlbGw/LnZpZXcyRCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyAyROODnuODg+ODl+OBruOCteODluOCr+ODqeOCuVxyXG4vLyAyROODn+ODi+ODnuODg+ODl++8iDJN77yJ44Gv44CBQ19Ecm93TWFwMljjgpLntpnmib/jgZfjgaZcclxuLy8gMkTjg5/jg4vjg57jg4Pjg5fjga7mj4/nlLvjgpLooYzjgYbjgq/jg6njgrnjgpLkvZzmiJDjgZnjgovjgIJcclxuZXhwb3J0IGNsYXNzIENfRHJvd01hcDJNIGV4dGVuZHMgQ19Ecm93TWFwMlgge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGE6IFRfRHJvd01hcDJYID0ge1xyXG4gICAgICAgIGRpdl9pZDogICAgJ2Rpdl9tYXplX3Z3Mk0nLFxyXG4gICAgICAgIGNhbnZhc19pZDogJ21hemVfdmlldzJNX2NhbnZhcycsXHJcbiAgICAgICAgeF9taW46ICAgICAgNSxcclxuICAgICAgICB5X21pbjogICAgICA1LFxyXG4gICAgfSkge1xyXG4gICAgICAgIHN1cGVyKGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDJN44Oe44OD44OX44Gu44Kq44OW44K444Kn44Kv44OI44OT44Ol44O844KS5Y+W5b6XXHJcbiAgICBwdWJsaWMgIG9iamVfdmlldzJYKG9ial9jZWxsOiBJX01hemVPYmp8bnVsbCk6IElfTWF6ZU9ialZpZXcyWHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gb2JqX2NlbGw/LnZpZXcyTSgpO1xyXG4gICAgfVxyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgQ19IZXJvIH0gZnJvbSBcIi4uL2RfbWRsL0NfSGVyb1wiO1xyXG5pbXBvcnQgeyBnX2hyZXMgfSBmcm9tIFwiLi9nbG9iYWxfZm9yX21hemVcIjtcclxuXHJcbi8vIGdfaHJlc+OBi+OCieOBruaKnOeyi1xyXG50eXBlIF9UX0hlcm9JbmZvID0ge1xyXG4gICAgbmFtZTogc3RyaW5nfHVuZGVmaW5lZDtcclxuICAgIHN0YXQ6IHN0cmluZ3x1bmRlZmluZWQ7XHJcbiAgICBud0hwOiBudW1iZXJ8dW5kZWZpbmVkO1xyXG4gICAgbndNcDogbnVtYmVyfHVuZGVmaW5lZDtcclxuICAgIG14SHA6IG51bWJlcnx1bmRlZmluZWQ7XHJcbiAgICBteE1wOiBudW1iZXJ8dW5kZWZpbmVkO1xyXG59XHJcblxyXG4vLyDooajntYTjgb/jga5UROOBqOWvvuW/nFxyXG50eXBlIF9UX0luZm9UUiA9IHtcclxuICAgIFwibmFtZVwiOiBIVE1MVGFibGVDZWxsRWxlbWVudHxudWxsO1xyXG4gICAgXCJzdGF0XCI6IEhUTUxUYWJsZUNlbGxFbGVtZW50fG51bGw7XHJcbiAgICBcImhwQ2hcIjogSFRNTFRhYmxlQ2VsbEVsZW1lbnR8bnVsbDtcclxuICAgIFwibXBDaFwiOiBIVE1MVGFibGVDZWxsRWxlbWVudHxudWxsO1xyXG59XHJcblxyXG5jb25zdCBtYXhfaHJlcyA9IDQ7XHJcblxyXG5leHBvcnQgY2xhc3MgQ19IcmVzSW5mbyB7XHJcbiAgICBwcm90ZWN0ZWQgZWxtOiAgICBIVE1MRGl2RWxlbWVudHxudWxsID0gbnVsbDtcclxuICAgIHByb3RlY3RlZCBteUhyZXM6IENfSGVyb1tdID0gW107XHJcbiAgICBwcm90ZWN0ZWQgdGJvZHk6ICBIVE1MVGFibGVTZWN0aW9uRWxlbWVudHxudWxsICAgPSBudWxsO1xyXG4gICAgcHJvdGVjdGVkIGhyZXM6ICAoX1RfSGVyb0luZm98dW5kZWZpbmVkKVtdfHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgIHByb3RlY3RlZCByb3dzOiAgIF9UX0luZm9UUltdfHVuZGVmaW5lZCAgID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJvd3MgPSBbXTsgdGhpcy5faW5pdF9yb3dzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9pbml0X3Jvd3MoKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbWF4X2hyZXM7IGlkeCsrKSB0aGlzLl9pbml0X2Ffcm93KGlkeCk7IC8vIOS4puOBs+mghuOBjOmHjeimgeOBquOBruOBpyBmb3Ig44Gn5Zue44GZXHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX2luaXRfYV9yb3coaWR4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5yb3dzID09PSB1bmRlZmluZWQgfHwgdGhpcy5yb3dzLmxlbmd0aCA8IDApIHJldHVybjtcclxuICAgICAgICB0aGlzLl9pbml0X2FfY29sKGlkeCwgXCJuYW1lXCIpO1xyXG4gICAgICAgIHRoaXMuX2luaXRfYV9jb2woaWR4LCBcInN0YXRcIik7XHJcbiAgICAgICAgdGhpcy5faW5pdF9hX2NvbChpZHgsIFwiaHBDaFwiKTtcclxuICAgICAgICB0aGlzLl9pbml0X2FfY29sKGlkeCwgXCJtcENoXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfaW5pdF9hX2NvbChpZHg6IG51bWJlciwga2V5OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5yb3dzID09PSB1bmRlZmluZWQgfHwgdGhpcy5yb3dzLmxlbmd0aCA8IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5yb3dzW2lkeF0gPz89IHt9IGFzIF9UX0luZm9UUjtcclxuICAgICAgICB0aGlzLnJvd3NbaWR4XVtrZXkgYXMga2V5b2YgX1RfSW5mb1RSXSBcclxuICAgICAgICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgZGl2X2hyZXNfaW5mb190ciR7aWR4LnRvU3RyaW5nKCl9XyR7a2V5fWApIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2luaXRfaHJlcygpO1xyXG4gICAgICAgIHRoaXMuX2hyZXNfdG9fcm93cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfaW5pdF9ocmVzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaHJlcyA9IFtdO1xyXG4gICAgICAgIGxldCBpZHggPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG1heF9ocmVzOyBpZHgrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9pbml0X2FfaGVybyhpZHgpOyAvLyDkuKbjgbPpoIbjgYzph43opoHjgarjga7jgacgZm9yIOOBp+WbnuOBmVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2luaXRfYV9oZXJvKGlkeDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGdfaHJlc1tpZHhdID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5ocmVzICAgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmhyZXMubGVuZ3RoIDwgMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLmhyZXNbaWR4XSA9IHt9IGFzIF9UX0hlcm9JbmZvO1xyXG5cclxuICAgICAgICBpZiAoaWR4IDwgZ19ocmVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmhyZXNbaWR4XS5uYW1lID0gZ19ocmVzW2lkeF0ubmFtZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmhyZXNbaWR4XS5zdGF0ID0gZ19ocmVzW2lkeF0uaXNfYWxpdmUoKSA/ICfjgIDmraPluLjjgIAnIDogJ+ihjOWLleS4jeiDvSc7XHJcbiAgICAgICAgICAgIHRoaXMuaHJlc1tpZHhdLm53SHAgPSBnX2hyZXNbaWR4XS5nZXRfYWJpX3Bfbm93KFwieHBcIikgLSBnX2hyZXNbaWR4XS5nZXRfYWJpX3Bfbm93KFwieGRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuaHJlc1tpZHhdLm14SHAgPSBnX2hyZXNbaWR4XS5nZXRfYWJpX3Bfbm93KFwieHBcIik7XHJcbiAgICAgICAgICAgIHRoaXMuaHJlc1tpZHhdLm53TXAgPSBnX2hyZXNbaWR4XS5nZXRfYWJpX21fbm93KFwieHBcIikgLSBnX2hyZXNbaWR4XS5nZXRfYWJpX21fbm93KFwieGRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuaHJlc1tpZHhdLm14TXAgPSBnX2hyZXNbaWR4XS5nZXRfYWJpX21fbm93KFwieHBcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ocmVzW2lkeF0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfaHJlc190b19yb3dzKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG1heF9ocmVzOyBpZHgrKykgdGhpcy5faGVyb190b19hX3JvdyhpZHgpOyAvLyDkuKbjgbPpoIbjgYzph43opoHjgarjga7jgacgZm9yIOOBp+WbnuOBmVxyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9oZXJvX3RvX2Ffcm93KGlkeDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucm93cyA9PT0gdW5kZWZpbmVkIHx8IHRoaXMucm93cy5sZW5ndGggPCAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJvd3NbaWR4XT8ubmFtZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMucm93c1tpZHhdPy5zdGF0ID09PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5yb3dzW2lkeF0/LmhwQ2ggPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLnJvd3NbaWR4XT8ubXBDaCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJvd3NbaWR4XS5uYW1lID09PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMucm93c1tpZHhdLnN0YXQgPT09IG51bGwpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5yb3dzW2lkeF0uaHBDaCA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLnJvd3NbaWR4XS5tcENoID09PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhyZXMgIT09IHVuZGVmaW5lZCAgJiYgIHRoaXMuaHJlc1tpZHhdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3dzW2lkeF0ubmFtZS5pbm5lckhUTUwgPSAgdGhpcy5ocmVzW2lkeF0ubmFtZSA/PyAnJztcclxuICAgICAgICAgICAgdGhpcy5yb3dzW2lkeF0uc3RhdC5pbm5lckhUTUwgPSAgdGhpcy5ocmVzW2lkeF0uc3RhdCA/PyAnJztcclxuICAgICAgICAgICAgdGhpcy5yb3dzW2lkeF0uaHBDaC5pbm5lckhUTUwgPSAnSFDvvJonXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKHRoaXMuaHJlc1tpZHhdLm53SHA/LnRvU3RyaW5nKCkgPz8gJz8/PycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJyAvICdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAodGhpcy5ocmVzW2lkeF0ubXhIcD8udG9TdHJpbmcoKSA/PyAnPz8/JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICB0aGlzLnJvd3NbaWR4XS5tcENoLmlubmVySFRNTCA9ICdNUO+8midcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAodGhpcy5ocmVzW2lkeF0ubndNcD8udG9TdHJpbmcoKSA/PyAnPz8/JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnIC8gJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICh0aGlzLmhyZXNbaWR4XS5teE1wPy50b1N0cmluZygpID8/ICc/Pz8nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yb3dzW2lkeF0ubmFtZS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5yb3dzW2lkeF0uc3RhdC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5yb3dzW2lkeF0uaHBDaC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgdGhpcy5yb3dzW2lkeF0ubXBDaC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBfYWxlcnQgfSAgICAgICBmcm9tIFwiLi4vZF9jbW4vZ2xvYmFsXCI7XHJcbmltcG9ydCB7VF9NYWtlRW51bVR5cGV9IGZyb20gXCIuLi9kX3V0bC9UX01ha2VFbnVtVHlwZVwiO1xyXG5leHBvcnQgY29uc3QgVF9WaWV3TW9kZTp7W21vZGU6IHN0cmluZ106IHN0cmluZ30gPSB7XHJcbiAgICBNb3ZlOiAgICAgJ21vdmUnLFxyXG4gICAgQmF0dDogICAgICdiYXR0JyxcclxuICAgIE1lbnU6ICAgICAnbWVudScsXHJcbiAgICBMZFN2OiAgICAgJ2xkc3YnLFxyXG4gICAgQnR0bDogICAgICdidHRsJyxcclxufSBhcyBjb25zdDtcclxuZXhwb3J0IHR5cGUgVF9WaWV3TW9kZSA9IFRfTWFrZUVudW1UeXBlPHR5cGVvZiBUX1ZpZXdNb2RlPjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDX1N3aXRjaFZpZXcge1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBtZTogICBDX1N3aXRjaFZpZXc7XHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIGJvZHk6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBhcnRpY2xlOiAgIHtbbmFtZTogc3RyaW5nXTogSFRNTEVsZW1lbnR8bnVsbH07XHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIGFsbF9jbGFzczogc3RyaW5nW107XHJcblxyXG4gICAgcHVibGljIE1vdmUoKTogc3RyaW5nIHtyZXR1cm4gVF9WaWV3TW9kZS5Nb3ZlO31cclxuICAgIHB1YmxpYyBCYXR0KCk6IHN0cmluZyB7cmV0dXJuIFRfVmlld01vZGUuQmF0dDt9XHJcbiAgICBwdWJsaWMgTWVudSgpOiBzdHJpbmcge3JldHVybiBUX1ZpZXdNb2RlLk1lbnU7fVxyXG4gICAgcHVibGljIE12UHQoKTogc3RyaW5nIHtyZXR1cm4gVF9WaWV3TW9kZS5NZW51O31cclxuICAgIHB1YmxpYyBMZFN2KCk6IHN0cmluZyB7cmV0dXJuIFRfVmlld01vZGUuTGRTdjt9XHJcbiAgICBwdWJsaWMgQnR0bCgpOiBzdHJpbmcge3JldHVybiBUX1ZpZXdNb2RlLkJ0dGw7fVxyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBDX1N3aXRjaFZpZXcuYWxsX2NsYXNzID0gT2JqZWN0LnZhbHVlcyhUX1ZpZXdNb2RlKTtcclxuICAgICAgICBDX1N3aXRjaFZpZXcuYXJ0aWNsZSA9IHt9O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIENfU3dpdGNoVmlldy5ib2R5ID0gZG9jdW1lbnQuYm9keTtcclxuXHJcbiAgICAgICAgICAgIENfU3dpdGNoVmlldy5hcnRpY2xlLnZpZXczZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5lX21hemVfdnczRCcpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBDX1N3aXRjaFZpZXcuYXJ0aWNsZS52aWV3MmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuZV9tYXplX3Z3MkQnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgQ19Td2l0Y2hWaWV3LmFydGljbGUudmlldzJtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhbmVfbWF6ZV92dzJtJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIENfU3dpdGNoVmlldy5hcnRpY2xlLm1lbnVfbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5lX21lbnVfbGlzdCcpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBDX1N3aXRjaFZpZXcuYXJ0aWNsZS5sZHN2X2wgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuZV9sZHN2X2xpc3QnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgQ19Td2l0Y2hWaWV3LmFydGljbGUubGRzdl9kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhbmVfbGRzdl9kYXRhJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIENfU3dpdGNoVmlldy5hcnRpY2xlLmJ0dGxfcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5lX2J0dGxfc2NybicpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBDX1N3aXRjaFZpZXcuYXJ0aWNsZS5idHRsX20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuZV9idHRsX21lc2cnKSBhcyBIVE1MRWxlbWVudDsgICAgICAgICAgICBcclxuICAgICAgICAgICAgQ19Td2l0Y2hWaWV3LmFydGljbGUubWVudV9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhbmVfbWVudV9tZXNnJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIENfU3dpdGNoVmlldy5hcnRpY2xlLmdhbWVfbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5lX21hemVfbWVzZycpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBDX1N3aXRjaFZpZXcuYXJ0aWNsZS5jb250bHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuZV9jdGxzX2JvYWQnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgQ19Td2l0Y2hWaWV3LmFydGljbGUubWVzc2FnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhbmVfc3l0bV9tZXNnJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIF9hbGVydCgnTGF5b3V0IEdldCBFcnJvcjogJyArIGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlldygnbW92ZScpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRPYmooKTogQ19Td2l0Y2hWaWV3IHtcclxuICAgICAgICB0aGlzLm1lID8/PSAgbmV3IENfU3dpdGNoVmlldygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHZpZXcobW9kZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdGhpcy5fX3NldF9jbGFzcyhtb2RlKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfX3NldF9jbGFzcyhjOiBzdHJpbmcpOiB2b2lkIHsgXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgQ19Td2l0Y2hWaWV3LmJvZHk/LmNsYXNzTGlzdC5yZW1vdmUoLi4uQ19Td2l0Y2hWaWV3LmFsbF9jbGFzcyk7XHJcbiAgICAgICAgICAgIENfU3dpdGNoVmlldy5ib2R5Py5jbGFzc0xpc3QuYWRkKGMpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlpIGluIENfU3dpdGNoVmlldy5hcnRpY2xlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ19Td2l0Y2hWaWV3LmFydGljbGVbaWldID09PSBudWxsKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIENfU3dpdGNoVmlldy5hcnRpY2xlW2lpXT8uY2xhc3NMaXN0LnJlbW92ZSguLi5DX1N3aXRjaFZpZXcuYWxsX2NsYXNzKTtcclxuICAgICAgICAgICAgICAgIENfU3dpdGNoVmlldy5hcnRpY2xlW2lpXT8uY2xhc3NMaXN0LmFkZChjKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBfYWxlcnQoJ0xheW91dCBTZXQgRXJyb3I6ICcgKyBlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIOWkp+Wfn+WkieaVsOS9v+eUqFxyXG4vLyBnX21hemVcclxuXHJcbmltcG9ydCB7IFxyXG4gICAgZ19tYXplLCBcclxufSBmcm9tIFwiLi9nbG9iYWxfZm9yX21hemVcIjtcclxuXHJcbmltcG9ydCB7IFxyXG4gICAgSV9Ib3BlQWN0aW9uLCBcclxuICAgIElfSG9wZVJlc3BvbmNlTW92ZSwgXHJcbiAgICBJX0hvcGVSZXNwb25jZVR1cm5cclxufSAgICAgICAgICAgICAgICAgZnJvbSBcIi4uL2RfbWRsL0NfSG9wZVwiO1xyXG5cclxuaW1wb3J0IHsgX2lyYW5kIH0gICAgICAgICBmcm9tIFwiLi4vZF91dGwvRl9SYW5kXCI7XHJcblxyXG5cclxuLy8g56e75YuV5pmC44Gu5Yik5a6aICAgdHJ1ZTog56e75YuV5Y+v6IO9ICBmYWxzZTog56e75YuV5LiN5Y+vXHJcbmV4cG9ydCBmdW5jdGlvbiBjYW5fbW92ZV90ZWFtKHI6IElfSG9wZUFjdGlvbik6IElfSG9wZVJlc3BvbmNlTW92ZSB7XHJcbiAgICBjb25zdCBfdG91Y2ggPSBfaXNfdG91Y2hfdGVhbShyKTsgIC8vIOW9k+OBn+OCiuWIpOWumu+8iOmao+aOpe+8iVxyXG4gICAgaWYgKCFfdG91Y2gpIHtcclxuICAgICAgICAvLyDpgLLooYzmlrnlkJHjgavjgYLjgovlo4HjgoTjgqrjg5bjgrjjgqfjgajjga7ooZ3nqoHliKTlrppcclxuICAgICAgICBjb25zdCBfaG93X2NvbGxpZGUgID0gX2hvd19jb2xsaWRlX3RlYW0ocik7IC8vIOaIu+OCiuWApCBjYW5Nb3ZlOnRydWXjgarjgonnp7vli5Xlj6/jgIFkYW1hZ2Xjga/ln7rmnKzjg4Djg6Hjg7zjgrjph49cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb2s6ICBfaG93X2NvbGxpZGUuY2FuTW92ZSwgICAvLyDnp7vli5Xlj6/lkKZcclxuICAgICAgICAgICAgcmVzOiBfaG93X2NvbGxpZGUuY2FuTW92ZSA/ICdNb3ZlJyA6ICdCbG9jaycsIC8vIOihjOWLlee1kOaenFxyXG4gICAgICAgICAgICBkbWc6IF9ob3dfY29sbGlkZS5kYW1hZ2UsIC8vIOWfuuacrOODgOODoeODvOOCuOWApFxyXG4gICAgICAgICAgICBob3BlOiByLCAgICAgICAgICAgICAgICAgICAgIC8vIOW4jOacm+ihjOWLlVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgb2s6ICAgICAgZmFsc2UsICAgICAvLyDnp7vli5XkuI3og71cclxuICAgICAgICAgICAgcmVzOiAgICAnQmxvY2snLCAgICAvLyDooYzli5XntZDmnpxcclxuICAgICAgICAgICAgZG1nOiAgICAgMCwgICAgICAgICAvLyDln7rmnKzjg4Djg6Hjg7zjgrjlgKRcclxuICAgICAgICAgICAgaG9wZTogICAgciwgICAgICAgICAvLyDluIzmnJvooYzli5VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyDjgr/jg7zjg7PmmYLjga7liKTlrpogIHRydWU6IOOCv+ODvOODs+WPr+iDvSAgZmFsc2U6IOOCv+ODvOODs+S4jeWPr1xyXG5leHBvcnQgZnVuY3Rpb24gY2FuX3R1cm5fdGVhbShyOiBJX0hvcGVBY3Rpb24pOiBJX0hvcGVSZXNwb25jZVR1cm4ge1xyXG4gICAgY29uc3QgX3R1cm4gPSBfY2FuX3R1cm5fdGVhbShyKTtcclxuICAgIGlmIChfdHVybikge1xyXG4gICAgICAgIGNvbnN0IF90b3VjaCA9X2lzX3RvdWNoX3RlYW0ocik7ICAvLyDlvZPjgZ/jgorliKTlrprvvIjpmqPmjqXvvIlcclxuICAgICAgICByZXR1cm4ge29rOiAhX3RvdWNoICwgaG9wZTogciwgcmVzOiBfdG91Y2ggPyAnQmxvY2snIDogJ1R1cm4nLCBkbWc6IDB9OyAvLyDjgr/jg7zjg7Plj6/og71cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHtvazogZmFsc2UsICAgIGhvcGU6IHIsIHJlczogJ0Jsb2NrJywgZG1nOiAwfTsgLy8g44K/44O844Oz5LiN5Y+vXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vLyDjgr/jg7zjg7Plj6/lkKYgIHRydWU65Y+vLCBmYWxzZTrkuI3lj69cclxuZnVuY3Rpb24gX2Nhbl90dXJuX3RlYW0ocjogSV9Ib3BlQWN0aW9uKTogYm9vbGVhbiB7IHJldHVybiB0cnVlOyB9XHJcblxyXG5cclxuLy8g5b2T44Gf44KK5Yik5a6a77yI6Zqj5o6l77yJICB0cnVlOiDmjqXop6bjgYLjgoogIGZhbHNlOiDmjqXop6bjgarjgZdcclxuLy8g44GT44GT44Gn44Gv5o6l6Kem44Gv44Gq44GE6Kit5a6aXHJcbmZ1bmN0aW9uIF9pc190b3VjaF90ZWFtKHI6IElfSG9wZUFjdGlvbik6IGJvb2xlYW4geyByZXR1cm4gZmFsc2U7IH1cclxuXHJcblxyXG4vLyDlvZPjgZ/jgorliKTlrprjga7ntZDmnpxcclxuLy8gY2FuTW92ZTogdHJ1ZeOBquOCieenu+WLleWPr+iDveOAgWZhbHNl44Gq44KJ56e75YuV5LiN5Y+vXHJcbmludGVyZmFjZSBfSV9ob3dfY29sbGlkZV90ZWFtX3JzbHQge1xyXG4gICAgY2FuTW92ZTogYm9vbGVhbjsgLy8g56e75YuV5Y+v6IO944GLXHJcbiAgICBkYW1hZ2U6ICBudW1iZXI7ICAgLy8g5Z+65pys44OA44Oh44O844K45YCk77yI5Luu6Kit5a6a77yJXHJcbn1cclxuXHJcblxyXG4vLyDlvZPjgZ/jgorliKTlrprvvIjooZ3nqoHvvIkgIFxyXG4vLyDpgLLooYzmlrnlkJHjgavjgYLjgovlo4HjgoTjgqrjg5bjgrjjgqfjgajjga7ooZ3nqoHliKTlrppcclxuLy8g5oi744KK5YCkIGNhbk1vdmU6dHJ1ZeOBquOCieenu+WLleWPr+OAgWRhbWFnZeOBr+WfuuacrOODgOODoeODvOOCuOmHj1xyXG4vLyDku4rjga/ln7rmnKzjg4Djg6Hjg7zjgrjjgYzjgrzjg63jga7oqK3lrppcclxuZnVuY3Rpb24gX2hvd19jb2xsaWRlX3RlYW0ocjogSV9Ib3BlQWN0aW9uKTogX0lfaG93X2NvbGxpZGVfdGVhbV9yc2x0IHtcclxuICAgIGNvbnN0IGNlbGwgPSBnX21hemUuZ2V0X2NlbGwoci5zdWJqKTtcclxuXHJcbiAgICAvLyDpgLLooYzmlrnlkJHjgYzov7flrq7lpJbjgarjgonnp7vli5XkuI3lj69cclxuICAgIC8vIOmAsuihjOaWueWQkeOBjOWjgeetieOBquOCieenu+WLleS4jeWPr1xyXG4gICAgaWYgKCFnX21hemUud2l0aGluKHIuc3ViaikgfHwgIShjZWxsPy5nZXRPYmooKS5jYW5UaHJvdWdoKCkgPz8gdHJ1ZSkpIHtcclxuICAgICAgICBjb25zdCBkYW1hZ2UgPSBjZWxsPy5nZXRPYmooKS5oaXREYW1hZ2UoKSA/PyAgMTA7XHJcbiAgICAgICAgcmV0dXJuIHtjYW5Nb3ZlOiBmYWxzZSwgZGFtYWdlOiBkYW1hZ2V9OyAvLyDlo4Hjgajjga7ooZ3nqoHjgYLjgopcclxuICAgIH1cclxuICAgIGNvbnN0IG9iaiA9IGdfbWF6ZS5nZXRfb2JqKHIuc3Viaik7XHJcbiAgICBpZiAob2JqICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYgKG9iai5jYW5UaHJvdWdoKCkpIHtcclxuICAgICAgICAgICAgLy8g6YCy6KGM5pa55ZCR44Gr44Kq44OW44K444Kn44GM5Zyo44KL44GM6YCa44KK5oqc44GR5Y+v6IO9XHJcbiAgICAgICAgICAgIHJldHVybiB7Y2FuTW92ZTogdHJ1ZSwgZGFtYWdlOiAwfTsgLy8g44Kq44OW44K444Kn44Go44Gu6KGd56qB44Gq44GXKOmAmuOCiuaKnOOBkeWPr+iDvSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyDpgLLooYzmlrnlkJHjgavjgqrjg5bjgrjjgqfjgYzmnInjgorpgJrjgormipzjgZHkuI3og71cclxuICAgICAgICAgICAgLy8g56e75YuV44Gb44Ga44Gr44Kq44OW44K444Kn5o6l6L+R5Yem55CGKOS7pemZjeOBrumajuauteWHpueQhuetieOBr+OCueODq+ODvClcclxuICAgICAgICAgICAgY29uc3QgZGFtYWdlICAgPSBvYmouaGl0RGFtYWdlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7Y2FuTW92ZTogZmFsc2UsIGRhbWFnZTogZGFtYWdlfTsgLy8g44Kq44OW44K444Kn44Go44Gu6KGd56qB44GC44KKXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4vLyAgICBhbGVydCgn6YCy6KGM5pa55ZCR44Gr44Kq44OW44K444Kn44GM44Gq44GEJyk7XHJcbiAgICByZXR1cm4ge2Nhbk1vdmU6IHRydWUsIGRhbWFnZTogMH07IC8vIOihneeqgeOBquOBlyjpgLLooYzmlrnlkJHjgavpmpzlrrPjgarjgZcpXHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgeyBJX0hvcGVBY3Rpb24sIElfSG9wZVJlc3BvbmNlTW92ZSwgSV9Ib3BlUmVzcG9uY2VUdXJuIH0gZnJvbSBcIi4uL2RfbWRsL0NfSG9wZVwiO1xyXG5pbXBvcnQgeyBDX1duZHJXYWxrZXIsIElfV25kcldhbGtlciB9IGZyb20gXCIuLi9kX21kbC9DX1duZHJXYWxrZXJcIjtcclxuaW1wb3J0IHsgZ19tYXplIH0gZnJvbSBcIi4vZ2xvYmFsX2Zvcl9tYXplXCI7XHJcblxyXG4vLyDlpKfln5/lpInmlbDkvb/nlKhcclxuLy8gZ19tYXplXHJcblxyXG4vLyDnp7vli5XmmYLjga7liKTlrpogICB0cnVlOiDnp7vli5Xlj6/og70gIGZhbHNlOiDnp7vli5XkuI3lj69cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbl9tb3ZlX3duZHIod2FsazogSV9XbmRyV2Fsa2VyLCByOiBJX0hvcGVBY3Rpb24pOiBJX0hvcGVSZXNwb25jZU1vdmUge1xyXG4gICAgY29uc3QgX3RvdWNoID0gX2lzX3RvdWNoX3duZHIocik7ICAvLyDlvZPjgZ/jgorliKTlrprvvIjpmqPmjqXvvIlcclxuICAgIGlmICghX3RvdWNoKSB7XHJcbiAgICAgICAgLy8g6YCy6KGM5pa55ZCR44Gr44GC44KL5aOB44KE44Kq44OW44K444Kn44Go44Gu6KGd56qB5Yik5a6aXHJcbiAgICAgICAgY29uc3QgX2hvd19jb2xsaWRlICA9IF9ob3dfY29sbGlkZV93bmRyKHdhbGssIHIpOyAvLyDmiLvjgorlgKQgY2FuTW92ZTp0cnVl44Gq44KJ56e75YuV5Y+v44CBZGFtYWdl44Gv5Z+65pys44OA44Oh44O844K46YePXHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG9rOiAgX2hvd19jb2xsaWRlLmNhbk1vdmUsICAgLy8g56e75YuV5Y+v5ZCmXHJcbiAgICAgICAgICAgIHJlczogX2hvd19jb2xsaWRlLmNhbk1vdmUgPyAnTW92ZScgOiAnQmxvY2snLCAvLyDooYzli5XntZDmnpxcclxuICAgICAgICAgICAgZG1nOiBfaG93X2NvbGxpZGUuZGFtYWdlLCAvLyDln7rmnKzjg4Djg6Hjg7zjgrjlgKRcclxuICAgICAgICAgICAgaG9wZTogciwgICAgICAgICAgICAgICAgICAgICAvLyDluIzmnJvooYzli5VcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG9rOiAgICAgIGZhbHNlLCAgICAgLy8g56e75YuV5LiN6IO9XHJcbiAgICAgICAgICAgIHJlczogICAgJ0Jsb2NrJywgICAgLy8g6KGM5YuV57WQ5p6cXHJcbiAgICAgICAgICAgIGRtZzogICAgIDAsICAgICAgICAgLy8g5Z+65pys44OA44Oh44O844K45YCkXHJcbiAgICAgICAgICAgIGhvcGU6ICAgIHIsICAgICAgICAgLy8g5biM5pyb6KGM5YuVXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyDlvZPjgZ/jgorliKTlrprvvIjpmqPmjqXvvIkgIHRydWU6IOaOpeinpuOBguOCiiAgZmFsc2U6IOaOpeinpuOBquOBl1xyXG4vLyDjgZPjgZPjgafjga/mjqXop6bjga/jgarjgYToqK3lrppcclxuZnVuY3Rpb24gX2lzX3RvdWNoX3duZHIocjogSV9Ib3BlQWN0aW9uKTogYm9vbGVhbiB7IHJldHVybiBmYWxzZTsgfVxyXG5cclxuXHJcbi8vIOOCv+ODvOODs+aZguOBruWIpOWumiAgdHJ1ZTog44K/44O844Oz5Y+v6IO9ICBmYWxzZTog44K/44O844Oz5LiN5Y+vXHJcbmV4cG9ydCBmdW5jdGlvbiBjYW5fdHVybl93bmRyKHdhbGs6IElfV25kcldhbGtlciwgcjogSV9Ib3BlQWN0aW9uKTogSV9Ib3BlUmVzcG9uY2VUdXJuIHtcclxuICAgIGNvbnN0IF90dXJuID0gX2Nhbl90dXJuX3duZHIocik7XHJcbiAgICBpZiAoX3R1cm4pIHtcclxuICAgICAgICBjb25zdCBfdG91Y2ggPV9pc190b3VjaF93bmRyKHIpOyAgLy8g5b2T44Gf44KK5Yik5a6a77yI6Zqj5o6l77yJXHJcbiAgICAgICAgcmV0dXJuIHtvazogIV90b3VjaCAsIGhvcGU6IHIsIHJlczogX3RvdWNoID8gJ0Jsb2NrJyA6ICdUdXJuJywgZG1nOiAwfTsgLy8g44K/44O844Oz5Y+v6IO9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7b2s6IGZhbHNlLCAgICBob3BlOiByLCByZXM6ICdCbG9jaycsIGRtZzogMH07IC8vIOOCv+ODvOODs+S4jeWPr1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyDjgr/jg7zjg7Plj6/lkKYgIHRydWU65Y+vLCBmYWxzZTrkuI3lj69cclxuZnVuY3Rpb24gX2Nhbl90dXJuX3duZHIocjogSV9Ib3BlQWN0aW9uKTogYm9vbGVhbiB7IHJldHVybiB0cnVlOyB9XHJcblxyXG5cclxuXHJcbi8vIOW9k+OBn+OCiuWIpOWumuOBrue1kOaenFxyXG4vLyBjYW5Nb3ZlOiB0cnVl44Gq44KJ56e75YuV5Y+v6IO944CBZmFsc2Xjgarjgonnp7vli5XkuI3lj69cclxuaW50ZXJmYWNlIF9JX2hvd19jb2xsaWRlX3duZHJfcnNsdCB7XHJcbiAgICBjYW5Nb3ZlOiBib29sZWFuOyAvLyDnp7vli5Xlj6/og73jgYtcclxuICAgIGRhbWFnZTogIG51bWJlcjsgICAvLyDln7rmnKzjg4Djg6Hjg7zjgrjlgKTvvIjku67oqK3lrprvvIlcclxufVxyXG5cclxuLy8g5b2T44Gf44KK5Yik5a6a77yI6KGd56qB77yJICBcclxuLy8g6YCy6KGM5pa55ZCR44Gr44GC44KL5aOB44KE44Kq44OW44K444Kn44Go44Gu6KGd56qB5Yik5a6aXHJcbi8vIOaIu+OCiuWApCBjYW5Nb3ZlOnRydWXjgarjgonnp7vli5Xlj6/jgIFkYW1hZ2Xjga/ln7rmnKzjg4Djg6Hjg7zjgrjph49cclxuLy8g5LuK44Gv5Z+65pys44OA44Oh44O844K444GM44K844Ot44Gu6Kit5a6aXHJcbmZ1bmN0aW9uIF9ob3dfY29sbGlkZV93bmRyKHdhbGs6IElfV25kcldhbGtlciwgcjogSV9Ib3BlQWN0aW9uKTogX0lfaG93X2NvbGxpZGVfd25kcl9yc2x0IHtcclxuICAgIGNvbnN0IGNlbGwgPSBnX21hemUuZ2V0X2NlbGwoci5zdWJqKTtcclxuXHJcbiAgICAvLyDpgLLooYzmlrnlkJHjgYzov7flrq7lpJbjgarjgonnp7vli5XkuI3lj69cclxuICAgIGlmICghZ19tYXplLndpdGhpbihyLnN1YmopKSB7XHJcbiAgICAgICAgY29uc3QgZGFtYWdlID0gNTA7XHJcbiAgICAgICAgcmV0dXJuIHtjYW5Nb3ZlOiBmYWxzZSwgZGFtYWdlOiBkYW1hZ2V9OyAvLyDov7flrq7jga7lpJblo4Hjgajjga7ooZ3nqoHjgYLjgopcclxuICAgIH1cclxuXHJcbiAgICAvLyDoh6rliIboh6rouqvjgYzpgI/pgY7jgr/jgqTjg5fjgarjgonnp7vli5Xlj69cclxuICAgIGlmICh3YWxrLmNhblRocnUoKSkgcmV0dXJuIHtjYW5Nb3ZlOiB0cnVlLCBkYW1hZ2U6IDB9O1xyXG5cclxuICAgIC8vIOS7peS4i+OAgeiHquWIhuiHqui6q+OBjOihneeqgeOCv+OCpOODl+OBruWgtOWQiFxyXG4gICAgLy8g6YCy6KGM5pa55ZCR44GM5aOB562J44Gq44KJ56e75YuV5LiN5Y+vXHJcbiAgICBpZiAoIShjZWxsPy5nZXRPYmooKS5jYW5UaHJvdWdoKCkgPz8gdHJ1ZSkpIHtcclxuICAgICAgICBjb25zdCBkYW1hZ2UgPSBjZWxsPy5nZXRPYmooKS5oaXREYW1hZ2UoKSA/PyAgMTA7XHJcbiAgICAgICAgcmV0dXJuIHtjYW5Nb3ZlOiBmYWxzZSwgZGFtYWdlOiBkYW1hZ2V9OyAvLyDlo4Hjgajjga7ooZ3nqoHjgYLjgopcclxuICAgIH1cclxuXHJcbiAgICAvLyDku6XkuIvjgIHnp7vli5XlhYjjgavjgYLjgovku5bjga7jgqrjg5bjgrjjgqfnvqTjgajjgbbjgaTjgYvjgovloLTlkIjjga/jg4Djg6Hjg7zjgrjjga7ntK/nqY3jgpLoqIjnrpdcclxuICAgIGNvbnN0IG9ianMgPSBnX21hemUuZ2V0X2FueV9vYmooci5zdWJqKTtcclxuXHJcbiAgICBsZXQgZnVsbF9kYW1hZ2UgPSAwO1xyXG4gICAgZm9yIChjb25zdCBvYmplIG9mIG9ianMpIHtcclxuICAgICAgICBpZiAob2JqZSA9PT0gdW5kZWZpbmVkIHx8IG9iamUgPT09IG51bGwpIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmICghb2JqZS5jYW5UaHJvdWdoKCkpIHtcclxuICAgICAgICAgICAgLy8g6YCy6KGM5pa55ZCR44Gr44Kq44OW44K444Kn44GM5pyJ44KK6YCa44KK5oqc44GR5LiN6IO9XHJcbiAgICAgICAgICAgIC8vIOenu+WLleOBm+OBmuOBq+OCquODluOCuOOCp+aOpei/keWHpueQhijku6XpmY3jga7pmo7mrrXlh6bnkIbnrYnjga/jgrnjg6vjg7wpXHJcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxfZGFtYWdlICAgPSBvYmplLmhpdERhbWFnZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7fTsgLy8g6YCP6YGO44GZ44KL44Kq44OW44K444Kn44Gv54Sh5bmy5riJXHJcbiAgICB9XHJcbiAgICAvLyDjgqrjg5bjgrjjgqfjgajjga7ooZ3nqoHliqDnrpfjga7ntZDmnpzjgIHooZ3nqoHjgYLjgorjga7loLTlkIhcclxuICAgIGlmIChmdWxsX2RhbWFnZSA+IDApIHJldHVybiB7Y2FuTW92ZTogZmFsc2UsIGRhbWFnZTogZnVsbF9kYW1hZ2V9O1xyXG5cclxuICAgIC8vIOe1kOWxgOihneeqgeeEoeOBl1xyXG4gICAgcmV0dXJuIHtjYW5Nb3ZlOiB0cnVlLCBkYW1hZ2U6IDB9O1xyXG59XHJcblxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IGdfdmlldzJELCBnX3ZpZXcyTSB9IGZyb20gXCIuL2dsb2JhbF9mb3JfbWF6ZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfbWF6ZTJEKCk6IHZvaWQge1xyXG4gICAgZ192aWV3MkQuaW5pdCh7XHJcbiAgICAgICAgZGl2X2lkOiAgICAnZGl2X21hemVfdncyRCcsIFxyXG4gICAgICAgIGNhbnZhc19pZDogJ21hemVfdmlldzJEX2NhbnZhcycsIFxyXG4gICAgICAgIHhfbWluOiAxNSwgeV9taW46IDE1XHJcbiAgICB9KTtcclxuICAgIGdfdmlldzJNLmluaXQoe1xyXG4gICAgICAgIGRpdl9pZDogICAgJ2Rpdl9tYXplX3Z3Mk0nLCBcclxuICAgICAgICBjYW52YXNfaWQ6ICdtYXplX3ZpZXcyTV9jYW52YXMnLCBcclxuICAgICAgICB4X21pbjogIDUsIHlfbWluOiAgNVxyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheV9tYXplMkQoKTogdm9pZCB7XHJcbiAgICBnX3ZpZXcyRC5kcm93X21hcDJYKCk7XHJcbiAgICBnX3ZpZXcyTS5kcm93X21hcDJYKCk7XHJcblxyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgX21pbiwgX3JvdW5kIH0gICBmcm9tIFwiLi4vZF91dGwvRl9NYXRoXCI7XHJcbmltcG9ydCB7IENfUG9pbnQgfSAgICAgICAgZnJvbSBcIi4uL2RfbWRsL0NfUG9pbnRcIlxyXG5pbXBvcnQgeyBDX1JhbmdlIH0gICAgICAgIGZyb20gXCIuLi9kX21kbC9DX1JhbmdlXCI7XHJcbmltcG9ydCB7IENfTWF6ZU9ialZpZXcgfSAgZnJvbSBcIi4uL2RfbWRsL0NfTWF6ZU9ialZpZXdcIjtcclxuaW1wb3J0IHsgVF9EaXJlY3Rpb24gfSAgICBmcm9tIFwiLi4vZF9tZGwvVF9EaXJlY3Rpb25cIjtcclxuaW1wb3J0IHsgQ19XYWxsIH0gICAgICAgICBmcm9tIFwiLi4vZF9tZGwvQ19XYWxsXCI7XHJcbmltcG9ydCB7IGdfbWVzIH0gICAgICAgICAgZnJvbSBcIi4uL2RfY21uL2dsb2JhbFwiO1xyXG5pbXBvcnQgeyBnX21hemUsIGdfdGVhbSwgZ19kcyB9ICBmcm9tIFwiLi9nbG9iYWxfZm9yX21hemVcIjtcclxuXHJcbmV4cG9ydCB0eXBlIFRfRHJvd1NldCA9IHtcclxuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnR8bnVsbCxcclxuICAgIGNvbjogICAgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfG51bGwsXHJcbiAgICBkZXB0aDogIG51bWJlcixcclxuICAgIHdhbGw6ICAgQ19XYWxsfG51bGwsXHJcbn1cclxuXHJcblxyXG4vLyAzROaPj+WGmeaZguOBq+S9v+eUqOOBmeOCi+Wkp+Wfn+WkieaVsOOBrua6luWCmVxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9tYXplM0QoKTogVF9Ecm93U2V0IHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXplX3ZpZXczRF9jYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIGlmIChjYW52YXMgPT09IG51bGwpIHtcclxuICAgICAgICBnX21lcy53YXJuaW5nX21lc3NhZ2UoJ0NhbnZhcyBpc250IGZvdW5kISBpZD1NYXplX3ZpZXczRF9jYW52YXMnKTtcclxuICAgICAgICByZXR1cm4ge2NhbnZhczogbnVsbCwgY29uOiBudWxsLCBkZXB0aDogMCwgd2FsbDogbnVsbH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBjb246IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRHxudWxsID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBpZiAoY29uID09PSBudWxsKSB7XHJcbiAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKCdCcm93c2VyIGRvbnQgc3VycHBvcnQgMkQgZ3JhcGhpY3MhJyk7XHJcbiAgICAgICAgcmV0dXJuIHtjYW52YXM6IG51bGwsIGNvbjogbnVsbCwgZGVwdGg6IDAsIHdhbGw6IG51bGx9O1xyXG4gICAgfVxyXG5cclxuICAgIENfTWF6ZU9ialZpZXcuc2V0X2NvbnRleHQzRChjb24pO1xyXG4gICAgaW5pdF9tYXplQ2VsbDNEKCk7XHJcblxyXG4gICAgLy8gM0Tjg6HjgqTjgrrjgpLmj4/lhpnjgZnjgovjgq3jg6Pjg7Pjg5DjgrnopoHntKDjga7jgrXjgqTjgrrjgpJDU1PkuIrjga7jgI7opovjgZ/nm67jgI/jga7jgrXjgqTjgrrjgavlkIjjgo/jgZvjgotcclxuICAgIGNhbnZhcy53aWR0aCAgPSBjYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcclxuXHJcbiAgICBjb25zdCBkZXB0aCA9IDU7IC8vIOWlh+aVsOOBruOBv+WvvuW/nOOAguODgOODs+OCuOODp+ODs+OBruimi+mAmuOBl+OCkuiJr+OBj+OBmeOCi+OBquOCiSA1IOOBi+OCguOBl+OCjOOBquOBhFxyXG5cclxuICAgIGNvbnN0IHRvcF9wID0gbmV3IENfUG9pbnQoMCwgMCwgMCk7XHJcbiAgICBjb25zdCBidG1fcCA9IG5ldyBDX1BvaW50KGNhbnZhcy53aWR0aCAgLSAxLCBjYW52YXMuaGVpZ2h0IC0gMSwgMCk7XHJcbiAgICBjb25zdCB3YWxsICA9IG5ldyBDX1dhbGwoZGVwdGgsIG5ldyBDX1JhbmdlKHRvcF9wLCBidG1fcCkpO1xyXG4gICAgcmV0dXJuIHtjYW52YXM6IGNhbnZhcywgY29uOiBjb24sIGRlcHRoOiBkZXB0aCwgd2FsbDogd2FsbH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRfbWF6ZUNlbGwzRCgpOiB2b2lkIHt9XHJcblxyXG5cclxuLy8gM0Tmj4/lhpnmmYLjga7nlLvpnaLliJ3mnJ/ljJbjgILjgajjgorjgYLjgYjjgZrlpKnkupXjgajluorjgpLmj4/jgY9cclxuZnVuY3Rpb24gZHJhd19pbml0X21hemUzRCgpOiB2b2lkIHtcclxuICAgIGlmIChnX2RzLmNhbnZhcyA9PT0gbnVsbCB8fCBnX2RzLmNvbiA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGdfZHMuY29uLmZpbGxTdHlsZSA9ICcjYWFhYWFhJztcclxuICAgIGdfZHMuY29uLmZpbGxSZWN0KFxyXG4gICAgICAgIDAsIFxyXG4gICAgICAgIDAsIFxyXG4gICAgICAgIGdfZHMuY2FudmFzLndpZHRoIC0gMSwgXHJcbiAgICAgICAgZ2V0X2hvbGl6b25fbGluZSgpLFxyXG4gICAgKTtcclxuXHJcbiAgICBnX2RzLmNvbi5maWxsU3R5bGUgPSAnIzY2NjZmZic7XHJcbiAgICBnX2RzLmNvbi5maWxsUmVjdChcclxuICAgICAgICAwLCBcclxuICAgICAgICBnZXRfaG9saXpvbl9saW5lKCksIFxyXG4gICAgICAgIGdfZHMuY2FudmFzLndpZHRoICAgLSAxLCBcclxuICAgICAgICBnX2RzLmNhbnZhcy5oZWlnaHQgIC0gMSxcclxuICAgICk7XHJcblxyXG4gICAgZHJvd19mbG9vcl9saW5lKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldF9ob2xpem9uX2xpbmUoKTogbnVtYmVyIHtcclxuICAgIGlmIChnX2RzLndhbGwgPT09IG51bGwpIHJldHVybiAtMTtcclxuICAgIHJldHVybiBnX2RzLndhbGwuZ2V0KGdfZHMuZGVwdGgsIDApLm1heF95O1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcm93X2Zsb29yX2xpbmUoKTogdm9pZCB7XHJcbiAgICBpZiAoZ19kcy5jYW52YXMgPT09IG51bGwgfHwgZ19kcy5jb24gPT09IG51bGwgfHwgZ19kcy53YWxsID09PSBudWxsKSByZXR1cm47XHJcbiAgICBjb25zdCBjb24gICA9IGdfZHMuY29uO1xyXG4gICAgY29uc3Qgd2FsbCAgPSBnX2RzLndhbGw7XHJcbiAgICBjb25zdCBkZXB0aCA9IGdfZHMuZGVwdGg7XHJcbiAgICBjb25zdCBIX2RlcHQgPSAoZGVwdGggLSAxKSAvIDI7XHJcblxyXG4gICAgY29uc3QgbGVmdF94ICA9IDA7XHJcbiAgICBjb25zdCByaWdodF94ID0gZ19kcy5jYW52YXMud2lkdGggIC0gMTtcclxuICAgIGNvbnN0IGZyb250X3kgPSBnX2RzLmNhbnZhcy5oZWlnaHQgLSAxO1xyXG4gICAgY29uc3QgYmFja195ICA9IGdldF9ob2xpem9uX2xpbmUoKTtcclxuXHJcbiAgICBjb24uc3Ryb2tlU3R5bGUgPSAnIzk5OTlmZic7XHJcbiAgICBjb24ubGluZVdpZHRoICAgPSAxO1xyXG5cclxuICAgIC8vIOaoque3mijnlLvpnaLjgavlr77jgZfjgabmsLTlubMp44KS5byV44GPXHJcbiAgICBmb3IgKHZhciB5ID0gMDsgeSA8IGRlcHRoICsgMTsgeSsrKSB7XHJcbiAgICAgICAgY29uLmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbi5tb3ZlVG8obGVmdF94ICwgd2FsbC5nZXQoeSwgMCkubWF4X3kpO1xyXG4gICAgICAgIGNvbi5saW5lVG8ocmlnaHRfeCwgd2FsbC5nZXQoeSwgMCkubWF4X3kpO1xyXG4gICAgICAgIGNvbi5zdHJva2UoKTsgXHJcbiAgICB9XHJcblxyXG4gICAgLy8g57im57ea44KS5byV44GPXHJcbiAgICBmb3IgKHZhciB4ID0gLUhfZGVwdDsgeCA8IEhfZGVwdCArIDE7IHgrKykge1xyXG4gICAgICAgIGNvbi5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb24ubW92ZVRvKHdhbGwuZ2V0KDAsICAgICB4KS5taW5feCwgZnJvbnRfeSk7XHJcbiAgICAgICAgY29uLmxpbmVUbyh3YWxsLmdldChkZXB0aCwgeCkubWluX3gsIGJhY2tfeSApO1xyXG4gICAgICAgIGNvbi5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlfbWF6ZTNEKCk6IHZvaWQge1xyXG4gICAgaWYgKGdfZHMuY2FudmFzID09PSBudWxsIHx8IGdfZHMuY29uID09PSBudWxsIHx8IGdfZHMud2FsbCA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGRyYXdfaW5pdF9tYXplM0QoKTtcclxuICAgIGRpc3BsZXlfbWFzZTNEX2RpcmVjdGlvbigpO1xyXG5cclxuICAgIGNvbnN0IGRlcHRoICAgPSAgZ19kcy5kZXB0aDtcclxuICAgIGNvbnN0IEhfZGVwdGggPSAoZGVwdGggLSAxKSAvIDI7XHJcbiAgICBmb3IgKHZhciBqID0gZ19kcy5kZXB0aCAtIDE7IGogPj0gMDsgai0tKSB7XHJcbiAgICAgICAgLy8g5Y+z5YG044GM6KaL44GI44Gm44GE44KL5aOB44Gu5o+P5YaZICjlt6blgbTjgYvjgonmj4/lhpkpXHJcbiAgICAgICAgZm9yICh2YXIgayA9IC1IX2RlcHRoOyBrIDwgMDsgaysrKSBkcm93TWF6ZUNlbGwoaiwgayk7XHJcbiAgICAgICAgLy8g5bem5YG044GM6KaL44GI44Gm44GE44KL5aOB44Gu5o+P5YaZICjlj7PlgbTjgYvjgonmj4/lhpkpXHJcbiAgICAgICAgZm9yICh2YXIgayA9IEhfZGVwdGg7IGsgPiAwOyBrLS0pICBkcm93TWF6ZUNlbGwoaiwgayk7XHJcbiAgICAgICAgLy8g5q2j6Z2i44Gu5aOB44Gu5o+P5YaZXHJcbiAgICAgICAgZHJvd01hemVDZWxsKGosIDApO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcm93TWF6ZUNlbGwoZDogbnVtYmVyLCB3OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmIChnX2RzLndhbGwgPT09IG51bGwpIHJldHVybjtcclxuICAgIGNvbnN0IGFyb3VuZF9qX2sgPSBnX3RlYW0uZ2V0V2Fsa2VyKCkuZ2V0X2Fyb3VuZChkLCB3LCAwKTtcclxuICAgIGNvbnN0IGZyb3Rfd2FsbCAgPSBnX2RzLndhbGwuZ2V0KGQsIHcpO1xyXG4gICAgY29uc3QgYmFja193YWxsICA9IGdfZHMud2FsbC5nZXQoZCArIDEsIHcpO1xyXG4gICAgY29uc3QgbXpfa2luZCAgICA9IGdfbWF6ZS5nZXRfa2luZChhcm91bmRfal9rKTtcclxuXHJcbiAgICBnX21hemU/LmdldF9jZWxsKGFyb3VuZF9qX2spPy5kcm93M0QoZnJvdF93YWxsLCBiYWNrX3dhbGwpO1xyXG4gICAgaWYgKGdfbWF6ZS5leGlzdF9vYmooYXJvdW5kX2pfaykpIHtcclxuICAgICAgICBjb25zdCBvYmogPSBnX21hemUuZ2V0X29iaihhcm91bmRfal9rKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAob2JqICE9PSBudWxsKSBvYmoudmlldygpPy5kcm93M0QoXHJcbiAgICAgICAgICAgIGZyb3Rfd2FsbCwgYmFja193YWxsLCBcclxuICAgICAgICAgICAgb2JqPy5nZXRfcGQoKS5kID8/IFRfRGlyZWN0aW9uLk4sIFxyXG4gICAgICAgICAgICBnX3RlYW0uZ2V0V2Fsa2VyKCkuZ2V0X2QoKSA/PyBUX0RpcmVjdGlvbi5OXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsZXlfbWFzZTNEX2RpcmVjdGlvbigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHBfZGlyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hemVfdmlldzNEX2RpcmVjdGlvbl9pbmZvJykgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XHJcbiAgICBpZiAocF9kaXIgPT09IG51bGwpIHtcclxuICAgICAgICBnX21lcy53YXJuaW5nX21lc3NhZ2UoJ1AgZWxlbWVudCBpc250IGZvdW5kISBpZD1NYXplX3ZpZXczRF9kaXJlY3Rpb25faW5mbycpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBkaXJlY3Rpb246IHN0cmluZztcclxuICAgIGNvbnN0IHAgPSBnX3RlYW0uZ2V0X3BkKCk7XHJcbiAgICBzd2l0Y2ggKHAuZCkge1xyXG4gICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjpcclxuICAgICAgICAgICAgZGlyZWN0aW9uID0gJzxzcGFuIGNsYXNzPVwiZGlyZWN0aW9uX05cIj7jgIrljJfjgIs8L3NwYW4+JztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5FOlxyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSAnPHNwYW4gY2xhc3M9XCJkaXJlY3Rpb25fRVwiPuOAiuadseOAizwvc3Bhbj4nO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlM6XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9ICc8c3BhbiBjbGFzcz1cImRpcmVjdGlvbl9TXCI+44CK5Y2X44CLPC9zcGFuPic7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uVzpcclxuICAgICAgICAgICAgZGlyZWN0aW9uID0gJzxzcGFuIGNsYXNzPVwiZGlyZWN0aW9uX1dcIj7jgIropb/jgIs8L3NwYW4+JztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgZGlyZWN0aW9uID0gJzxzcGFuIGNsYXNzPVwiZGlyZWN0aW9uX0RcIj7jgIrorI7jgIs8L3NwYW4+JztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWVzID0gJ+WcsOS4iyAnICsgKHAueiArIDEpICsgJ+majuOAgCcgKyBkaXJlY3Rpb24gKyAn44CAKHggPSA8c3BhbiBpZD1cImRpcmVjdGlvbl9YXCI+JyArIHAueCArICc8L3NwYW4+LCB5ID0gPHNwYW4gaWQ9XCJkaXJlY3Rpb25fWVwiPicgKyBwLnkgKyAnPC9zcGFuPiknO1xyXG4gICAgcF9kaXIuaW5uZXJIVE1MID0gbWVzO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1hemUzRF9ibGlua19vbl9kaXJlY3Rpb24oKTogdm9pZCB7XHJcbiAgICBjb25zdCBkaXJfeCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXJlY3Rpb25fWCcpIGFzIEhUTUxTcGFuRWxlbWVudDtcclxuICAgIGlmIChkaXJfeCA9PT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGRpcl95ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpcmVjdGlvbl9ZJykgYXMgSFRNTFNwYW5FbGVtZW50O1xyXG4gICAgaWYgKGRpcl95ID09PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgc3dpdGNoIChnX3RlYW0uZ2V0V2Fsa2VyKCkuZ2V0X2QoKSkge1xyXG4gICAgICAgIGNhc2UgVF9EaXJlY3Rpb24uTjpcclxuICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLlM6XHJcbiAgICAgICAgICAgIGRpcl94LmNsYXNzTGlzdC5yZW1vdmUoJ2JsaW5rJyk7XHJcbiAgICAgICAgICAgIGRpcl95LmNsYXNzTGlzdC5hZGQgICAoJ2JsaW5rJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjYXNlIFRfRGlyZWN0aW9uLkU6XHJcbiAgICAgICAgY2FzZSBUX0RpcmVjdGlvbi5XOlxyXG4gICAgICAgICAgICBkaXJfeC5jbGFzc0xpc3QuYWRkICAgKCdibGluaycpO1xyXG4gICAgICAgICAgICBkaXJfeS5jbGFzc0xpc3QucmVtb3ZlKCdibGluaycpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG1hemUzRF9ibGlua19vZmZfZGlyZWN0aW9uKCk6IHZvaWQge1xyXG4gICAgY29uc3QgZGlyX3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlyZWN0aW9uX1gnKSBhcyBIVE1MU3BhbkVsZW1lbnQ7XHJcbiAgICBpZiAoZGlyX3ggPT09IG51bGwpIHJldHVybjtcclxuICAgIGRpcl94LmNsYXNzTGlzdC5yZW1vdmUoJ2JsaW5rJyk7XHJcblxyXG4gICAgY29uc3QgZGlyX3kgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlyZWN0aW9uX1knKSBhcyBIVE1MU3BhbkVsZW1lbnQ7XHJcbiAgICBpZiAoZGlyX3kgPT09IG51bGwpIHJldHVybjtcclxuICAgIGRpcl95LmNsYXNzTGlzdC5yZW1vdmUoJ2JsaW5rJyk7XHJcbn1cclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHsgZ19kZWJ1ZywgZ19tZXMgfSBmcm9tIFwiLi4vZF9jbW4vZ2xvYmFsXCI7XHJcbmltcG9ydCB7IF9taW4sIF9yb3VuZCwgX21heCB9IGZyb20gJy4uL2RfdXRsL0ZfTWF0aCc7XHJcbmltcG9ydCB7IGdfbWF6ZSwgZ190ZWFtIH0gZnJvbSBcIi4vZ2xvYmFsX2Zvcl9tYXplXCI7XHJcblxyXG5sZXQgZGl2OiBIVE1MRGl2RWxlbWVudDtcclxubGV0IHByZTogSFRNTFByZUVsZW1lbnQ7XHJcblxyXG5sZXQgdmlld193ZHRoICAgICAgICA9IDA7XHJcbmxldCB2aWV3X2hnaHQgICAgICAgID0gMDtcclxubGV0IG1hcF93ZHRoICAgICAgICAgPSAwO1xyXG5sZXQgbWFwX2hnaHQgICAgICAgICA9IDA7XHJcbmxldCBmb250X3NpemU6bnVtYmVyID0gMDtcclxubGV0IGxpbmVfaGdodDpudW1iZXIgPSAwO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfbWF6ZUNoKCk6IHZvaWQge1xyXG4gICAgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rpdl9tYXplX3Z3Q2gnKSAgIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgcHJlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hemVfdmlld0NoX3ByZScpIGFzIEhUTUxQcmVFbGVtZW50O1xyXG4gICAgY2FsY192aWV3Q2hfd2lkdGgoKTtcclxufVxyXG5cclxuLy8g44CQ5Yid5pyf6Kit5a6a44CRVmlld0No44Gu5qiq5bmF44KSQ1NT44GL44KJ6Kqt44G/6L6844KT44Gn6YGp5ZCI44GZ44KL5paH5a2X44Gu44K144Kk44K644KS6KiI566X44GX44Gm44K744OD44OI44GZ44KLXHJcbmZ1bmN0aW9uIGNhbGNfdmlld0NoX3dpZHRoKCk6IHZvaWQge1xyXG5cclxuICAgIHZpZXdfd2R0aCAgPSBkaXYuY2xpZW50V2lkdGg7XHJcbiAgICB2aWV3X2hnaHQgID0gZGl2LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICBjb25zdCBjb2wgICAgPSBnX21hemUuZ2V0X3hfbWF4KCkgKyAxO1xyXG4gICAgY29uc3QgY29sX3B4ID0gcHJlLmNsaWVudFdpZHRoICAvIGNvbDtcclxuXHJcbiAgICBjb25zdCByb3cgICAgPSBnX21hemUuZ2V0X3lfbWF4KCkgKyAxO1xyXG4gICAgY29uc3Qgcm93X3B4ID0gcHJlLmNsaWVudEhlaWdodCAvIHJvdztcclxuXHJcbiAgICBmb250X3NpemUgICA9IF9yb3VuZChfbWF4KFsxNS4wLCBfcm91bmQoMS4wMCAqICBfbWluKFtjb2xfcHgsIHJvd19weF0pLCAyKV0pLCAwKTtcclxuICAgIGxpbmVfaGdodCAgID0gX3JvdW5kKF9tYXgoWzE1LjAsIF9yb3VuZCgxLjAwICogIF9taW4oW2NvbF9weCwgcm93X3B4XSksIDIpXSksIDApO1xyXG5cclxuICAgIG1hcF93ZHRoICAgID0gZm9udF9zaXplICogY29sO1xyXG4gICAgbWFwX2hnaHQgICAgPSBsaW5lX2hnaHQgKiBjb2w7XHJcblxyXG5cclxuXHJcbiAgICBpZiAobWFwX3dkdGggICA8IHZpZXdfd2R0aCkge1xyXG4gICAgICAgIG1hcF93ZHRoICAgPSB2aWV3X3dkdGg7XHJcbiAgICAgICAgZm9udF9zaXplICA9IF9yb3VuZCh2aWV3X3dkdGggLyBjb2wsIDApO1xyXG4gICAgfVxyXG4gICAgaWYgKG1hcF9oZ2h0ICAgPCB2aWV3X2hnaHQpIHtcclxuICAgICAgICBtYXBfaGdodCAgID0gdmlld19oZ2h0O1xyXG4gICAgICAgIGxpbmVfaGdodCAgPSBfcm91bmQodmlld19oZ2h0IC8gcm93LCAwKTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHByZS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgIG1hcF93ZHRoLnRvU3RyaW5nKCkpO1xyXG4gICAgcHJlLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgbWFwX2hnaHQudG9TdHJpbmcoKSk7XHJcbiAgICBwcmUuc3R5bGUuc2V0UHJvcGVydHkoJ2ZvbnQtc2l6ZScsICBgJHtmb250X3NpemV9cHhgKTtcclxuICAgIHByZS5zdHlsZS5zZXRQcm9wZXJ0eSgnbGluZS1oZWlnaHQnLGAke2xpbmVfaGdodH1weGApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjX3ZpZXdDaF90b3AoKTogdm9pZCB7XHJcbiAgICBjYWxjX3ZpZXdDaF93aWR0aCgpO1xyXG5cclxuICAgIHZpZXdfd2R0aCAgPSBkaXYuY2xpZW50V2lkdGg7XHJcbiAgICB2aWV3X2hnaHQgID0gZGl2LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICBjb25zdCBwZCA9IGdfdGVhbS5nZXRfcGQoKTtcclxuXHJcbiAgICBsZXQgdG9wX3ggPSAgdmlld193ZHRoIC8gMiAtIChwZC54ICsgMCkgKiBmb250X3NpemU7XHJcbiAgICBpZiAodG9wX3ggPiAwKSB0b3BfeCA9IDA7IC8vIOW3puerr+WItumZkFxyXG4gICAgaWYgKHRvcF94IDwgdmlld193ZHRoIC0gbWFwX3dkdGgpIHRvcF94ID0gdmlld193ZHRoIC0gbWFwX3dkdGg7IC8vIOWPs+err+WItumZkFxyXG5cclxuICAgIGxldCB0b3BfeSA9ICB2aWV3X2hnaHQgLyAyIC0gKHBkLnkgKyAwKSAqIGxpbmVfaGdodDtcclxuICAgIGlmICh0b3BfeSA+IDApIHRvcF95ID0gMDsgLy8g5LiK56uv5Yi26ZmQXHJcbiAgICBpZiAodG9wX3kgPCB2aWV3X2hnaHQgLSBtYXBfaGdodCkgdG9wX3kgPSB2aWV3X2hnaHQgLSBtYXBfaGdodDsgLy8g5LiL56uv5Yi26ZmQXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydChgVmlld0NoOiAke3ZpZXdfd2R0aH14JHt2aWV3X2hnaHR9IHB4LCBtYXA6ICR7bWFwX3dkdGh9eCR7bWFwX2hnaHR9IHB4YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydChgdG9wX3g6ICR7dG9wX3h9LCB0b3BfeTogJHt0b3BfeX1gKTtcclxuXHJcbiAgICBwcmUuc3R5bGUuc2V0UHJvcGVydHkoJ2xlZnQnLCAgICAgIGAke3RvcF94fXB4YCk7XHJcbiAgICBwcmUuc3R5bGUuc2V0UHJvcGVydHkoJ3RvcCcsICAgICAgIGAke3RvcF95fXB4YCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5X21hemVDaCgpOiB2b2lkIHsgXHJcbiAgICBpZiAocHJlICE9PSBudWxsKSB7cHJlLmlubmVyVGV4dCA9IHRvX3N0cmluZygpO2NhbGNfdmlld0NoX3RvcCgpfVxyXG4gICAgZWxzZSBnX21lcy53YXJuaW5nX21lc3NhZ2UoJ0NhbiBub3QgZm91bmQgcHJlI01hemVfdmlld0NoX3ByZSEhJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvX3N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgY29uc3Qgc2l6ZV94ID0gZ19tYXplLmdldF94X21heCgpO1xyXG4gICAgY29uc3Qgc2l6ZV95ID0gZ19tYXplLmdldF95X21heCgpO1xyXG4gICAgY29uc3QgZmxvb3IgID0gZ190ZWFtLmdldF9wZCgpLnpcclxuXHJcbiAgICBsZXQgcmV0X3N0ciA9ICcnO1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBzaXplX3k7IHkrKykge1xyXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgc2l6ZV94OyB4KyspIHtcclxuICAgICAgICAgICAgaWYgKCFnX2RlYnVnLmlzT04oKSAmJiBnX21hemUuaXNfbWFza2VkX3h5eih4LCB5LCBmbG9vcikpIHtcclxuICAgICAgICAgICAgICAgIHJldF9zdHIgKz0gJ++8uCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSBnX21hemUuZ2V0X29ial94eXooeCwgeSwgZmxvb3IpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmoudmlldygpID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXRfc3RyICs9IGdfbWF6ZS5nZXRfY2VsbF94eXooeCwgeSwgZmxvb3IpPy50b19sZXR0ZXIoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqX2MgPSBvYmoudmlldygpPy5sZXR0ZXIob2JqPy5nZXRfcGQoKS5kPz8wKSA/PyAn6KyOJztcclxuICAgICAgICAgICAgICAgICAgICByZXRfc3RyICs9IG9ial9jO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldF9zdHIgKz0gXCJcXG5cIjtcclxuICAgIH1cclxuICAgIHJldHVybiByZXRfc3RyO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBDX1VybE9wdCB9ICAgICAgICAgICAgICAgICAgIGZyb20gXCIuLi9kX3V0bC9DX1VybE9wdFwiO1xyXG5pbXBvcnQgeyBVRF9zYXZlLCB0bXBfc2F2ZSB9ICAgICAgICAgIGZyb20gXCIuLi9kX2Ntbi9GX2xvYWRfYW5kX3NhdmVcIjtcclxuaW1wb3J0IHsgUE9TVF9hbmRfbW92ZV9wYWdlIH0gICAgICAgICBmcm9tIFwiLi4vZF9jbW4vRl9QT1NUXCI7XHJcbmltcG9ydCB7IGdfc3RhcnRfZW52LCBnX3VybCwgZ191cmxfbWFpX2d1bGQgfSBmcm9tIFwiLi4vZF9jbW4vZ2xvYmFsXCI7XHJcblxyXG5pbXBvcnQgeyBzZXRfZ19zYXZlIH0gZnJvbSBcIi4vRl9zZXRfc2F2ZV9tb2RlXCI7XHJcbmltcG9ydCB7IGFjdF9tb3ZlX21vZGUsIGRvX21vdmVfYm90dG9tX2hhbGYgfSBmcm9tIFwiLi9GX3NldF9tb3ZlX21vZGVcIjtcclxuaW1wb3J0IHsgXHJcbiAgICBnX212bSwgXHJcbiAgICBnX21hemUsIFxyXG4gICAgZ190ZWFtLFxyXG4gICAgZ19jdGxzLFxyXG4gICAgZ192c3csXHJcbiAgICBnX2RzLCBcclxufSAgIGZyb20gXCIuL2dsb2JhbF9mb3JfbWF6ZVwiO1xyXG5cclxuXHJcbnZhciBjYW5VcDogYm9vbGVhbiAgPSAgZmFsc2U7XHJcbnZhciBjYW5EbjogYm9vbGVhbiAgPSAgZmFsc2U7XHJcblxyXG52YXIgaXNVcDogIGJvb2xlYW4gID0gIGZhbHNlO1xyXG5cclxuY29uc3QgY3Rsc191cGRuX3VwID0ge1xyXG4gICAgbmFtZTogJ3VwZG5fdXAnLCBcclxuLy8gICAgZG9fVTogIGRvX3VwLFxyXG4gICAgaXNPSzogIGRvX3VwLFxyXG4gICAgaXNORzogIGRvX2NhbmNlbCxcclxufVxyXG5jb25zdCBjdGxzX3VwZG5fZG4gPSB7XHJcbiAgICBuYW1lOiAndXBkbl9kbicsIFxyXG4vLyAgICBkb19EOiAgZG9fZG93bixcclxuICAgIGlzT0s6ICBkb19kb3duLFxyXG4gICAgaXNORzogIGRvX2NhbmNlbCxcclxufVxyXG5jb25zdCBjdGxzX3VwZG5fdWRfaHB1cCA9IHtcclxuICAgIG5hbWU6ICd1cGRuX3VkX2hwdXAnLCBcclxuLy8gICAgZG9fVTogIGhvcGVfVXAsXHJcbi8vICAgIGlzT0s6ICBkb19VRCxcclxuICAgIGRvX1U6ICBkb191cCxcclxuICAgIGRvX0Q6ICBkb19kb3duLFxyXG4gICAgaXNORzogIGRvX2NhbmNlbCxcclxufVxyXG5jb25zdCBjdGxzX3VwZG5fdWRfaHBkbiA9IHtcclxuICAgIG5hbWU6ICd1cGRuX3VkX2hwZG4nLCBcclxuLy8gICAgZG9fRDogIGhvcGVfRG93bixcclxuLy8gICAgaXNPSzogIGRvX1VELFxyXG4gICAgZG9fVTogIGRvX3VwLFxyXG4gICAgZG9fRDogIGRvX2Rvd24sXHJcbiAgICBpc05HOiAgZG9fY2FuY2VsLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9VRF9tb2RlKCk6IHZvaWQge1xyXG4gICAgZ19jdGxzLnNldChjdGxzX3VwZG5fdXApO1xyXG4gICAgZ19jdGxzLnNldChjdGxzX3VwZG5fZG4pO1xyXG4gICAgZ19jdGxzLnNldChjdGxzX3VwZG5fdWRfaHB1cCk7XHJcbiAgICBnX2N0bHMuc2V0KGN0bHNfdXBkbl91ZF9ocGRuKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjdF9VcF9tb2RlKCk6IHZvaWQge1xyXG4gICAgaWYgKGdfdGVhbS5nZXRXYWxrZXIoKS5nZXRfeigpID4gMCkge1xyXG4gICAgICAgIGdfbXZtLm5vdGljZV9tZXNzYWdlKCfkuIrjgorjg4bjg6zjg53jg7zjgr/jg7zjgYzmnInjgorjgb7jgZnjgILnmbvjgorjgb7jgZnjgYvvvJ/nmbvjgosg4oeSIOOAhyDnmbvjgonjgarjgYQg4oeSIOKclicpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBnX212bS5ub3RpY2VfbWVzc2FnZSgn6KGX44Gr5oi744KK44G+44GZ44GL77yf5oi744KLIOKHkiDjgIcg5oi744KJ44Gq44GEIOKHkiDinJYnKTtcclxuICAgIH1cclxuXHJcbiAgICBjYW5VcCA9IHRydWU7XHJcbiAgICBjYW5EbiA9IGZhbHNlO1xyXG4gICAgZ19jdGxzLmFjdChjdGxzX3VwZG5fdXApO1xyXG4gICAgZ192c3cudmlldyhnX3Zzdy5Nb3ZlKCkpO1xyXG4gICAgc2V0Q2FudmFzM0RDbGljaygpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY3RfRG5fbW9kZSgpOiB2b2lkIHtcclxuICAgIGlmIChnX3RlYW0uZ2V0V2Fsa2VyKCkuZ2V0X3ooKSA8IGdfbWF6ZS5nZXRfel9tYXgoKSAtIDEpIHtcclxuICAgICAgICBnX212bS5ub3RpY2VfbWVzc2FnZSgn5LiL44KK44OG44Os44Od44O844K/44O844GM5pyJ44KK44G+44GZ44CC6ZmN44KK44G+44GZ44GL77yf6ZmN44KK44KLIOKHkiDjgIcg6ZmN44KK44Gq44GEIOKHkiDinJYnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZ19tdm0ubm90aWNlX21lc3NhZ2UoJ+i/t+WuruaOoue0ouOCkue1guS6huOBl+OBvuOBmeOBi++8n++8iOihl+OBq+aIu+OCiuOBvuOBme+8ieaIu+OCiyDih5Ig44CHIOaIu+OCieOBquOBhCDih5Ig4pyWJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuVXAgPSBmYWxzZTtcclxuICAgIGNhbkRuID0gdHJ1ZTtcclxuICAgIGdfY3Rscy5hY3QoY3Rsc191cGRuX2RuKTtcclxuICAgIGdfdnN3LnZpZXcoZ192c3cuTW92ZSgpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjdF9VRF9tb2RlKCk6IHZvaWQge1xyXG4gICAgZ19tdm0ubm90aWNlX21lc3NhZ2UoJ+S4iuS4i+ODhuODrOODneODvOOCv+ODvOOBjOacieOCiuOBvuOBmeOAgueZu+OCiuOBvuOBmeOBi++8n+eZu+OCi+KHkiDjgIcg6ZmN44KK44KLIOKHkiAo4oaT44Kt44O8KSDnp7vli5XjgZfjgarjgYQg4oeSIOKclicpO1xyXG5cclxuICAgIGNhblVwID0gdHJ1ZTtcclxuICAgIGNhbkRuID0gdHJ1ZTtcclxuICAgIGlmICghaXNVcCkgIGdfY3Rscy5hY3QoY3Rsc191cGRuX3VkX2hwdXApO1xyXG4gICAgZWxzZSAgICAgICAgZ19jdGxzLmFjdChjdGxzX3VwZG5fdWRfaHBkbik7XHJcbiAgICBnX3Zzdy52aWV3KGdfdnN3Lk1vdmUoKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvX2NhbmNlbCgpOiB2b2lkIHtcclxuICAgIGdfbXZtLmNsZWFyX21lc3NhZ2UoKTtcclxuICAgIGFjdF9tb3ZlX21vZGUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9fdXAoKTogdm9pZCB7XHJcbiAgICBjb25zdCByc2x0ID0gZ190ZWFtLmdldFdhbGtlcigpLmhvcGVfcF91cCgpO1xyXG5cclxuICAgIC8v44CA5LiK44KK6ZqO5q6144GM5Zyw5LiL5LiA6ZqO44Gu5aC05ZCI44Gv44K744O844OW44GX44Gm44GL44KJ6KGXKOWGkumZuuiAheOCruODq+ODiSnjgbjnp7vli5XjgZnjgotcclxuICAgIGlmIChyc2x0Lmhhc19ob3BlICYmIHJzbHQuc3Viai56IDwgMCkge1xyXG4gICAgICAgIGRvX1VEX3NhdmUoKS50aGVuKGFzeW5jICgpPT57XHJcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0bXBfc2F2ZSgpO1xyXG4gICAgICAgIH0pLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgY29uc3Qgb3B0ID0gbmV3IENfVXJsT3B0KCk7XHJcbiAgICAgICAgICAgIG9wdC5zZXQoJ21vZGUnLCAnbG9hZCcpO1xyXG4gICAgICAgICAgICBvcHQuc2V0KCdwaWQnLCAgIGdfc3RhcnRfZW52LnBpZCk7XHJcbiAgICAgICAgICAgIG9wdC5zZXQoJ29wdCcsICAgMTAwKTtcclxuICAgICAgICAgICAgUE9TVF9hbmRfbW92ZV9wYWdlKGdfdXJsW2dfdXJsX21haV9ndWxkXSwgb3B0KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyDkuIrjgorpmo7mrrXjgYzlnLDkuIvkuozpmo7ku6XkuIvjga7loLTlkIjjga/jgrvjg7zjg5bjgZfjgabjgYvjgonkuIrjga7pmo7jgavnp7vli5XjgZnjgotcclxuICAgIGlmICghcnNsdC5oYXNfaG9wZSB8fCAhZ19tYXplLndpdGhpbihyc2x0LnN1YmopKSB7XHJcbiAgICAgICAgZ19tdm0uY2xlYXJfbWVzc2FnZSgpO1xyXG4gICAgICAgIGFjdF9tb3ZlX21vZGUoKTtcclxuICAgICAgICBkb19tb3ZlX2JvdHRvbV9oYWxmKCdibGlua19vZmYnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZG9fVURfc2F2ZSgpLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgZ190ZWFtLmdldFdhbGtlcigpLnNldF9wZChyc2x0LnN1YmopO1xyXG4gICAgICAgICAgICBnX212bS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICAgICAgICAgIGFjdF9tb3ZlX21vZGUoKTtcclxuICAgICAgICAgICAgZG9fbW92ZV9ib3R0b21faGFsZignYmxpbmtfb2ZmJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvX2Rvd24oKTogdm9pZCB7XHJcbiAgICBjb25zdCByc2x0ID0gZ190ZWFtLmdldFdhbGtlcigpLmhvcGVfcF9kb3duKCk7XHJcblxyXG4gICAgLy/jgIDkuIvjgorpmo7mrrXjgYzlnLDkuIvmnIDntYLpmo7jga7loLTlkIjjga/jgrvjg7zjg5bjgZfjgabjgYvjgonooZco5YaS6Zm66ICF44Ku44Or44OJKeOBuOenu+WLleOBmeOCi1xyXG4gICAgaWYgKHJzbHQuaGFzX2hvcGUgJiYgcnNsdC5zdWJqLnogPj0gZ19tYXplLmdldF96X21heCgpKSB7XHJcbiAgICAgICAgZG9fVURfc2F2ZSgpLnRoZW4oYXN5bmMgKCk9PntcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRtcF9zYXZlKCk7XHJcbiAgICAgICAgfSkudGhlbigoKT0+e1xyXG4gICAgICAgICAgICBjb25zdCBvcHQgPSBuZXcgQ19VcmxPcHQoKTtcclxuICAgICAgICAgICAgb3B0LnNldCgnbW9kZScsICdsb2FkJyk7XHJcbiAgICAgICAgICAgIG9wdC5zZXQoJ3BpZCcsICAgZ19zdGFydF9lbnYucGlkKTtcclxuICAgICAgICAgICAgb3B0LnNldCgnb3B0JywgICAxMDApO1xyXG4gICAgICAgICAgICBQT1NUX2FuZF9tb3ZlX3BhZ2UoZ191cmxbZ191cmxfbWFpX2d1bGRdLCBvcHQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOS4i+OCiumajuauteOBjOWcsOS4i+acgOe1gumajuacqua6gOOBruWgtOWQiOOBr+OCu+ODvOODluOBl+OBpuOBi+OCieS4i+OBrumajuOBq+enu+WLleOBmeOCi1xyXG4gICAgaWYgKCFyc2x0Lmhhc19ob3BlIHx8ICFnX21hemUud2l0aGluKHJzbHQuc3ViaikpIHtcclxuICAgICAgICBnX212bS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICAgICAgYWN0X21vdmVfbW9kZSgpO1xyXG4gICAgICAgIGRvX21vdmVfYm90dG9tX2hhbGYoJ2JsaW5rX29mZicpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkb19VRF9zYXZlKCkudGhlbigoKT0+e1xyXG4gICAgICAgICAgICBnX3RlYW0uZ2V0V2Fsa2VyKCkuc2V0X3BkKHJzbHQuc3Viaik7XHJcbiAgICAgICAgICAgIGdfbXZtLmNsZWFyX21lc3NhZ2UoKTtcclxuICAgICAgICAgICAgYWN0X21vdmVfbW9kZSgpO1xyXG4gICAgICAgICAgICBkb19tb3ZlX2JvdHRvbV9oYWxmKCdibGlua19vZmYnKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZG9fVUQoKTogdm9pZCB7XHJcbiAgICBpZiAoIWNhblVwIHx8ICFjYW5EbikgcmV0dXJuO1xyXG4gICAgXHJcbiAgICBpZiAoaXNVcCkgZG9fdXAoKTtcclxuICAgIGVsc2UgICAgICBkb19kb3duKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhvcGVfVXAoKTogdm9pZCB7XHJcbiAgICBpZiAoIWNhblVwIHx8ICFjYW5EbikgcmV0dXJuO1xyXG4gICAgaXNVcCA9IHRydWU7XHJcbiAgICBnX2N0bHMuYWN0KGN0bHNfdXBkbl91ZF9ocGRuKTtcclxuXHJcbiAgICBpZiAoZ190ZWFtLmdldFdhbGtlcigpLmdldF96KCkgPiAwKSB7XHJcbiAgICAgICAgZ19tdm0ubm90aWNlX21lc3NhZ2UoJ+eZu+OCiuOBvuOBmeOBi++8n+eZu+OCi+KHkiDjgIcg6ZmN44KK44KLIOKHkiAo4oaT44Kt44O8KSDnp7vli5XjgZfjgarjgYQg4oeSIOKclicpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBnX212bS5ub3RpY2VfbWVzc2FnZSgn6KGX44Gr5oi744KK44G+44GZ44GL77yf5oi744KL4oeSIOOAhyDpmY3jgorjgosg4oeSICjihpPjgq3jg7wpIOenu+WLleOBl+OBquOBhCDih5Ig4pyWJyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGhvcGVfRG93bigpOiB2b2lkIHtcclxuICAgIGlmICghY2FuVXAgfHwgIWNhbkRuKSByZXR1cm47XHJcbiAgICBpc1VwID0gZmFsc2U7XHJcbiAgICBnX2N0bHMuYWN0KGN0bHNfdXBkbl91ZF9ocHVwKTtcclxuXHJcbiAgICBnX212bS5ub3RpY2VfbWVzc2FnZSgn6ZmN44KK44G+44GZ44GL77yf6ZmN44KK44KL4oeSIOOAhyDnmbvjgosg4oeSICjihpHjgq3jg7wpIOenu+WLleOBl+OBquOBhCDih5Ig4pyWJyk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGRvX1VEX3NhdmUoKTogUHJvbWlzZTxhbnl8dW5kZWZpbmVkPiB7XHJcbiAgICBzZXRfZ19zYXZlKFxyXG4gICAgICAgIC8qIHNhdmVfaWQ6ICovICAgLTEsXHJcbiAgICAgICAgLyogdW5pcV9ubzogKi8gICAtMSxcclxuICAgICAgICAvKiB0aXRsZTogKi8gICAgICfoh6rli5Xkv53lrZjjg4fjg7zjgr8nLCBcclxuICAgICAgICAvKiBkZXRhaWw6ICovICAgICcnLFxyXG4gICAgICAgIC8qIHBvaW50OiAqLyAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYOOAjiR7Z19tYXplLmdldF9uYW1lKCl944CPIGAgXHJcbiAgICAgICAgICAgICAgICAgICAgKyBg5Zyw5LiLICR7Z190ZWFtLmdldFdhbGtlcigpLmdldF9wZCgpLnogKyAxfemajuWxpCBgIFxyXG4gICAgICAgICAgICAgICAgICAgICsgYChYOiAke2dfdGVhbS5nZXRXYWxrZXIoKS5nZXRfcGQoKS54fSwgWTogJHtnX3RlYW0uZ2V0X3BkKCkueX0pYCxcclxuICAgICAgICAvKiBhdXRvX21vZGU6ICovIHRydWUsXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIFVEX3NhdmUoKTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHNldENhbnZhczNEQ2xpY2soKTogdm9pZCB7XHJcbiAgICBpZiAoZ19kcz8uY2FudmFzID09PSBudWxsKSAgICAgcmV0dXJuO1xyXG4gICAgZ19kcy5jYW52YXMub25jbGljayA9IGNhbnZhczNEY2xpY2s7XHJcbn1cclxuZnVuY3Rpb24gY2xyQ2FudmFzM0RDbGljaygpOiB2b2lkIHtcclxuICAgIGlmIChnX2RzPy5jYW52YXMgPT09IG51bGwpICAgICByZXR1cm47XHJcbiAgICBnX2RzLmNhbnZhcy5vbmNsaWNrID0gKCk9Pnt9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYW52YXMzRGNsaWNrKGV2OiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICBpZiAoZ19kcz8uY2FudmFzID09PSBudWxsKSAgICAgcmV0dXJuO1xyXG4gICAgaWYgKGV2LnRhcmdldCAhPT0gZ19kcy5jYW52YXMpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBjdnMgPSBnX2RzLmNhbnZhcztcclxuLy9kZWJ1ZyAgICBhbGVydChgeD0keyhldi5vZmZzZXRYPz8tMSl9LCB5PSR7KGV2Lm9mZnNldFk/Py0xKX1gKTtcclxuXHJcbiAgICBjb25zdCBsZWZ0X3BhbmVfciAgPSBjdnMuY2xpZW50V2lkdGggICogMC4zNTtcclxuICAgIGNvbnN0IHJnaHRfcGFuZV9sICA9IGN2cy5jbGllbnRXaWR0aCAgKiAwLjY1O1xyXG4gICAgY29uc3QgYmFja19wYW5lX3UgID0gY3ZzLmNsaWVudEhlaWdodCAqIDAuNTA7XHJcblxyXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544Gu5bem5YG0XHJcbiAgICBpZiAoZXYub2Zmc2V0WCA8IGxlZnRfcGFuZV9yKSB7KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduX2J0bicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTsgcmV0dXJuO31cclxuICAgIC8vIOOCreODo+ODs+ODkOOCueOBruWPs+WBtFxyXG4gICAgaWYgKGV2Lm9mZnNldFggPiByZ2h0X3BhbmVfbCkgeyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneV9idG4nKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7IHJldHVybjt9XHJcbiAgICAvL+OCreODo+ODs+ODkOOCueOBruS4reWkruS4iijliY3pgLIpXHJcbiAgICBpZiAoZXYub2Zmc2V0WSA8IGJhY2tfcGFuZV91KSB7KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1X2FycicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTsgcmV0dXJuO31cclxuICAgIC8vIOOCreODo+ODs+ODkOOCueOBruS4reWkruS4iyjlvozpgIApXHJcbiAgICAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RfYXJyJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpOyByZXR1cm47XHJcbn1cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IHsgQ19DdGxDdXJzb3IgfSAgICAgICAgIGZyb20gXCIuLi9kX2N0bC9DX0N0bEN1cnNvclwiO1xyXG5pbXBvcnQgeyBDX0N0bFRhYmxlUm93Q3Vyc29yIH0gZnJvbSBcIi4uL2RfY3RsL0NfQ3RsVGFibGVSb3dDdXJzb3JcIjtcclxuaW1wb3J0IHsgSV9IZXJvIH0gICAgICAgICAgICAgIGZyb20gXCIuLi9kX21kbC9DX0hlcm9cIjtcclxuaW1wb3J0IHsgSV9NYXplT2JqIH0gICAgICAgICAgIGZyb20gXCIuLi9kX21kbC9DX01hemVPYmpcIjtcclxuaW1wb3J0IHsgSV9XbmRyIH0gICAgICAgICAgICAgIGZyb20gXCIuLi9kX21kbC9DX1duZHJcIjtcclxuaW1wb3J0IHsgX2pzb25fYWxlcnQsIF9qc29uX3RvX3N0ciB9IGZyb20gXCIuLi9kX3V0bC9GX1V0aWxpdHlcIjtcclxuaW1wb3J0IHsgYWN0X21vdmVfbW9kZSwgZG9fbW92ZV9ib3R0b21faGFsZiB9ICAgZnJvbSBcIi4vRl9zZXRfbW92ZV9tb2RlXCI7XHJcbmltcG9ydCB7IGdfY3RscywgZ19jdm0sIGdfbWF6ZSwgZ190ZWFtLCBnX3ZzdyB9IGZyb20gXCIuL2dsb2JhbF9mb3JfbWF6ZVwiO1xyXG5cclxuLy90eXBlIFRfVGFibGVDb2wgPSAnbm1sdicgfCAnYWNzdCcgfCAnaHBtcCc7XHJcblxyXG5sZXQgbWRsX3RlYW1fbGlzdDogKElfSGVyb3x1bmRlZmluZWQpW107XHJcbmxldCBkb21fdGVhbV9saXN0OiB7W2tleTogc3RyaW5nXTogSFRNTFRhYmxlQ2VsbEVsZW1lbnR9W107XHJcbmxldCB0YnlfdGVhbV9saXN0OiBIVE1MVGFibGVTZWN0aW9uRWxlbWVudDtcclxubGV0IGNjcl90ZWFtX2xpc3Q6IENfQ3RsVGFibGVSb3dDdXJzb3I7XHJcblxyXG5sZXQgbWRsX2VubXlfbGlzdDogKElfV25kcnx1bmRlZmluZWQpW107XHJcbmxldCBkb21fZW5teV9saXN0OiB7W2tleTogc3RyaW5nXTogSFRNTFRhYmxlQ2VsbEVsZW1lbnR9W107XHJcbmxldCB0YnlfZW5teV9saXN0OiBIVE1MVGFibGVTZWN0aW9uRWxlbWVudDtcclxubGV0IGNjcl9lbm15X2xpc3Q6IENfQ3RsVGFibGVSb3dDdXJzb3I7XHJcblxyXG5sZXQgbWRsX2NtbWRfbGlzdDogc3RyaW5nW107XHJcbmxldCBkb21fY21tZF9saXN0OiBIVE1MVUxpc3RFbGVtZW50O1xyXG5sZXQgY2NyX2NtbWRfbGlzdDogQ19DdGxDdXJzb3I7XHJcblxyXG5sZXQgbWRsX3NsY3RfbGlzdDogc3RyaW5nW107XHJcbmxldCBkb21fc2xjdF9saXN0OiBIVE1MVUxpc3RFbGVtZW50O1xyXG5sZXQgY2NyX3NsY3RfbGlzdDogQ19DdGxDdXJzb3I7XHJcblxyXG5sZXQgVEVDU19tb2RlOiAnVGVhbScgfCAnRW5teScgfCAnQ21tZCcgfCAnU2xjdCcgPSAnVGVhbSc7XHJcbmxldCBpZHg6ICAgbnVtYmVyICAgPSAgIDA7XHJcblxyXG5jb25zdCBIZXJvX21heDogbnVtYmVyID0gNDtcclxuY29uc3QgV25kcl9tYXg6IG51bWJlciA9IDQ7XHJcblxyXG5sZXQgZW5teV9vYmplOiBJX01hemVPYmp8dW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfYnR0bF9tb2RlKCk6IHZvaWQge1xyXG4gICAgaW5pdF9hbGwoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjdF9idHRsX21vZGUob2JqZTogSV9NYXplT2JqfHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgaWYgKG9iamUgPT09IHVuZGVmaW5lZCB8fCBvYmplLndyZXMoKSA9PT0gdW5kZWZpbmVkIHx8IChvYmplLndyZXMoKT8ubGVuZ3RoPz8wKSA8IDEpIHJldHVybjtcclxuXHJcbiAgICBlbm15X29iamUgPSBvYmplO1xyXG5cclxuICAgIHNldF90ZWFtX2RhdGEoZ190ZWFtLmhyZXMoKSk7XHJcbiAgICBzZXRfZW5teV9kYXRhKG9iamUud3JlcygpPz9bXSk7XHJcbiAgICB1cGRhdGVfYWxsKCk7XHJcblxyXG4gICAgZ19jdm0uY2xlYXJfbWVzc2FnZSgpO1xyXG4gICAgVEVDU19tb2RlID0gJ1RlYW0nO1xyXG4gICAgLy9pZHggPSAwO1xyXG4gICAgLy9jY3JfdGVhbV9saXN0LnNldF9wb3MoaWR4KTtcclxuICAgIGdfY3Rscy5hY3QoY3Rsc19idHRsX25vcik7XHJcbiAgICBnX3Zzdy52aWV3KGdfdnN3LkJ0dGwoKSk7IFxyXG59XHJcblxyXG5cclxuLy8g5Luy6ZaT44OH44O844K/44KS44K744OD44OIXHJcbi8vIOWwhuadpeeahOOBq+OBr+OBk+OBk+OBp+ODleOCqeODvOODoeODvOOCt+ODp+ODsygy6KGMM+WIlynjgoLjgrvjg4Pjg4hcclxuZnVuY3Rpb24gc2V0X3RlYW1fZGF0YShocmVzOiBJX0hlcm9bXSk6IHZvaWQge1xyXG4gICAgbWRsX3RlYW1fbGlzdCA9IGhyZXM7XHJcbn1cclxuXHJcbi8vIOaVteODh+ODvOOCv+OCkuOCu+ODg+ODiFxyXG4vLyDlsIbmnaXnmoTjgavjga/jgZPjgZPjgafjg5Xjgqnjg7zjg6Hjg7zjgrfjg6fjg7MoMuihjDPliJcp44KC44K744OD44OIXHJcbmZ1bmN0aW9uIHNldF9lbm15X2RhdGEod3JlczogSV9XbmRyW10pOiB2b2lkIHtcclxuICAgIG1kbF9lbm15X2xpc3QgPSB3cmVzO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gaW5pdF9hbGwoKTogdm9pZCB7XHJcbiAgICBpbml0X2RhdGEoKTtcclxuICAgIGluaXRfdmlldygpO1xyXG4gICAgaW5pdF9jdGxzKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZV9hbGwoKTogdm9pZCB7XHJcbiAgICB1cGRhdGVfZGF0YSgpO1xyXG4gICAgdXBkYXRlX3ZpZXcoKTsgXHJcbiAgICB1cGRhdGVfY3RscygpO1xyXG59XHJcblxyXG5cclxuLypcclxuICog44Oi44OH44Or6Zai5L+CXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gaW5pdF9kYXRhKCk6IHZvaWR7XHJcbiAgICBpbml0X3RlYW1fZGF0YSgpO1xyXG4gICAgaW5pdF9lbm15X2RhdGEoKTtcclxuICAgIGluaXRfY21tZF9kYXRhKCk7XHJcbiAgICBpbml0X3NsY3RfZGF0YSgpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gaW5pdF90ZWFtX2RhdGEoKTogdm9pZCB7XHJcbiAgICBtZGxfdGVhbV9saXN0ID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEhlcm9fbWF4OyBpKyspIHtcclxuICAgICAgICBtZGxfdGVhbV9saXN0LnB1c2godW5kZWZpbmVkKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdF9lbm15X2RhdGEoKTogdm9pZCB7XHJcbiAgICBtZGxfZW5teV9saXN0ID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IFduZHJfbWF4OyBpKyspIHtcclxuICAgICAgICBtZGxfZW5teV9saXN0LnB1c2godW5kZWZpbmVkKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdF9jbW1kX2RhdGEoKTogdm9pZCB7fVxyXG5mdW5jdGlvbiBpbml0X3NsY3RfZGF0YSgpOiB2b2lkIHt9XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVfZGF0YSgpOiB2b2lkIHtcclxuICAgIHVwZGF0ZV90ZWFtX2RhdGEoKTtcclxuICAgIHVwZGF0ZV9lbm15X2RhdGEoKTtcclxuICAgIHVwZGF0ZV9jbW1kX2RhdGEoKTtcclxuICAgIHVwZGF0ZV9zbGN0X2RhdGEoKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZV90ZWFtX2RhdGEoKTogdm9pZCB7fVxyXG5mdW5jdGlvbiB1cGRhdGVfZW5teV9kYXRhKCk6IHZvaWQge31cclxuZnVuY3Rpb24gdXBkYXRlX2NtbWRfZGF0YSgpOiB2b2lkIHt9XHJcbmZ1bmN0aW9uIHVwZGF0ZV9zbGN0X2RhdGEoKTogdm9pZCB7fVxyXG5cclxuXHJcblxyXG4vKuOAgFxyXG4gKiDnlLvpnaLplqLkv4JcclxuICovXHJcblxyXG5mdW5jdGlvbiBpbml0X3ZpZXcoKTogdm9pZHtcclxuICAgIGluaXRfdGVhbV92aWV3KCk7XHJcbiAgICBpbml0X2VubXlfdmlldygpO1xyXG4gICAgaW5pdF9jbW1kX3ZpZXcoKTtcclxuICAgIGluaXRfc2xjdF92aWV3KCk7XHJcbn07XHJcblxyXG5jb25zdCBUYWJsZUNvbDpzdHJpbmdbXSA9IFsnbm1sdicgLCAnYWNzdCcgLCAnaHBtcCddO1xyXG5cclxuZnVuY3Rpb24gaW5pdF90ZWFtX3ZpZXcoKTogdm9pZCB7XHJcbiAgICBkb21fdGVhbV9saXN0ID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEhlcm9fbWF4OyBpKyspIHtcclxuICAgICAgICBjb25zdCB0ciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBidHRsX3RlYW1fdHIke2l9YCkgYXMgSFRNTFRhYmxlUm93RWxlbWVudDtcclxuICAgICAgICBpZiAodHIgPT09IG51bGwpICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgZG9tX3RlYW1fbGlzdFtpXSA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgY29sIG9mIFRhYmxlQ29sKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGJ0dGxfdGVhbV90ciR7aX1fJHtjb2x9YCkgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmICh0ZCA9PT0gbnVsbCkgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBkb21fdGVhbV9saXN0W2ldW2NvbF0gPSB0ZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRfZW5teV92aWV3KCk6IHZvaWQge1xyXG4gICAgZG9tX2VubXlfbGlzdCA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBXbmRyX21heDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgYnR0bF9lbm15X3RyJHtpfWApIGFzIEhUTUxUYWJsZVJvd0VsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHRyID09PSBudWxsKSAgY29udGludWU7XHJcblxyXG4gICAgICAgIGRvbV9lbm15X2xpc3RbaV0gPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNvbCBvZiBUYWJsZUNvbCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBidHRsX2VubXlfdHIke2l9XyR7Y29sfWApIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAodGQgPT09IG51bGwpICBjb250aW51ZTtcclxuICAgICAgICAgICAgZG9tX2VubXlfbGlzdFtpXVtjb2xdID0gdGQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0X2NtbWRfdmlldygpOiB2b2lkIHt9XHJcbmZ1bmN0aW9uIGluaXRfc2xjdF92aWV3KCk6IHZvaWQge31cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZV92aWV3KCk6IHZvaWQge1xyXG4gICAgdXBkYXRlX3RlYW1fdmlldygpO1xyXG4gICAgdXBkYXRlX2VubXlfdmlldygpO1xyXG4gICAgdXBkYXRlX2NtbWRfdmlldygpO1xyXG4gICAgdXBkYXRlX3NsY3RfdmlldygpO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlX3RlYW1fdmlldygpOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgSGVyb19tYXg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGhlcm8gPSBtZGxfdGVhbV9saXN0W2ldO1xyXG4gICAgICAgIGNvbnN0IGRvbSAgPSBkb21fdGVhbV9saXN0W2ldO1xyXG4gICAgICAgIGlmIChoZXJvICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZG9tLm5tbHYuaW5uZXJIVE1MID0gIGhlcm8ubmFtZSgpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGJyIC8+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnTHbvvJonXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICfjgIDniannkIbvvJonXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChoZXJvPy5nZXRfYWJpX3Bfbm93KCdsdicpPz8nPz8/JykudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAn44CA6a2U5rOV77yaJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoaGVybz8uZ2V0X2FiaV9tX25vdygnbHYnKT8/Jz8/PycpLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICBkb20uYWNzdC5pbm5lckhUTUwgPSAn44CA5LiN5piO44CAJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPGJyIC8+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgaGVyby5pc19hbGl2ZSgpID8gJ+OAgOato+W4uOOAgCcgOiAn5oim6ZeY5LiN6IO9JztcclxuICAgICAgICAgICAgZG9tLmhwbXAuaW5uZXJIVE1MID0gJ++8qO+8sO+8midcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKGhlcm8uZ2V0X2FiaV9wX25vdygneHAnKSAtIGhlcm8uZ2V0X2FiaV9wX25vdygneGQnKSkudG9TdHJpbmcoKSArICcgLyAnIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgaGVyby5nZXRfYWJpX3Bfbm93KCd4cCcpLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxiciAvPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ++8re+8sO+8midcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKGhlcm8uZ2V0X2FiaV9tX25vdygneHAnKSAtIGhlcm8uZ2V0X2FiaV9tX25vdygneGQnKSkudG9TdHJpbmcoKSArICcgLyAnIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgaGVyby5nZXRfYWJpX21fbm93KCd4cCcpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZG9tLm5tbHYuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgIGRvbS5hY3N0LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBkb20uaHBtcC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHVwZGF0ZV9lbm15X3ZpZXcoKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IFduZHJfbWF4OyBpKyspIHtcclxuICAgICAgICBjb25zdCB3bmRyID0gbWRsX2VubXlfbGlzdFtpXTtcclxuICAgICAgICBjb25zdCBkb20gID0gZG9tX2VubXlfbGlzdFtpXTtcclxuICAgICAgICBpZiAod25kciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRvbS5ubWx2LmlubmVySFRNTCA9ICB3bmRyLm5hbWUoKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxiciAvPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ0x277yaJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAn44CA54mp55CG77yaJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAod25kcj8uZ2V0X2FiaV9wX25vdygnbHYnKT8/Jz8/PycpLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ+OAgOmtlOazle+8midcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKHduZHI/LmdldF9hYmlfbV9ub3coJ2x2Jyk/Pyc/Pz8nKS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgZG9tLmFjc3QuaW5uZXJIVE1MID0gJ+OAgOS4jeaYjuOAgCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxiciAvPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgIHduZHIuaXNfYWxpdmUoKSA/ICfjgIDmraPluLjjgIAnIDogJ+aIpumXmOS4jeiDvSc7XHJcblxyXG4gICAgICAgICAgICBkb20uaHBtcC5pbm5lckhUTUwgPSAn77yo77yw77yaJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAod25kci5nZXRfYWJpX3Bfbm93KCd4cCcpIC0gd25kci5nZXRfYWJpX3Bfbm93KCd4ZCcpKS50b1N0cmluZygpICsgJyAvICcgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICB3bmRyLmdldF9hYmlfcF9ub3coJ3hwJyk/LnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzxiciAvPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJ++8re+8sO+8midcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKHduZHIuZ2V0X2FiaV9tX25vdygneHAnKSAtIHduZHIuZ2V0X2FiaV9tX25vdygneGQnKSkudG9TdHJpbmcoKSArICcgLyAnIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAgd25kci5nZXRfYWJpX21fbm93KCd4cCcpPy50b1N0cmluZygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRvbS5ubWx2LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICBkb20uYWNzdC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgZG9tLmhwbXAuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB1cGRhdGVfY21tZF92aWV3KCk6IHZvaWQge31cclxuZnVuY3Rpb24gdXBkYXRlX3NsY3RfdmlldygpOiB2b2lkIHt9XHJcblxyXG4vKlxyXG4gKiDjgrPjg7Pjg4jjg63jg7zjg6vplqLkv4JcclxuICovXHJcblxyXG5mdW5jdGlvbiBpbml0X2N0bHMoKTogdm9pZHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdGJ5X3RlYW1fbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidHRsX3RlYW1fYm9keScpIGFzIEhUTUxUYWJsZVNlY3Rpb25FbGVtZW50O1xyXG4gICAgICAgIHRieV9lbm15X2xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnR0bF9lbm15X2JvZHknKSBhcyBIVE1MVGFibGVTZWN0aW9uRWxlbWVudDtcclxuICAgICAgICBkb21fY21tZF9saXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0dGxfY21tZF91bCcpICAgYXMgSFRNTFVMaXN0RWxlbWVudDtcclxuICAgICAgICBkb21fc2xjdF9saXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0dGxfc2xjdF91bCcpICAgYXMgSFRNTFVMaXN0RWxlbWVudDtcclxuXHJcbi8vICAgICAgICBjY3JfdGVhbV9saXN0ID0gQ19DdGxUYWJsZVJvd0N1cnNvci5nZXRPYmoodGJ5X3RlYW1fbGlzdCk7XHJcbi8vICAgICAgICBjY3JfZW5teV9saXN0ID0gQ19DdGxUYWJsZVJvd0N1cnNvci5nZXRPYmoodGJ5X2VubXlfbGlzdCk7XHJcbiAgICAgICAgY2NyX2NtbWRfbGlzdCA9IENfQ3RsQ3Vyc29yLmdldE9iaihkb21fY21tZF9saXN0KTtcclxuICAgICAgICBjY3Jfc2xjdF9saXN0ID0gQ19DdGxDdXJzb3IuZ2V0T2JqKGRvbV9zbGN0X2xpc3QpO1xyXG4gICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICBhbGVydCgnRXJyb3I6ICcgKyBlcnIpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlX2N0bHMoKTogdm9pZCB7fVxyXG5cclxuY29uc3QgY3Rsc19idHRsX25vciA9IHtcclxuICAgIG5hbWU6ICdtZW51X25vcicsIFxyXG4gICAgZG9fVTogIGRvX1UsXHJcbiAgICBkb19EOiAgZG9fRCxcclxuICAgIGlzT0s6ICBpc09LLFxyXG4gICAgaXNORzogIGlzTkcsXHJcbiAgICBpc1JUOiAgaXNORyxcclxuICAgIGNwUlQ6ICBpc05HLFxyXG59XHJcblxyXG5mdW5jdGlvbiBkb19VKCk6IHZvaWQge31cclxuZnVuY3Rpb24gZG9fRCgpOiB2b2lkIHt9XHJcbmZ1bmN0aW9uIGRvX0woKTogdm9pZCB7fVxyXG5mdW5jdGlvbiBkb19SKCk6IHZvaWQge31cclxuZnVuY3Rpb24gaXNPSygpOiB2b2lkIHt9XHJcbmZ1bmN0aW9uIGlzTkcoKTogdm9pZCB7XHJcbiAgICAvLyDmlbXjgqrjg5bjgrjjgqfjgpLov7flrq7jgYvjgonjgoLjg6Hjg6Ljg6rjgYvjgonjgoLmtojljrtcclxuICAgIGdfbWF6ZS5ybXZfb2JqKGVubXlfb2JqZT8/IHVuZGVmaW5lZCk7XHJcbiAgICBlbm15X29iamU/LmZyZWUoKTtcclxuICAgIGVubXlfb2JqZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAvLyDmiKbpl5jjg6Ljg7zjg4njgpLntYLkuobjgZfjgabnp7vli5Xjg6Ljg7zjg4njgavmiLvjgotcclxuICAgIGdfY3ZtLmNsZWFyX21lc3NhZ2UoKTtcclxuICAgIGFjdF9tb3ZlX21vZGUoKTtcclxuICAgIGRvX21vdmVfYm90dG9tX2hhbGYoJ2JsaW5rX29mZicpO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBfaXNOdW0gfSAgICAgICAgICBmcm9tIFwiLi4vZF91dGwvRl9NYXRoXCI7XHJcbmltcG9ydCB7IENfQ3RsQ3Vyc29yIH0gICAgIGZyb20gXCIuLi9kX2N0bC9DX0N0bEN1cnNvclwiO1xyXG5pbXBvcnQgeyBkb19tb3ZlX2JvdHRvbV9oYWxmLCBhY3RfbW92ZV9tb2RlIH0gZnJvbSBcIi4vRl9zZXRfbW92ZV9tb2RlXCI7XHJcbmltcG9ydCB7IGFjdF9sb2FkX21vZGUsIGFjdF9zYXZlX21vZGUgICB9ICAgICBmcm9tIFwiLi9GX3NldF9zYXZlX21vZGVcIjtcclxuaW1wb3J0IHsgYWN0X212cHRfbW9kZX0gICAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuL0Zfc2V0X212cHRfbW9kZVwiO1xyXG5pbXBvcnQgeyBnX2N0bHMsIGdfY3ZtLCBnX3ZzdyB9ICAgICAgICAgICAgICAgZnJvbSBcIi4vZ2xvYmFsX2Zvcl9tYXplXCI7XHJcbmltcG9ydCB7IGFjdF9idHRsX21vZGUgfSBmcm9tIFwiLi9GX3NldF9idHRsX21vZGVcIjtcclxuXHJcbmxldCAgIGRvbV9tZW51X2xpc3Q6ICBIVE1MVUxpc3RFbGVtZW50O1xyXG5sZXQgICBtZW51X2xpc3RfY3JzcjogQ19DdGxDdXJzb3I7XHJcbmxldCAgIGlkeDogICBudW1iZXIgICA9ICAgMDtcclxuXHJcbmNvbnN0IGN0bHNfbWVudV9ub3IgPSB7XHJcbiAgICBuYW1lOiAnbWVudV9ub3InLCBcclxuICAgIGRvX1U6ICBkb19VLFxyXG4gICAgZG9fRDogIGRvX0QsXHJcbiAgICBpc09LOiAgaXNPSyxcclxuICAgIGlzTkc6ICBpc05HLFxyXG4gICAgaXNSVDogIGlzTkcsXHJcbiAgICBjcFJUOiAgaXNORyxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfbWVudV9tb2RlKCk6IHZvaWQge1xyXG4gICAgaW5pdF92aWV3KCk7XHJcbiAgICBpbml0X2N0bHMoKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gYWN0X21lbnVfbW9kZSgpOiB2b2lkIHtcclxuICAgIGlkeCA9IDA7XHJcbiAgICBtZW51X2xpc3RfY3Jzci5zZXRfcG9zKGlkeCk7XHJcbiAgICBnX2N0bHMuYWN0KGN0bHNfbWVudV9ub3IpO1xyXG4gICAgZ192c3cudmlldyhnX3Zzdy5NZW51KCkpOyBcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdF92aWV3KCk6IGJvb2xlYW4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBtZW51X2xpc3QgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZW51X2xpc3QnKSBhcyBIVE1MVUxpc3RFbGVtZW50O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVudV9saXN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBtZW51X2xpc3QuY2hpbGRyZW5baV0gYXMgSFRNTExJRWxlbWVudDtcclxuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX09LX21lbnVfRm5jLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkb21fbWVudV9saXN0ICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZW51X2xpc3QnKSBhcyBIVE1MVUxpc3RFbGVtZW50O1xyXG4gICAgICAgIG1lbnVfbGlzdF9jcnNyID0gQ19DdGxDdXJzb3IuZ2V0T2JqKGRvbV9tZW51X2xpc3QpO1xyXG4gICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICBhbGVydCgnRXJyb3I6ICcgKyBlcnIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIF9PS19tZW51X0ZuYyh0aGlzOiBIVE1MTElFbGVtZW50LCBlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICBfX2lzT0sodGhpcy5pZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRfY3RscygpOiB2b2lkIHtcclxuICAgIGdfY3Rscy5zZXQoY3Rsc19tZW51X25vcik7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBpc09LKCk6IHZvaWQge1xyXG4gICAgY29uc3QgbWVudV9saXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lbnVfbGlzdCcpIGFzIEhUTUxVTGlzdEVsZW1lbnQ7XHJcbiAgICBpZiAobWVudV9saXN0ID09PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgY2hpbGRyZW4gPSBtZW51X2xpc3QuY2hpbGRyZW47XHJcbiAgICBpZiAoaWR4IDwgMCB8fCBpZHggPiBjaGlsZHJlbi5sZW5ndGggLSAxKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbGkgPSBjaGlsZHJlbi5pdGVtKGlkeCkgYXMgSFRNTExJRWxlbWVudDtcclxuICAgIF9faXNPSyhsaS5pZCk7XHJcbn1cclxuZnVuY3Rpb24gX19pc09LKGlkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHN3aXRjaCAoaWQpIHtcclxuICAgICAgICBjYXNlICdtZW51X2xvYWQnOiBkb19sb2FkKCk7cmV0dXJuO1xyXG4gICAgICAgIGNhc2UgJ21lbnVfc2F2ZSc6IGRvX3NhdmUoKTtyZXR1cm47XHJcbiAgICAgICAgY2FzZSAnbWVudV9tdnB0JzogZG9fbXZwdCgpO3JldHVybjtcclxuLy8gICAgICAgIGNhc2UgJ21lbnVfYnR0bCc6IGRvX2J0dGwoKTtyZXR1cm47IC8v5LuuXHJcbiAgICB9XHJcbn1cclxuXHJcbi8v5Luu44Gu5Yem55CGXHJcbi8vZnVuY3Rpb24gZG9fYnR0bCgpOiB2b2lkIHtcclxuLy8gICAgYWN0X2J0dGxfbW9kZSgpO1xyXG4vL31cclxuXHJcbmZ1bmN0aW9uIGlzTkcoKTogdm9pZCB7XHJcbiAgICBnX2N2bS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICBhY3RfbW92ZV9tb2RlKCk7XHJcbiAgICBkb19tb3ZlX2JvdHRvbV9oYWxmKCdibGlua19vZmYnKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGRvX1UoKTogdm9pZCB7XHJcbiAgICBnX2N2bS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICBpZHggPSBtZW51X2xpc3RfY3Jzci5wb3NfVSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb19EKCk6IHZvaWQge1xyXG4gICAgZ19jdm0uY2xlYXJfbWVzc2FnZSgpO1xyXG4gICAgaWR4ID0gbWVudV9saXN0X2Nyc3IucG9zX0QoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9fbG9hZCgpOiB2b2lkIHtcclxuICAgIGFjdF9sb2FkX21vZGUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9fc2F2ZSgpOiB2b2lkIHtcclxuICAgIGFjdF9zYXZlX21vZGUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9fbXZwdCgpOiB2b2lkIHtcclxuICAgIGFjdF9tdnB0X21vZGUoKTtcclxufVxyXG4iLCJcclxuICAgIC8qKioqKioqKioqKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqICoqKioqKioqKioqKioqL1xyXG4gICAgLyogIEhUTUxQcmVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7ICAgICovXHJcbiAgICAvKiAgSFRNTEVsZW1lbnQ/LnNldEF0dHJpYnV0ZSgnaWQnLCAndV9hcnJhdycpOyAgICAgICAgKi9cclxuICAgIC8qICBIVE1MRWxlbWVudD8uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnZ3JpZCcpOyAqL1xyXG4gICAgLyogIEhUTUxFbGVtZW50Py5hcHBlbmRDaGlsZChIVE1MRWxlbWVudCk7ICAgICAgICAgICAgICovXHJcbiAgICAvKioqKioqKioqKioqICoqKioqKioqKioqKioqKioqKioqKioqKioqKiAqKioqKioqKioqKioqKi9cclxuXHJcbmltcG9ydCB7IGluaXRfbW92ZV9tb2RlIH0gZnJvbSBcIi4vRl9zZXRfbW92ZV9tb2RlXCI7XHJcbmltcG9ydCB7IGluaXRfbWVudV9tb2RlIH0gZnJvbSBcIi4vRl9zZXRfbWVudV9tb2RlXCI7XHJcbmltcG9ydCB7IGluaXRfbXZwdF9tb2RlIH0gZnJvbSBcIi4vRl9zZXRfbXZwdF9tb2RlXCI7XHJcbmltcG9ydCB7IGluaXRfU0xfbW9kZSB9ICAgZnJvbSBcIi4vRl9zZXRfc2F2ZV9tb2RlXCI7XHJcbmltcG9ydCB7IGluaXRfVURfbW9kZSB9ICAgZnJvbSBcIi4vRl9zZXRfVURfbW9kZVwiO1xyXG5pbXBvcnQgeyBUX0N0bHNNb2RlIH0gICAgICAgICAgZnJvbSBcIi4vVF9DdGxzTW9kZVwiO1xyXG5pbXBvcnQgeyBnX2N0bHMsIGdfY3Rsc19tb2RlIH0gZnJvbSBcIi4vZ2xvYmFsX2Zvcl9tYXplXCI7XHJcbmltcG9ydCB7IGluaXRfYnR0bF9tb2RlIH0gZnJvbSBcIi4vRl9zZXRfYnR0bF9tb2RlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9hbGxfbW9kZSgpOiB2b2lkIHtcclxuICAgIGdfY3Rscy5kZWFjdCgpO1xyXG4gICAgaW5pdF9tb3ZlX21vZGUoKTtcclxuICAgIGluaXRfbWVudV9tb2RlKCk7XHJcbiAgICBpbml0X212cHRfbW9kZSgpO1xyXG4gICAgaW5pdF9TTF9tb2RlKCk7XHJcbiAgICBpbml0X1VEX21vZGUoKTtcclxuICAgIGluaXRfYnR0bF9tb2RlKCk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGhpZGVfY29udHJvbGxlcygpOiB2b2lkIHtcclxuLy8gICAgZ19jdGxzX21vZGVbMF0gPSBUX0N0bHNNb2RlLk5vcDtcclxuICAgIGdfY3Rscy5kZWFjdCgpO1xyXG4gICAgY29uc3QgbW92ZV9jdGxfdmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYW5lX2N0bHNfYm9hZCcpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgbW92ZV9jdGxfdmlldz8uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG59XHJcbiIsImltcG9ydCB7IFRfTXpLaW5kIH0gICAgICAgICAgICAgICAgICAgZnJvbSBcIi4uL2RfbWRsL1RfTXpLaW5kXCI7XHJcbmltcG9ydCB7IElfSG9wZUFjdGlvbiB9ICAgICAgICAgICAgICAgZnJvbSBcIi4uL2RfbWRsL0NfSG9wZVwiO1xyXG5pbXBvcnQgeyBDX1BvaW50IH0gICAgICAgICAgICAgICAgICAgIGZyb20gXCIuLi9kX21kbC9DX1BvaW50XCI7XHJcbmltcG9ydCB7IGdfbWVzIH0gICAgICAgICAgICAgICAgICAgICAgZnJvbSBcIi4uL2RfY21uL2dsb2JhbFwiO1xyXG5pbXBvcnQgeyBpbnN0YW50X2xvYWQsIGluc3RhbnRfc2F2ZSB9IGZyb20gXCIuLi9kX2Ntbi9GX2xvYWRfYW5kX3NhdmVcIjtcclxuaW1wb3J0IHsgYWN0X21lbnVfbW9kZSB9ICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuL0Zfc2V0X21lbnVfbW9kZVwiO1xyXG5pbXBvcnQgeyBhY3RfVXBfbW9kZSwgYWN0X0RuX21vZGUsIGFjdF9VRF9tb2RlIH0gZnJvbSBcIi4vRl9zZXRfVURfbW9kZVwiO1xyXG5pbXBvcnQgeyBkZWNvZGVfYWxsLCBzZXRfZ19zYXZlIH0gICAgICAgICAgICAgICAgZnJvbSBcIi4vRl9zZXRfc2F2ZV9tb2RlXCI7XHJcbmltcG9ydCB7IGRpc3BsYXlfbWF6ZUNoIH0gICAgICAgICAgICAgICAgICAgICAgICBmcm9tIFwiLi9GX2Rpc3BsYXlfbWF6ZUNoXCI7IFxyXG5pbXBvcnQgeyBkaXNwbGF5X21hemUzRCwgXHJcbiAgICAgICAgIG1hemUzRF9ibGlua19vbl9kaXJlY3Rpb24sIFxyXG4gICAgICAgICBtYXplM0RfYmxpbmtfb2ZmX2RpcmVjdGlvbiBcclxufSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gXCIuL0ZfZGlzcGxheV9tYXplM0RcIjtcclxuaW1wb3J0IHsgXHJcbiAgICBnX212bSwgXHJcbiAgICBnX3ZzdywgXHJcbiAgICBnX21hemUsIFxyXG4gICAgZ190ZWFtLFxyXG4gICAgZG9fbG9hZF9ib3R0b21faGFsZixcclxuICAgIGdfY3RscyxcclxuICAgIGdfZHMsXHJcbiAgICBnX2hyZXMsXHJcbiAgICBnX2hyZXNJbmZvLFxyXG59IGZyb20gXCIuL2dsb2JhbF9mb3JfbWF6ZVwiO1xyXG5cclxuaW1wb3J0IHsgY2FuX21vdmVfdGVhbSwgY2FuX3R1cm5fdGVhbSB9IGZyb20gXCIuL0ZfR01fSHJlc19tb3ZlX2FuZF90dXJuXCI7XHJcbmltcG9ydCB7IF9pcmFuZCB9IGZyb20gXCIuLi9kX3V0bC9GX1JhbmRcIjtcclxuaW1wb3J0IHsgZGlzcGxheV9tYXplMkQgfSBmcm9tIFwiLi9GX2Rpc3BsYXlfbWF6ZTJEXCI7XHJcbmltcG9ydCB7IGNhbl9tb3ZlX3duZHIgfSBmcm9tIFwiLi9GX0dNX1duZHJfbW92ZV9hbmRfdHVyblwiO1xyXG5pbXBvcnQgeyBDX1RlYW0gfSBmcm9tIFwiLi4vZF9tZGwvQ19UZWFtXCI7XHJcbmltcG9ydCB7IGFjdF9idHRsX21vZGUgfSBmcm9tIFwiLi9GX3NldF9idHRsX21vZGVcIjtcclxuaW1wb3J0IHsgX2pzb25fYWxlcnQgfSBmcm9tIFwiLi4vZF91dGwvRl9VdGlsaXR5XCI7XHJcblxyXG5jb25zdCBjdGxzX21vdmVfbm9yID0ge1xyXG4gICAgbmFtZTogJ21vdmVfbm9yJywgXHJcbiAgICBkb19VOiAgZ29fRixcclxuICAgIGRvX0Q6ICBnb19CLFxyXG4gICAgZG9VTDogIGdvX0wsXHJcbiAgICBkb1VSOiAgZ29fUixcclxuICAgIGRvX0w6ICB0cl9MLFxyXG4gICAgZG9fUjogIHRyX1IsXHJcbiAgICBtZW51OiAgbWVudSxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfbW92ZV9tb2RlKCk6IHZvaWQge1xyXG4gICAgZ19jdGxzLnNldChjdGxzX21vdmVfbm9yKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjdF9tb3ZlX21vZGUoKTogdm9pZCB7XHJcbiAgICBnX2N0bHMuYWN0KGN0bHNfbW92ZV9ub3IpO1xyXG4gICAgZ192c3cudmlldyhnX3Zzdy5Nb3ZlKCkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIGdfaHJlc0luZm8/LnVwZGF0ZSgpO1xyXG4gICAgc2V0Q2FudmFzM0RDbGljaygpO1xyXG59XHJcblxyXG5cclxuICAgIC8qKioqKioqKioqKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqICoqKioqKioqKioqKioqL1xyXG4gICAgLyogIEhUTUxQcmVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7ICAgICovXHJcbiAgICAvKiAgSFRNTEVsZW1lbnQ/LnNldEF0dHJpYnV0ZSgnaWQnLCAndV9hcnJhdycpOyAgICAgICAgKi9cclxuICAgIC8qICBIVE1MRWxlbWVudD8uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnZ3JpZCcpOyAqL1xyXG4gICAgLyogIEhUTUxFbGVtZW50Py5hcHBlbmRDaGlsZChIVE1MRWxlbWVudCk7ICAgICAgICAgICAgICovXHJcbiAgICAvKioqKioqKioqKioqICoqKioqKioqKioqKioqKioqKioqKioqKioqKiAqKioqKioqKioqKioqKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkb19pbnN0YW50X2xvYWQoKTogdm9pZCB7XHJcbiAgICBpbnN0YW50X2xvYWQoKS50aGVuKChqc29uT2JqOmFueSk9PnsgIFxyXG4gICAgICAgIGRlY29kZV9hbGwoanNvbk9iaj8uc2F2ZSk7XHJcbiAgICAgICAgZG9fbG9hZF9ib3R0b21faGFsZign44Ot44O844OJ44GX44G+44GX44GfJyk7ICBcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZG9faW5zdGFudF9zYXZlKCk6IHZvaWQge1xyXG4gICAgc2V0X2dfc2F2ZShcclxuICAgICAgICAvKiBzYXZlX2lkOiAqLyAgIC0xLFxyXG4gICAgICAgIC8qIHVuaXFfbm86ICovICAgLTEsXHJcbiAgICAgICAgLyogdGl0bGU6ICovICAgICAn57Ch5piT5L+d5a2Y44OH44O844K/JywgXHJcbiAgICAgICAgLyogZGV0YWlsOiAqLyAgICAnJywgXHJcbiAgICAgICAgICAgICAgICAgICAgYOOAjiR7Z19tYXplLmdldF9uYW1lKCl944CPIGAgXHJcbiAgICAgICAgICAgICAgICAgICAgKyBg5Zyw5LiLICR7Z190ZWFtLmdldF9wZCgpLnogKyAxfemajuWxpCBgIFxyXG4gICAgICAgICAgICAgICAgICAgICsgYChYOiAke2dfdGVhbS5nZXRfcGQoKS54fSwgWTogJHtnX3RlYW0uZ2V0X3BkKCkueX0pYCxcclxuICAgICAgICAvKiBhdXRvX21vZGU6ICovIHRydWUsXHJcbiAgICApO1xyXG4gICAgaW5zdGFudF9zYXZlKCk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjbGVhcl9tYXNrX2Fyb3VuZF90aGVfdGVhbSgpOiB2b2lkIHtcclxuICAgIGdfbWF6ZS5jbGVhcl9tYXNrX2Fyb3VuZF90aGVfdGVhbShnX3RlYW0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGFuZ2VfdW5leHBfdG9fZmxvb3IocDogQ19Qb2ludCk6IHZvaWQge1xyXG4gICAgZ19tYXplLmNoYW5nZV91bmV4cF90b19mbG9vcihwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ29fRigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJzbHQgPSBnX3RlYW0uZ2V0V2Fsa2VyKCkuaG9wZV9wX2Z3ZCgpO1xyXG4gICAgbW92ZV9jaGVjayhyc2x0KTtcclxuICAgIGhlcm9fb25fZXZlbnQoKTsgLy8g44Kq44OW44K444Kn44Go44Gu6YGt6YGH5Yem55CGXHJcbiAgICBkb19tb3ZlX2JvdHRvbV9oYWxmKCdibGlua19vbicpO1xyXG59XHJcbmZ1bmN0aW9uIGdvX0IoKTogdm9pZCB7XHJcbiAgICBjb25zdCByc2x0ID0gZ190ZWFtLmdldFdhbGtlcigpLmhvcGVfcF9iYWsoKTtcclxuICAgIG1vdmVfY2hlY2socnNsdCk7XHJcbiAgICBoZXJvX29uX2V2ZW50KCk7IC8vIOOCquODluOCuOOCp+OBqOOBrumBremBh+WHpueQhlxyXG4gICAgZG9fbW92ZV9ib3R0b21faGFsZignYmxpbmtfb24nKTtcclxufVxyXG5mdW5jdGlvbiBnb19MKCk6IHZvaWQge1xyXG4gICAgY29uc3QgcnNsdCA9IGdfdGVhbS5nZXRXYWxrZXIoKS5ob3BlX3BfbGZ0KCk7XHJcbiAgICBtb3ZlX2NoZWNrKHJzbHQpO1xyXG4gICAgaGVyb19vbl9ldmVudCgpOyAvLyDjgqrjg5bjgrjjgqfjgajjga7pga3pgYflh6bnkIZcclxuICAgIGRvX21vdmVfYm90dG9tX2hhbGYoJ2JsaW5rX29uJyk7XHJcbn1cclxuZnVuY3Rpb24gZ29fUigpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJzbHQgPSBnX3RlYW0uZ2V0V2Fsa2VyKCkuaG9wZV9wX3JndCgpO1xyXG4gICAgbW92ZV9jaGVjayhyc2x0KTtcclxuICAgIGhlcm9fb25fZXZlbnQoKTsgLy8g44Kq44OW44K444Kn44Go44Gu6YGt6YGH5Yem55CGXHJcbiAgICBkb19tb3ZlX2JvdHRvbV9oYWxmKCdibGlua19vbicpO1xyXG59XHJcbmZ1bmN0aW9uIHRyX1IoKTogdm9pZCB7XHJcbiAgICBjb25zdCByc2x0ID0gZ190ZWFtLmdldFdhbGtlcigpLmhvcGVfdHVybl9yKCk7XHJcbiAgICBtb3ZlX2NoZWNrKHJzbHQpO1xyXG4gICAgZG9fbW92ZV9ib3R0b21faGFsZignYmxpbmtfb2ZmJyk7XHJcbn1cclxuZnVuY3Rpb24gdHJfTCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHJzbHQgPSBnX3RlYW0uZ2V0V2Fsa2VyKCkuaG9wZV90dXJuX2woKTtcclxuICAgIG1vdmVfY2hlY2socnNsdCk7XHJcbiAgICBoZXJvX29uX2V2ZW50KCk7IC8vIOOCquODluOCuOOCp+OBqOOBrumBremBh+WHpueQhlxyXG4gICAgZG9fbW92ZV9ib3R0b21faGFsZignYmxpbmtfb2ZmJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1vdmVfY2hlY2socjogSV9Ib3BlQWN0aW9uKTogdm9pZCB7XHJcbiAgICBnX212bS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICAvL2dfbWF6ZeWFqOS9k+OBruOCquODluOCuOOCp+ihjOWLleOBruWHpueQhlxyXG4gICAgYWN0aW9uX29iaigpO1xyXG5cclxuICAgIGlmICghci5oYXNfaG9wZSkgcmV0dXJuO1xyXG4gICAgc3dpdGNoIChyLmhvcGUpIHtcclxuICAgICAgICBjYXNlICdXYWl0JzpcclxuICAgIC8vICAgICAgICBnX3RlYW0uZ2V0V2Fsa2VyKCkuc2V0X3BkKHIuc3Viaik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ1R1cm4nOlxyXG4gICAgICAgICAgICBjb25zdCBfdHVybl9yc2x0ID0gY2FuX3R1cm5fdGVhbShyKTtcclxuICAgICAgICAgICAgaWYgKF90dXJuX3JzbHQub2spIGdfdGVhbS5nZXRXYWxrZXIoKS5zZXRfcGQoci5zdWJqKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnTW92ZSc6XHJcbiAgICAgICAgICAgIGNvbnN0IF9tb3ZlX3JzbHQgPSBjYW5fbW92ZV90ZWFtKHIpO1xyXG4gICAgICAgICAgICBpZiAoX21vdmVfcnNsdC5vaykge1xyXG4gICAgICAgICAgICAgICAgLy8g6YCy6KGM5pa55ZCR44G46YCy44KAXHJcbiAgICAgICAgICAgICAgICBnX3RlYW0uZ2V0V2Fsa2VyKCkuc2V0X3BkKHIuc3Viaik7XHJcbiAgICAgICAgICAgICAgICAvLyBIUOiHquWLleWbnuW+qVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoZXJvIG9mIGdfaHJlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoZXJvID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaGVyby5pc19hbGl2ZSgpKSAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlcm8uaHBfYXV0b19oZWFsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgLy8gICBhbGVydCAoICdyLnJlcyA9ICcgKyBfcnNsdC5yZXMgKTsgXHJcbiAgICAgICAgICAgICAgICAvLyDpgLLooYzmlrnlkJHjgbjpgLLjgoHjgarjgYRcclxuICAgICAgICAgICAgICAgIC8vIOODgOODoeODvOOCuOWHpueQhlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGFtYWdlICA9IF9pcmFuZChNYXRoLnRydW5jKF9tb3ZlX3JzbHQuZG1nICogMC45KSwgTWF0aC5jZWlsKF9tb3ZlX3JzbHQuZG1nICogMS4xKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGhlcm8gb2YgZ19ocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlcm8gPT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoZXJvLmlzX2FsaXZlKCkpICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVyby5ocF9kYW1hZ2UoZGFtYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOOBtuOBpOOBi+OBo+OBn+ODoeODg+OCu+ODvOOCuOWHpueQhlxyXG4gICAgICAgICAgICAgICAgZG9udF9tb3ZlKHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgZ19ocmVzSW5mby51cGRhdGUoKTtcclxufSBcclxuXHJcbmZ1bmN0aW9uIGRvbnRfbW92ZShyOiBJX0hvcGVBY3Rpb24pOiB2b2lkIHtcclxuICAgIGdfbXZtLm5vcm1hbF9tZXNzYWdlKCfpgLLjgoHjgarjgYTvvIHvvIjnrJHvvIknKTtcclxuICAgIHJldHVybjtcclxufVxyXG5cclxuLy8g44Kq44OW44K444Kn5o6l6L+R5Yem55CGXHJcbmZ1bmN0aW9uIGFyb3VuZF9vYmoocjogSV9Ib3BlQWN0aW9uKTogdm9pZCB7fSBcclxuXHJcbi8vIGdfbWF6ZeWFqOS9k+OBruOCquODluOCuOOCp+OBruihjOWLleWHpueQhlxyXG5mdW5jdGlvbiBhY3Rpb25fb2JqKCk6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBvYmplIG9mIGdfbWF6ZS5nZXRfb2JqX2FycmF5KCkpIHtcclxuICAgICAgICBpZiAob2JqZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgY29uc3Qgd2Fsa2VyID0gb2JqZS53YWxrZXIoKTtcclxuICAgICAgICBpZiAod2Fsa2VyID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBjb25zdCB3cmVzICAgPSBvYmplLndyZXMoKTtcclxuICAgICAgICBpZiAod3JlcyAgID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBjb25zdCBob3BlID0gd2Fsa2VyLndvbmRlcigpO1xyXG4gICAgICAgIGlmICghaG9wZS5oYXNfaG9wZSkge1xyXG4gICAgICAgICAgICBnX21lcy5ub3JtYWxfbWVzc2FnZShg6L+R44GP44GuV2FuZGVyV2Fsa2Vy44Gv44KE44KL5rCX44GM44GC44KK44G+44Gb44KT44CCYCk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYWN0aW9uID0gY2FuX21vdmVfd25kcih3YWxrZXIsIGhvcGUpO1xyXG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnJlcykge1xyXG4gICAgICAgICAgICBjYXNlICdNb3ZlJzpcclxuICAgICAgICAgICAgY2FzZSAnVHVybic6XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLm9rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2Fsa2VyLnNldF9wZChob3BlLnN1YmopO1xyXG4gICAgICAgICAgICAgICAgICAgIGdfbWVzLm5vcm1hbF9tZXNzYWdlKGDov5HjgY/jga5XYW5kZXJXYWxrZXLjgYwoeDoke3dhbGtlci5nZXRfcGQoKS54fSx5OiR7d2Fsa2VyLmdldF9wZCgpLnl9KSjlkJE6JHt3YWxrZXIuZ2V0X3BkKCkuZH0p44GrJHtob3BlLmhvcGV944GX44G+44GX44Gf44CCYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdfbWVzLm5vcm1hbF9tZXNzYWdlKGDov5HjgY/jga5XYW5kZXJXYWxrZXLjga/kvZXjgoLjgZfjgb7jgZvjgpPjgafjgZfjgZ/jgIJgKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ0Jsb2NrJzpcclxuICAgICAgICAgICAgICAgICAgICAvLyDjgZPjgZPjgafjg4Djg6Hjg7zjgrjlh6bnkIZcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHduZHIgb2Ygd3Jlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod25kciA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3bmRyLmlzX2FsaXZlKCkpICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHduZHIuaHBfZGFtYWdlKGFjdGlvbi5kbWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBnX21lcy5ub3JtYWxfbWVzc2FnZShg6L+R44GP44GuV2FuZGVyV2Fsa2Vy44Gv44G244Gk44GL44KK44G+44GX44Gf77ye77ycYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdXYWl0JzpcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9IFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gSGVyb2Vz44GM44Kq44OW44K444Kn44Go5ZCM44GY5L2N572u44Gr5p2l44Gf5pmC44Gu44Kk44OZ44Oz44OI5Yem55CGXHJcbmZ1bmN0aW9uIGhlcm9fb25fZXZlbnQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBwb3MgID0gZ190ZWFtLmdldF9wZCgpO1xyXG4gICAgY29uc3Qgb2JqcyA9IGdfbWF6ZS5nZXRfYW55X29iaihwb3MpO1xyXG4gICAgZm9yIChsZXQgbyBvZiBvYmpzKSB7XHJcbiAgICAgICAgaWYgKG8gPT09IHVuZGVmaW5lZCkgY29udGludWU7XHJcbiAgICAgICAgaWYgKG8gaW5zdGFuY2VvZiBDX1RlYW0pIGNvbnRpbnVlOyAgIC8vIENfVGVhbeOCgk9iauOBqOOBl+OBpueZu+mMsuOBleOCjOOBpuOBhOOCi+OBjOeEoeimluOBmeOCi1xyXG4gICAgICAgIC8vIOWQhOOCquODluOCuOOCp+OCr+ODiOOBruOCpOODmeODs+ODiOOCkuWHpueQhlxyXG4gICAgICAgIGlmIChvLmdldF9wZCgpLndpdGhpbihwb3MpKSB7ICAgICAgICAgICAgICAgICAvLyDmiKbpl5jvvIjjg5Djg4jjg6vvvJpidHRs77yJ44Kk44OZ44Oz44OI44Gv44Kz44Kz77yBYWN0X2J0dGxfbW9kZSgpXHJcbiAgICAgICAgICAgIGFjdF9idHRsX21vZGUobyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g56e75YuV5YWI44GM6ZqO5q6144Gq44KJ6ZqO5q6144Gu5Yem55CGXHJcbiAgICAgICAgICAgIGNvbnN0IGtpbmQgPSBnX21hemUuZ2V0X2NlbGwoZ190ZWFtLmdldF9wZCgpKT8uZ2V0S2luZCgpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgVF9NektpbmQuU3RyVXA6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFRfTXpLaW5kLlN0ckRuOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBUX016S2luZC5TdHJVRDpcclxuICAgICAgICAgICAgICAgICAgICBkb19zdGFpcnNfbW90aW9uKGtpbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8g6ZqO5q6144Gu5Yem55CG44GM57WC44KP44Gj44Gf44KJ44GT44GT44GncmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvX21vdmVfYm90dG9tX2hhbGYoYmxpbmtfbW9kZTogc3RyaW5nKTogdm9pZCB7ICAgLy9hbGVydCgnRmxvb3I/ID0gJyArIGdfdGVhbS5nZXRfcCgpLnopO1xyXG4gICAgY2hhbmdlX3VuZXhwX3RvX2Zsb29yKGdfdGVhbS5nZXRfcGQoKSk7XHJcbiAgICBkaXNwbGF5X21hemUzRCgpO1xyXG4gICAgZGlzcGxheV9tYXplX25hbWUoKTtcclxuXHJcbiAgICBpZiAoYmxpbmtfbW9kZSA9PT0gJ2JsaW5rX29uJykgbWF6ZTNEX2JsaW5rX29uX2RpcmVjdGlvbigpO1xyXG4gICAgZWxzZSBtYXplM0RfYmxpbmtfb2ZmX2RpcmVjdGlvbigpO1xyXG4gICAgXHJcbiAgICBpZiAoIW1hc2tfZmxvb3JfY2xlYXJlZCgpKSB7XHJcbiAgICAgICAgY2xlYXJfbWFza19hcm91bmRfdGhlX3RlYW0oKTsgXHJcbiAgICAgICAgaWYgKG1hc2tfZmxvb3JfY2xlYXJlZCgpKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXNrX21hemVfY2xlYXJlZCgpKSBhbGVydCgn44GK44KB44Gn44Go44GG77yB77yB44GT44Gu6L+35a6u44KS5Yi26KaH44GX44G+44GX44Gf77yB77yB77yBJyk7XHJcbiAgICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICBhbGVydCgn44GT44Gu6ZqO44KS5Yi26KaH44GX44G+44GX44Gf77yB77yBJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGlzcGxheV9tYXplMkQoKTtcclxuICAgIGRpc3BsYXlfbWF6ZUNoKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hc2tfZmxvb3JfY2xlYXJlZCgpOiBib29sZWFuIHtyZXR1cm4gZ19tYXplLmlzX2Zsb29yX2NsZWFyZWQoZ190ZWFtLmdldF9wZCgpKX1cclxuZnVuY3Rpb24gbWFza19tYXplX2NsZWFyZWQoKTogIGJvb2xlYW4ge3JldHVybiBnX21hemUuaXNfbWF6ZV9jbGVhcmVkKCl9XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5X21hemVfbmFtZSgpOiB2b2lkIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXplX3ZpZXczRF9tYXplX25hbWVfaW5mbycpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG4gICAgICAgIHAuaW5uZXJIVE1MID0gZ19tYXplLmdldF9uYW1lKCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHt9O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gc2V0Q2FudmFzM0RDbGljaygpOiB2b2lkIHtcclxuICAgIGlmIChnX2RzPy5jYW52YXMgPT09IG51bGwpICAgICByZXR1cm47XHJcbiAgICBnX2RzLmNhbnZhcy5vbmNsaWNrID0gY2FudmFzM0RjbGljaztcclxufVxyXG5mdW5jdGlvbiBjbHJDYW52YXMzRENsaWNrKCk6IHZvaWQge1xyXG4gICAgaWYgKGdfZHM/LmNhbnZhcyA9PT0gbnVsbCkgICAgIHJldHVybjtcclxuICAgIGdfZHMuY2FudmFzLm9uY2xpY2sgPSAoKT0+e307XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbnZhczNEY2xpY2soZXY6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgIGlmIChnX2RzPy5jYW52YXMgPT09IG51bGwpICAgICByZXR1cm47XHJcbiAgICBpZiAoZXYudGFyZ2V0ICE9PSBnX2RzLmNhbnZhcykgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGN2cyA9IGdfZHMuY2FudmFzO1xyXG4vL2RlYnVnICAgIGFsZXJ0KGB4PSR7KGV2Lm9mZnNldFg/Py0xKX0sIHk9JHsoZXYub2Zmc2V0WT8/LTEpfWApO1xyXG5cclxuICAgIGNvbnN0IGxlZnRfcGFuZV9yICA9IGN2cy5jbGllbnRXaWR0aCAgKiAwLjI1O1xyXG4gICAgY29uc3QgcmdodF9wYW5lX2wgID0gY3ZzLmNsaWVudFdpZHRoICAqIDAuNzU7XHJcbiAgICBjb25zdCBiYWNrX3BhbmVfdSAgPSBjdnMuY2xpZW50SGVpZ2h0ICogMC44MDtcclxuXHJcbiAgICAvLyDjgq3jg6Pjg7Pjg5Djgrnjga7lt6blgbRcclxuICAgIGlmIChldi5vZmZzZXRYIDwgbGVmdF9wYW5lX3IpIHsoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xfYXJyJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpOyByZXR1cm47fVxyXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544Gu5Y+z5YG0XHJcbiAgICBpZiAoZXYub2Zmc2V0WCA+IHJnaHRfcGFuZV9sKSB7KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyX2FycicpIGFzIEhUTUxCdXR0b25FbGVtZW50KT8uY2xpY2soKTsgcmV0dXJuO31cclxuICAgIC8v44Kt44Oj44Oz44OQ44K544Gu5Lit5aSu5LiKKOWJjemAsilcclxuICAgIGlmIChldi5vZmZzZXRZIDwgYmFja19wYW5lX3UpIHsoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VfYXJyJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpPy5jbGljaygpOyByZXR1cm47fVxyXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544Gu5Lit5aSu5LiLKOW+jOmAgClcclxuICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZF9hcnInKSBhcyBIVE1MQnV0dG9uRWxlbWVudCk/LmNsaWNrKCk7IHJldHVybjtcclxufVxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBkb19zdGFpcnNfbW90aW9uKGtpbmQ6IFRfTXpLaW5kKTogdm9pZCB7XHJcbiAgICBzd2l0Y2ggKGtpbmQpIHtcclxuICAgICAgICBjYXNlIFRfTXpLaW5kLlN0clVwOlxyXG4gICAgICAgICAgICBjbHJDYW52YXMzRENsaWNrKCk7XHJcbiAgICAgICAgICAgIGFjdF9VcF9tb2RlKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgVF9NektpbmQuU3RyRG46XHJcbiAgICAgICAgICAgIGNsckNhbnZhczNEQ2xpY2soKTtcclxuICAgICAgICAgICAgYWN0X0RuX21vZGUoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBUX016S2luZC5TdHJVRDpcclxuICAgICAgICAgICAgY2xyQ2FudmFzM0RDbGljaygpO1xyXG4gICAgICAgICAgICBhY3RfVURfbW9kZSgpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIG1lbnUoKTogdm9pZCB7XHJcbiAgICBjbHJDYW52YXMzRENsaWNrKCk7XHJcbiAgICBnX212bS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICBhY3RfbWVudV9tb2RlKCk7XHJcbn1cclxuIiwiaW1wb3J0IHsgYWN0X21lbnVfbW9kZSB9ICAgICAgIGZyb20gXCIuL0Zfc2V0X21lbnVfbW9kZVwiO1xyXG5pbXBvcnQgeyBnX2N0bHMsIGdfbWF6ZSwgZ19jdm0sIGdfdGVhbSwgZ192c3cgfSBmcm9tIFwiLi9nbG9iYWxfZm9yX21hemVcIjtcclxuXHJcbmltcG9ydCB7IENfVXJsT3B0IH0gICAgICAgICAgICBmcm9tIFwiLi4vZF91dGwvQ19VcmxPcHRcIjtcclxuaW1wb3J0IHsgdG1wX3NhdmUgfSAgICAgICAgICAgIGZyb20gXCIuLi9kX2Ntbi9GX2xvYWRfYW5kX3NhdmVcIjtcclxuaW1wb3J0IHsgUE9TVF9hbmRfbW92ZV9wYWdlIH0gIGZyb20gXCIuLi9kX2Ntbi9GX1BPU1RcIjtcclxuaW1wb3J0IHsgZ19teV91cmwsIGdfc2F2ZSwgZ19zdGFydF9lbnYsIGdfdXJsLCBnX3VybF9tYWlfZ3VsZCB9IGZyb20gXCIuLi9kX2Ntbi9nbG9iYWxcIjtcclxuXHJcbmxldCBtb2RlOiBzdHJpbmc7XHJcblxyXG5jb25zdCBjdGxzX212cHRfbm9yID0ge1xyXG4gICAgbmFtZTogJ212cHRfbm9yJywgXHJcbiAgICBpc09LOiAgaXNPSyxcclxuICAgIGlzTkc6ICBpc05HLFxyXG4gICAgY3BPSzogIGlzT0ssXHJcbiAgICBjcE5HOiAgaXNORyxcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfbXZwdF9tb2RlKCk6IHZvaWQge1xyXG4gICAgZ19jdGxzLnNldChjdGxzX212cHRfbm9yKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjdF9tdnB0X21vZGUoKTogdm9pZCB7XHJcbiAgICBtb2RlID0gJ2NoZWsnO1xyXG4gICAgZ19jdm0ubm90aWNlX21lc3NhZ2UoJ+acrOW9k+OBq+ihl+OBuOaIu+OCiuOBvuOBmeOBi++8n+OBk+OBruWgtOaJgOOBq+OBr+OCruODq+ODieOBi+OCieW+qeW4sOOBp+OBjeOBvuOBmScpO1xyXG4gICAgZ19jdGxzLmFjdChjdGxzX212cHRfbm9yKTtcclxuICAgIGdfdnN3LnZpZXcoZ192c3cuTXZQdCgpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNPSygpOiB2b2lkIHtcclxuICAgIHN3aXRjaChtb2RlKSB7XHJcbiAgICAgICAgY2FzZSAndmlldyc6XHJcbiAgICAgICAgICAgIGdfY3ZtLm5vdGljZV9tZXNzYWdlKCfmnKzlvZPjgavooZfjgbjmiLvjgorjgb7jgZnjgYvvvJ/jgZPjga7loLTmiYDjgavjga/jgq7jg6vjg4njgYvjgonlvqnluLDjgafjgY3jgb7jgZknKTtcclxuICAgICAgICAgICAgbW9kZSA9ICdjaGVrJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY2hlayc6XHJcbiAgICAgICAgICAgIGdfY3ZtLm5vdGljZV9tZXNzYWdlKCfooZfjgbjmiLvjgorjgb7jgZfjgZ8nKTtcclxuICAgICAgICAgICAgbW9kZSA9ICd2aWV3JztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG12cHQgPSBnX3RlYW0uZ2V0X2xvYygpLmNsb25lKCk7XHJcbiAgICAgICAgICAgIG12cHQuc2V0X3VybChnX215X3VybCk7XHJcbiAgICAgICAgICAgIG12cHQuc2V0X3RpZChnX3RlYW0udWlkKCkpO1xyXG4gICAgICAgICAgICBtdnB0LnNldF91aWQoZ19tYXplLnVpZCgpKTtcclxuXHJcbiAgICAgICAgICAgIGdfc2F2ZS5hbGxfbXZwdFttdnB0LnVpZCgpXSAgID0gbXZwdDtcclxuICAgICAgICAgICAgZ19zYXZlLmFsbF90ZWFtW2dfdGVhbS51aWQoKV0gPSBnX3RlYW07XHJcbiAgICAgICAgICAgIGdfc2F2ZS5hbGxfbWF6ZVtnX21hemUudWlkKCldID0gZ19tYXplO1xyXG5cclxuICAgICAgICAgICAgdG1wX3NhdmUoKS50aGVuKCgpPT57XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcHQgPSBuZXcgQ19VcmxPcHQoKTtcclxuICAgICAgICAgICAgICAgIG9wdC5zZXQoJ21vZGUnLCAnbG9hZCcpO1xyXG4gICAgICAgICAgICAgICAgb3B0LnNldCgncGlkJywgICBnX3N0YXJ0X2Vudi5waWQpO1xyXG4gICAgICAgICAgICAgICAgb3B0LnNldCgnb3B0JywgICAxMDApO1xyXG4gICAgICAgICAgICAgICAgUE9TVF9hbmRfbW92ZV9wYWdlKGdfdXJsW2dfdXJsX21haV9ndWxkXSwgb3B0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzTkcoKTogdm9pZCB7XHJcbiAgICBzd2l0Y2gobW9kZSkge1xyXG4gICAgICAgIGNhc2UgJ2NoZWsnOlxyXG4gICAgICAgICAgICBnX2N2bS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICAgICAgICAgIGFjdF9tZW51X21vZGUoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgX3JvdW5kIH0gICAgICAgICAgICAgIGZyb20gXCIuLi9kX3V0bC9GX01hdGhcIjtcclxuaW1wb3J0IHsgQ19VcmxPcHQgfSAgICAgICAgICAgIGZyb20gXCIuLi9kX3V0bC9DX1VybE9wdFwiO1xyXG5pbXBvcnQgeyBUX0xja2QgfSAgICAgICAgICAgICAgZnJvbSBcIi4uL2RfbWRsL0NfTG9jYXRpb25cIjtcclxuaW1wb3J0IHsgQ19Qb2ludERpciB9ICAgICAgICAgIGZyb20gXCIuLi9kX21kbC9DX1BvaW50RGlyXCI7XHJcbmltcG9ydCB7IElfTWF6ZU9iaiAgfSAgICAgICAgICBmcm9tIFwiLi4vZF9tZGwvQ19NYXplT2JqXCI7XHJcbmltcG9ydCB7IENfQ3RsQ3Vyc29yIH0gICAgICAgICBmcm9tIFwiLi4vZF9jdGwvQ19DdGxDdXJzb3JcIjtcclxuaW1wb3J0IHsgUE9TVF9hbmRfbW92ZV9wYWdlIH0gIGZyb20gXCIuLi9kX2Ntbi9GX1BPU1RcIjtcclxuaW1wb3J0IHsgZ2VuZXJhbF9sb2FkLCBnZW5lcmFsX3NhdmUsIGdldF9zYXZlX2luZm8gfSAgICBmcm9tIFwiLi4vZF9jbW4vRl9sb2FkX2FuZF9zYXZlXCI7XHJcbmltcG9ydCB7IF9hbGVydCwgZ19tZXMsIGdfbXlfdXJsLCBnX3NhdmUsIGdfc3RhcnRfZW52IH0gZnJvbSBcIi4uL2RfY21uL2dsb2JhbFwiO1xyXG5pbXBvcnQgeyBhY3RfbWVudV9tb2RlIH0gICAgICAgZnJvbSBcIi4vRl9zZXRfbWVudV9tb2RlXCI7XHJcbmltcG9ydCB7IGFjdF9tb3ZlX21vZGUsIGRvX21vdmVfYm90dG9tX2hhbGYgfSBmcm9tIFwiLi9GX3NldF9tb3ZlX21vZGVcIjtcclxuaW1wb3J0IHsgXHJcbiAgICBnX2N0bHMsXHJcbiAgICBnX2N2bSwgXHJcbiAgICBnX212bSwgXHJcbiAgICBnX3ZzdywgXHJcbiAgICBnX21hemUsIFxyXG4gICAgZ190ZWFtLCBcclxuICAgIGdfaHJlcyxcclxuICAgIGdfaHJlc0luZm8sXHJcbiAgICBjbHJfZ19ocmVzLFxyXG4gICAgaW5pdF9nX3ZpZXcyWCwgXHJcbn0gZnJvbSBcIi4vZ2xvYmFsX2Zvcl9tYXplXCI7XHJcbmltcG9ydCB7IFRfQ3RscyB9IGZyb20gXCIuL0NfRGVmYXVsdEN0bHNcIjtcclxuaW1wb3J0IHsgQ19TYXZlSW5mbyB9IGZyb20gXCIuLi9kX21kbC9DX1NhdmVJbmZvXCI7XHJcblxyXG5sZXQgICBmb3Jfc2F2ZTogYm9vbGVhbiAgPSBmYWxzZTtcclxuXHJcbmxldCAgIFVMX2lkeDogbnVtYmVyID0gICAwO1xyXG5sZXQgICBVTF9iYWs6IG51bWJlciA9IDk5OTtcclxuXHJcbmxldCAgIHNhdmVfVUxfbGlzdDogIEhUTUxVTGlzdEVsZW1lbnQ7XHJcbmxldCAgIFVMX2xpc3RfY3JzcjogIENfQ3RsQ3Vyc29yO1xyXG5sZXQgICBVTF9saXN0X2xlbmc6ICBudW1iZXI7XHJcblxyXG5sZXQgICBVTF90b19EYXRhOiAgICAgICB7W1VMX2lkeDogbnVtYmVyXTogLyogZGF0YV9pZHg6ICovIG51bWJlcn1cclxuXHJcbmxldCAgIGZvcm1faWQ6ICAgICAgICAgIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbmxldCAgIGZvcm1fdGltZTogICAgICAgIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG5sZXQgICBmb3JtX2RldGFpbDogICAgICBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG5sZXQgICBmb3JtX3BvaW50OiAgICAgICBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuXHJcbmxldCAgIGlzX2tha3VuaW4gPSBmYWxzZTtcclxuXHJcbmV4cG9ydCB0eXBlIFRfc2F2ZV9saXN0ID0ge1xyXG4gICAgc2F2ZV9pZDogICBudW1iZXIsXHJcbiAgICB1bmlxX25vOiAgIG51bWJlcixcclxuICAgIHRpdGxlOiAgICAgc3RyaW5nLFxyXG4gICAgZGV0YWlsOiAgICBzdHJpbmcsXHJcbiAgICBzY2VuZTogICAgIHN0cmluZyxcclxuICAgIHBvaW50OiAgICAgc3RyaW5nLFxyXG4gICAgc2F2ZV90aW1lOiBzdHJpbmcsXHJcbiAgICBhdXRvX21vZGU6IHN0cmluZyxcclxuICAgIF9faXNfbmV3OiAgYm9vbGVhbixcclxufVxyXG5cclxubGV0ICAgc2F2ZV9saXN0OiAgICAgICAge1t1bmlxX25vOiBudW1iZXJdOiBDX1NhdmVJbmZvfTtcclxuY29uc3Qgc2F2ZV9saXN0X21heCA9IDIwO1xyXG5cclxuY29uc3QgY3Rsc19sb2FkX3J0biA9IHtcclxuICAgIG5hbWU6ICdsb2FkX3J0bicsIFxyXG4gICAgaXNORzogIGdvX2JhY2tfbWVudV9tb2RlLFxyXG4gICAgaXNSVDogIGdvX2JhY2tfbWVudV9tb2RlLFxyXG4gICAgY3BSVDogIGdvX2JhY2tfbWVudV9tb2RlLFxyXG59XHJcbmNvbnN0IGN0bHNfbG9hZF9ub3IgPSB7XHJcbiAgICBuYW1lOiAnbG9hZF9ub3InLCBcclxuICAgIGRvX1U6ICBkb19VLFxyXG4gICAgZG9fRDogIGRvX0QsXHJcbiAgICBkb19MOiAgZG9fTCxcclxuICAgIGRvX1I6ICBkb19SLFxyXG4gICAgaXNPSzogIGNoZWNrX2xvYWQsXHJcbiAgICBjcE9LOiAgY2hlY2tfbG9hZCxcclxuICAgIGlzTkc6ICBnb19iYWNrX21lbnVfbW9kZSxcclxuICAgIGlzUlQ6ICBnb19iYWNrX21lbnVfbW9kZSxcclxuICAgIGNwUlQ6ICBnb19iYWNrX21lbnVfbW9kZSxcclxufVxyXG5jb25zdCBjdGxzX2xvYWRfY2hrID0ge1xyXG4gICAgbmFtZTogJ2xvYWRfY2hrJywgXHJcbiAgICBkb19VOiAgZG9fVSxcclxuICAgIGRvX0Q6ICBkb19ELFxyXG4gICAgZG9fTDogIGRvX0wsXHJcbiAgICBkb19SOiAgZG9fUixcclxuICAgIGlzT0s6ICBpc09LX2Zvcl9sb2FkLFxyXG4gICAgY3BPSzogIGlzT0tfZm9yX2xvYWQsXHJcbiAgICBpc05HOiAgaXNOR19mb3JfbG9hZCxcclxuICAgIGNwTkc6ICBpc05HX2Zvcl9sb2FkLFxyXG4gICAgaXNSVDogIGdvX2JhY2tfbWVudV9tb2RlLFxyXG4gICAgY3BSVDogIGdvX2JhY2tfbWVudV9tb2RlLFxyXG59XHJcbmNvbnN0IGN0bHNfc2F2ZV9ub3IgPSB7XHJcbiAgICBuYW1lOiAnc2F2ZV9ub3InLCBcclxuICAgIGRvX1U6ICBkb19VLFxyXG4gICAgZG9fRDogIGRvX0QsXHJcbiAgICBkb19MOiAgZG9fTCxcclxuICAgIGRvX1I6ICBkb19SLFxyXG4gICAgaXNPSzogIGNoZWNrX3NhdmUsXHJcbiAgICBjcE9LOiAgY2hlY2tfc2F2ZSxcclxuICAgIGlzTkc6ICBnb19iYWNrX21lbnVfbW9kZSxcclxuICAgIGlzUlQ6ICBnb19iYWNrX21lbnVfbW9kZSxcclxuICAgIGNwUlQ6ICBnb19iYWNrX21lbnVfbW9kZSxcclxufVxyXG5jb25zdCBjdGxzX3NhdmVfY2hrID0ge1xyXG4gICAgbmFtZTogJ3NhdmVfY2hrJywgXHJcbiAgICBkb19VOiAgZG9fVSxcclxuICAgIGRvX0Q6ICBkb19ELFxyXG4gICAgZG9fTDogIGRvX0wsXHJcbiAgICBkb19SOiAgZG9fUixcclxuICAgIGlzT0s6ICBpc09LX2Zvcl9zYXZlLFxyXG4gICAgY3BPSzogIGlzT0tfZm9yX3NhdmUsXHJcbiAgICBpc05HOiAgaXNOR19mb3Jfc2F2ZSxcclxuICAgIGNwTkc6ICBpc05HX2Zvcl9zYXZlLFxyXG4gICAgaXNSVDogIGdvX2JhY2tfbWVudV9tb2RlLFxyXG4gICAgY3BSVDogIGdvX2JhY2tfbWVudV9tb2RlLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9TTF9tb2RlKCk6IHZvaWQge1xyXG4gICAgaW5pdF92aWV3KCk7XHJcbiAgICBpbml0X2N0bHMoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjdF9sb2FkX21vZGUoKTogdm9pZCB7XHJcbiAgICBfX3NldF9kYXRhKGZhbHNlKS50aGVuKCgpPT57XHJcbiAgICAgICAgaWYgKCFleGlzdF9zYXZlX2xpc3QoKSkge1xyXG4gICAgICAgICAgICBoaWRlX2xvYWRfZmllbGRzKCk7XHJcbiAgICAgICAgICAgIGdfY3ZtLm5vdGljZV9tZXNzYWdlKCfjg63jg7zjg4njgafjgY3jgovjg4fjg7zjgr/jgYzmnInjgorjgb7jgZvjgpMnKTtcclxuICAgICAgICAgICAgZ19jdGxzLmFjdChjdGxzX2xvYWRfcnRuKTtcclxuICAgICAgICAgICAgZ192c3cudmlldyhnX3Zzdy5Nb3ZlKCkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2hvd19sb2FkX2ZpZWxkcygpO1xyXG4gICAgICAgICAgICBkaXNwbGF5X21lc3NhZ2UoKTtcclxuICAgICAgICAgICAgZ19jdGxzLmFjdChjdGxzX2xvYWRfbm9yKTtcclxuICAgICAgICAgICAgZ192c3cudmlldyhnX3Zzdy5MZFN2KCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBhY3Rfc2F2ZV9tb2RlKCk6IHZvaWQge1xyXG4gICBfX3NldF9kYXRhKHRydWUpLnRoZW4oKCk9PntcclxuICAgICAgICBkaXNwbGF5X21lc3NhZ2UoKTtcclxuICAgICAgICBnX2N0bHMuYWN0KGN0bHNfc2F2ZV9ub3IpO1xyXG4gICAgICAgIGdfdnN3LnZpZXcoZ192c3cuTGRTdigpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBfX3NldF9kYXRhKF9mb3Jfc2F2ZTogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgZm9yX3NhdmUgPSBfZm9yX3NhdmU7IC8vIHRydWU6IEZvciBTYXZlLlxyXG5cclxuICAgIGdfY3ZtLmNsZWFyX21lc3NhZ2UoKTtcclxuICAgIGlzX2tha3VuaW4gPSBmYWxzZTtcclxuICAgIGF3YWl0IGRpc3BsYXlfc2F2ZV9saXN0KCk7IFxyXG59XHJcblxyXG5mdW5jdGlvbiBoaWRlX2xvYWRfZmllbGRzKCk6IHZvaWQge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xkc3ZfZGF0YV9saXN0JykgID8uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xkc3ZfZGF0YV9maWVsZHMnKT8uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzaG93X2xvYWRfZmllbGRzKCk6IHZvaWQge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xkc3ZfZGF0YV9saXN0JykgID8uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnYmxvY2snKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsZHN2X2RhdGFfZmllbGRzJyk/LnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBpbml0X2RhdGEoKTogdm9pZCB7fVxyXG5mdW5jdGlvbiBpbml0X3ZpZXcoKTogdm9pZCB7fVxyXG5mdW5jdGlvbiBpbml0X2N0bHMoKTogdm9pZCB7XHJcbiAgICBpc19rYWt1bmluID0gZmFsc2U7XHJcbiAgICBVTF9iYWsgPSA5OTk7XHJcblxyXG4gICAgZ19jdGxzLnNldChjdGxzX2xvYWRfcnRuKTtcclxuICAgIGdfY3Rscy5zZXQoY3Rsc19sb2FkX25vcik7XHJcbiAgICBnX2N0bHMuc2V0KGN0bHNfbG9hZF9jaGspO1xyXG4gICAgZ19jdGxzLnNldChjdGxzX3NhdmVfbm9yKTtcclxuICAgIGdfY3Rscy5zZXQoY3Rsc19zYXZlX2Noayk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT0tfZm9yX2xvYWQoKTogdm9pZCB7XHJcbiAgICBpZiAoc2F2ZV9VTF9saXN0ID09PSBudWxsKSByZXR1cm47XHJcbiAgICBpZiAoVUxfaWR4IDwgMCB8fCBVTF9pZHggPiBVTF9saXN0X2xlbmcgLSAxKSByZXR1cm47XHJcblxyXG4vLyAgICBpZiAoIWlzX2tha3VuaW4pIGNoZWNrX2xvYWQoKTsgZWxzZSBsb2FkKCk7XHJcbiAgICBsb2FkKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT0tfZm9yX3NhdmUoKTogdm9pZCB7XHJcbiAgICBpZiAoc2F2ZV9VTF9saXN0ID09PSBudWxsKSByZXR1cm47XHJcbiAgICBpZiAoVUxfaWR4IDwgMCB8fCBVTF9pZHggPiBVTF9saXN0X2xlbmcgLSAxKSByZXR1cm47XHJcblxyXG4vLyAgICBpZiAoIWlzX2tha3VuaW4pIGNoZWNrX3NhdmUoKTsgZWxzZSBzYXZlKCk7XHJcbiAgICBzYXZlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzTkdfZm9yX2xvYWQoKTogdm9pZCB7XHJcbiAgICBfaXNOR18oY3Rsc19sb2FkX25vcik7XHJcbn1cclxuZnVuY3Rpb24gaXNOR19mb3Jfc2F2ZSgpOiB2b2lkIHtcclxuICAgIF9pc05HXyhjdGxzX3NhdmVfbm9yKTtcclxufVxyXG5mdW5jdGlvbiBfaXNOR18oY3RsczogVF9DdGxzKTogdm9pZCB7XHJcbiAgICBpZiAoIWlzX2tha3VuaW4pIHtcclxuICAgICAgICBnX2N2bS5jbGVhcl9tZXNzYWdlKCk7XHJcbiAgICAgICAgZ29fYmFja19tZW51X21vZGUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaXNfa2FrdW5pbiA9IGZhbHNlO1xyXG4gICAgICAgIGdfY3Rscy5hY3QoY3Rscyk7XHJcbiAgICAgICAgZGlzcGxheV9tZXNzYWdlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdvX2JhY2tfbWVudV9tb2RlKCk6IHZvaWQge1xyXG4gICAgZ19jdm0uY2xlYXJfbWVzc2FnZSgpO1xyXG4gICAgYWN0X21lbnVfbW9kZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnb19iYWNrX21vdmVfbW9kZSgpOiB2b2lkIHtcclxuICAgIGFjdF9tb3ZlX21vZGUoKTtcclxuICAgIGRvX21vdmVfYm90dG9tX2hhbGYoJ2JsaW5rX29mZicpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkb19VKCk6IHZvaWQge1xyXG4gICAgZGlzcGxheV9tZXNzYWdlKCk7XHJcbiAgICBVTF9pZHggPSBVTF9saXN0X2Nyc3IucG9zX1UoKTtcclxuICAgIGZvcm1fc2V0KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvX0QoKTogdm9pZCB7IFxyXG4gICAgZGlzcGxheV9tZXNzYWdlKCk7XHJcbiAgICBVTF9pZHggPSBVTF9saXN0X2Nyc3IucG9zX0QoKTtcclxuICAgIGZvcm1fc2V0KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvX0woKTogdm9pZCB7XHJcbiAgICBkaXNwbGF5X21lc3NhZ2UoKTtcclxuICAgIFVMX2lkeCA9IFVMX2xpc3RfY3Jzci5wb3NfTCgpO1xyXG4gICAgZm9ybV9zZXQoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZG9fUigpOiB2b2lkIHtcclxuICAgIGRpc3BsYXlfbWVzc2FnZSgpO1xyXG4gICAgVUxfaWR4ID0gVUxfbGlzdF9jcnNyLnBvc19SKCk7XHJcbiAgICBmb3JtX3NldCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JtX2NscigpOnZvaWQge1xyXG4gICAgaWYgKFVMX2lkeCA8IDAgfHwgVUxfaWR4ID4gVUxfbGlzdF9sZW5nIC0gMSkgcmV0dXJuO1xyXG5cclxuICAgIGZvcm1faWQgICAudmFsdWUgICAgICA9ICctMSc7XHJcbiAgICBmb3JtX3RpbWUgLmlubmVyVGV4dCAgPSAnJztcclxuICAgIGZvcm1fcG9pbnQuaW5uZXJUZXh0ICA9ICcnO1xyXG5cclxuICAgIGlmIChmb3JtX2RldGFpbC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5JykpIHtcclxuICAgICAgICBmb3JtX2RldGFpbC5yZW1vdmVBdHRyaWJ1dGUoJ3JlYWRvbmx5Jyk7XHJcbiAgICAgICAgZm9ybV9kZXRhaWwudmFsdWUgPSAnJztcclxuICAgICAgICBmb3JtX2RldGFpbC5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJ3JlYWRvbmx5Jyk7XHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgICAgZm9ybV9kZXRhaWwudmFsdWUgPSAnJztcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZm9ybV9zZXQoKTp2b2lkIHtcclxuICAgIGlmIChVTF9pZHggPCAwIHx8IFVMX2lkeCA+IFVMX2xpc3RfbGVuZyAtIDEpIHJldHVybjtcclxuXHJcbiAgICBmb3JtX2NscigpO1xyXG4gICAgY29uc3QgZGF0YV9pZHggPSBVTF90b19EYXRhW1VMX2lkeF07XHJcblxyXG4gICAgZm9ybV9pZCAgIC52YWx1ZSAgICAgID0gc2F2ZV9saXN0W2RhdGFfaWR4XS5zYXZlX2lkLnRvU3RyaW5nKCk7XHJcbiAgICBmb3JtX3RpbWUgLmlubmVyVGV4dCAgPSBzYXZlX2xpc3RbZGF0YV9pZHhdLnNhdmVfdGltZT8udG9JU09TdHJpbmcoKTtcclxuICAgIGZvcm1fcG9pbnQuaW5uZXJUZXh0ICA9IHNhdmVfbGlzdFtkYXRhX2lkeF0ucG9pbnQ7XHJcblxyXG4gICAgaWYgKGZvcm1fZGV0YWlsLmhhc0F0dHJpYnV0ZSgncmVhZG9ubHknKSkge1xyXG4gICAgICAgIGZvcm1fZGV0YWlsLnJlbW92ZUF0dHJpYnV0ZSgncmVhZG9ubHknKTtcclxuICAgICAgICBmb3JtX2RldGFpbC52YWx1ZSA9IHNhdmVfbGlzdFtkYXRhX2lkeF0uZGV0YWlsO1xyXG4gICAgICAgIGZvcm1fZGV0YWlsLnNldEF0dHJpYnV0ZSgncmVhZG9ubHknLCAncmVhZG9ubHknKTtcclxuICAgIH1lbHNlIHtcclxuICAgICAgICBmb3JtX2RldGFpbC52YWx1ZSA9IHNhdmVfbGlzdFtkYXRhX2lkeF0uZGV0YWlsO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGlzcGxheV9zYXZlX2xpc3QoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBkYXRhX2xpc3QgICA9ICdsZHN2X2RhdGFfbGlzdCc7XHJcbiAgICBjb25zdCBkYXRhX2lkICAgICA9ICdsZHN2X2RhdGFfaWQnO1xyXG4gICAgY29uc3QgZGF0YV90aW1lICAgPSAnbGRzdl9kYXRhX3RpbWUnO1xyXG4gICAgY29uc3QgZGF0YV9kZXRhaWwgPSAnbGRzdl9kYXRhX2RldGFpbCc7XHJcbiAgICBjb25zdCBkYXRhX3BvaW50ICA9ICdsZHN2X2RhdGFfcG9pbnQnO1xyXG5cclxuICAgIGF3YWl0IGdldF9zYXZlX2luZm8oKT8udGhlbihqc29uT2JqID0+IHtcclxuICAgICAgICBpZiAoanNvbk9iaiA9PT0gbnVsbCB8fCBqc29uT2JqID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKCfjgrvjg7zjg5bmg4XloLHjga7lj5fkv6HjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgILjgJDlj5fkv6Hjg4fjg7zjgr/nhKHjgZfjgJEnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGpzb25PYmouZWNvZGUgIT09IDApIHtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKGDjgI4ke2pzb25PYmouZW1zZ33jgI8oJHtqc29uT2JqLmVjb2RlfSlgKTtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKCfjgrvjg7zjg5bmg4XloLHjga7lj5fkv6HjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgIInKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgc2F2ZV9saXN0ID0ge307IFxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgc2F2ZV9pbmZvIG9mIGpzb25PYmouc2F2ZV9pbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBzYXZlX2xpc3Rbc2F2ZV9pbmZvLnVuaXFfbm9dID0gbmV3IENfU2F2ZUluZm8oc2F2ZV9pbmZvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZm9yX3NhdmUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHVuaXFfbm9fY250ID0gMDsgdW5pcV9ub19jbnQgPCBzYXZlX2xpc3RfbWF4OyB1bmlxX25vX2NudCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXFfbm9fY250IGluIHNhdmVfbGlzdCkgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZV9saXN0W3VuaXFfbm9fY250XSA9IG5ldyBDX1NhdmVJbmZvKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZV9pZDogICAgLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXFfbm86ICAgICB1bmlxX25vX2NudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICAgICAgYOaWsOimj+S/neWtmCMke3VuaXFfbm9fY250LnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX1gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6ICAgICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludDogICAgICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlX3RpbWU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b19tb2RlOiAnMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNhdmVfVUxfbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGFfbGlzdCkgYXMgSFRNTFVMaXN0RWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHNhdmVfVUxfbGlzdCA9PT0gbnVsbCkge2FsZXJ0KCdDYW4gbm90IGZpbmQgdGhlIERvbSBvZiBTYXZlIExpc3QhJyk7cmV0dXJuO31cclxuICAgICAgICBcclxuICAgICAgICAgICAgd2hpbGUgKHNhdmVfVUxfbGlzdC5maXJzdENoaWxkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBzYXZlX1VMX2xpc3QucmVtb3ZlQ2hpbGQoc2F2ZV9VTF9saXN0LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgVUxfbGlzdF9pZHggPSAwOyBVTF90b19EYXRhID0ge307XHJcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGFfaWR4IGluIHNhdmVfbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNhdmVfbGlzdFtkYXRhX2lkeF0uYXV0b19tb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcl9zYXZlKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzYXZlX2xpc3RbZGF0YV9pZHhdLnVuaXFfbm8pIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVfbGlzdFtkYXRhX2lkeF0udGl0bGUgID0gJ+iHquWLleS/neWtmOWIhic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlX2xpc3RbZGF0YV9pZHhdLmRldGFpbCA9ICfkvZzmpa3nlKjjgavnsKHmmJPkv53lrZjjgZfjgZ/jg4fjg7zjgr/jgafjgZknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVfbGlzdFtkYXRhX2lkeF0udGl0bGUgID0gJ+ewoeaYk+S/neWtmOWIhic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlX2xpc3RbZGF0YV9pZHhdLmRldGFpbCA9ICfjg4fjg5Djg4PjgrDjg6Ljg7zjg4njgafnsKHmmJPkv53lrZjjgZfjgZ/jg4fjg7zjgr/jgafjgZknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZV9saXN0W2RhdGFfaWR4XS50aXRsZSAgPSAn6ZqO5q6155u05YmN5YiGJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVfbGlzdFtkYXRhX2lkeF0uZGV0YWlsID0gJ+S4gOeVquacgOi/keOBruODleODreOCouenu+WLleebtOWJjeOBq+iHquWLleS/neWtmOOBl+OBn+ODh+ODvOOCv+OBp+OBmSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlX2xpc3RbZGF0YV9pZHhdLnRpdGxlICA9ICfvvbLvvo3vvp7vvp3vvoTnm7TliY3liIYnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZV9saXN0W2RhdGFfaWR4XS5kZXRhaWwgPSAn44Kk44OZ44Oz44OIKOWkseaVlynnm7TliY3jgavnsKHmmJPkv53lrZjjgZfjgZ/jg4fjg7zjgr/jgafjgZknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKSBhcyBIVE1MTElFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbGkuaW5uZXJIVE1MID0gYOOAjiR7c2F2ZV9saXN0W2RhdGFfaWR4XS50aXRsZX3jgI9gO1xyXG5cclxuICAgICAgICAgICAgICAgIGxpLmlkID0gVUxfbGlzdF9pZHgudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmb3Jfc2F2ZT9fT0tfc2F2ZV9GbmM6X09LX2xvYWRfRm5jLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2F2ZV9VTF9saXN0LmFwcGVuZENoaWxkKGxpKTtcclxuICAgICAgICAgICAgICAgIFVMX3RvX0RhdGFbVUxfbGlzdF9pZHgrK10gPSBOdW1iZXIoZGF0YV9pZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFVMX2xpc3RfY3JzciA9IENfQ3RsQ3Vyc29yLmdldE9iaihzYXZlX1VMX2xpc3QpO1xyXG4gICAgICAgICAgICBVTF9saXN0X2xlbmcgPSBzYXZlX1VMX2xpc3QuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGZvcm1faWQgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGF0YV9pZCkgICAgIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGZvcm1fdGltZSAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGF0YV90aW1lKSAgIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG4gICAgICAgICAgICBmb3JtX2RldGFpbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGFfZGV0YWlsKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xyXG4gICAgICAgICAgICBmb3JtX3BvaW50ICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGFfcG9pbnQpICBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDsgXHJcblxyXG4gICAgICAgICAgICBpZiAoIWV4aXN0X3NhdmVfbGlzdCgpKSByZXR1cm47XHJcbiAgICAgICAgICAgIFVMX2lkeCA9IDA7ICBVTF9saXN0X2Nyc3Iuc2V0X3BvcyhVTF9pZHgpOyBcclxuICAgICAgICAgICAgZm9ybV9zZXQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBnX21lcy53YXJuaW5nX21lc3NhZ2UoZXJyIGFzIHVua25vd24gYXMgc3RyaW5nKTtcclxuICAgICAgICAgICAgZ19tZXMud2FybmluZ19tZXNzYWdlKCfjgrvjg7zjg5bmg4XloLHjga7lj5fkv6HjgavlpLHmlZfjgZfjgb7jgZfjgZ/jgILjgJDjg4fjg7zjgr/kuI3kuIDoh7TjgJEnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIF9PS19sb2FkX0ZuYyh0aGlzOiBIVE1MTElFbGVtZW50LCBlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICBVTF9pZHggPSBOdW1iZXIodGhpcy5pZCk7XHJcbiAgICBcclxuICAgIGlmIChVTF9pZHggIT09IFVMX2Jhaykge1xyXG4gICAgICAgIFVMX2JhayA9ICAgVUxfaWR4O1xyXG4gICAgICAgIGlzX2tha3VuaW4gPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChpc19rYWt1bmluKSBpc09LX2Zvcl9sb2FkKCk7IGVsc2UgY2hlY2tfbG9hZCgpO1xyXG4gICAgVUxfbGlzdF9jcnNyLnNldF9wb3MoVUxfaWR4KTsgZm9ybV9zZXQoKTtcclxufVxyXG5mdW5jdGlvbiBfT0tfc2F2ZV9GbmModGhpczogSFRNTExJRWxlbWVudCwgZTogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgVUxfaWR4ID0gTnVtYmVyKHRoaXMuaWQpO1xyXG4gICAgXHJcbiAgICBpZiAoVUxfaWR4ICE9PSBVTF9iYWspIHtcclxuICAgICAgICBVTF9iYWsgPSAgIFVMX2lkeDtcclxuICAgICAgICBpc19rYWt1bmluID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNfa2FrdW5pbikgaXNPS19mb3Jfc2F2ZSgpOyBlbHNlIGNoZWNrX3NhdmUoKTtcclxuICAgIFVMX2xpc3RfY3Jzci5zZXRfcG9zKFVMX2lkeCk7IGZvcm1fc2V0KCk7XHJcbn1cclxuZnVuY3Rpb24gZXhpc3Rfc2F2ZV9saXN0KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHNhdmVfVUxfbGlzdC5jaGlsZHJlbi5sZW5ndGggPiAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja19sb2FkKCk6IHZvaWQgeyAvLyDlhaXlipvjg4Hjgqfjg4Pjgq/jgajml6LlrZjjg4fjg7zjgr/kuIrmm7jjgY3jga7norroqo1cclxuICAgIGNvbnN0IGRhdGFfaWR4ID0gVUxfdG9fRGF0YVtVTF9pZHhdO1xyXG4gICAgaWYgKFVMX2lkeCA8IDAgfHwgVUxfaWR4ID4gVUxfbGlzdF9sZW5nIC0gMSkge1xyXG4gICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShgY2hlY2shISBObyBsb25nZXIgYWNjZXNzIGlkeCHjgI4ke3NhdmVfbGlzdFtkYXRhX2lkeF0udGl0bGV944CPKHNhdmVfaWQ6ICR7c2F2ZV9saXN0W2RhdGFfaWR4XS5zYXZlX2lkfSlgKTtcclxuICAgIH1cclxuICAgIGlzX2tha3VuaW4gPSB0cnVlO1xyXG4gICAgZ19jdGxzLmFjdChjdGxzX2xvYWRfY2hrKTtcclxuICAgIGRpc3BsYXlfbWVzc2FnZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja19zYXZlKCk6IHZvaWQgeyAvLyDlhaXlipvjg4Hjgqfjg4Pjgq/jgajml6LlrZjjg4fjg7zjgr/kuIrmm7jjgY3jga7norroqo1cclxuICAgIGNvbnN0IGRhdGFfaWR4ID0gVUxfdG9fRGF0YVtVTF9pZHhdO1xyXG4gICAgaWYgKFVMX2lkeCA8IDAgfHwgVUxfaWR4ID4gVUxfbGlzdF9sZW5nIC0gMSkge1xyXG4gICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShgY2hlY2shISBObyBsb25nZXIgYWNjZXNzIGlkeCHjgI4ke3NhdmVfbGlzdFtkYXRhX2lkeF0udGl0bGV944CPKHNhdmVfaWQ6ICR7c2F2ZV9saXN0W2RhdGFfaWR4XS5zYXZlX2lkfSlgKTtcclxuICAgIH1cclxuICAgIGlmIChzYXZlX2xpc3RbZGF0YV9pZHhdLmF1dG9fbW9kZSkge1xyXG4gICAgICAgIGdfbWVzLndhcm5pbmdfbWVzc2FnZShgY2hlY2shISBUaGlzIGlzIEF1dG8gTW9kZSHjgI4ke3NhdmVfbGlzdFtkYXRhX2lkeF0udGl0bGV944CPKHNhdmVfaWQ6ICR7c2F2ZV9saXN0W2RhdGFfaWR4XS5zYXZlX2lkfSlgKTtcclxuICAgIH1cclxuICAgIGlzX2tha3VuaW4gPSB0cnVlO1xyXG4gICAgZ19jdGxzLmFjdChjdGxzX3NhdmVfY2hrKTtcclxuICAgIGRpc3BsYXlfbWVzc2FnZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5X21lc3NhZ2UoKSB7XHJcbiAgICBpZiAoZm9yX3NhdmUpIHtcclxuICAgICAgICBpZiAoaXNfa2FrdW5pbikge1xyXG4gICAgICAgICAgICBpZiAoVUxfdG9fRGF0YVtVTF9pZHhdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGdfY3ZtLm5vdGljZV9tZXNzYWdlKCfjgZPjgozjgavkv53lrZjjgZfjgb7jgZnjgYvvvJ8nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGdfY3ZtLm5vdGljZV9tZXNzYWdlKCfjgZPjgozjgavkuIrmm7jkv53lrZjjgZfjgb7jgZnjgYvvvJ/ku6XliY3jga7jg4fjg7zjgr/jga/mtojljrvjgZXjgozjgb7jgZknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGdfY3ZtLm5vcm1hbF9tZXNzYWdlKCfjganjgozjgavkv53lrZjjgZfjgb7jgZnjgYvvvJ8nKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChpc19rYWt1bmluKSB7XHJcbiAgICAgICAgICAgIGdfY3ZtLm5vdGljZV9tZXNzYWdlKCfjg63jg7zjg4njgZfjgb7jgZnjgYvvvJ8nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBnX2N2bS5ub3JtYWxfbWVzc2FnZSgn44Gp44KM44KS44Ot44O844OJ44GX44G+44GZ44GL77yfJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBsb2FkKCk6IHZvaWQgeyBcclxuICAgIGNvbnN0IGRhdGFfaWR4ID0gVUxfdG9fRGF0YVtVTF9pZHhdO1xyXG4gICAgaWYgKHNhdmVfbGlzdFtkYXRhX2lkeF0ubXlwb3MudXJsKCkgIT09ICcnICYmIHNhdmVfbGlzdFtkYXRhX2lkeF0ubXlwb3MudXJsKCkgIT0gZ19teV91cmwpIHtcclxuICAgICAgICBfbG9hZF9vdGhlcihkYXRhX2lkeCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgX2xvYWRfaGVyZShkYXRhX2lkeCk7XHJcbiAgICByZXR1cm47XHJcbn1cclxuZnVuY3Rpb24gX2xvYWRfb3RoZXIoZGF0YV9pZHg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3Qgb3B0ID0gbmV3IENfVXJsT3B0KCk7XHJcbiAgICBvcHQuc2V0KCdtb2RlJywgJ2xvYWQnKTtcclxuICAgIG9wdC5zZXQoJ3BpZCcsICAgZ19zdGFydF9lbnYucGlkKTtcclxuICAgIG9wdC5zZXQoJ29wdCcsICAgc2F2ZV9saXN0W2RhdGFfaWR4XS51bmlxX25vLnRvU3RyaW5nKCkpO1xyXG4gICAgUE9TVF9hbmRfbW92ZV9wYWdlKHNhdmVfbGlzdFtkYXRhX2lkeF0ubXlwb3MudXJsKCksIG9wdCk7XHJcbiAgICByZXR1cm47XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9sb2FkX2hlcmUoZGF0YV9pZHg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgZ19zdGFydF9lbnYucGlkID0gc2F2ZV9saXN0W2RhdGFfaWR4XS5wbGF5ZXJfaWQ7XHJcblxyXG4gICAgZ2VuZXJhbF9sb2FkKHNhdmVfbGlzdFtkYXRhX2lkeF0udW5pcV9ubykudGhlbigoanNvbk9iajphbnkpPT57ICBcclxuICAgICAgICBpc19rYWt1bmluID0gZmFsc2U7XHJcbiAgICAgICAgZGVjb2RlX2FsbChqc29uT2JqPy5zYXZlKTtcclxuICAgICAgICBnX212bS5ub3RpY2VfbWVzc2FnZSgn44Ot44O844OJ44GX44G+44GX44GfJyk7XHJcbiAgICAgICAgZ29fYmFja19tb3ZlX21vZGUoKTsgICAgICAgIFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNhdmUoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBkYXRhX2lkeCA9IFVMX3RvX0RhdGFbVUxfaWR4XTtcclxuICAgIHNldF9nX3NhdmUoXHJcbiAgICAgICAgLyogc2F2ZV9pZDogKi8gICBzYXZlX2xpc3RbZGF0YV9pZHhdLnNhdmVfaWQsIC8vTnVtYmVyKGZvcm1faWQudmFsdWUpLFxyXG4gICAgICAgIC8qIHVuaXFfbm86ICovICAgc2F2ZV9saXN0W2RhdGFfaWR4XS51bmlxX25vLFxyXG4gICAgICAgIC8qIHRpdGxlOiAqLyAgICAgYOS/neWtmOa4iDogIyR7ZGF0YV9pZHgudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWAsIC8vc2F2ZV9saXN0W2RhdGFfaWR4XS50aXRsZSwgXHJcbiAgICAgICAgLyogZGV0YWlsOiAqLyAgICBmb3JtX2RldGFpbC52YWx1ZSxcclxuICAgICAgICAvKiBwb2ludDogKi8gICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGDjgI4ke2dfbWF6ZS5nZXRfbmFtZSgpfeOAjyBgIFxyXG4gICAgICAgICAgICAgICAgICAgICsgYOWcsOS4iyAke2dfdGVhbS5nZXRfcGQoKS56ICsgMX3pmo7lsaQgYCBcclxuICAgICAgICAgICAgICAgICAgICArIGAoWDogJHtnX3RlYW0uZ2V0X3BkKCkueH0sIFk6ICR7Z190ZWFtLmdldF9wZCgpLnl9KWAsXHJcbiAgICAgICAgLyogYXV0b19tb2RlOiAqLyBmYWxzZSxcclxuICAgICk7XHJcbiAgICBnZW5lcmFsX3NhdmUoKS50aGVuKChqc29uT2JqKT0+e1xyXG4gICAgICAgIGRlY29kZV9hbGwoanNvbk9iaik7XHJcblxyXG4gICAgICAgIGlzX2tha3VuaW4gPSBmYWxzZTtcclxuICAgICAgICBnX212bS5ub3RpY2VfbWVzc2FnZSgn5L+d5a2Y44GX44G+44GX44GfJyk7XHJcbiAgICAgICAgZ29fYmFja19tb3ZlX21vZGUoKTsgICAgICAgIFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVfYWxsKGpzb25PYmo6IGFueSk6IHZvaWQgeyBcclxuICAgIC8vIFNhdmVEYXRh6Zai6YCj44Gu44OH44Kz44O844OJXHJcbiAgICBpZiAoanNvbk9iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICBnX3NhdmUuZGVjb2RlKGpzb25PYmopOyBcclxuICAgIGdfc2F2ZS5teXBvcy5zZXRfdXJsKGdfbXlfdXJsKTtcclxuXHJcbiAgICAvL1RlYW3plqLpgKPjga7jg4fjgrPjg7zjg4lcclxuICAgIGdfdGVhbS5kZWNvZGUoZ19zYXZlLmFsbF90ZWFtW2dfc2F2ZS5teXBvcy50aWQoKT8/JyddLmVuY29kZSgpKTsgXHJcbiAgICBnX3RlYW0uc2V0X2xvYyhnX3NhdmUubXlwb3MpO1xyXG5cclxuICAgIC8vIE1hemXplqLpgKPjga7jg4fjgrPjg7zjg4lcclxuICAgIGNvbnN0IGxvYyA9IGdfdGVhbS5nZXRfbG9jKCk7IFxyXG4gICAgaWYgKGxvYy5nZXRfbGNrZCgpID09IFRfTGNrZC5NYXplKSB7XHJcbiAgICAgICAgZ19tYXplLmRlY29kZShnX3NhdmUuYWxsX21hemVbbG9jLmdldF91aWQoKV0uZW5jb2RlKCkpOyBcclxuICAgIH1cclxuXHJcbiAgICAvLyDlkITnqK7liJ3mnJ/oqK3lrppcclxuICAgIGRlY29kZV9jb21tb24oKTtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAvL0hlcm/plqLpgKPjga7jg4fjgrPjg7zjg4lcclxuICAgIGNscl9nX2hyZXMoKTtcclxuICAgIGZvciAoY29uc3QgaGVybyBvZiBnX3RlYW0uaHJlcygpKSAgZ19ocmVzLnB1c2goaGVybyk7IFxyXG5cclxuICAgIGdfaHJlc0luZm8uaW5pdCgpO1xyXG5cclxuICAgIC8vIFduZHJXYWxrZXLplqLpgKPjga7jg4fjgrPjg7zjg4lcclxuICAgIGZvciAoY29uc3QgaSBpbiBnX29iamUpIGRlbGV0ZSBnX29iamVbaV07XHJcbiAgICBmb3IgKGNvbnN0IG9iamUgb2YgZ19tYXplLmdldF9vYmpfYXJyYXkoKSkge1xyXG4gICAgICAgIGlmIChvYmplLndhbGtlcigpID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG4gICAgICAgIGdfb2JqZS5wdXNoKG9iamUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1hemXjgatUZWFt44KS6L+95YqgXHJcbiAgICBnX21hemUuYWRkX29iaihnX3RlYW0gYXMgSV9NYXplT2JqKTsgXHJcblxyXG4gICAgLy8gVmlldzJY6Zai6YCj44KS5Yid5pyf5YyWXHJcbiAgICBnX3ZpZXcyRC5pbml0KHtcclxuICAgICAgICBkaXZfaWQ6ICAgICdkaXZfbWF6ZV92dzJEJywgXHJcbiAgICAgICAgY2FudmFzX2lkOiAnbWF6ZV92aWV3MkRfY2FudmFzJywgXHJcbiAgICAgICAgeF9taW46IDE1LCB5X21pbjogMTVcclxuICAgIH0pO1xyXG4gICAgZ192aWV3Mk0uaW5pdCh7XHJcbiAgICAgICAgZGl2X2lkOiAgICAnZGl2X21hemVfdncyTScsXHJcbiAgICAgICAgY2FudmFzX2lkOiAnbWF6ZV92aWV3Mk1fY2FudmFzJyxcclxuICAgICAgICB4X21pbjogIDUsIHlfbWluOiAgNVxyXG4gICAgfSk7XHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG59XHJcblxyXG4vLyDmlrDopo/jgrLjg7zjg6Djga7liJ3mnJ/jg4fjg7zjgr/jga7oqq3jgb/ovrzjgb8o5pqr5a6aKVxyXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlX21hemUoanNvbk9iajogYW55KTogdm9pZCB7XHJcbiAgICAvLyBNYXpl6Zai6YCj44Gu44OH44Kz44O844OJXHJcbiAgICBpZiAoanNvbk9iaj8ubWF6ZSAhPT0gdW5kZWZpbmVkKSBnX21hemUuZGVjb2RlKGpzb25PYmoubWF6ZSk7XHJcblxyXG4gICAgLy/jgIBUZWFt6Zai6YCjKOePvuWcqOWcsCnjga7jg4fjgrPjg7zjg4lcclxuICAgIGlmIChqc29uT2JqPy5wb3MgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGxldCBwb3MgPSBuZXcgQ19Qb2ludERpcih7XHJcbiAgICAgICAgICAgIHg6IGpzb25PYmoucG9zPy54LCBcclxuICAgICAgICAgICAgeToganNvbk9iai5wb3M/LnksIFxyXG4gICAgICAgICAgICB6OiBqc29uT2JqLnBvcz8ueiwgXHJcbiAgICAgICAgICAgIGQ6IGpzb25PYmoucG9zPy5kLCBcclxuICAgICAgICB9KTsgXHJcbiAgICAgICAgZ190ZWFtLmdldFdhbGtlcigpLnNldF9wbGFjZShnX21hemUsIGdfbXlfdXJsLCBwb3MpO1xyXG4gICAgICAgIGdfc2F2ZS5teXBvcyA9IGdfdGVhbS5nZXRfbG9jKCk7XHJcbiAgICB9XHJcbiAgICAvLyDlkITnqK7liJ3mnJ/oqK3lrppcclxuICAgIGRlY29kZV9jb21tb24oKTtcclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyBIZXJv6Zai6YCj44Gu44OH44Kz44O844OJXHJcbi8vICAgIGZvciAoY29uc3QgaSBpbiBnX2hyZXMpIGRlbGV0ZSBnX2hyZXNbaV07XHJcbiAgICBjbHJfZ19ocmVzKCk7XHJcbiAgICBmb3IgKGNvbnN0IGhlcm8gb2YgZ190ZWFtLmhyZXMoKSkgZ19ocmVzLnB1c2goaGVybyk7XHJcblxyXG4gICAgZ19ocmVzSW5mby5pbml0KCk7XHJcblxyXG4gICAgLy8gV25kcldhbGtlcumWoumAo+OBruODh+OCs+ODvOODiVxyXG4gICAgZm9yIChjb25zdCBpIGluIGdfb2JqZSkgZGVsZXRlIGdfb2JqZVtpXTtcclxuICAgIGluaXRfZ193cmVzKCk7XHJcblxyXG4gICAgLy8gTWF6ZeOBq1RlYW3jgpLov73liqBcclxuICAgIGdfbWF6ZS5hZGRfb2JqKGdfdGVhbSBhcyBJX01hemVPYmopO1xyXG5cclxuICAgIC8vIFZpZXcyWOmWoumAo+OCkuWIneacn+WMllxyXG4gICAgZ192aWV3MkQuaW5pdCh7XHJcbiAgICAgICAgZGl2X2lkOiAgICAnZGl2X21hemVfdncyRCcsIFxyXG4gICAgICAgIGNhbnZhc19pZDogJ21hemVfdmlldzJEX2NhbnZhcycsIFxyXG4gICAgICAgIHhfbWluOiAxNSwgeV9taW46IDE1XHJcbiAgICB9KTtcclxuICAgIGdfdmlldzJNLmluaXQoe1xyXG4gICAgICAgIGRpdl9pZDogICAgJ2Rpdl9tYXplX3Z3Mk0nLFxyXG4gICAgICAgIGNhbnZhc19pZDogJ21hemVfdmlldzJNX2NhbnZhcycsXHJcbiAgICAgICAgeF9taW46ICA1LCB5X21pbjogIDVcclxuICAgIH0pO1xyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICAvLyBTYXZlRGF0YeOBruODmeODvOOCueOBruS9nOaIkFxyXG4gICAgZ19zYXZlLm15cG9zID0gZ190ZWFtLmdldF9sb2MoKTtcclxuICAgIGdfc2F2ZS5hbGxfbWF6ZVtnX21hemUudWlkKCldID0gZ19tYXplO1xyXG4gICAgZ19zYXZlLmFsbF90ZWFtW2dfdGVhbS51aWQoKV0gPSBnX3RlYW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlY29kZV9jb21tb24oKTogdm9pZCB7XHJcbiAgICAvLyBIZXJv6Zai6YCj44Gu44OH44Kz44O844OJXHJcbiAgICBjbHJfZ19ocmVzKCk7XHJcbiAgICBmb3IgKGNvbnN0IGhlcm8gb2YgZ190ZWFtLmhyZXMoKSkgZ19ocmVzLnB1c2goaGVybyk7XHJcblxyXG4gICAgZ19ocmVzSW5mby5pbml0KCk7XHJcblxyXG4gICAgLy8gV25kcldhbGtlcumWoumAo+OBruODh+OCs+ODvOODiVxyXG4gICAgLy9mb3IgKGNvbnN0IGkgaW4gZ19vYmplKSBkZWxldGUgZ19vYmplW2ldO1xyXG4vLyAgICBjbHJfZ19vYmplKClcclxuLy8gICAgaW5pdF9nX3dyZXMoKTtcclxuXHJcbiAgICAvLyBNYXpl44GrVGVhbeOCkui/veWKoFxyXG4gICAgZ19tYXplLmFkZF9vYmooZ190ZWFtIGFzIElfTWF6ZU9iaik7XHJcblxyXG4gICAgLy8gVmlldzJY6Zai6YCj44KS5Yid5pyf5YyWXHJcbiAgICBpbml0X2dfdmlldzJYKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRfZ19zYXZlIChcclxuICAgICAgICBzYXZlX2lkOiAgIG51bWJlcixcclxuICAgICAgICB1bmlxX25vOiAgIG51bWJlciwgXHJcbiAgICAgICAgdGl0bGU6ICAgICBzdHJpbmcsIFxyXG4gICAgICAgIGRldGFpbDogICAgc3RyaW5nLCBcclxuICAgICAgICBwb2ludDogICAgIHN0cmluZyxcclxuICAgICAgICBhdXRvX21vZGU6IGJvb2xlYW4sXHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICBnX3NhdmUubXlwb3MgPSBnX3RlYW0uZ2V0X2xvYygpO1xyXG5cclxuICAgICAgICBnX3NhdmUuYWxsX3RlYW1bZ190ZWFtLnVpZCgpXSA9IGdfdGVhbTtcclxuICAgICAgICBnX3NhdmUuYWxsX21hemVbZ19tYXplLnVpZCgpXSA9IGdfbWF6ZTsgLy9cclxuXHJcbiAgICAgICAgZ19zYXZlLmRlY29kZSh7XHJcbiAgICAgICAgICAgIHNhdmVfaWQ6ICAgc2F2ZV9pZCwgXHJcbiAgICAgICAgICAgIHBsYXllcl9pZDogZ19zdGFydF9lbnYucGlkLFxyXG4gICAgICAgICAgICB1bmlxX25vOiAgIHVuaXFfbm8sIFxyXG4gICAgICAgICAgICB0aXRsZTogICAgIHRpdGxlLCBcclxuICAgICAgICAgICAgZGV0YWlsOiAgICBkZXRhaWwsXHJcbiAgICAgICAgICAgIHBvaW50OiAgICAgcG9pbnQsIFxyXG4gICAgICAgICAgICBhdXRvX21vZGU6IGF1dG9fbW9kZSA/ICcxJyA6ICcwJyxcclxuICAgICAgICAgICAgaXNfYWN0aXZlOiAnMScsXHJcbiAgICAgICAgICAgIGlzX2RlbGV0ZTogJzAnLFxyXG4gICAgXHJcbi8vIOWIneacn+ioreWumuOBi+ODreODvOODieOBruaZgueCueOBp+ioreWumuOBleOCjOOBpuOBhOOCi+OBr+OBmlxyXG4vLyAgICAgICAgICAgIGFsbF9tdnB0OiBhbGxfbXZwdCxcclxuLy8gICAgICAgICAgICBhbGxfbWF6ZTogYWxsX21hemUsXHJcbi8vICAgICAgICAgICAgYWxsX3RlYW06IGFsbF90ZWFtLFxyXG4vLyAgICAgICAgICAgIGFsbF9ndWxkOiBhbGxfZ3VsZCxcclxuICAgICAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyBUX0N0bHNNb2RlIH0gICAgZnJvbSBcIi4vVF9DdGxzTW9kZVwiO1xyXG5leHBvcnQgY29uc3QgZ19jdGxzX21vZGU6IFRfQ3Rsc01vZGVbXSA9IG5ldyBBcnJheSgxKSBhcyBUX0N0bHNNb2RlW107XHJcblxyXG5pbXBvcnQgeyBpbml0X21hemVDaCwgZGlzcGxheV9tYXplQ2ggfSBmcm9tIFwiLi9GX2Rpc3BsYXlfbWF6ZUNoXCI7XHJcbmltcG9ydCB7IGRpc3BsYXlfbWF6ZTNELCBpbml0X21hemUzRCwgVF9Ecm93U2V0IH0gICAgICAgICAgICBmcm9tIFwiLi9GX2Rpc3BsYXlfbWF6ZTNEXCI7XHJcbmV4cG9ydCB2YXIgZ19kczogVF9Ecm93U2V0ICAgPSB7Y2FudmFzOiBudWxsLCBjb246IG51bGwsIGRlcHRoOiAwLCB3YWxsOiBudWxsfTtcclxuXHJcbmltcG9ydCB7IENfU3dpdGNoVmlldyB9ICAgICAgICAgIGZyb20gXCIuL0NfU3dpdGNoVmlld1wiO1xyXG5leHBvcnQgdmFyIGdfdnN3OiBDX1N3aXRjaFZpZXc7XHJcblxyXG5pbXBvcnQgeyBDX09uZUxpbmVWaWV3TWVzc2FnZSB9ICBmcm9tIFwiLi4vZF92aWUvQ19PbmVMaW5lVmlld01lc3NhZ2VcIjtcclxuZXhwb3J0IHZhciBnX212bTogQ19PbmVMaW5lVmlld01lc3NhZ2U7XHJcbmV4cG9ydCB2YXIgZ19jdm06IENfT25lTGluZVZpZXdNZXNzYWdlO1xyXG5cclxuaW1wb3J0IHsgQ19IZXJvIH0gZnJvbSBcIi4uL2RfbWRsL0NfSGVyb1wiO1xyXG5leHBvcnQgbGV0IGdfaHJlczogQ19IZXJvW10gPSBbXTtcclxuXHJcbmltcG9ydCB7IENfTWF6ZSB9IGZyb20gXCIuLi9kX21kbC9DX01hemVcIjtcclxuZXhwb3J0IGNvbnN0IGdfbWF6ZSA9IG5ldyBDX01hemUoKTtcclxuXHJcbmltcG9ydCB7IENfVGVhbSB9IGZyb20gXCIuLi9kX21kbC9DX1RlYW1cIjtcclxuZXhwb3J0IGNvbnN0IGdfdGVhbSA9IG5ldyBDX1RlYW0oKTtcclxuXHJcbmltcG9ydCB7IENfR3VpbGQgfSBmcm9tIFwiLi4vZF9tZGwvQ19HdWlsZFwiO1xyXG5leHBvcnQgY29uc3QgZ19ndWxkID0gbmV3IENfR3VpbGQoKTtcclxuXHJcbmltcG9ydCB7IENfRHJvd01hcDJELCBDX0Ryb3dNYXAyTSwgQ19Ecm93TWFwMlggfSBmcm9tIFwiLi9DX0Ryb3dNYXAyWFwiO1xyXG5leHBvcnQgbGV0IGdfdmlldzJEOiBDX0Ryb3dNYXAyRDtcclxuZXhwb3J0IGxldCBnX3ZpZXcyTTogQ19Ecm93TWFwMk07XHJcblxyXG5pbXBvcnQgeyBDX1duZHJPYmosIElfV25kck9iaiB9ICAgICAgIGZyb20gXCIuLi9kX21kbC9DX1duZHJPYmpcIjtcclxuXHJcbmltcG9ydCB7IENfSHJlc0luZm8gfSBmcm9tIFwiLi9DX0hyZXNJbmZvXCI7XHJcbmV4cG9ydCBsZXQgZ19ocmVzSW5mbzogQ19IcmVzSW5mbztcclxuXHJcbmltcG9ydCB7IENfRGVmYXVsdEN0bHMgfSAgICAgICAgICAgIGZyb20gJy4vQ19EZWZhdWx0Q3Rscyc7XHJcbmV4cG9ydCBsZXQgZ19jdGxzOiBDX0RlZmF1bHRDdGxzO1xyXG5cclxuaW1wb3J0IHsgaW5pdF9hbGxfbW9kZSB9ICAgICAgICAgICAgZnJvbSBcIi4vRl9zZXRfbW9kZVwiO1xyXG5pbXBvcnQgeyBkZWNvZGVfYWxsLCBkZWNvZGVfbWF6ZSB9ICBmcm9tIFwiLi9GX3NldF9zYXZlX21vZGVcIjtcclxuaW1wb3J0IHsgZG9fbW92ZV9ib3R0b21faGFsZiwgYWN0X21vdmVfbW9kZSB9IGZyb20gXCIuL0Zfc2V0X21vdmVfbW9kZVwiO1xyXG5cclxuaW1wb3J0IHsgXHJcbiAgICBnZW5lcmFsX2xvYWQsIFxyXG4gICAgZ2V0X21haV9tYXplLCBcclxuICAgIGdldF9uZXdfbWF6ZSwgXHJcbiAgICB0bXBfbG9hZCBcclxufSBmcm9tIFwiLi4vZF9jbW4vRl9sb2FkX2FuZF9zYXZlXCI7XHJcblxyXG5pbXBvcnQgeyBcclxuICAgIGdfYWxlcnQsXHJcbiAgICBnX2RlYnVnLFxyXG4gICAgZ19tZXMsIFxyXG4gICAgZ19yZWFkeV9nYW1lcywgXHJcbiAgICBnX3N0YXJ0X2VudiwgXHJcbiAgICBpbml0X2FmdGVyX2xvYWRlZF9ET01faW5fY29tbW9uIFxyXG59IGZyb20gXCIuLi9kX2Ntbi9nbG9iYWxcIjtcclxuaW1wb3J0IHsgX2lyYW5kIH0gZnJvbSBcIi4uL2RfdXRsL0ZfUmFuZFwiO1xyXG5cclxuXHJcbmltcG9ydCB7IENfTWF6ZU9ialNoYWRvdyB9IGZyb20gJy4uL2RfbWRsL0NfTWF6ZU9iakV0Yyc7XHJcblxyXG5pbXBvcnQgeyBDX0N5Y2xlQnV0dG9uIH0gICBmcm9tIFwiLi4vZF9jdGwvQ19DeWNsZUJ1dHRvblwiO1xyXG5pbXBvcnQgeyBkaXNwbGF5X21hemUyRCwgaW5pdF9tYXplMkQgfSBmcm9tIFwiLi9GX2Rpc3BsYXlfbWF6ZTJEXCI7XHJcbmV4cG9ydCBsZXQgZ192aWV3MzogQ19DeWNsZUJ1dHRvbjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0X2JlZm9yZV9nYW1lcygpOiB2b2lkIHtcclxuICAgIHN3aXRjaCAoZ19zdGFydF9lbnYubW9kZSkge1xyXG4gICAgICAgIGNhc2UgJ25ldyc6XHJcbiAgICAgICAgICAgIGluaXRfYmVmb3JlX25ld19nYW1lcygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY2FzZSAnbG9hZCc6XHJcbiAgICAgICAgICAgIGluaXRfYmVmb3JlX2xvYWRfZ2FtZXMoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNhc2UgJ3N0YXJ0JzpcclxuICAgICAgICAgICAgaW5pdF9iZWZvcmVfc3RhcnRfZ2FtZXMoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNhc2UgJ212cHQnOlxyXG4gICAgICAgICAgICBpbml0X2JlZm9yZV9tdnB0X2dhbWVzKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9iZWZvcmVfbmV3X2dhbWVzKCk6IHZvaWQge1xyXG4gICAgZ2V0X21haV9tYXplKCkudGhlbigoanNvbk9iajphbnkpPT57XHJcbiAgICAgICAgZGVjb2RlX2FsbChqc29uT2JqPy5zYXZlKTtcclxuLy8gICAgICAgIGluc3RhbGxfb2JqcygxKTsgICAgICAgICAgICAgICAgICAgLy8g5pqr5a6aKENfb2Jqc+OBruODhuOCueODiOeUqClcclxuICAgICAgICBkb19sb2FkX2JvdHRvbV9oYWxmKCcnKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGluaXRfYmVmb3JlX2xvYWRfZ2FtZXMoKTogdm9pZCB7XHJcbiAgICBjb25zdCB1bm8gPSBOdW1iZXIoZ19zdGFydF9lbnYub3B0KTtcclxuICAgIGdlbmVyYWxfbG9hZCh1bm8pLnRoZW4oKGpzb25PYmo6YW55KT0+eyAgXHJcbiAgICAgICAgZGVjb2RlX2FsbChqc29uT2JqPy5zYXZlKTtcclxuICAgICAgICBkb19sb2FkX2JvdHRvbV9oYWxmKCfjg63jg7zjg4njgZfjgb7jgZfjgZ8nKTsgXHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBpbml0X2JlZm9yZV9zdGFydF9nYW1lcygpOiB2b2lkIHtcclxuICAgIGNvbnN0IG1hemVfbmFtZSA9IGdfc3RhcnRfZW52Lm9wdDtcclxuICAgIHRtcF9sb2FkKCkudGhlbigoanNvbk9iajphbnkpPT57XHJcbiAgICAgICAgZGVjb2RlX2FsbChqc29uT2JqPy5zYXZlKTtcclxuICAgICAgICBnZXRfbmV3X21hemUobWF6ZV9uYW1lKS50aGVuKChqc29uT2JqOmFueSk9PnsgXHJcbiAgICAgICAgICAgIGRlY29kZV9tYXplKGpzb25PYmo/LmRhdGEpO1xyXG4gICAgICAgICAgICBkb19sb2FkX2JvdHRvbV9oYWxmKCflhpLpmbrjgpLlp4vjgoHjgb7jgZfjgofjgYbvvIEnKTsgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBpbml0X2JlZm9yZV9tdnB0X2dhbWVzKCk6IHZvaWQge1xyXG4gICAgdG1wX2xvYWQoKS50aGVuKChqc29uT2JqOmFueSk9PnsgIFxyXG4gICAgICAgIGRlY29kZV9hbGwoanNvbk9iaj8uc2F2ZSk7XHJcbiAgICAgICAgZG9fbG9hZF9ib3R0b21faGFsZign5YaS6Zm644KS5YaN6ZaL44GX44G+44GX44KH44GG77yB77yBJyk7IFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkb19sb2FkX2JvdHRvbV9oYWxmKG1zZzogc3RyaW5nKTogdm9pZHtcclxuICAgIGluaXRfbWF6ZUNoKCk7XHJcbiAgICBpbml0X21hemUyRCgpO1xyXG4gICAgZ19kcyA9IGluaXRfbWF6ZTNEKCk7IFxyXG5cclxuICAgIGdfbXZtLm5vdGljZV9tZXNzYWdlKG1zZyk7IFxyXG4gICAgZ19tZXMubm90aWNlX21lc3NhZ2UobXNnKTsgXHJcbiAgICBhY3RfbW92ZV9tb2RlKCk7ICBcclxuICAgIGRvX21vdmVfYm90dG9tX2hhbGYoJ2JsaW5rX29mZicpOyBcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfYWZ0ZXJfbG9hZGVkX0RPTSgpOiB2b2lkIHsgXHJcbiAgICBpbml0X2FmdGVyX2xvYWRlZF9ET01faW5fY29tbW9uKCdkZWJ1Z19tb2RlJywgJ3BhbmVfc3l0bV9sb2dzJyk7IFxyXG5cclxuICAgIGdfbXZtICA9IENfT25lTGluZVZpZXdNZXNzYWdlLmdldE9iaignbWF6ZV9tZXNnJyk7IFxyXG4gICAgZ19jdm0gID0gQ19PbmVMaW5lVmlld01lc3NhZ2UuZ2V0T2JqKCdtZW51X21lc2cnKTsgXHJcbiAgICBnX2N0bHMgPSBDX0RlZmF1bHRDdGxzLmdldE9iaigpOyBcclxuICAgIGdfdnN3ICA9IENfU3dpdGNoVmlldy5nZXRPYmooKTsgXHJcbiAgICBnX2hyZXNJbmZvID0gbmV3IENfSHJlc0luZm8oKTtcclxuXHJcblxyXG4gICAgY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXczX21vZGUnKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIGdfdmlldzMgPSBDX0N5Y2xlQnV0dG9uLmdldE9iaihidG4pO1xyXG5cclxuICAgIGluaXRfZ192aWV3MlgoKTsgLy8gMkQvMk3jga7liJ3mnJ/ljJZcclxuXHJcbiAgICBpbml0X2RlYnVnX21vZGUoKTtcclxuICAgIGluaXRfdmlldzNfbW9kZSgpO1xyXG4gICAgc3RvcF9kb3VibGVfY2xpY2soKTsgXHJcblxyXG4gICAgaW5pdF9hbGxfbW9kZSgpO1xyXG4gICAgZ19yZWFkeV9nYW1lcy5zZXRGdW5jdGlvbihpbml0X2JlZm9yZV9nYW1lcyk7IFxyXG4gICAgZ19yZWFkeV9nYW1lcy5zZXRMb2FkZWRET00oKTsgXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0X2RlYnVnX21vZGUoKTogdm9pZCB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGFsZXJ0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FsZXJ0X21vZGUnKTtcclxuICAgICAgICBhbGVydD8uc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgIGFsZXJ0Py5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZXZlbnQ6TW91c2VFdmVudCk9PntcclxuICAgICAgICAgICAgdHJ5e2dfYWxlcnQuc2hvdygpO30gY2F0Y2goZXJyKXt9O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBnX2RlYnVnLnNldE9iaih7XHJcbiAgICAgICAgICAgIHluOiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICAgIG9uTmFtZTogICAnREVCVUcnLFxyXG4gICAgICAgICAgICBvZmZOYW1lOiAgJ+mAmuW4uCcsXHJcbiAgICAgICAgICAgIG9uQ2xhc3M6ICAnZGVidWcnLFxyXG4gICAgICAgICAgICBvZmZDbGFzczogJ25vcm1hbCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZ19kZWJ1Zy5hZGRGbmModG9nZ2xlX2RlYnVnX21vZGUpOy8vZ19kZWJ1Zy5zZXRPTigpO1xyXG5cclxuICAgICAgICBjb25zdCBidG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVidWdfbW9kZScpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLChldmVudCk9PntcclxuICAgICAgICAgICAgc3dpdGNoIChldmVudC5jb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTnVtcGFkTXVsdGlwbHlcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJFc2NhcGVcIjpcclxuICAgICAgICAgICAgICAgICAgICBidG4uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVfZGVidWdfbW9kZShnX2RlYnVnLmlzT04oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSBjYXRjaCAoZXJyKSB7cmV0dXJufTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlX2RlYnVnX21vZGUoeW46IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIGRpc3BsYXlfbWF6ZUNoKCk7XHJcbiAgICBkaXNwbGF5X21hemUyRCgpO1xyXG4gICAgZGlzcGxheV9tYXplM0QoKTtcclxuXHJcbiAgICBjb25zdCBhbGVydCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbGVydF9tb2RlJyk7XHJcbiAgICBjb25zdCBkaXNwbGF5ID0geW4gPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgYWxlcnQ/LnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgZGlzcGxheSk7XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfdmlldzNfbW9kZSgpOiB2b2lkIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZ192aWV3My5zZXRPYmooe1xyXG4gICAgICAgICAgICBhdDogICAgICAgMCxcclxuICAgICAgICAgICAgY2NOYW1lOiAgIFsnM0QnLCAnMkQnLCAnQ2gnXSxcclxuICAgICAgICAgICAgY2NDbGFzczogIFsnZDMnLCAnZDInLCAnY2gnXSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBnX3ZpZXczLmFkZEZuYyhjeWNsZV92aWV3M19tb2RlKTsvL2dfdmlldzMuc2V0T04oKTtcclxuXHJcbiAgICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZXczX21vZGUnKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwoZXZlbnQpPT57XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuY29kZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRpZ2l0M1wiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIktleVZcIjpcclxuICAgICAgICAgICAgICAgICAgICBidG4uY2xpY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGN5Y2xlX3ZpZXczX21vZGUoMCk7IC8vIOWIneacn+eKtuaFi+OBrzNE6KGo56S6XHJcbiAgICB9IGNhdGNoIChlcnIpIHtyZXR1cm59O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjeWNsZV92aWV3M19tb2RlKHNlcTogbnVtYmVyKTogdm9pZCB7XHJcblxyXG4gICAgY29uc3QgZDMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGl2X21hemVfdnczRCcpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgY29uc3QgZDIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGl2X21hemVfdncyRCcpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgY29uc3QgY2ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGl2X21hemVfdndDaCcpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICAgIHN3aXRjaCAoZ192aWV3My5hdCgpKSB7XHJcbiAgICAgICAgY2FzZSAwOiAvLyAzROihqOekulxyXG4gICAgICAgICAgICBkMy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICAgICAgICBkMi5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgICAgIGNoLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICAgICAgZGlzcGxheV9tYXplM0QoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOiAvLyAyROihqOekulxyXG4gICAgICAgICAgICBkMy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgICAgIGQyLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgIGNoLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICAgICAgZGlzcGxheV9tYXplMkQoKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOiAvLyDmloflrZfooajnpLpcclxuICAgICAgICAgICAgZDMuc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgICAgICBkMi5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgICAgIGNoLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgICAgIGRpc3BsYXlfbWF6ZUNoKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gc3RvcF9kb3VibGVfY2xpY2soKTogdm9pZCB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLChldnQ6IE1vdXNlRXZlbnQpID0+e2V2dC5wcmV2ZW50RGVmYXVsdCgpO30pXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xyX2dfaHJlcygpOiB2b2lkIHtcclxuICAgIGdfaHJlcyA9IFtdO1xyXG59XHJcbi8qKioqKioqKlxyXG5leHBvcnQgZnVuY3Rpb24gY2xyX2dfb2JqZSgpOiB2b2lkIHtcclxuICAgIGdfb2JqZSA9IFtdO1xyXG59XHJcbioqKioqKioqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9nX3ZpZXcyWCgpOiB2b2lkIHtcclxuICAgIGdfdmlldzJEID0gQ19Ecm93TWFwMlguZ2V0T2JqKHtcclxuICAgICAgICBkaXZfaWQ6ICAgICdkaXZfbWF6ZV92dzJEJywgXHJcbiAgICAgICAgY2FudmFzX2lkOiAnbWF6ZV92aWV3MkRfY2FudmFzJywgXHJcbiAgICAgICAgeF9taW46IDE1LCB5X21pbjogMTVcclxuICAgIH0pIGFzIENfRHJvd01hcDJEO1xyXG5cclxuICAgIGdfdmlldzJNID0gQ19Ecm93TWFwMlguZ2V0T2JqKHtcclxuICAgICAgICBkaXZfaWQ6ICAgICdkaXZfbWF6ZV92dzJNJywgXHJcbiAgICAgICAgY2FudmFzX2lkOiAnbWF6ZV92aWV3Mk1fY2FudmFzJywgXHJcbiAgICAgICAgeF9taW46ICA1LCB5X21pbjogIDVcclxuICAgIH0pIGFzIENfRHJvd01hcDJNO1xyXG59XHJcblxyXG5cclxuLy8g5pqr5a6aKENfTWF6ZU9iauOBruODhuOCueODiOeUqClcclxuZnVuY3Rpb24gaW5zdGFsbF9vYmpzKG51bTogbnVtYmVyID0gMSk6IHZvaWQge1xyXG4gICAgLy8g6YCa44KK5oqc44GR44Gn44GN44Gq44GE44Kq44OW44K444Kn44KS572u44GP77yI56e75YuV54mI77yJXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bTsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgeCA9IF9pcmFuZCgwLCAoZ19tYXplLmdldF94X21heCgpIC0gMSkgLyAyIC0gMSkgKiAyICsgMTsgXHJcbiAgICAgICAgY29uc3QgeSA9IF9pcmFuZCgwLCAoZ19tYXplLmdldF95X21heCgpIC0gMSkgLyAyIC0gMSkgKiAyICsgMTsgXHJcblxyXG4gICAgICAgIGNvbnN0IG9iamUgPSBuZXcgQ19XbmRyT2JqKHtcclxuICAgICAgICAgICAgcG9zOiAgICB7eDp4LCB5OnksIHo6MCwgZDowfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBnX21hemUuYWRkX29iaihvYmplIGFzIElfV25kck9iaik7XHJcbi8vICAgICAgICBnX29iamUucHVzaChvYmplKTsgLy8gV25kck9iauOBrumFjeWIl+OBq+i/veWKoFxyXG4gICAgfVxyXG4gICAgLy8g6YCa44KK5oqc44GR44Gn44GN44KL44Kq44OW44K444Kn44KS572u44GPXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bTsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgeCA9IF9pcmFuZCgwLCAoZ19tYXplLmdldF94X21heCgpIC0gMSkgLyAyIC0gMSkgKiAyICsgMTsgXHJcbiAgICAgICAgY29uc3QgeSA9IF9pcmFuZCgwLCAoZ19tYXplLmdldF95X21heCgpIC0gMSkgLyAyIC0gMSkgKiAyICsgMTsgXHJcbiAgICAgICAgY29uc3Qgb2JqID0gbmV3IENfTWF6ZU9ialNoYWRvdyh7XHJcbiAgICAgICAgICAgIHBvczogICAgIHt4OngsIHk6eSwgejowLCBkOjB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGdfbWF6ZS5hZGRfb2JqKG9iaik7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vL1xyXG4vLy8gICDkuLvlh6bnkIZcclxuLy8vXHJcblxyXG5pbXBvcnQgeyBpbml0X2FmdGVyX2xvYWRlZF9ET00gfSBmcm9tIFwiLi9nbG9iYWxfZm9yX21hemVcIjtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7IFxyXG4gICAgaW5pdF9hZnRlcl9sb2FkZWRfRE9NKCk7IFxyXG59KTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9