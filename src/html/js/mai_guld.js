/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/d_cmn/C_AlertLog.ts":
/*!*********************************!*\
  !*** ./src/d_cmn/C_AlertLog.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_AlertLog = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_Dialog_1 = __webpack_require__(/*! ./C_Dialog */ "./src/d_cmn/C_Dialog.ts");
class C_AlertLog extends C_Dialog_1.C_Dialog {
    static getObj(target) {
        var _a, _b;
        var _c, _d;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = {});
        if (target === undefined) {
            target = document.createElement('dialog');
            target.id = 'dialog_' + (0, F_Rand_1._get_uuid)();
            document.body.appendChild(target);
        }
        return (_b = (_c = this.me)[_d = target.id]) !== null && _b !== void 0 ? _b : (_c[_d] = new C_AlertLog(target));
    }
    constructor(target) {
        super(target);
        this.msg = {};
        this.__clearDialog();
        this.__makeDialog();
    }
    __clearDialog() {
        const ctx = super.getWindow();
        while (ctx.firstChild)
            ctx.removeChild(ctx.firstChild);
    }
    __makeDialog() {
        const ctx = super.getWindow();
        try {
            this.pane = this.__makeWindow('pane');
            this.logs = this.__makePanel('logs', this.pane);
            this.btns = this.__makePanel('btns', this.pane);
            this.upd = this.__makeButton('update', '更新', this.btns);
            this.clr = this.__makeButton('clear', '消去', this.btns);
            this.cls = this.__makeButton('close', '閉じる', this.btns);
            this.upd.addEventListener('click', () => { this.update(); }, false);
            this.clr.addEventListener('click', () => { this.clear(); }, false);
            this.cls.addEventListener('click', () => { this.hide(); }, false);
            this.logs.style.setProperty('user-select', 'text');
            this.logs.style.setProperty('max-width', '90dvw');
            this.logs.style.setProperty('min-height', '3.0rem');
            this.logs.style.setProperty('max-height', '80dvh');
            this.logs.style.setProperty('overflow-x', 'auto');
            this.logs.style.setProperty('overflow-y', 'auto');
            this.setZoomElm(this.logs);
        }
        catch (err) { }
    }
    __makeWindow(id) {
        const div = document.createElement('div');
        div.id = `${this.id}_${id}`;
        this.setWindow(div);
        return div;
    }
    __makePanel(id, parent) {
        const div = document.createElement('div');
        div.id = `${this.id}_${id}`;
        parent.appendChild(div);
        return div;
    }
    __makeButton(id, name, parent) {
        const btn = document.createElement('button');
        btn.id = `${this.id}_${id}`;
        btn.innerHTML = name;
        parent.appendChild(btn);
        return btn;
    }
    set_message(ttl, msg) {
        var _a;
        var _b;
        ((_a = (_b = this.msg)[ttl]) !== null && _a !== void 0 ? _a : (_b[ttl] = [])).push(msg);
        this.__dom_update();
    }
    clr_message(ttl) {
        if (ttl !== undefined) {
            this.msg[ttl] = [];
            return;
        }
        for (const ii in this.msg)
            this.msg[ii] = [];
        this.__dom_clear();
        return;
    }
    update() { this.__dom_update(); }
    __dom_update() {
        var _a;
        this.__dom_clear();
        for (const title in this.msg) {
            for (let msg of this.msg[title]) {
                const fs = document.createElement('fieldset');
                const lg = document.createElement('legend');
                lg.innerHTML = `${title} (${Date.now().toString()})`;
                fs.appendChild(lg);
                const pr = document.createElement('pre');
                fs.appendChild(pr);
                const pg = document.createElement('p');
                pg.innerHTML = msg;
                pr.appendChild(pg);
                (_a = this.logs) === null || _a === void 0 ? void 0 : _a.appendChild(fs);
            }
        }
    }
    clear() { this.clr_message(); }
    __dom_clear() {
        var _a;
        while ((_a = this.logs) === null || _a === void 0 ? void 0 : _a.firstChild)
            this.logs.removeChild(this.logs.firstChild);
    }
    show() {
        this.update();
        try {
            super.show();
        }
        catch (err) { }
    }
    hide() {
        try {
            super.hide();
        }
        catch (err) { }
    }
    display(yn) {
        yn ? this.show() : this.hide();
    }
}
exports.C_AlertLog = C_AlertLog;


/***/ }),

/***/ "./src/d_cmn/C_Dialog.ts":
/*!*******************************!*\
  !*** ./src/d_cmn/C_Dialog.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Dialog = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_Dialog {
    constructor(target) {
        this.__mop = { x: 0, y: 0 };
        if (target === undefined) {
            target = document.createElement('dialog');
            document.body.appendChild(target);
        }
        if (target.id === undefined || target.id === '')
            target.id = 'dialog_' + (0, F_Rand_1._get_uuid)();
        this.id = target.id;
        target.style.margin = '0';
        target.style.padding = '0';
        this.__dia = target;
        this.__pan = document.createElement('div');
        this.__set_dialog_style();
        this.__ctx = document.createElement('div');
        this.__ctx.style.gridArea = 'mm';
        this.__pan.appendChild(this.__ctx);
        this.__rsz = {};
        this.__set_bar_style('tm');
        this.__set_bar_style('ml');
        this.__set_bar_style('mr');
        this.__set_bar_style('bm');
        this.__set_corner_style('tl');
        this.__set_corner_style('tr');
        this.__set_corner_style('bl');
        this.__set_corner_style('br');
        this.__dia.appendChild(this.__pan);
    }
    __set_dialog_style() {
        this.__dia.style.border = 'none';
        this.__dia.style.borderRadius = '10px';
        this.__dia.style.userSelect = 'auto';
        this.__dia.style.margin = '0';
        this.__dia.style.padding = '0';
        this.__pan.style.display = 'grid';
        this.__pan.style.gridTemplateColumns = `
            [tl-start ml-start bl-start]
            20px
            [tl-end ml-end bl-end tm-start mm-start bm-start]
            1fr
            [tm-end mm-end bm-end tr-start mr-start br-start]
            20px
            [tr-end mr-end br-end]
        `;
        this.__pan.style.gridTemplateRows = `
            [tl-start tm-start tr-start]
            20px
            [tl-end tm-end tr-end ml-start mm-start mr-start]
            1fr
            [ml-end mm-end mr-end bl-start bm-start br-start]
            20px
            [bl-end bm-end br-end]
        `;
    }
    __set_bar_style(area) {
        const elm = document.createElement('div');
        elm.style.backgroundColor = 'lightcyan';
        elm.style.userSelect = 'none';
        elm.style.gridArea = area;
        this.__set_move_dialog(elm);
        this.__pan.appendChild(elm);
        return elm;
    }
    __set_corner_style(area) {
        const elm = document.createElement('div');
        elm.style.backgroundColor = 'cyan';
        elm.style.userSelect = 'none';
        elm.style.gridArea = area;
        if (elm.id === undefined || elm.id === '')
            elm.id = area;
        this.__rsz[elm.id] = new resizeDom(elm, this.__dia);
        this.__set_zoom_dialog(elm);
        this.__pan.appendChild(elm);
        return elm;
    }
    __set_zoom_dialog(elm) {
        elm.setAttribute('draggable', 'true');
        elm.addEventListener('dragstart', (ev) => {
            this.__mop = { x: 0, y: 0 };
            this.__mop.x = ev.pageX;
            this.__mop.y = ev.pageY;
            if (elm.id in this.__rsz)
                this.__rsz[elm.id].reset();
        });
        elm.addEventListener('drag', (ev) => {
            if (ev.pageX === this.__mop.x && ev.pageY === this.__mop.y)
                return;
            const resizeX = ev.pageX - this.__mop.x;
            const resizeY = ev.pageY - this.__mop.y;
            if (elm.id in this.__rsz)
                this.__rsz[elm.id].resize(resizeX, resizeY);
        });
        elm.addEventListener('dragend', (ev) => {
            const resizeX = ev.pageX - this.__mop.x;
            const resizeY = ev.pageY - this.__mop.y;
            if (elm.id in this.__rsz)
                this.__rsz[elm.id].resize(resizeX, resizeY);
        });
    }
    __set_move_dialog(elm) {
        elm.setAttribute('draggable', 'true');
        elm.addEventListener('dragstart', (ev) => {
            this.__mop = { x: 0, y: 0 };
            this.__mop.y = this.__dia.offsetTop - ev.pageY;
            this.__mop.x = this.__dia.offsetLeft - ev.pageX;
        });
        elm.addEventListener('drag', (ev) => {
            if (ev.x === 0 && ev.y === 0)
                return;
            const top = ev.pageY + this.__mop.y;
            const left = ev.pageX + this.__mop.x;
            this.__dia.style.top = top + 'px';
            this.__dia.style.left = left + 'px';
        });
        elm.addEventListener('dragend', (ev) => {
            this.__mop = { x: 0, y: 0 };
        });
    }
    getWindow() {
        return this.__ctx;
    }
    setWindow(ctx) {
        try {
            this.__pan.removeChild(this.__ctx);
            this.__pan.appendChild(ctx);
            return this.__ctx = ctx;
        }
        catch (err) { }
        return ctx;
    }
    setZoomElm(elm) {
        for (const ii in this.__rsz)
            this.__rsz[ii].setZoomElm(elm);
    }
    clrZoom() {
        for (const ii in this.__rsz)
            this.__rsz[ii].clrZoomElm();
    }
    show() {
        try {
            this.__dia.show();
        }
        catch (err) { }
    }
    hide() {
        try {
            this.__dia.close();
        }
        catch (err) { }
    }
    display(yn) {
        yn ? this.show() : this.hide();
    }
}
exports.C_Dialog = C_Dialog;
class resizeDom {
    constructor(cnr, dia) {
        this.__dia = dia;
        this.__cnr = cnr;
        this.__can = { x: false, y: false };
        this.__top = { x: 0, y: 0 };
        this.__siz = { x: 0, y: 0 };
    }
    setZoomElm(trg) {
        this.__trg = trg;
    }
    clrZoomElm() {
        this.__trg = undefined;
    }
    reset() {
        if (this.__trg === undefined)
            return;
        try {
            const parent = this.__cnr.offsetParent;
            this.__can.x = this.__cnr.offsetLeft < ((parent === null || parent === void 0 ? void 0 : parent.offsetWidth) / 2);
            this.__can.y = this.__cnr.offsetTop < ((parent === null || parent === void 0 ? void 0 : parent.offsetHeight) / 2);
        }
        catch (err) {
            this.__can.x = this.__can.y = false;
        }
        this.__top.x = this.__dia.offsetLeft;
        this.__top.y = this.__dia.offsetTop;
        this.__siz.x = this.__trg.offsetWidth;
        this.__siz.y = this.__trg.offsetHeight;
    }
    resize(resizeX, resizeY) {
        if (this.__trg === undefined)
            return;
        if (this.__can.x) {
            resizeX = -resizeX;
            this.__dia.style.left = this.__top.x - resizeX + 'px';
        }
        if (this.__can.y) {
            resizeY = -resizeY;
            this.__dia.style.top = this.__top.y - resizeY + 'px';
        }
        this.__trg.style.width = this.__siz.x + resizeX + 'px';
        this.__trg.style.height = this.__siz.y + resizeY + 'px';
    }
}


/***/ }),

/***/ "./src/d_cmn/F_POST.ts":
/*!*****************************!*\
  !*** ./src/d_cmn/F_POST.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.POST_and_get_JSON = POST_and_get_JSON;
exports.POST_and_get_JSON3 = POST_and_get_JSON3;
exports.POST_and_get_JSON2 = POST_and_get_JSON2;
exports.POST_and_move_page = POST_and_move_page;
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
function POST_and_get_JSON(url, opt) {
    return __awaiter(this, void 0, void 0, function* () {
        const form_data = opt.toFormData();
        if (form_data === undefined)
            return undefined;
        var res;
        try {
            res = yield fetch(url, {
                method: 'POST',
                cache: 'no-cache',
                headers: {},
                body: opt.toFormData()
            });
            if (!res.ok) {
                throw new Error(`レスポンスステータス (${res.status})`);
            }
        }
        catch (err) {
            global_1.g_mes.warning_message('通信エラー: ' + err);
            return undefined;
        }
        const monitor = true;
        return res.text()
            .then(txt => {
            const tx = txt.slice();
            if (monitor) {
                global_1.g_alert.set_message(`POST URL:`, url);
                global_1.g_alert.set_message(`POST OPT:`, opt.toString());
                global_1.g_alert.set_message(`POST DATA:`, tx);
            }
            try {
                return JSON.parse(txt);
            }
            catch (err) {
                global_1.g_mes.warning_message('JSON形式のデコードエラー');
                (0, global_1._alert)(tx);
                return undefined;
            }
        });
    });
}
function POST_and_get_JSON3(url, opt) {
    return __awaiter(this, void 0, void 0, function* () {
        const form_data = opt.toFormData();
        if (form_data === undefined)
            return undefined;
        var res;
        try {
            res = yield fetch(url, {
                method: 'POST',
                cache: 'no-cache',
                headers: {
                    "Content-Type": "application/json"
                },
                body: opt.toJSON()
            });
            if (!res.ok) {
                throw new Error(`レスポンスステータス (${res.status})`);
            }
        }
        catch (err) {
            global_1.g_mes.warning_message('通信エラー: ' + err);
            return undefined;
        }
        const monitor = true;
        return res.text()
            .then(txt => {
            const tx = txt.slice();
            if (monitor) {
                global_1.g_alert.set_message(`POST URL:`, url);
                global_1.g_alert.set_message(`POST OPT:`, opt.toString());
                global_1.g_alert.set_message(`POST DATA:`, tx);
            }
            try {
                return JSON.parse(txt);
            }
            catch (err) {
                global_1.g_mes.warning_message('JSON形式のデコードエラー');
                (0, global_1._alert)(tx);
                return undefined;
            }
        });
    });
}
function POST_and_get_JSON2(url, opt) {
    return __awaiter(this, void 0, void 0, function* () {
        const reqObj = new XMLHttpRequest();
        try {
            reqObj.open("POST", url, false);
            reqObj.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            reqObj.send(opt.toFormData());
        }
        catch (err) {
            global_1.g_mes.warning_message(`通信エラー: ${reqObj.status}`);
            return undefined;
        }
        const txt = reqObj.responseText;
        const monitor = true;
        if (monitor) {
            global_1.g_alert.set_message(`POST URL:`, url);
            global_1.g_alert.set_message(`POST OPT:`, opt.toString());
            global_1.g_alert.set_message(`POST DATA:`, txt);
        }
        if (Number(reqObj.status) > 399) {
            global_1.g_mes.warning_message(`レスポンスステータス: ${reqObj.status}`);
            return undefined;
        }
        try {
            return JSON.parse(txt);
        }
        catch (err) {
            global_1.g_mes.warning_message('JSON形式のデコードエラー: ' + err);
            (0, global_1._alert)(txt);
            return undefined;
        }
    });
}
function POST_and_move_page(url, opt) {
    create_form(url, opt).submit();
}
function create_form(url, opt) {
    const form = document.createElement('form');
    form.id = 'dummy_form_' + new Date().valueOf().toString();
    form.method = 'POST';
    form.action = url;
    form.style.display = 'none';
    for (var key of opt.get_keys()) {
        create_input(form, form.id, key, opt.get(key));
    }
    document.body.appendChild(form);
    return form;
}
function create_input(form, fid, name, value) {
    const i = document.createElement('input');
    i.type = 'hidden';
    i.name = name;
    i.value = value;
    i.style.display = 'none';
    i.setAttribute('for', fid);
    form.appendChild(i);
    return i;
}


/***/ }),

/***/ "./src/d_cmn/F_load_and_save.ts":
/*!**************************************!*\
  !*** ./src/d_cmn/F_load_and_save.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.get_mai_maze = get_mai_maze;
exports.get_mai_guld = get_mai_guld;
exports.get_new_maze = get_new_maze;
exports.get_save_info = get_save_info;
exports.get_maze_info = get_maze_info;
exports.get_new_hero = get_new_hero;
exports.tmp_load = tmp_load;
exports.instant_load = instant_load;
exports.UD_load = UD_load;
exports.before_load = before_load;
exports.general_load = general_load;
exports.tmp_save = tmp_save;
exports.instant_save = instant_save;
exports.UD_save = UD_save;
exports.before_save = before_save;
exports.general_save = general_save;
const C_SaveData_1 = __webpack_require__(/*! ../d_mdl/C_SaveData */ "./src/d_mdl/C_SaveData.ts");
const C_Maze_1 = __webpack_require__(/*! ../d_mdl/C_Maze */ "./src/d_mdl/C_Maze.ts");
const C_Hero_1 = __webpack_require__(/*! ../d_mdl/C_Hero */ "./src/d_mdl/C_Hero.ts");
const C_PointDir_1 = __webpack_require__(/*! ../d_mdl/C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_MazeInfo_1 = __webpack_require__(/*! ../d_mdl/C_MazeInfo */ "./src/d_mdl/C_MazeInfo.ts");
const C_UrlOpt_1 = __webpack_require__(/*! ../d_utl/C_UrlOpt */ "./src/d_utl/C_UrlOpt.ts");
const F_POST_1 = __webpack_require__(/*! ../d_cmn/F_POST */ "./src/d_cmn/F_POST.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
function get_mai_maze(callback) {
    return __awaiter(this, void 0, void 0, function* () {
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'new_game');
        opt.set('pid', global_1.g_start_env.pid);
        return yield _get_new_game(global_1.g_url[global_1.g_url_new_maze], opt, callback);
    });
}
function get_mai_guld(callback) {
    return __awaiter(this, void 0, void 0, function* () {
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'new_game');
        opt.set('pid', global_1.g_start_env.pid.toString());
        return yield _get_new_game(global_1.g_url[global_1.g_url_new_guld], opt, callback);
    });
}
function _get_new_game(url, opt, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        return yield ((_a = (0, F_POST_1.POST_and_get_JSON3)(url, opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
            var _a, _b, _c;
            if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
                global_1.g_mes.normal_message('正常にロードされました');
                if (jsonObj.save === undefined) {
                    global_1.g_mes.warning_message("保存データが不正な形式でした\n" + jsonObj.emsg);
                    (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
                    return undefined;
                }
                const monitor = false;
                if (monitor) {
                    if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) !== undefined) {
                        (0, C_SaveData_1.alert_save_info)(jsonObj.save);
                        (0, C_SaveData_1.alert_save_detail)(jsonObj.save);
                    }
                }
                if (callback !== undefined)
                    callback(jsonObj);
                return jsonObj;
            }
            else {
                global_1.g_mes.warning_message("ロードできませんでした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_c = jsonObj.emsg) !== null && _c !== void 0 ? _c : '??? 不明なエラー ???'));
                return undefined;
            }
        }));
    });
}
function get_new_maze(maze_name, callback) {
    var _a;
    const opt = new C_UrlOpt_1.C_UrlOpt();
    opt.set('mode', 'new_maze');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('maze_name', maze_name);
    return (_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_get_maze], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
        var _a, _b, _c, _d, _e, _f;
        if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) !== 0) {
            global_1.g_mes.warning_message("新迷宮データを受信できませんでした\n" + jsonObj.emsg);
            (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
            return undefined;
        }
        if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === undefined) {
            global_1.g_mes.warning_message("受信データが不正な形式でした\n" + jsonObj.emsg);
            (0, global_1._alert)(jsonObj.emsg);
            return undefined;
        }
        if (((_c = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _c === void 0 ? void 0 : _c.maze) === undefined) {
            global_1.g_mes.warning_message("新迷宮データが不正な形式でした\n" + jsonObj.emsg);
            (0, global_1._alert)(jsonObj.emsg);
            return undefined;
        }
        if (((_d = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _d === void 0 ? void 0 : _d.pos) === undefined) {
            global_1.g_mes.warning_message("新迷宮の位置データが不正な形式でした\n" + jsonObj.emsg);
            (0, global_1._alert)(jsonObj.emsg);
            return undefined;
        }
        const monitor = false;
        if (monitor) {
            if (((_e = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _e === void 0 ? void 0 : _e.maze) !== undefined)
                (0, C_Maze_1.alert_maze_info)(jsonObj.data.maze);
            if (((_f = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _f === void 0 ? void 0 : _f.pos) !== undefined)
                (0, C_PointDir_1.alert_PD_info)(jsonObj.data.pos);
        }
        if (callback !== undefined)
            callback(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data);
        return jsonObj;
    });
}
function get_save_info(callback) {
    var _a;
    const opt = new C_UrlOpt_1.C_UrlOpt();
    opt.set('mode', 'save_info');
    opt.set('pid', global_1.g_start_env.pid);
    return (_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_get_info], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
        var _a, _b;
        if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
            global_1.g_mes.normal_message('正常にロードされました');
            if (jsonObj.save_info === undefined) {
                global_1.g_mes.warning_message("保存データが不正な形式でした\n" + jsonObj.emsg);
                (0, global_1._alert)(jsonObj.emsg);
                return undefined;
            }
            const monitor = false;
            if (monitor) {
                for (let save of jsonObj.save_info) {
                    if (save !== undefined) {
                        (0, C_SaveData_1.alert_save_info)(save);
                    }
                }
            }
            if (callback !== undefined)
                callback(jsonObj);
            return jsonObj;
        }
        else {
            global_1.g_mes.warning_message("ロードできませんでした\n" + jsonObj.emsg);
            (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
            return undefined;
        }
    });
}
function get_maze_info(callback) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'maze_info');
        return yield ((_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_all_maze], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
            var _a, _b, _c, _d, _e, _f;
            if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
                global_1.g_mes.normal_message('正常にロードされました');
                if (((_b = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _b === void 0 ? void 0 : _b.mazeinfo) === undefined) {
                    global_1.g_mes.warning_message("迷宮情報が不正な形式でした\n" + jsonObj.emsg);
                    (0, global_1._alert)(jsonObj.emsg);
                    return undefined;
                }
                const monitor = false;
                if (monitor) {
                    if (((_c = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _c === void 0 ? void 0 : _c.mazeinfo) !== undefined) {
                        for (const mazeinfo of jsonObj.data.mazeinfo) {
                            (0, C_MazeInfo_1.alert_mazeinfo_info)(mazeinfo);
                        }
                    }
                }
                if (callback !== undefined)
                    callback((_d = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _d === void 0 ? void 0 : _d.mazeinfo);
                return (_e = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _e === void 0 ? void 0 : _e.mazeinfo;
            }
            else {
                global_1.g_mes.warning_message("ロードできませんでした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_f = jsonObj.emsg) !== null && _f !== void 0 ? _f : '??? 不明なエラー ???'));
                return undefined;
            }
        }));
    });
}
function get_new_hero() {
    return __awaiter(this, arguments, void 0, function* (num = 20, callback) {
        var _a;
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'new_hero');
        opt.set('nmbr', num.toString());
        return yield ((_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_all_hres], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
            var _a, _b, _c, _d;
            if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
                global_1.g_mes.normal_message('正常にロードされました');
                if (((_b = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _b === void 0 ? void 0 : _b.hres) === undefined) {
                    global_1.g_mes.warning_message("ヒーロー・データが不正な形式でした\n" + jsonObj.emsg);
                    (0, global_1._alert)(jsonObj.emsg);
                    return;
                }
                const monitor = false;
                if (monitor) {
                    if (((_c = jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data) === null || _c === void 0 ? void 0 : _c.hres) !== undefined)
                        (0, C_Hero_1.alert_hres_info)(jsonObj.data.hres);
                }
                if (callback !== undefined)
                    callback(jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data);
                return jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.data;
            }
            else {
                global_1.g_mes.warning_message("ロードできませんでした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_d = jsonObj.emsg) !== null && _d !== void 0 ? _d : '??? 不明なエラー ???'));
                return undefined;
            }
        }));
    });
}
function tmp_load(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'tmp_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 100);
    return __auto_load(opt, callback);
}
function instant_load(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'instant_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 101);
    return __auto_load(opt, callback);
}
function UD_load(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'UD_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 102);
    return __auto_load(opt, callback);
}
function before_load(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'before_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 103);
    return __auto_load(opt, callback);
}
function general_load(uniq_no, opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'general_load');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', uniq_no);
    return __auto_load(opt, callback);
}
function __auto_load(opt, callback) {
    var _a;
    return (_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_get_data], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
        var _a, _b, _c;
        if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
            global_1.g_mes.normal_message('正常にロードされました');
            if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) === undefined) {
                global_1.g_mes.warning_message("受信した保存データが不正な形式でした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
                return undefined;
            }
            const monitor = false;
            if (monitor) {
                if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) !== undefined) {
                    (0, C_SaveData_1.alert_save_info)(jsonObj.save);
                    (0, C_SaveData_1.alert_save_detail)(jsonObj.save);
                }
            }
            if (callback !== undefined)
                callback(jsonObj);
            return jsonObj;
        }
        else {
            global_1.g_mes.warning_message(`ロードできませんでした${jsonObj.ecode}\n` + jsonObj.emsg);
            (0, global_1._alert)(((_c = jsonObj.emsg) !== null && _c !== void 0 ? _c : '??? 不明なエラー ???'));
            return undefined;
        }
    });
}
function tmp_save(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'tmp_save');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 100);
    return __auto_save(opt, callback);
}
function instant_save(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'instant_save');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 101);
    return __auto_save(opt, callback);
}
function UD_save(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'UD_save');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 102);
    return __auto_save(opt, callback);
}
function before_save(opt, callback) {
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'before_save');
    opt.set('pid', global_1.g_start_env.pid);
    opt.set('uno', 103);
    return __auto_save(opt, callback);
}
function general_save(opt, callback) {
    global_1.g_save.auto_mode = false;
    opt !== null && opt !== void 0 ? opt : (opt = new C_UrlOpt_1.C_UrlOpt());
    opt.set('mode', 'general_save');
    opt.set('pid', global_1.g_start_env.pid);
    return __save(opt, callback);
}
function __auto_save(opt, callback) {
    global_1.g_save.auto_mode = true;
    return __save(opt, callback);
}
function __save(opt, callback) {
    var _a;
    if (!opt.isset('save')) {
        opt.set('save', JSON.stringify(global_1.g_save.encode(), null, "\t"));
    }
    const move_page = false;
    if (move_page) {
        (0, F_POST_1.POST_and_move_page)(global_1.g_url[global_1.g_url_check_JSON], opt);
    }
    return (_a = (0, F_POST_1.POST_and_get_JSON3)(global_1.g_url[global_1.g_url_put_data], opt)) === null || _a === void 0 ? void 0 : _a.then(jsonObj => {
        var _a, _b, _c;
        if (((_a = jsonObj.ecode) !== null && _a !== void 0 ? _a : -99) === 0) {
            if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) === undefined) {
                global_1.g_mes.warning_message("受信した保存データが不正な形式でした\n" + jsonObj.emsg);
                (0, global_1._alert)(((_b = jsonObj.emsg) !== null && _b !== void 0 ? _b : '??? 不明なエラー ???'));
                return undefined;
            }
            const monitor = false;
            if (monitor) {
                if ((jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.save) !== undefined) {
                    (0, C_SaveData_1.alert_save_info)(jsonObj.save);
                    (0, C_SaveData_1.alert_save_detail)(jsonObj.save);
                }
            }
            if (callback !== undefined)
                callback(jsonObj);
            global_1.g_mes.normal_message('正常にセーブされました');
            return jsonObj;
        }
        else {
            global_1.g_mes.warning_message("セーブできませんでした\n" + jsonObj.emsg);
            (0, global_1._alert)(((_c = jsonObj.emsg) !== null && _c !== void 0 ? _c : '??? 不明なエラー ???'));
            return undefined;
        }
    }).catch(err => {
        global_1.g_mes.warning_message('POST読み込みに失敗しました(POST_AND_JSON3)');
        return undefined;
    });
}


/***/ }),

/***/ "./src/d_cmn/global.ts":
/*!*****************************!*\
  !*** ./src/d_cmn/global.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.g_save = exports.g_mes = exports.g_start_env = exports.g_ready_games = exports.g_alert = exports.g_debug = exports.g_my_url = exports.g_url = exports.g_url_gt2_save = exports.g_url_gt2_maze = exports.g_url_gt2_guld = exports.g_url_rcd_save = exports.g_url_rcd_load = exports.g_url_rcd_list = exports.g_url_check_JSON = exports.g_url_put_data = exports.g_url_get_data = exports.g_url_get_info = exports.g_url_mai_guld = exports.g_url_mai_maze = exports.g_url_all_save = exports.g_url_put_save = exports.g_url_get_save = exports.g_url_all_hres = exports.g_url_new_guld = exports.g_url_all_maze = exports.g_url_new_maze = exports.g_url_get_maze = void 0;
exports.init_after_loaded_DOM_in_common = init_after_loaded_DOM_in_common;
exports._alert = _alert;
exports.g_url_get_maze = 0;
exports.g_url_new_maze = 1;
exports.g_url_all_maze = 2;
exports.g_url_new_guld = 5;
exports.g_url_all_hres = 6;
exports.g_url_get_save = 7;
exports.g_url_put_save = 8;
exports.g_url_all_save = 9;
exports.g_url_mai_maze = 10;
exports.g_url_mai_guld = 11;
exports.g_url_get_info = 12;
exports.g_url_get_data = 13;
exports.g_url_put_data = 15;
exports.g_url_check_JSON = 16;
exports.g_url_rcd_list = 17;
exports.g_url_rcd_load = 18;
exports.g_url_rcd_save = 19;
exports.g_url_gt2_guld = 20;
exports.g_url_gt2_maze = 21;
exports.g_url_gt2_save = 22;
exports.g_url = new Array(23);
const C_OnOffButton_1 = __webpack_require__(/*! ../d_ctl/C_OnOffButton */ "./src/d_ctl/C_OnOffButton.ts");
const C_AlertLog_1 = __webpack_require__(/*! ../d_cmn/C_AlertLog */ "./src/d_cmn/C_AlertLog.ts");
class C_ReadyGames {
    constructor() {
        this.flgs = {};
        this.flgs.loadedDOM = false;
        this.flgs.getWindow = false;
        this.func = () => { };
    }
    setLoadedDOM() {
        this.flgs.loadedDOM = true;
        this.check_and_do();
    }
    setGetWindow() {
        this.flgs.getWindow = true;
        this.check_and_do();
    }
    setFunction(func) {
        this.func = func;
        this.check_and_do();
    }
    check_and_do() {
        if (this.func === undefined)
            return;
        for (let ii in this.flgs)
            if (!this.flgs[ii])
                return;
        this.func();
    }
}
exports.g_ready_games = new C_ReadyGames();
exports.g_start_env = { mode: '', pid: -1, opt: '' };
const C_DisplayMessage_1 = __webpack_require__(/*! ../d_vie/C_DisplayMessage */ "./src/d_vie/C_DisplayMessage.ts");
const C_SaveData_1 = __webpack_require__(/*! ../d_mdl/C_SaveData */ "./src/d_mdl/C_SaveData.ts");
exports.g_save = new C_SaveData_1.C_SaveData();
function init_after_loaded_DOM_in_common(debug_id = 'debug_mode', msg_id = 'pane_sytm_logs') {
    const con = document.getElementById(msg_id);
    exports.g_mes = C_DisplayMessage_1.C_DisplayMessage.getObj(con, 'client_message');
    exports.g_alert = C_AlertLog_1.C_AlertLog.getObj();
    const btn = document.getElementById(debug_id);
    exports.g_debug = C_OnOffButton_1.C_OnOffButton.getObj(btn, {});
}
function _alert(txt, page_size = 250) {
    for (let i = 0; i < txt.length; i += page_size) {
        if (!window.confirm(txt.substring(i, i + page_size)))
            break;
    }
}
const tsCaller = (() => {
    return {
        get_init_data: (my_url) => {
            exports.g_my_url = my_url;
            const url_top = parent_url(my_url);
            const exp_top = parent_url(url_top) + "/maiex";
            exports.g_url[exports.g_url_gt2_save] = url_top + "/_JSON_mai_save.php";
            exports.g_url[exports.g_url_gt2_maze] = url_top + "/_JSON_mai_maze.php";
            exports.g_url[exports.g_url_gt2_guld] = url_top + "/_JSON_mai_guld.php";
            exports.g_url[exports.g_url_mai_maze] = url_top + "/mai_maze.php";
            exports.g_url[exports.g_url_mai_guld] = url_top + "/mai_guld.php";
            exports.g_url[exports.g_url_new_maze] = exp_top + "/maze/newMaze";
            exports.g_url[exports.g_url_get_maze] = exp_top + "/maze/getMaze";
            exports.g_url[exports.g_url_all_maze] = exp_top + "/maze/allMaze";
            exports.g_url[exports.g_url_new_guld] = exp_top + "/guld/newGuld";
            exports.g_url[exports.g_url_all_hres] = exp_top + "/guld/allHres";
            exports.g_url[exports.g_url_get_info] = exp_top + "/ldsv/_info";
            exports.g_url[exports.g_url_get_data] = exp_top + "/ldsv/_load";
            exports.g_url[exports.g_url_put_data] = exp_top + "/ldsv/_save";
            exports.g_url[exports.g_url_check_JSON] = url_top + "/check_JSON.php";
        },
        start_game: (mode, my_url, player_id, opt) => {
            tsCaller.get_init_data(my_url);
            exports.g_start_env.mode = mode;
            exports.g_start_env.pid = player_id;
            exports.g_start_env.opt = opt;
            exports.g_ready_games.setGetWindow();
        }
    };
})();
function parent_url(url) {
    let re = /\/[^\/]+?$/;
    return url.replace(re, '');
}
window.tsCall = tsCaller;


/***/ }),

/***/ "./src/d_ctl/C_CtlCursor.ts":
/*!**********************************!*\
  !*** ./src/d_ctl/C_CtlCursor.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_CtlCursor = void 0;
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
class C_CtlCursor {
    constructor(list) {
        var _a;
        (_a = C_CtlCursor.me) !== null && _a !== void 0 ? _a : (C_CtlCursor.me = {});
        this._id = '__dmy__';
        this._list = undefined;
        this._leng = 0;
        this._cols = 1;
        this._indx = 0;
        C_CtlCursor.me[this._id] = this;
    }
    static getObj(list) {
        var _a, _b;
        var _c;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = {});
        const id = list !== undefined ? list.id : '__dmy__';
        (_b = (_c = this.me)[id]) !== null && _b !== void 0 ? _b : (_c[id] = new C_CtlCursor(list));
        if (list !== undefined)
            this.me[id].set(list);
        return this.me[id];
    }
    set(list) {
        this._id = list.id;
        this._list = list;
        this._leng = this.__get_leng();
        this._cols = this.__get_cols();
        this._indx = 0;
        this.high_light_on();
        return this;
    }
    uid() {
        return this._id;
    }
    leng() {
        return this._leng;
    }
    rows() {
        return this.__get_rows();
    }
    cols() {
        return this._cols;
    }
    pos() {
        return this._indx;
    }
    set_pos(indx) {
        if (indx < 0)
            indx = 0;
        if (indx >= this._leng)
            indx = this._leng - 1;
        this._indx = indx;
        this.high_light_on();
        return this;
    }
    pos_U() {
        if (this._list === undefined)
            return 0;
        let indx = this._indx;
        const rows = this.__get_rows();
        const cur_row = indx % rows;
        if (cur_row !== 0) {
            --indx;
        }
        else {
            indx += rows - 1;
            while (indx > this._leng - 1) {
                --indx;
            }
        }
        this._indx = indx;
        this.high_light_on();
        return this._indx;
    }
    pos_D() {
        if (this._list === undefined)
            return 0;
        let indx = this._indx;
        const rows = this.__get_rows();
        const cur_row = indx % rows;
        if (cur_row !== rows - 1 && indx !== this._leng - 1) {
            ++indx;
        }
        else {
            indx -= rows - 1;
            while (indx % rows !== 0 && indx < this._leng - 1) {
                ++indx;
            }
        }
        this._indx = indx;
        this.high_light_on();
        return this._indx;
    }
    pos_L() {
        if (this._list === undefined)
            return 0;
        let indx = this._indx;
        const rows = this.__get_rows();
        if (indx > rows - 1) {
            indx -= rows;
        }
        else {
            const vurtual_list_leng = this._cols * rows;
            indx += vurtual_list_leng - rows;
            while (indx > this._leng - 1) {
                indx -= rows;
                if (indx < 0) {
                    indx = 0;
                    break;
                }
            }
        }
        this._indx = indx;
        this.high_light_on();
        return this._indx;
    }
    pos_R() {
        if (this._list === undefined)
            return 0;
        let indx = this._indx;
        const rows = this.__get_rows();
        if (indx < this._leng - rows) {
            indx += rows;
        }
        else {
            const old_indx = indx;
            const vurtual_list_leng = this._cols * rows;
            indx -= vurtual_list_leng - rows;
            if (indx < 0) {
                indx += rows;
                if (indx < 0 || indx > this._leng - 1)
                    indx = (0, F_Math_1._floor)((old_indx + 1) / this._cols, 0);
            }
        }
        this._indx = indx;
        this.high_light_on();
        return this._indx;
    }
    __get_rows() {
        return (0, F_Math_1._ceil)(this._leng / this._cols, 0);
    }
    __get_leng() {
        if (this._list === undefined)
            return 0;
        try {
            return this._list.children.length;
        }
        catch (err) {
            return 1;
        }
    }
    __get_cols() {
        if (this._list === undefined)
            return 0;
        try {
            let cols = window.getComputedStyle(this._list).columnCount;
            return (0, F_Math_1._isNum)(cols) ? Number(cols) : 1;
        }
        catch (err) {
            return 1;
        }
    }
    high_light_on() {
        if (this._list === undefined)
            return;
        const children = this._list.children;
        const len = children.length;
        if (this._indx < 0 || this._indx > len - 1)
            return;
        for (let i = 0; i < len; i++) {
            const li = children.item(i);
            this.__high_light_on(li, false);
        }
        const li = children.item(this._indx);
        this.__high_light_on(li, true);
    }
    high_light_off() {
        if (this._list === undefined)
            return;
        const children = this._list.children;
        const len = children.length;
        for (var i = 0; i < len; i++) {
            const li = children.item(i);
            this.__high_light_on(li, false);
        }
    }
    __high_light_on(elm, isOn) {
        var _a;
        if (elm === null)
            return;
        const perentStyle = window.getComputedStyle((_a = elm.parentElement) !== null && _a !== void 0 ? _a : elm);
        const fw_color = perentStyle.color;
        const bg_color = perentStyle.backgroundColor;
        elm.style.color = isOn ? bg_color : fw_color;
        elm.style.backgroundColor = isOn ? fw_color : bg_color;
        elm.style.fontWeight = isOn ? 'bold' : 'normal';
        for (var j = 0; j < elm.children.length; j++) {
            const p = elm.children.item(j);
            if (isOn) {
                p.style.fontWeight = 'normal';
                p.style.color = fw_color;
                p.style.backgroundColor = bg_color;
                p.style.display = 'block';
            }
            else {
                p.style.display = 'none';
            }
        }
    }
    alert() {
        (0, global_1._alert)("CtlCursor: "
            + "\nid   = " + this._id
            + "\nindx = " + this._indx
            + "\nleng = " + this._leng
            + "\ncols = " + this._cols);
    }
    ;
}
exports.C_CtlCursor = C_CtlCursor;


/***/ }),

/***/ "./src/d_ctl/C_OnOffButton.ts":
/*!************************************!*\
  !*** ./src/d_ctl/C_OnOffButton.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_OnOffButton = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_OnOffButton {
    static getObj(elm, ooo) {
        var _a, _b;
        var _c, _d;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = {});
        (_b = (_c = this.me)[_d = elm.id]) !== null && _b !== void 0 ? _b : (_c[_d] = new C_OnOffButton(elm, ooo));
        return this.me[elm.id];
    }
    constructor(elm, ooo) {
        this.def_ooo = {
            onName: 'ON',
            offName: 'off',
            onClass: '_toggle_on',
            offClass: '_toggle_off',
        };
        this.fnc = {};
        this.ooo = this.def_ooo;
        this.yn = false;
        if (elm.name === undefined || elm.name === '')
            elm.name = elm.id;
        this.elm = elm;
        this.elm.addEventListener("click", (event) => { this.toggle(); }, false);
        if (ooo !== undefined)
            this.setObj(ooo);
    }
    setObj(ooo) {
        var _a, _b, _c, _d, _e;
        var _f, _g, _h, _j;
        try {
            this.yn = (_a = ooo.yn) !== null && _a !== void 0 ? _a : false;
            this.ooo = ooo;
            (_b = (_f = this.ooo).onName) !== null && _b !== void 0 ? _b : (_f.onName = this.def_ooo.onName);
            (_c = (_g = this.ooo).offName) !== null && _c !== void 0 ? _c : (_g.offName = this.def_ooo.offName);
            (_d = (_h = this.ooo).onClass) !== null && _d !== void 0 ? _d : (_h.onClass = this.def_ooo.onClass);
            (_e = (_j = this.ooo).offClass) !== null && _e !== void 0 ? _e : (_j.offClass = this.def_ooo.offClass);
            this._setStyle(this.yn);
        }
        catch (_k) { }
        return this;
    }
    _setStyle(yn) {
        this.yn = yn;
        const ooo = this.ooo;
        this.elm.value = yn ? 'on' : 'off';
        this.elm.innerHTML = yn ? ooo.onName : ooo.offName;
        this.elm.classList.remove(yn ? ooo.offClass : ooo.onClass);
        this.elm.classList.add(yn ? ooo.onClass : ooo.offClass);
    }
    setON() { var _a; return (_a = this._setYN(true)) !== null && _a !== void 0 ? _a : false; }
    ;
    setOFF() { var _a; return (_a = this._setYN(false)) !== null && _a !== void 0 ? _a : false; }
    ;
    toggle() { var _a; return (_a = this._setYN(!this.yn)) !== null && _a !== void 0 ? _a : false; }
    _setYN(yn) {
        this._setStyle(yn);
        let tf = true;
        for (const i in this.fnc)
            tf && (tf = this.fnc[i](yn));
        return tf;
    }
    id() { return this.elm.id; }
    ;
    isON() { return this.yn; }
    addFnc(fnc) {
        const id = 'oofunc_' + (0, F_Rand_1._get_uuid)();
        this.fnc[id] = fnc;
        return id;
    }
    rmvFnc(fnc) {
        if (typeof fnc === 'string') {
            try {
                delete this.fnc[fnc];
                return true;
            }
            catch (err) {
                return false;
            }
        }
        for (const i in this.fnc)
            if (fnc === this.fnc[i]) {
                delete this.fnc[i];
                return true;
            }
        return false;
    }
}
exports.C_OnOffButton = C_OnOffButton;


/***/ }),

/***/ "./src/d_mdl/C_Guild.ts":
/*!******************************!*\
  !*** ./src/d_mdl/C_Guild.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Guild = void 0;
exports.alert_guld_info = alert_guld_info;
const C_Location_1 = __webpack_require__(/*! ./C_Location */ "./src/d_mdl/C_Location.ts");
const C_Hero_1 = __webpack_require__(/*! ./C_Hero */ "./src/d_mdl/C_Hero.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
function alert_guld_info(a) {
    var _a, _b, _c, _d, _e, _f, _g;
    if (a === undefined)
        return;
    alert("Guild Info:"
        + "\nid:       " + ((_a = a.id) !== null && _a !== void 0 ? _a : '?')
        + "\nuniq_id:  " + ((_b = a.uniq_id) !== null && _b !== void 0 ? _b : '?')
        + "\nsave_id:  " + ((_c = a.save_id) !== null && _c !== void 0 ? _c : '?')
        + "\nname:     " + ((_d = a.name) !== null && _d !== void 0 ? _d : '?')
        + "\ngold:     " + ((_e = a.gold) !== null && _e !== void 0 ? _e : 0)
        + "\nheroes:   " + ((_g = (_f = a.heroes) === null || _f === void 0 ? void 0 : _f.length) !== null && _g !== void 0 ? _g : '?')
        + "\n");
}
class C_Guild {
    constructor(a) {
        this.id = -1;
        this.uniq_id = 'mai_guld#' + (0, F_Rand_1._get_uuid)();
        this.save_id = -1;
        this.name = '';
        this.gold = 0;
        this.heroes = {};
        if (a !== undefined)
            this.decode(a);
    }
    uid() { return this.uniq_id; }
    get_lckd() { return C_Location_1.T_Lckd.Maze; }
    get_name() { return this.name; }
    hres() {
        const hres = [];
        for (let ii in this.heroes)
            hres.push(this.heroes[ii]);
        return hres;
    }
    clear_hres() {
        this.heroes = {};
    }
    add_hero(hero) {
        this.heroes[hero.uid()] = hero;
    }
    rmv_hero(hero) {
        delete this.heroes[hero.uid()];
    }
    encode() {
        const json_heroes = [];
        for (let ii in this.heroes)
            json_heroes.push(this.heroes[ii].encode());
        return {
            id: this.id,
            uniq_id: this.uniq_id,
            save_id: this.save_id,
            gold: this.gold,
            heroes: json_heroes,
            name: this.name,
        };
    }
    decode(a) {
        if (a === undefined)
            return this;
        if (a.id !== undefined)
            this.id = a.id;
        if (a.uniq_id !== undefined)
            this.uniq_id = a.uniq_id;
        if (a.save_id !== undefined)
            this.save_id = a.save_id;
        if (a.name !== undefined)
            this.name = a.name;
        if (a.gold !== undefined)
            this.gold;
        if (a.heroes !== undefined) {
            this.heroes = {};
            for (const json_hero of a.heroes) {
                const hero = new C_Hero_1.C_Hero(json_hero);
                this.heroes[hero.uid()] = hero;
            }
        }
        return this;
    }
    static encode_all(all_guld) {
        const all_guld_data = [];
        for (let guld of all_guld) {
            all_guld_data.push(guld.encode());
        }
        return all_guld_data;
    }
    static decode_all(all_guld_data) {
        const all_guld = [];
        for (let guld_data of all_guld_data) {
            all_guld.push((new C_Guild()).decode(guld_data));
        }
        return all_guld;
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g;
        alert("Guild Info:"
            + "\nid:       " + ((_a = this.id) !== null && _a !== void 0 ? _a : '?')
            + "\nuniq_id:  " + ((_b = this.uniq_id) !== null && _b !== void 0 ? _b : '?')
            + "\nsave_id:  " + ((_c = this.save_id) !== null && _c !== void 0 ? _c : '?')
            + "\nname:     " + ((_d = this.name) !== null && _d !== void 0 ? _d : '?')
            + "\ngold:     " + ((_e = this.gold) !== null && _e !== void 0 ? _e : 0)
            + "\nheroes:   " + ((_g = (_f = this.heroes) === null || _f === void 0 ? void 0 : _f.length) !== null && _g !== void 0 ? _g : '?')
            + "\n");
    }
}
exports.C_Guild = C_Guild;


/***/ }),

/***/ "./src/d_mdl/C_Hero.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Hero.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Hero = void 0;
exports.alert_hres_info = alert_hres_info;
exports.alert_hero_info = alert_hero_info;
const C_HeroAbility_1 = __webpack_require__(/*! ./C_HeroAbility */ "./src/d_mdl/C_HeroAbility.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
function alert_hres_info(a) {
    if (a === undefined)
        return;
    alert('Number of Hero = ' + a.length.toString());
    for (var i in a) {
        if (a[i] === undefined)
            continue;
        alert_hero_info(a[i]);
    }
}
function alert_hero_info(a) {
    var _a, _b, _c, _d, _e;
    if (a === undefined)
        return;
    alert("Hero Info:\n"
        + "\nid:       " + ((_a = a === null || a === void 0 ? void 0 : a.id) !== null && _a !== void 0 ? _a : '?')
        + "\nuniq_id   " + ((_b = a === null || a === void 0 ? void 0 : a.uniq_id) !== null && _b !== void 0 ? _b : '?')
        + "\nname:     " + ((_c = a === null || a === void 0 ? void 0 : a.name) !== null && _c !== void 0 ? _c : '?')
        + "\nsave_id:  " + ((_d = a === null || a === void 0 ? void 0 : a.save_id) !== null && _d !== void 0 ? _d : '?')
        + "\nis_alive: " + ((_e = a === null || a === void 0 ? void 0 : a.is_alive) !== null && _e !== void 0 ? _e : '?')
        + "\n");
}
class C_Hero {
    constructor(a) {
        this.my_id = 0;
        this.my_name = 'No Name Hero';
        this.uniq_id = 'mai_hero#' + (0, F_Rand_1._get_uuid)();
        this.save_id = 0;
        this.sex = 0;
        this.age = 0;
        this.gold = 0;
        this.state = 0;
        this.lv = 0;
        this.val = {};
        this.abi_p = { bsc: new C_HeroAbility_1.C_HeroAbility(), ttl: new C_HeroAbility_1.C_HeroAbility(), now: new C_HeroAbility_1.C_HeroAbility() };
        this.abi_m = { bsc: new C_HeroAbility_1.C_HeroAbility(), ttl: new C_HeroAbility_1.C_HeroAbility(), now: new C_HeroAbility_1.C_HeroAbility() };
        if (a !== undefined)
            this.__init(a);
    }
    free() {
        this.val = undefined;
        this.abi_p = undefined;
        const a = { bsc: new C_HeroAbility_1.C_HeroAbility(), ttl: new C_HeroAbility_1.C_HeroAbility(), now: new C_HeroAbility_1.C_HeroAbility() };
        this.abi_m = undefined;
        const b = { bsc: new C_HeroAbility_1.C_HeroAbility(), ttl: new C_HeroAbility_1.C_HeroAbility(), now: new C_HeroAbility_1.C_HeroAbility() };
    }
    set_prp(arg) {
        this.decode(arg);
    }
    get_uniq_id() { return this.uniq_id; }
    id() {
        return 'Hero_' + this.my_id.toString(16).padStart(5, '0');
    }
    uid() { return this.uniq_id; }
    name() {
        return this.my_name;
    }
    set_name(name) {
        this.my_name = name;
    }
    is_alive() {
        var _a, _b, _c, _d;
        const hp = (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get('xp')) !== null && _b !== void 0 ? _b : 0;
        const hd = (_d = (_c = this.abi_p) === null || _c === void 0 ? void 0 : _c.now.get('xd')) !== null && _d !== void 0 ? _d : 0;
        return hp - hd > 0;
    }
    get_abi_p_bsc(key) { var _a, _b; return (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_p_ttl(key) { var _a, _b; return (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.ttl.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_p_now(key) { var _a, _b; return (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_m_bsc(key) { var _a, _b; return (_b = (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.bsc.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_m_ttl(key) { var _a, _b; return (_b = (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.ttl.get(key)) !== null && _b !== void 0 ? _b : 0; }
    get_abi_m_now(key) { var _a, _b; return (_b = (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.now.get(key)) !== null && _b !== void 0 ? _b : 0; }
    set_abi_p_all(key, val) {
        var _a, _b, _c;
        (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc.set(key, val);
        (_b = this.abi_p) === null || _b === void 0 ? void 0 : _b.ttl.set(key, val);
        (_c = this.abi_p) === null || _c === void 0 ? void 0 : _c.now.set(key, val);
    }
    set_abi_p_bsc(key, val) { var _a; (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc.set(key, val); }
    set_abi_p_ttl(key, val) { var _a; (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.ttl.set(key, val); }
    set_abi_p_now(key, val) { var _a; (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.set(key, val); }
    set_abi_m_all(key, val) {
        var _a, _b, _c;
        (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.bsc.set(key, val);
        (_b = this.abi_m) === null || _b === void 0 ? void 0 : _b.ttl.set(key, val);
        (_c = this.abi_m) === null || _c === void 0 ? void 0 : _c.now.set(key, val);
    }
    set_abi_m_bsc(key, val) { var _a; (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.bsc.set(key, val); }
    set_abi_m_ttl(key, val) { var _a; (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.ttl.set(key, val); }
    set_abi_m_now(key, val) { var _a; (_a = this.abi_m) === null || _a === void 0 ? void 0 : _a.now.set(key, val); }
    hero_bonus(n) {
        return n * (this.lv + 1);
    }
    hp_damage(dmg) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const xp_now = (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get('xp')) !== null && _b !== void 0 ? _b : 0;
        let xd_now = (_d = (_c = this.abi_p) === null || _c === void 0 ? void 0 : _c.now.get('xd')) !== null && _d !== void 0 ? _d : 0;
        xd_now += dmg - Math.round(this.hero_bonus(((_f = (_e = this.abi_p) === null || _e === void 0 ? void 0 : _e.now.get('vit')) !== null && _f !== void 0 ? _f : 0) / 10.0));
        const d = xd_now > xp_now ? xp_now : xd_now;
        (_g = this.abi_p) === null || _g === void 0 ? void 0 : _g.now.set('xd', d);
        (_h = this.abi_p) === null || _h === void 0 ? void 0 : _h.ttl.set('xd', d);
        (_j = this.abi_p) === null || _j === void 0 ? void 0 : _j.bsc.set('xd', d);
        return d;
    }
    hp_heal(heal) {
        var _a, _b, _c, _d, _e;
        let xd_now = (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get('xd')) !== null && _b !== void 0 ? _b : 0;
        if (xd_now <= 0)
            return 0;
        xd_now -= heal;
        const d = xd_now < 0 ? 0 : xd_now;
        (_c = this.abi_p) === null || _c === void 0 ? void 0 : _c.now.set('xd', d);
        (_d = this.abi_p) === null || _d === void 0 ? void 0 : _d.ttl.set('xd', d);
        (_e = this.abi_p) === null || _e === void 0 ? void 0 : _e.bsc.set('xd', d);
        return d;
    }
    hp_auto_heal() {
        var _a, _b;
        const heal = Math.ceil(this.hero_bonus(((_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.get('vit')) !== null && _b !== void 0 ? _b : 0) / 10.0));
        return this.hp_heal(heal);
    }
    copy_bsc_to_ttl() {
        var _a, _b, _c, _d, _e, _f;
        (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.ttl.decode((_c = (_b = this.abi_p) === null || _b === void 0 ? void 0 : _b.bsc.encode()) !== null && _c !== void 0 ? _c : {});
        (_d = this.abi_m) === null || _d === void 0 ? void 0 : _d.ttl.decode((_f = (_e = this.abi_m) === null || _e === void 0 ? void 0 : _e.bsc.encode()) !== null && _f !== void 0 ? _f : {});
    }
    copy_ttl_to_now() {
        var _a, _b, _c, _d, _e, _f;
        (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.now.decode((_c = (_b = this.abi_p) === null || _b === void 0 ? void 0 : _b.ttl.encode()) !== null && _c !== void 0 ? _c : {});
        (_d = this.abi_m) === null || _d === void 0 ? void 0 : _d.now.decode((_f = (_e = this.abi_m) === null || _e === void 0 ? void 0 : _e.ttl.encode()) !== null && _f !== void 0 ? _f : {});
    }
    random_make(hero_level = 0) {
        var _a, _b;
        this.my_id = 0;
        this.my_name = "冒険者 " + (0, F_Rand_1._random_str)(5);
        this.sex = (0, F_Rand_1._irand)(0, 1);
        this.age = (0, F_Rand_1._irand)(15, 25);
        this.state = 0;
        this.lv = hero_level;
        this.gold = (0, F_Rand_1._irand)(500, 1000);
        this.val = {
            skp: { ttl: 0, now: 0 },
            exp: { ttl: 0, now: 0 },
            'nxe': 1000
        };
        const abi_p_bsc = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc;
        abi_p_bsc === null || abi_p_bsc === void 0 ? void 0 : abi_p_bsc.random_make(hero_level);
        const abi_m_bsc = (_b = this.abi_m) === null || _b === void 0 ? void 0 : _b.bsc;
        abi_m_bsc === null || abi_m_bsc === void 0 ? void 0 : abi_m_bsc.random_make(hero_level);
        this.copy_bsc_to_ttl();
        this.copy_ttl_to_now();
        return this;
    }
    encode() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const ret = {
            id: this.my_id,
            uniq_id: this.uniq_id,
            name: this.my_name,
            save_id: this.save_id,
            sex: this.sex,
            age: this.age,
            state: this.state,
            lv: this.lv,
            gold: this.gold,
            val: this.val,
            abi_p_bsc: (_b = (_a = this.abi_p) === null || _a === void 0 ? void 0 : _a.bsc.encode()) !== null && _b !== void 0 ? _b : {},
            abi_m_bsc: (_d = (_c = this.abi_m) === null || _c === void 0 ? void 0 : _c.bsc.encode()) !== null && _d !== void 0 ? _d : {},
            abi_p_ttl: (_f = (_e = this.abi_p) === null || _e === void 0 ? void 0 : _e.ttl.encode()) !== null && _f !== void 0 ? _f : {},
            abi_m_ttl: (_h = (_g = this.abi_m) === null || _g === void 0 ? void 0 : _g.ttl.encode()) !== null && _h !== void 0 ? _h : {},
            abi_p_now: (_k = (_j = this.abi_p) === null || _j === void 0 ? void 0 : _j.now.encode()) !== null && _k !== void 0 ? _k : {},
            abi_m_now: (_m = (_l = this.abi_m) === null || _l === void 0 ? void 0 : _l.now.encode()) !== null && _m !== void 0 ? _m : {},
        };
        return ret;
    }
    decode(a) { return this.__init(a); }
    __init(a) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (a === undefined)
            return this;
        if (a.id !== undefined)
            this.my_id = a.id;
        if (a.name !== undefined)
            this.my_name = a.name;
        if (a.uniq_id !== undefined)
            this.uniq_id = a.uniq_id;
        if (a.save_id !== undefined)
            this.save_id = a.save_id;
        if (a.sex !== undefined)
            this.sex = a.sex;
        if (a.age !== undefined)
            this.age = a.age;
        if (a.state !== undefined)
            this.state = a.state;
        if (a.lv !== undefined)
            this.lv = a.lv;
        if (a.gold !== undefined)
            this.gold = a.gold;
        if (a.val !== undefined) {
            this.__decode_val((_a = this.val) !== null && _a !== void 0 ? _a : {}, a.val);
        }
        if (a.abi_p_bsc !== undefined)
            (_b = this.abi_p) === null || _b === void 0 ? void 0 : _b.bsc.decode(a.abi_p_bsc);
        if (a.abi_m_bsc !== undefined)
            (_c = this.abi_m) === null || _c === void 0 ? void 0 : _c.bsc.decode(a.abi_m_bsc);
        if (a.abi_p_ttl !== undefined)
            (_d = this.abi_p) === null || _d === void 0 ? void 0 : _d.ttl.decode(a.abi_p_ttl);
        if (a.abi_m_ttl !== undefined)
            (_e = this.abi_m) === null || _e === void 0 ? void 0 : _e.ttl.decode(a.abi_m_ttl);
        if (a.abi_p_now !== undefined)
            (_f = this.abi_p) === null || _f === void 0 ? void 0 : _f.now.decode(a.abi_p_now);
        if (a.abi_m_now !== undefined)
            (_g = this.abi_m) === null || _g === void 0 ? void 0 : _g.now.decode(a.abi_m_now);
        return this;
    }
    __decode_val(d, s) {
        if (s.skp !== undefined)
            d.skp = this.__decode_skex(d.skp, s.skp);
        if (s.exp !== undefined)
            d.exp = this.__decode_skex(d.exp, s.exp);
        if (s.nxe !== undefined)
            d.nxe = s.nxe;
    }
    __decode_skex(a, s) {
        var _a, _b, _c, _d, _e;
        var d;
        if (a === undefined)
            d = { ttl: 0, now: 0 };
        else
            d = { ttl: (_a = a === null || a === void 0 ? void 0 : a.ttl) !== null && _a !== void 0 ? _a : 0, now: (_b = a === null || a === void 0 ? void 0 : a.now) !== null && _b !== void 0 ? _b : 0 };
        d.ttl = (_c = s.ttl) !== null && _c !== void 0 ? _c : d.ttl;
        d.now = (_e = (_d = s.now) !== null && _d !== void 0 ? _d : s.ttl) !== null && _e !== void 0 ? _e : d.now;
        return d;
    }
    static encode_heroes(heroes) {
        const heroes_data = [];
        for (var hero of heroes) {
            heroes_data.push(hero.encode());
        }
        return heroes_data;
    }
    static decode_heroes(heroes_data) {
        const heroes = [];
        if (heroes_data !== undefined) {
            for (var hero_data of heroes_data) {
                if (hero_data !== undefined)
                    heroes.push(new C_Hero().decode(hero_data));
            }
        }
        return heroes;
    }
    alert() {
        var _a, _b, _c, _d, _e;
        alert("Hero Info:\n"
            + "\nid:       " + ((_a = this.id) !== null && _a !== void 0 ? _a : '?')
            + "\nuniq_id   " + ((_b = this.uniq_id) !== null && _b !== void 0 ? _b : '?')
            + "\nname:     " + ((_c = this.name) !== null && _c !== void 0 ? _c : '?')
            + "\nsave_id:  " + ((_d = this.save_id) !== null && _d !== void 0 ? _d : '?')
            + "\nis_alive: " + ((_e = this.is_alive) !== null && _e !== void 0 ? _e : '?')
            + "\n");
    }
    static alert_hres(a) {
        var _a;
        if (a === undefined)
            return;
        alert('Number of Hero = ' + a.length.toString());
        for (var i in a)
            (_a = a[i]) === null || _a === void 0 ? void 0 : _a.alert();
    }
}
exports.C_Hero = C_Hero;


/***/ }),

/***/ "./src/d_mdl/C_HeroAbility.ts":
/*!************************************!*\
  !*** ./src/d_mdl/C_HeroAbility.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_HeroAbility = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_HeroAbility {
    constructor(a) {
        this.v = {
            xp: 0,
            xd: 0,
            atk: 0,
            def: 0,
            quc: 0,
            cnc: 0,
            str: 0,
            pwr: 0,
            vit: 0,
            dex: 0,
            agi: 0,
            tec: 0,
            luk: 0,
        };
        for (let idx in this.v) {
            this.v[idx] = 0;
        }
        if (a !== undefined)
            this.decode(a);
    }
    get(key) {
        if (!(key in this.v))
            return undefined;
        return this.v[key];
    }
    set(key, val) {
        if (!(key in this.v))
            return undefined;
        this.v[key] = val;
        return this.v[key];
    }
    setAny(key, s) {
        for (let idx in s) {
            if (!(idx in this.v))
                continue;
            this.v[key] = s[key];
        }
    }
    add(a) {
        for (let key in a) {
            this.v[key] += a[key];
        }
    }
    calc_xp() {
        this.v.xp = Math.ceil(20 * this.v.str + 20 * this.v.vit + 5 * this.v.tec + 5 * this.v.luk);
    }
    calc_el() {
        this.v.atk = Math.ceil(2 * this.v.str + 2 * this.v.pwr + 1 * this.v.tec);
        this.v.def = Math.ceil(2 * this.v.str + 2 * this.v.vit + 1 * this.v.tec);
        this.v.quc = Math.ceil(2 * this.v.dex + 2 * this.v.agi + 1 * this.v.tec);
        this.v.cnc = Math.ceil(3 * this.v.luk + 2 * this.v.tec);
    }
    random_make(hero_level = 0) {
        const hl = hero_level + 1;
        this.v.str = (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.pwr = (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.vit = (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.dex = (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.agi = (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.tec = (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.luk = (0, F_Rand_1._inrand)(5, 20, 2.0) * hl;
        this.v.xd = 0;
        this.calc_xp();
        this.calc_el();
        return this;
    }
    encode() {
        const a = {};
        for (let key in this.v)
            a[key] = this.v[key];
        return a;
    }
    decode(a) {
        for (let key in a) {
            if (key in this.v && a[key] !== undefined)
                this.v[key] = a[key];
        }
        return this;
    }
    static clone(s) {
        return new C_HeroAbility(s.encode());
    }
}
exports.C_HeroAbility = C_HeroAbility;


/***/ }),

/***/ "./src/d_mdl/C_Hope.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Hope.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_HopeAction = exports.C_HasHope = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_HasHope {
    constructor(j) {
        var _a, _b;
        this.has_hope = false;
        this.hope = 'Wait';
        if (j) {
            this.has_hope = (_a = j.has_hope) !== null && _a !== void 0 ? _a : false;
            this.hope = (_b = j.hope) !== null && _b !== void 0 ? _b : 'Wait';
        }
    }
}
exports.C_HasHope = C_HasHope;
class C_HopeAction {
    constructor(j) {
        var _a, _b;
        this.has_hope = false;
        this.hope = 'Wait';
        this.has_hope = (_a = j === null || j === void 0 ? void 0 : j.has_hope) !== null && _a !== void 0 ? _a : false;
        this.hope = (_b = j === null || j === void 0 ? void 0 : j.hope) !== null && _b !== void 0 ? _b : 'Wait';
        this.subj = (j === null || j === void 0 ? void 0 : j.subj) !== undefined ? new C_PointDir_1.C_PointDir(j.subj) : new C_PointDir_1.C_PointDir();
    }
}
exports.C_HopeAction = C_HopeAction;


/***/ }),

/***/ "./src/d_mdl/C_Location.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_Location.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Location = exports.T_Lckd = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
exports.T_Lckd = {
    Unkn: 0,
    Maze: 1,
    Guld: 2,
};
function _lckd_key(lckd) {
    var _a;
    return (_a = Object.keys(exports.T_Lckd).find(key => exports.T_Lckd[key] === lckd)) !== null && _a !== void 0 ? _a : "????";
}
class C_Location {
    constructor(json) {
        this.loc_kind = exports.T_Lckd.Unkn;
        this.loc_name = '';
        this.loc_uid = '';
        this.loc_pos = new C_PointDir_1.C_PointDir();
        if (json !== undefined)
            this.__init(json);
    }
    __init(j) {
        if (j === undefined)
            return this;
        if (j.kind === undefined || !(j.kind in exports.T_Lckd))
            return this;
        if (j.kind !== undefined)
            this.loc_kind = exports.T_Lckd[j.kind];
        if (j.name !== undefined)
            this.loc_name = j.name;
        if (j.loc_uid !== undefined)
            this.loc_uid = j.loc_uid;
        if (j.loc_pos !== undefined)
            this.loc_pos.decode(j.loc_pos);
        return this;
    }
    get_lckd_str() { return _lckd_key(this.loc_kind); }
    get_lckd() { return this.loc_kind; }
    get_name() { return this.loc_name; }
    get_uid() { return this.loc_uid; }
    set_lckd(lckd) {
        if (!(_lckd_key(lckd) in exports.T_Lckd))
            return undefined;
        this.loc_kind = lckd;
        return this;
    }
    set_name(name) { this.loc_name = name; }
    set_uid(uid) { this.loc_uid = uid; }
    set_lckd_str(lckd) {
        if (!(lckd in exports.T_Lckd))
            return undefined;
        this.loc_kind = exports.T_Lckd[lckd];
        return this;
    }
    get_p() {
        return this.loc_pos.get_p();
    }
    get_d() {
        return this.loc_pos.get_d();
    }
    get_pd() {
        return this.loc_pos.get_pd();
    }
    set_p(p) {
        if (this.loc_kind !== exports.T_Lckd.Maze)
            return undefined;
        if (this.loc_pos.set_p(p) === undefined)
            return undefined;
        return this.loc_pos;
    }
    set_d(d) {
        if (this.loc_kind !== exports.T_Lckd.Maze)
            return undefined;
        if (this.loc_pos.set_d(d) === undefined)
            return undefined;
        return this.loc_pos.d;
    }
    set_pd(pd) {
        if (this.loc_pos.set_pd(pd) === undefined)
            return undefined;
        return this.loc_pos;
    }
    encode() {
        return {
            kind: _lckd_key(this.loc_kind),
            name: this.loc_name,
            loc_uid: this.loc_uid,
            loc_pos: this.loc_pos.encode(),
        };
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_Location = C_Location;


/***/ }),

/***/ "./src/d_mdl/C_Maze.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Maze.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Maze = void 0;
exports.alert_maze_info = alert_maze_info;
const T_MzKind_1 = __webpack_require__(/*! ./T_MzKind */ "./src/d_mdl/T_MzKind.ts");
const C_MazeCell_1 = __webpack_require__(/*! ./C_MazeCell */ "./src/d_mdl/C_MazeCell.ts");
const C_Point_1 = __webpack_require__(/*! ./C_Point */ "./src/d_mdl/C_Point.ts");
const C_Location_1 = __webpack_require__(/*! ./C_Location */ "./src/d_mdl/C_Location.ts");
const C_Range_1 = __webpack_require__(/*! ./C_Range */ "./src/d_mdl/C_Range.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const T_Direction_1 = __webpack_require__(/*! ./T_Direction */ "./src/d_mdl/T_Direction.ts");
const C_PointSet2D_1 = __webpack_require__(/*! ./C_PointSet2D */ "./src/d_mdl/C_PointSet2D.ts");
const F_new_MazeObj_1 = __webpack_require__(/*! ./F_new_MazeObj */ "./src/d_mdl/F_new_MazeObj.ts");
function alert_maze_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    if (a === undefined)
        return;
    alert("Maze Info:"
        + "\nmaze id :" + ((_a = a.id) !== null && _a !== void 0 ? _a : '?')
        + "\nfloor: " + ((_b = a.floor) !== null && _b !== void 0 ? _b : '?')
        + "\nuniq id :" + ((_c = a.uniq_id) !== null && _c !== void 0 ? _c : '?')
        + "\nsave id :" + ((_d = a.save_id) !== null && _d !== void 0 ? _d : '?')
        + "\nname:   " + ((_e = a.name) !== null && _e !== void 0 ? _e : '?')
        + "\nsize_x: " + ((_f = a.size_x) !== null && _f !== void 0 ? _f : '?')
        + "\nsize_y: " + ((_g = a.size_y) !== null && _g !== void 0 ? _g : '?')
        + "\nsize_z: " + ((_h = a.size_z) !== null && _h !== void 0 ? _h : '?')
        + "maze:\n" + ((_j = a.maze) !== null && _j !== void 0 ? _j : '?')
        + "mask:\n" + ((_k = a.mask) !== null && _k !== void 0 ? _k : '?')
        + "\n");
}
class C_Maze {
    constructor(a) {
        this.my_layer = 0;
        this.num_of_room = 5;
        this.max_size_of_room = 3;
        this.maze_id = -1;
        this.save_id = -1;
        this.uniq_id = 'mai_maze#' + (0, F_Rand_1._get_uuid)();
        this.floor = 0;
        this.name = '';
        this.size = new C_Range_1.C_Range(new C_Point_1.C_Point(0, 0, 0), new C_Point_1.C_Point(2, 2, 2));
        this.cells = this.__init_maze(T_MzKind_1.T_MzKind.Stone);
        this.masks = this.__init_mask(true);
        this.unclear = [];
        this.__init_unclear();
        this.objs = {};
        if (a !== undefined)
            this.decode(a);
    }
    __init_maze(kind = T_MzKind_1.T_MzKind.Stone) {
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        const cells = Array(size_z);
        for (var z = 0; z < size_z; z++) {
            cells[z] = Array(size_y);
            for (var y = 0; y < size_y; y++) {
                cells[z][y] = Array(size_x);
                for (var x = 0; x < size_x; x++) {
                    cells[z][y][x] = C_MazeCell_1.C_MazeCell.newObj({ kind: kind, pos: { x: x, y: y, z: z } });
                }
            }
        }
        return cells;
    }
    __init_mask(YN) {
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        this.masks = Array(size_z);
        for (var z = 0; z < size_z; z++) {
            this.masks[z] = Array(size_y);
            for (var y = 0; y < size_y; y++) {
                this.masks[z][y] = Array(size_x);
                for (var x = 0; x < size_x; x++) {
                    this.masks[z][y][x] = YN;
                }
            }
        }
        return this.masks;
    }
    __init_unclear() {
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        this.unclear = Array(size_z);
        for (var z = 0; z < size_z; z++) {
            this.unclear[z] = 0;
            for (var y = 0; y < size_y; y++) {
                for (var x = 0; x < size_x; x++) {
                    if (this.masks[z][y][x])
                        this.unclear[z]++;
                }
            }
        }
        return;
    }
    uid() { return this.uniq_id; }
    get_lckd() { return C_Location_1.T_Lckd.Maze; }
    get_name() { return this.name; }
    within(p) {
        return this.size.within(p);
    }
    add_obj(obj) {
        if (obj === undefined)
            return;
        this.objs[obj.uid()] = obj;
    }
    rmv_obj(obj) {
        delete this.objs[obj.uid()];
    }
    get_obj_array() {
        const obj_array = [];
        for (const id in this.objs)
            obj_array.push(this.objs[id]);
        return obj_array;
    }
    get_obj_xyz(x, y, z) {
        return this.get_obj(new C_Point_1.C_Point(x, y, z));
    }
    get_obj(p) {
        var _a, _b, _c;
        var layer = -1;
        var obj = null;
        for (const id in this.objs) {
            const exist = this.objs[id];
            if (exist.view() === undefined)
                continue;
            if (exist.within(p) && ((_a = exist.view()) === null || _a === void 0 ? void 0 : _a.letter(exist.get_pd().d)) !== null) {
                const exist_layer = (_c = (_b = exist.view()) === null || _b === void 0 ? void 0 : _b.layer()) !== null && _c !== void 0 ? _c : -99;
                if (exist_layer > layer) {
                    layer = exist_layer;
                    obj = exist;
                }
            }
        }
        return obj;
    }
    get_any_obj(p) {
        var _a;
        var obje = [];
        for (const id in this.objs) {
            const exist = this.objs[id];
            if (exist.view() === undefined)
                continue;
            if (exist.within(p) && ((_a = exist.view()) === null || _a === void 0 ? void 0 : _a.letter(exist.get_pd().d)) !== null) {
                obje.push(exist);
            }
        }
        return obje;
    }
    exist_obj(p) {
        var _a;
        for (const id in this.objs) {
            const exist = this.objs[id];
            if (exist === undefined)
                continue;
            if (exist.within(p) && ((_a = exist.view()) === null || _a === void 0 ? void 0 : _a.letter(exist.get_pd().d)) !== null)
                return true;
        }
        return false;
    }
    change_unexp_to_floor(p) {
        if (this.get_kind(p) == T_MzKind_1.T_MzKind.Unexp) {
            this.set_cell(p, T_MzKind_1.T_MzKind.Floor);
        }
    }
    clear_mask_around_the_team(team) {
        this.__clear_mask(team.getWalker().get_around(0, -1));
        this.__clear_mask(team.getWalker().get_around(0, 0));
        this.__clear_mask(team.getWalker().get_around(0, 1));
        const depth = 5;
        for (var d = 1; d < depth; d++) {
            const front_pos = team.getWalker().get_around(d, 0);
            if (this.is_movable(front_pos)) {
                this.__clear_mask(team.getWalker().get_around(d, -1));
                this.__clear_mask(team.getWalker().get_around(d, 0));
                this.__clear_mask(team.getWalker().get_around(d, 1));
            }
            else {
                this.__clear_mask(team.getWalker().get_around(d, -1));
                this.__clear_mask(team.getWalker().get_around(d, 0));
                this.__clear_mask(team.getWalker().get_around(d, 1));
                break;
            }
        }
    }
    __clear_mask(clr_pos) {
        if (!this.size.within(clr_pos))
            return;
        if (this.masks[clr_pos.z][clr_pos.y][clr_pos.x]) {
            this.masks[clr_pos.z][clr_pos.y][clr_pos.x] = false;
            this.unclear[clr_pos.z]--;
        }
    }
    is_floor_cleared(clr_pos) {
        return this.unclear[clr_pos.z] < 1;
    }
    is_maze_cleared() {
        for (const clr of this.unclear)
            if (clr > 0)
                return false;
        return true;
    }
    is_masked(p) { return this.is_masked_xyz(p.x, p.y, p.z); }
    is_masked_xyz(x, y, z) {
        return this.masks[z][y][x];
    }
    is_movable(p) {
        if (!this.size.within(p))
            return false;
        switch (this.get_kind(p)) {
            case T_MzKind_1.T_MzKind.Floor:
            case T_MzKind_1.T_MzKind.Unexp:
            case T_MzKind_1.T_MzKind.StrUp:
            case T_MzKind_1.T_MzKind.StrDn:
            case T_MzKind_1.T_MzKind.StrUD:
                return true;
        }
        return false;
    }
    get_x_max() { return this.size.size_x(); }
    get_y_max() { return this.size.size_y(); }
    get_z_max() { return this.size.size_z(); }
    get_kind(p) {
        if (this.size.within(p))
            return this.cells[p.z][p.y][p.x].getKind();
        return T_MzKind_1.T_MzKind.NoDef;
    }
    get_kind_xyz(x, y, z) {
        if (this.size.within(x, y, z))
            return this.cells[z][y][x].getKind();
        return T_MzKind_1.T_MzKind.NoDef;
    }
    get_cell_xyz(x, y, z) {
        if (this.size.within(x, y, z))
            return this.cells[z][y][x];
        return undefined;
    }
    get_cell(p) {
        if (this.size.within(p))
            return this.cells[p.z][p.y][p.x];
        return undefined;
    }
    set_cell(p, k) {
        if (this.size.within(p)) {
            this.cells[p.z][p.y][p.x] = C_MazeCell_1.C_MazeCell.newObj({ kind: k, pos: p });
        }
    }
    set_cell_xyz(x, y, z, k) {
        if (this.size.within(x, y, z)) {
            this.cells[z][y][x] = C_MazeCell_1.C_MazeCell.newObj({ kind: k, pos: { x: x, y: y, z: z } });
        }
    }
    can_move(p) {
        return this.size.within(p);
    }
    can_UD(p) {
        return this.is_movable(p);
    }
    fill_cell(kind, floor) {
        for (let h = 0; h < this.size.size_y(); h++)
            for (let w = 0; w < this.size.size_x(); w++)
                this.set_cell_xyz(w, h, floor, kind);
        return;
    }
    set_box(kind, top_x, top_y, size_x, size_y, floor) {
        if (top_x + size_x > this.size.size_x())
            size_x = this.size.size_x() - top_x + 1;
        if (top_y + size_y > this.size.size_y())
            size_y = this.size.size_y() - top_y + 1;
        const top = top_y;
        const btm = top + size_y - 1;
        const lft = top_x;
        const rgt = lft + size_x - 1;
        for (let x = 0; x < size_x; x++) {
            this.set_cell_xyz(x, top, floor, kind);
            this.set_cell_xyz(x, btm, floor, kind);
        }
        for (let y = 0; y < size_y; y++) {
            this.set_cell_xyz(lft, y, floor, kind);
            this.set_cell_xyz(rgt, y, floor, kind);
        }
        return;
    }
    create_stair2(floor) {
        var _a, _b;
        const H_size_x = (this.size.size_x() - 1) / 2;
        const H_size_y = (this.size.size_y() - 1) / 2;
        const pos_x = 2 * (0, F_Rand_1._irand)(0, H_size_x - 1) + 1;
        const pos_y = 2 * (0, F_Rand_1._irand)(0, H_size_y - 1) + 1;
        const pos_d = 1 * (0, F_Rand_1._irand)(0, T_Direction_1.T_Direction.MAX);
        if (((_a = this.get_cell_xyz(pos_x, pos_y, floor)) === null || _a === void 0 ? void 0 : _a.getKind()) !== T_MzKind_1.T_MzKind.StrUp) {
            this.set_cell_xyz(pos_x, pos_y, floor, T_MzKind_1.T_MzKind.StrDn);
        }
        else {
            this.set_cell_xyz(pos_x, pos_y, floor, T_MzKind_1.T_MzKind.StrUD);
        }
        if (floor < this.get_z_max()) {
            if (((_b = this.get_cell_xyz(pos_x, pos_y, floor + 1)) === null || _b === void 0 ? void 0 : _b.getKind()) !== T_MzKind_1.T_MzKind.StrDn) {
                this.set_cell_xyz(pos_x, pos_y, floor + 1, T_MzKind_1.T_MzKind.StrUp);
            }
            else {
                this.set_cell_xyz(pos_x, pos_y, floor + 1, T_MzKind_1.T_MzKind.StrUD);
            }
        }
        return new C_PointDir_1.C_PointDir({ x: pos_x, y: pos_y, z: floor, d: pos_d });
    }
    create_stair(floor) {
        var _a, _b;
        const H_size_x = (this.size.size_x() - 1) / 2;
        const H_size_y = (this.size.size_y() - 1) / 2;
        const pos_x = 2 * (0, F_Rand_1._irand)(0, H_size_x - 1) + 1;
        const pos_y = 2 * (0, F_Rand_1._irand)(0, H_size_y - 1) + 1;
        const pos_d = 1 * (0, F_Rand_1._irand)(0, T_Direction_1.T_Direction.MAX);
        if (floor >= 1) {
            if (((_a = this.get_cell_xyz(pos_x, pos_y, floor - 1)) === null || _a === void 0 ? void 0 : _a.getKind()) !== T_MzKind_1.T_MzKind.StrUp) {
                this.set_cell_xyz(pos_x, pos_y, floor - 1, T_MzKind_1.T_MzKind.StrDn);
            }
            else {
                this.set_cell_xyz(pos_x, pos_y, floor - 1, T_MzKind_1.T_MzKind.StrUD);
            }
        }
        if (floor < this.get_z_max()) {
            if (((_b = this.get_cell_xyz(pos_x, pos_y, floor)) === null || _b === void 0 ? void 0 : _b.getKind()) !== T_MzKind_1.T_MzKind.StrDn) {
                this.set_cell_xyz(pos_x, pos_y, floor, T_MzKind_1.T_MzKind.StrUp);
            }
            else {
                this.set_cell_xyz(pos_x, pos_y, floor, T_MzKind_1.T_MzKind.StrUD);
            }
        }
        return {
            up: new C_PointDir_1.C_PointDir({ x: pos_x, y: pos_y, z: floor, d: pos_d }),
            dn: floor >= 1 ? new C_PointDir_1.C_PointDir({ x: pos_x, y: pos_y, z: floor - 1, d: pos_d }) : undefined,
        };
    }
    create_maze(floor) {
        var _a, _b;
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        this.fill_cell(T_MzKind_1.T_MzKind.Unexp, floor);
        this.set_box(T_MzKind_1.T_MzKind.Stone, 0, 0, size_x, size_y, floor);
        const points = new C_PointSet2D_1.C_PointSet2D();
        for (let h = 2; h < size_y - 2; h += 2) {
            for (let w = 2; w < size_x - 2; w += 2) {
                const di = (0, F_Rand_1._irand)(0, T_Direction_1.T_Direction.MAX);
                points.push(new C_PointSet2D_1.C_PointLink2D(w, h, di));
            }
        }
        const rooms_array = [];
        const num_of_room = (0, F_Rand_1._irand)(0, this.num_of_room);
        for (let cnt = 0; cnt < num_of_room; cnt++) {
            const leng_x = (0, F_Rand_1._irand)(1, this.max_size_of_room) * 2 + 1;
            const leng_y = (0, F_Rand_1._irand)(1, this.max_size_of_room) * 2 + 1;
            const room_x = (0, F_Rand_1._irand)(0, (size_x - leng_x) / 2) * 2;
            const room_y = (0, F_Rand_1._irand)(0, (size_y - leng_y) / 2) * 2;
            rooms_array.push({ tx: room_x, ty: room_y, sx: leng_x, sy: leng_y });
        }
        for (const room of rooms_array) {
            for (let ii = 0; ii < points.set.length; ii++) {
                const p = points.set[ii];
                if (p === undefined)
                    continue;
                if ((p.x >= room.tx)
                    && (p.x <= room.tx + room.sx)
                    && (p.y >= room.ty)
                    && (p.y <= room.ty + room.sy)) {
                    points.remove(p);
                }
            }
        }
        for (const p of points.set) {
            if (p === undefined)
                continue;
            this.set_cell_xyz(p.x, p.y, floor, T_MzKind_1.T_MzKind.Stone);
            const direction = [0, 0, 0, 0];
            const di = (_b = (_a = C_PointSet2D_1.C_PointLink2D.cast(p)) === null || _a === void 0 ? void 0 : _a.di) !== null && _b !== void 0 ? _b : T_Direction_1.T_Direction.X;
            if (di === T_Direction_1.T_Direction.X)
                continue;
            direction[di] = 1;
            this.set_cell_xyz(p.x - direction[T_Direction_1.T_Direction.W] + direction[T_Direction_1.T_Direction.E], p.y - direction[T_Direction_1.T_Direction.N] + direction[T_Direction_1.T_Direction.S], floor, T_MzKind_1.T_MzKind.Stone);
        }
        for (const set of points.set) {
            if (set === undefined)
                continue;
            const [yn, trace_set] = this.check_close(set.x, set.y, points, new C_PointSet2D_1.C_PointSet2D());
            if (yn) {
                this.open_exit(trace_set, T_MzKind_1.T_MzKind.Unexp, floor);
                if (trace_set !== undefined)
                    for (const t of trace_set.set)
                        points.remove(t);
            }
        }
        return;
    }
    check_close(x, y, point_set, trace_set) {
        var _a, _b;
        if (x < 2 || y < 2 || x > this.size.size_x() - 2 || y > this.size.size_y() - 2)
            return [false, undefined];
        if (point_set === undefined)
            return [false, undefined];
        if ((point_set === null || point_set === void 0 ? void 0 : point_set.is_exist(x, y)) === false)
            return [false, undefined];
        if (trace_set !== undefined && (trace_set === null || trace_set === void 0 ? void 0 : trace_set.is_exist(x, y)) === true)
            return [true, trace_set];
        const p = point_set.get_point(x, y);
        trace_set !== null && trace_set !== void 0 ? trace_set : (trace_set = new C_PointSet2D_1.C_PointSet2D());
        trace_set === null || trace_set === void 0 ? void 0 : trace_set.push(new C_PointSet2D_1.C_PointLink2D(x, y, (_a = C_PointSet2D_1.C_PointLink2D.cast(p)) === null || _a === void 0 ? void 0 : _a.di));
        let next_x = 0, next_y = 0;
        switch ((_b = C_PointSet2D_1.C_PointLink2D.cast(p)) === null || _b === void 0 ? void 0 : _b.di) {
            case T_Direction_1.T_Direction.N:
                next_x = x;
                next_y = y - 2;
                break;
            case T_Direction_1.T_Direction.E:
                next_x = x + 2;
                next_y = y;
                break;
            case T_Direction_1.T_Direction.S:
                next_x = x;
                next_y = y + 2;
                break;
            case T_Direction_1.T_Direction.W:
                next_x = x - 2;
                next_y = y;
                break;
        }
        return this.check_close(next_x, next_y, point_set, trace_set);
    }
    open_exit(p, kind, floor) {
        var _a, _b;
        if (p === undefined)
            return;
        const cnt = (0, F_Rand_1._irand)(0, p.set.length - 1);
        const pp = p.set[cnt];
        let direction = [0, 0, 0, 0];
        const di = (_b = (_a = C_PointSet2D_1.C_PointLink2D.cast(pp)) === null || _a === void 0 ? void 0 : _a.di) !== null && _b !== void 0 ? _b : T_Direction_1.T_Direction.N;
        direction[di] = 1;
        this.set_cell_xyz(pp.x - direction[T_Direction_1.T_Direction.W] + direction[T_Direction_1.T_Direction.E], pp.y - direction[T_Direction_1.T_Direction.N] + direction[T_Direction_1.T_Direction.S], floor, kind);
        return;
    }
    to_letter(p) {
        return this.cells[p.z][p.y][p.x].to_letter();
    }
    to_string(floor = 0, debug_mode = false) {
        var _a, _b;
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        var ret_str = '';
        for (var y = 0; y < size_y; y++) {
            for (var x = 0; x < size_x; x++) {
                const obj = this.get_obj_xyz(x, y, floor);
                if (!debug_mode && this.masks[floor][y][x]) {
                    ret_str += 'Ｘ';
                }
                else {
                    const obj_c = (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.view()) === null || _a === void 0 ? void 0 : _a.letter(obj.get_pd().d)) !== null && _b !== void 0 ? _b : null;
                    if (obj === null || obj_c === null) {
                        ret_str += this.cells[floor][y][x].to_letter();
                    }
                    else {
                        ret_str += obj_c;
                    }
                }
            }
            ret_str += "\n";
        }
        return ret_str;
    }
    encode() {
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        var z_array = [];
        for (var z = 0; z < size_z; z++) {
            var y_array = [];
            for (var y = 0; y < size_y; y++) {
                var x_array = [];
                for (var x = 0; x < size_x; x++) {
                    x_array.push(this.cells[z][y][x].encode());
                }
                y_array.push(x_array.join('X'));
            }
            z_array.push(y_array.join('Y'));
        }
        const maze_str = z_array.join('Z');
        var z_array = [];
        for (var z = 0; z < size_z; z++) {
            var y_array = [];
            for (var y = 0; y < size_y; y++) {
                var x_array = [];
                for (var x = 0; x < size_x; x++) {
                    x_array.push(this.masks[z][y][x] ? '1' : '0');
                }
                y_array.push(x_array.join('X'));
            }
            z_array.push(y_array.join('Y'));
        }
        const mask_str = z_array.join('Z');
        let objs = [];
        for (const ii in this.objs)
            objs.push(this.objs[ii].encode());
        return {
            id: this.maze_id,
            uniq_id: this.uniq_id,
            save_id: this.save_id,
            floor: this.floor,
            name: this.name,
            objs: objs,
            size_x: this.size.size_x(),
            size_y: this.size.size_y(),
            size_z: this.size.size_z(),
            maze: maze_str,
            mask: mask_str,
        };
    }
    decode(a) {
        if (a === undefined)
            return this;
        if (a.id !== undefined)
            this.maze_id = a.id;
        if (a.uniq_id !== undefined)
            this.uniq_id = a.uniq_id;
        if (a.save_id !== undefined)
            this.save_id = a.save_id;
        if (a.floor !== undefined)
            this.floor = a.floor;
        if (a.name !== undefined)
            this.name = a.name;
        if (a.objs !== undefined) {
            this.objs = {};
            for (const json_obj of a.objs) {
                const new_obj = (0, F_new_MazeObj_1.new_mazeObj)(json_obj);
                this.objs[new_obj.uid()] = new_obj;
            }
        }
        if (a.size_x !== undefined && a.size_y !== undefined && a.size_z !== undefined) {
            this.size = new C_Range_1.C_Range(new C_Point_1.C_Point(0, 0, 0), new C_Point_1.C_Point(a.size_x - 1, a.size_y - 1, a.size_z - 1));
            this.cells = this.__init_maze(T_MzKind_1.T_MzKind.Stone);
            this.masks = this.__init_mask(true);
            this.__init_unclear();
        }
        const size_x = this.size.size_x();
        const size_y = this.size.size_y();
        const size_z = this.size.size_z();
        if (a.maze !== undefined) {
            const z_array = a.maze.split('Z');
            const z_max = (0, F_Math_1._min)([size_z, z_array.length]);
            for (var z = 0; z < z_max; z++) {
                const y_array = z_array[z].split('Y');
                const y_max = (0, F_Math_1._min)([size_y, y_array.length]);
                for (var y = 0; y < y_max; y++) {
                    const x_array = y_array[y].split('X');
                    const x_max = (0, F_Math_1._min)([size_x, x_array.length]);
                    for (var x = 0; x < x_max; x++) {
                        let kind = parseInt(x_array[x], 16);
                        this.cells[z][y][x] = C_MazeCell_1.C_MazeCell.newObj({ kind: kind, pos: { x: x, y: y, z: z } });
                    }
                }
            }
        }
        if (a.mask !== undefined) {
            this.__init_mask(true);
            const z_array = a.mask.split('Z');
            const z_max = (0, F_Math_1._min)([size_z, z_array.length]);
            for (var z = 0; z < z_max; z++) {
                const y_array = z_array[z].split('Y');
                const y_max = (0, F_Math_1._min)([size_y, y_array.length]);
                for (var y = 0; y < y_max; y++) {
                    const x_array = y_array[y].split('X');
                    const x_max = (0, F_Math_1._min)([size_x, x_array.length]);
                    for (var x = 0; x < x_max; x++) {
                        if (x_array[x] !== '0') {
                            this.masks[z][y][x] = true;
                        }
                        else {
                            this.masks[z][y][x] = false;
                        }
                    }
                }
            }
            this.__init_unclear();
        }
        return this;
    }
    static encode_all(all_maze) {
        const all_maze_data = [];
        for (let maze of all_maze) {
            all_maze_data.push(maze.encode());
        }
        return all_maze_data;
    }
    static decode_all(all_maze_data) {
        const all_maze = [];
        for (let maze_data of all_maze_data) {
            all_maze.push((new C_Maze({})).decode(maze_data));
        }
        return all_maze;
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        alert("Maze Info:"
            + "\nmaze id :" + ((_a = this.maze_id) !== null && _a !== void 0 ? _a : '?')
            + "\nfloor: " + ((_b = this.floor) !== null && _b !== void 0 ? _b : '?')
            + "\nuniq id :" + ((_c = this.uniq_id) !== null && _c !== void 0 ? _c : '?')
            + "\nsave id :" + ((_d = this.save_id) !== null && _d !== void 0 ? _d : '?')
            + "\nname:   " + ((_e = this.name) !== null && _e !== void 0 ? _e : '?')
            + "\nsize_x: " + ((_f = this.size.size_x()) !== null && _f !== void 0 ? _f : '?')
            + "\nsize_y: " + ((_g = this.size.size_y()) !== null && _g !== void 0 ? _g : '?')
            + "\nsize_z: " + ((_h = this.size.size_z()) !== null && _h !== void 0 ? _h : '?')
            + "\n");
    }
    alert_maze(floor = 0) {
        var _a;
        alert("Maze Map:"
            + "maze:\n" + ((_a = this.to_string(floor, true)) !== null && _a !== void 0 ? _a : '?')
            + "\n");
    }
    alert_mask(floor = 0) {
        var _a;
        alert("Mask Map:"
            + "mask:\n" + ((_a = this.to_string(floor, false)) !== null && _a !== void 0 ? _a : '?')
            + "\n");
    }
}
exports.C_Maze = C_Maze;


/***/ }),

/***/ "./src/d_mdl/C_MazeCell.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_MazeCell.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeCell = void 0;
const T_MzKind_1 = __webpack_require__(/*! ./T_MzKind */ "./src/d_mdl/T_MzKind.ts");
const F_new_MazeObj_1 = __webpack_require__(/*! ./F_new_MazeObj */ "./src/d_mdl/F_new_MazeObj.ts");
class C_MazeCell {
    static newObj(j) {
        switch (j.kind) {
            case T_MzKind_1.T_MzKind.NoDef: return new C_MazeCellNoDef(j);
            case T_MzKind_1.T_MzKind.Unkwn: return new C_MazeCellUnkwn(j);
            case T_MzKind_1.T_MzKind.Empty: return new C_MazeCellEmpty(j);
            case T_MzKind_1.T_MzKind.Floor: return new C_MazeCellFloor(j);
            case T_MzKind_1.T_MzKind.Unexp: return new C_MazeCellUnexp(j);
            case T_MzKind_1.T_MzKind.Stone: return new C_MazeCellStone(j);
            case T_MzKind_1.T_MzKind.StrUp: return new C_MazeCellStrUp(j);
            case T_MzKind_1.T_MzKind.StrDn: return new C_MazeCellStrDn(j);
            case T_MzKind_1.T_MzKind.StrUD: return new C_MazeCellStrUD(j);
        }
        return new C_MazeCellNoDef(j);
    }
    constructor(j) {
        var _a, _b, _c;
        var _d;
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        (_b = (_d = j.obj).clname) !== null && _b !== void 0 ? _b : (_d.clname = this.constructor.name);
        this.kind = (_c = j.kind) !== null && _c !== void 0 ? _c : T_MzKind_1.T_MzKind.NoDef;
        this.my_obj = (0, F_new_MazeObj_1.new_mazeObj)(j.obj);
    }
    getObj() { return this.my_obj; }
    getKind() {
        return this.kind;
    }
    to_letter() {
        var _a, _b;
        return (_b = (_a = this.my_obj.view()) === null || _a === void 0 ? void 0 : _a.letter(0)) !== null && _b !== void 0 ? _b : 'Ｘ';
    }
    static from_letter(letter) {
        for (const key of Object.keys(T_MzKind_1.T_MzKind)) {
            if (letter === key)
                return T_MzKind_1.T_MzKind[key];
        }
        return T_MzKind_1.T_MzKind.NoDef;
    }
    drow2D(rect, dir = 0) {
        var _a;
        (_a = this.my_obj.view()) === null || _a === void 0 ? void 0 : _a.drow2D(rect, dir);
    }
    drow3D(frot, back, dir = 0) {
        var _a;
        (_a = this.my_obj.view()) === null || _a === void 0 ? void 0 : _a.drow3D(frot, back, dir);
    }
    encode() {
        return this.kind.toString(16).padStart(2, "0");
    }
    static decode(str, j) {
        const kind = parseInt(str, 16);
        return C_MazeCell.newObj({ kind: kind, pos: j === null || j === void 0 ? void 0 : j.pos });
    }
}
exports.C_MazeCell = C_MazeCell;
class C_MazeCellNoDef extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.NoDef });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '0';
        j.obj.hit_dmg = 100;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '疑',
            show3D: '0',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '', col_d: '',
            col_l: '', col_2: '',
        };
        super(j);
    }
}
class C_MazeCellUnkwn extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Unkwn });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '0';
        j.obj.hit_dmg = 100;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '謎',
            show3D: '0',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '', col_d: '',
            col_l: '', col_2: '', col_L: '',
        };
        super(j);
    }
}
class C_MazeCellEmpty extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Empty });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '無',
            show3D: '0',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '', col_d: '',
            col_l: '', col_2: '', col_L: '',
        };
        super(j);
    }
}
class C_MazeCellFloor extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Floor });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '　',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '#6666ff', col_d: '',
            col_l: '#9999ff', col_2: '#3333ff', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellUnexp extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Unexp });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '・',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '#66ffff', col_d: '',
            col_l: '#9999ff', col_2: '#66ffff', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellStone extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.Stone });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '0';
        j.obj.hit_dmg = 10;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '＃',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '#00ff00', col_b: '', col_s: '#00ee00', col_t: '', col_d: '',
            col_l: '#0000ff', col_2: '#00cc00', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellStrUp extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.StrUp });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '上',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '', col_d: '#ffffcc',
            col_l: '#0000ff', col_2: '#ffff66', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellStrDn extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.StrDn });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '下',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '#ffffcc', col_d: '',
            col_l: '#0000ff', col_2: '#ffff66', col_L: '#6666ff',
        };
        super(j);
    }
}
class C_MazeCellStrUD extends C_MazeCell {
    constructor(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = { kind: T_MzKind_1.T_MzKind.StrUD });
        (_a = j.obj) !== null && _a !== void 0 ? _a : (j.obj = {});
        j.obj.can_thr = '1';
        j.obj.hit_dmg = 0;
        j.obj.pos = { x: j.x, y: j.y, z: j.z };
        j.obj.view = {
            layer: 0, letter: '段',
            show3D: '1',
            pad_t: 0.0, pad_d: 0.0, pad_s: 0.0,
            col_f: '', col_b: '', col_s: '', col_t: '#ffffcc', col_d: '#ffffcc',
            col_l: '#0000ff', col_2: '#ffff66', col_L: '#6666ff',
        };
        super(j);
    }
}


/***/ }),

/***/ "./src/d_mdl/C_MazeInfo.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_MazeInfo.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeInfo = void 0;
exports.alert_mazeinfo_info = alert_mazeinfo_info;
function alert_mazeinfo_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (a === undefined)
        return;
    alert("MazeInfo Data:"
        + "\nname : " + ((_a = a.name) !== null && _a !== void 0 ? _a : '?')
        + "\nmbname: " + ((_b = a.mbname) !== null && _b !== void 0 ? _b : '?')
        + "\nlv :" + ((_c = a.lv) !== null && _c !== void 0 ? _c : '?')
        + "\nsize_x: " + ((_d = a.size_x) !== null && _d !== void 0 ? _d : '?')
        + "\nsize_y: " + ((_e = a.size_y) !== null && _e !== void 0 ? _e : '?')
        + "\nsize_z: " + ((_f = a.size_z) !== null && _f !== void 0 ? _f : '?')
        + "\nmax_of_room: " + ((_g = a.max_room) !== null && _g !== void 0 ? _g : '?')
        + "\nroom_size: " + ((_h = a.room_size) !== null && _h !== void 0 ? _h : '?')
        + "\n");
}
class C_MazeInfo {
    static get_tbl_all() {
        const mazeinfo = [];
        mazeinfo.push(new C_MazeInfo().decode({
            name: 'maze010',
            mbname: '教練場',
            lv: 1,
            size_x: 11,
            size_y: 11,
            size_z: 3,
            max_room: 2,
            room_size: 3
        }));
        mazeinfo.push(new C_MazeInfo().decode({
            name: 'maze011',
            mbname: '始まりの迷宮',
            lv: 1,
            size_x: 21,
            size_y: 21,
            size_z: 5,
            max_room: 3,
            room_size: 3
        }));
        mazeinfo.push(new C_MazeInfo().decode({
            name: 'maze012',
            mbname: '暗き森の迷宮',
            lv: 1,
            size_x: 25,
            size_y: 25,
            size_z: 7,
            max_room: 5,
            room_size: 3
        }));
        mazeinfo.push(new C_MazeInfo().decode({
            name: 'maze013',
            mbname: '黒魔の地下墓地',
            lv: 1,
            size_x: 31,
            size_y: 31,
            size_z: 10,
            max_room: 5,
            room_size: 5
        }));
        return mazeinfo;
    }
    constructor(j) {
        this.name = '';
        this.mbname = '';
        this.lv = 0;
        this.size_x = 3;
        this.size_y = 3;
        this.size_z = 3;
        this.max_room = 1;
        this.room_size = 1;
        if (j !== undefined)
            this.decode(j);
    }
    encode() {
        return {
            name: this.name,
            mbname: this.mbname,
            lv: this.lv,
            size_x: this.size_x,
            size_y: this.size_y,
            size_z: this.size_z,
            max_room: this.max_room,
            room_size: this.room_size,
        };
    }
    decode(j) {
        if (j === undefined)
            return this;
        if (j.name !== undefined)
            this.name = j.name;
        if (j.mbname !== undefined)
            this.mbname = j.mbname;
        if (j.lv !== undefined)
            this.lv = j.lv;
        if (j.size_x !== undefined)
            this.size_x = j.size_x;
        if (j.size_y !== undefined)
            this.size_y = j.size_y;
        if (j.size_z !== undefined)
            this.size_z = j.size_z;
        if (j.max_room !== undefined)
            this.max_room = j.max_room;
        if (j.room_size !== undefined)
            this.room_size = j.room_size;
        return this;
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        alert("MazeInfo Data:"
            + "\nname : " + ((_a = this.name) !== null && _a !== void 0 ? _a : '?')
            + "\nmbname: " + ((_b = this.mbname) !== null && _b !== void 0 ? _b : '?')
            + "\nlv :" + ((_c = this.lv) !== null && _c !== void 0 ? _c : '?')
            + "\nsize_x: " + ((_d = this.size_x) !== null && _d !== void 0 ? _d : '?')
            + "\nsize_y: " + ((_e = this.size_y) !== null && _e !== void 0 ? _e : '?')
            + "\nsize_z: " + ((_f = this.size_z) !== null && _f !== void 0 ? _f : '?')
            + "\nmax_of_room: " + ((_g = this.max_room) !== null && _g !== void 0 ? _g : '?')
            + "\nroom_size: " + ((_h = this.room_size) !== null && _h !== void 0 ? _h : '?')
            + "\n");
    }
}
exports.C_MazeInfo = C_MazeInfo;


/***/ }),

/***/ "./src/d_mdl/C_MazeObj.ts":
/*!********************************!*\
  !*** ./src/d_mdl/C_MazeObj.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeObj = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_MazeObjView_1 = __webpack_require__(/*! ./C_MazeObjView */ "./src/d_mdl/C_MazeObjView.ts");
const C_MazeObjView2X_1 = __webpack_require__(/*! ./C_MazeObjView2X */ "./src/d_mdl/C_MazeObjView2X.ts");
class C_MazeObj {
    constructor(j) {
        this.clname = 'C_MazeObj';
        this.clname = 'C_MazeObj';
        if ((j === null || j === void 0 ? void 0 : j.clname) !== undefined)
            this.clname = j.clname;
        this.uniq_id = this.clname + '_' + (0, F_Rand_1._get_uuid)();
        this.pos = new C_PointDir_1.C_PointDir({ x: 0, y: 0, z: 0, d: 0 });
        this.my_view = undefined;
        this.my_view2D = undefined;
        this.my_view2M = undefined;
        this.my_walker = undefined;
        this.can_thr = true;
        this.hit_dmg = 0;
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        var _a, _b, _c;
        if (j === undefined)
            return this;
        if (j.uniq_id !== undefined)
            this.uniq_id = j.uniq_id;
        if (j.clname !== undefined)
            this.clname = j.clname;
        if (j.pos !== undefined)
            (_a = this.pos) === null || _a === void 0 ? void 0 : _a.decode(j.pos);
        if (j.view !== undefined) {
            this.my_view = C_MazeObjView_1.C_MazeObjView.newObj(j.view);
            this.my_view2D = C_MazeObjView2X_1.C_MazeObjView2X.newObj(j.view);
            this.my_view2M = C_MazeObjView2X_1.C_MazeObjView2X.newObj(j.view);
        }
        ;
        if (j.stat !== undefined) {
            if (((_b = j === null || j === void 0 ? void 0 : j.stat) === null || _b === void 0 ? void 0 : _b.can_thr) !== undefined)
                this.can_thr = j.stat.can_thr !== '0' ? true : false;
            if (((_c = j === null || j === void 0 ? void 0 : j.stat) === null || _c === void 0 ? void 0 : _c.hit_dmg) !== undefined)
                this.hit_dmg = j.stat.hit_dmg;
        }
        if (j.can_thr !== undefined)
            this.can_thr = j.can_thr !== '0' ? true : false;
        if (j.hit_dmg !== undefined)
            this.hit_dmg = j.hit_dmg;
        return this;
    }
    free() {
        var _a, _b, _c, _d;
        this.pos = undefined;
        (_a = this.my_view) === null || _a === void 0 ? void 0 : _a.free();
        this.my_view = undefined;
        (_b = this.my_view2D) === null || _b === void 0 ? void 0 : _b.free();
        this.my_view2D = undefined;
        (_c = this.my_view2M) === null || _c === void 0 ? void 0 : _c.free();
        this.my_view2M = undefined;
        (_d = this.my_walker) === null || _d === void 0 ? void 0 : _d.free();
        this.my_walker = undefined;
    }
    uid() { return this.uniq_id; }
    className() { return this.clname; }
    view() { return this.my_view; }
    setView(view) { this.my_view = view; }
    view2D() { return this.my_view2D; }
    setView2D(view2D) { this.my_view2D = view2D; }
    view2M() { return this.my_view2M; }
    setView2M(view2M) { this.my_view2M = view2M; }
    walker() { return this.my_walker; }
    set_walker(walker) {
        this.my_walker = walker;
    }
    wres() { return undefined; }
    set_wres(wres) {
        return;
    }
    canThrough() { return this.can_thr; }
    setThrough(thr) { return this.can_thr = thr; }
    get_pd() {
        return new C_PointDir_1.C_PointDir(this.pos);
    }
    set_pd(p) {
        this.pos = p;
    }
    within(p) {
        var _a, _b;
        return (_b = (_a = this.pos) === null || _a === void 0 ? void 0 : _a.within(p)) !== null && _b !== void 0 ? _b : false;
    }
    hitDamage() {
        return this.hit_dmg;
    }
    encode() {
        var _a, _b, _c, _d;
        const stat = {
            can_thr: this.can_thr ? '1' : '0',
            hit_dmg: this.hit_dmg,
        };
        return {
            uniq_id: this.uniq_id,
            clname: this.clname,
            pos: (_b = (_a = this.pos) === null || _a === void 0 ? void 0 : _a.encode()) !== null && _b !== void 0 ? _b : { x: 0, y: 0, z: 0, d: 99 },
            view: (_d = (_c = this.my_view) === null || _c === void 0 ? void 0 : _c.encode()) !== null && _d !== void 0 ? _d : {},
            can_thr: this.can_thr ? '1' : '0',
            hit_dmg: this.hit_dmg,
            stat: stat,
        };
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_MazeObj = C_MazeObj;


/***/ }),

/***/ "./src/d_mdl/C_MazeObjEtc.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_MazeObjEtc.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeObjShogai = exports.C_MazeObjShadow = void 0;
const C_MazeObj_1 = __webpack_require__(/*! ./C_MazeObj */ "./src/d_mdl/C_MazeObj.ts");
class C_MazeObjShadow extends C_MazeObj_1.C_MazeObj {
    constructor(j) {
        super(j);
        const jj = {
            clname: this.constructor.name,
            can_thr: '1',
            h_w_dmg: 0,
            view: {
                layer: 2,
                letter: '影',
            },
        };
        this.decode(jj);
    }
}
exports.C_MazeObjShadow = C_MazeObjShadow;
class C_MazeObjShogai extends C_MazeObj_1.C_MazeObj {
    constructor(j) {
        super(j);
        const jj = {
            clname: this.constructor.name,
            can_thr: '0',
            h_w_dmg: 100,
            view: {
                layer: 2,
                letter: '障',
                show3D: '1',
                col_2: '#9999cc', col_L: '#6666ff',
            }
        };
        this.decode(jj);
    }
}
exports.C_MazeObjShogai = C_MazeObjShogai;


/***/ }),

/***/ "./src/d_mdl/C_MazeObjView.ts":
/*!************************************!*\
  !*** ./src/d_mdl/C_MazeObjView.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeObjView = void 0;
class C_MazeObjView {
    static get_context3D() { return this === null || this === void 0 ? void 0 : this.con3D; }
    static set_context3D(con3D) { this.con3D = con3D; }
    static get_context2D() { return this === null || this === void 0 ? void 0 : this.con2D; }
    static set_context2D(con2D) { this.con2D = con2D; }
    static newObj(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = {});
        (_a = j.clname) !== null && _a !== void 0 ? _a : (j.clname = 'C_MazeObjView');
        switch (j.clname) {
            case C_MazeObjView.constructor.name: return new C_MazeObjView(j);
        }
        return new C_MazeObjView(j);
    }
    newObj(j) {
        return C_MazeObjView.newObj(j);
    }
    constructor(j) {
        this.clname = 'C_MazeObjView';
        this.clname = 'C_MazeObjView';
        this.my_layer = -2;
        this.my_letter = null;
        this.my_pad_t = 0.0;
        this.my_pad_d = 0.0;
        this.my_pad_s = 0.0;
        this.my_show = true;
        this.my_col_f = '#f8f8f8';
        this.my_col_b = '#aaaaaa';
        this.my_col_s = '#dddddd';
        this.my_col_t = '#ffffff';
        this.my_col_d = '#cccccc';
        this.my_col_l = '#333333';
        this.my_col_2 = '#cccccc';
        this.my_col_L = '#9999ff';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        if (j === undefined)
            return this;
        if (j.clname !== undefined)
            this.clname = j.clname;
        if (j.layer !== undefined)
            this.my_layer = j.layer;
        if (j.letter !== undefined)
            this.my_letter = j.letter !== '' ? j.letter : null;
        if (j.pad_t !== undefined)
            this.my_pad_t = j.pad_t;
        if (j.pad_d !== undefined)
            this.my_pad_d = j.pad_d;
        if (j.pad_s !== undefined)
            this.my_pad_s = j.pad_s;
        if (j.show !== undefined)
            this.my_show = j.show !== '0' ? true : false;
        if (j.col_f !== undefined)
            this.my_col_f = j.col_f !== '' ? j.col_f : null;
        if (j.col_b !== undefined)
            this.my_col_b = j.col_b !== '' ? j.col_b : null;
        if (j.col_s !== undefined)
            this.my_col_s = j.col_s !== '' ? j.col_s : null;
        if (j.col_t !== undefined)
            this.my_col_t = j.col_t !== '' ? j.col_t : null;
        if (j.col_d !== undefined)
            this.my_col_d = j.col_d !== '' ? j.col_d : null;
        if (j.col_l !== undefined)
            this.my_col_l = j.col_l !== '' ? j.col_l : null;
        if (j.col_2 !== undefined)
            this.my_col_2 = j.col_2 !== '' ? j.col_2 : null;
        if (j.col_L !== undefined)
            this.my_col_L = j.col_L !== '' ? j.col_L : null;
        return this;
    }
    free() { }
    layer() { return this.my_layer; }
    set_layer(layer) { this.my_layer = layer; }
    letter(dir = 0) { return this.my_letter; }
    set_letter(letter) { return this.my_letter = letter; }
    canShow() { return this.my_show; }
    ;
    setShow(can_show) { return this.my_show = can_show; }
    ;
    pad_t() { return this.my_pad_t; }
    pad_d() { return this.my_pad_d; }
    pad_s() { return this.my_pad_s; }
    set_pad_t(pad_t) { return this.my_pad_t = this.my_pad_d + pad_t < 1.0 ? pad_t : 0.99 - this.my_pad_d; }
    set_pad_d(pad_d) { return this.my_pad_d = this.my_pad_t + pad_d < 1.0 ? pad_d : 0.99 - this.my_pad_t; }
    set_pad_s(pad_s) { return this.my_pad_s = pad_s; }
    col_f() { return this.my_col_f; }
    col_b() { return this.my_col_b; }
    col_s() { return this.my_col_s; }
    col_t() { return this.my_col_t; }
    col_d() { return this.my_col_d; }
    col_l() { return this.my_col_l; }
    set_col_f(col_f) { return this.my_col_f = col_f; }
    set_col_b(col_b) { return this.my_col_b = col_b; }
    set_col_s(col_s) { return this.my_col_s = col_s; }
    set_col_t(col_t) { return this.my_col_t = col_t; }
    set_col_d(col_d) { return this.my_col_d = col_d; }
    set_col_l(col_l) { return this.my_col_l = col_l; }
    col_2() { return this.my_col_2; }
    col_L() { return this.my_col_L; }
    set_col_2(col_2) { return this.my_col_2 = col_2; }
    set_col_L(col_L) { return this.my_col_L = col_L; }
    drow2D(rect, dir = 0) {
        var _a;
        drow2D_cell(rect, this.col_2(), (_a = this.col_L()) !== null && _a !== void 0 ? _a : '#9999ff');
    }
    drow3D(frot, back, dir = 0) {
        this.drow3D_obj_back(frot, back);
        this.drow3D_obj_down(frot, back);
        this.drow3D_obj_top(frot, back);
        this.drow3D_obj_right_side(frot, back);
        this.drow3D_obj_left_side(frot, back);
        this.drow3D_obj_front(frot, back);
    }
    drow3D_obj_down(frot, back) {
        var _a, _b;
        if (!this.canShow() || this.col_t() === null)
            return;
        if (this.pad_s() <= 0.0 && this.pad_t() >= 1.0) {
            drow3D_cell_floor(frot, back, (_a = this.col_t()) !== null && _a !== void 0 ? _a : '#6666ff', (_b = this.col_l()) !== null && _b !== void 0 ? _b : '#9999ff');
            return;
        }
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.fdl,
            tr: o.fdr,
            dr: o.bdr,
            dl: o.bdl,
        };
        drow3D_cell(rect, this.col_t(), this.col_l());
    }
    drow3D_obj_top(frot, back) {
        var _a, _b;
        if (!this.canShow() || this.col_d() === null)
            return;
        if (this.pad_s() <= 0.0 && this.pad_d() >= 1.0) {
            drow3D_cell_ceiling(frot, back, (_a = this.col_d()) !== null && _a !== void 0 ? _a : '#aaaaaa', (_b = this.col_l()) !== null && _b !== void 0 ? _b : '#9999ff');
            return;
        }
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.ftl,
            tr: o.ftr,
            dr: o.btr,
            dl: o.btl,
        };
        drow3D_cell(rect, this.col_d(), this.col_l());
    }
    drow3D_obj_front(frot, back) {
        if (!this.canShow() || this.col_f() === null)
            return;
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.ftl,
            tr: o.ftr,
            dr: o.fdr,
            dl: o.fdl,
        };
        drow3D_cell(rect, this.col_f(), this.col_l());
    }
    drow3D_obj_back(frot, back) {
        if (!this.canShow() || this.col_b() === null)
            return;
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.btl,
            tr: o.btr,
            dr: o.bdr,
            dl: o.bdl,
        };
        drow3D_cell(rect, this.col_b(), this.col_l());
    }
    drow3D_obj_left_side(frot, back) {
        if (!this.canShow() || this.col_s() === null)
            return;
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.btl,
            tr: o.ftl,
            dr: o.fdl,
            dl: o.bdl,
        };
        drow3D_cell(rect, this.col_s(), this.col_l());
    }
    drow3D_obj_right_side(frot, back) {
        if (!this.canShow() || this.col_s() === null)
            return;
        const o = __calc_padding_obj(this, frot, back);
        const rect = {
            tl: o.ftr,
            tr: o.btr,
            dr: o.bdr,
            dl: o.fdr,
        };
        drow3D_cell(rect, this.col_s(), this.col_l());
    }
    encode() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return {
            clname: this.clname,
            layer: this.my_layer,
            letter: (_a = this.my_letter) !== null && _a !== void 0 ? _a : '',
            pad_t: this.my_pad_t,
            pad_d: this.my_pad_d,
            pad_s: this.my_pad_s,
            show: this.canShow() ? '1' : '0',
            col_f: (_b = this.my_col_f) !== null && _b !== void 0 ? _b : '',
            col_b: (_c = this.my_col_b) !== null && _c !== void 0 ? _c : '',
            col_s: (_d = this.my_col_s) !== null && _d !== void 0 ? _d : '',
            col_t: (_e = this.my_col_t) !== null && _e !== void 0 ? _e : '',
            col_d: (_f = this.my_col_d) !== null && _f !== void 0 ? _f : '',
            col_l: (_g = this.my_col_l) !== null && _g !== void 0 ? _g : '',
            col_2: (_h = this.my_col_2) !== null && _h !== void 0 ? _h : '',
            col_L: (_j = this.my_col_L) !== null && _j !== void 0 ? _j : '',
        };
    }
    decode(j) {
        return this.__init(j);
    }
    static decode(j) {
        return C_MazeObjView.newObj(j);
    }
}
exports.C_MazeObjView = C_MazeObjView;
function __calc_padding_obj(obj, frot, back) {
    const rect_frot = frot;
    const rect_back = back;
    const ratio_X = obj.pad_s() / 2.0;
    const ratio_T = obj.pad_t();
    const ratio_D = obj.pad_d();
    const frot_pad_X = Math.abs(rect_frot.max_x - rect_frot.min_x) * ratio_X;
    const back_pad_X = Math.abs(rect_back.max_x - rect_back.min_x) * ratio_X;
    const frot_pad_T = Math.abs(rect_frot.max_y - rect_frot.min_y) * ratio_T;
    const back_pad_T = Math.abs(rect_back.max_y - rect_back.min_y) * ratio_T;
    const frot_pad_D = Math.abs(rect_frot.max_y - rect_frot.min_y) * ratio_D;
    const back_pad_D = Math.abs(rect_back.max_y - rect_back.min_y) * ratio_D;
    const frot_top_lft = { x: rect_frot.min_x + frot_pad_X, y: rect_frot.min_y + frot_pad_T };
    const frot_top_rgt = { x: rect_frot.max_x - frot_pad_X, y: rect_frot.min_y + frot_pad_T };
    const frot_dwn_lft = { x: rect_frot.min_x + frot_pad_X, y: rect_frot.max_y - frot_pad_D };
    const frot_dwn_rgt = { x: rect_frot.max_x - frot_pad_X, y: rect_frot.max_y - frot_pad_D };
    const back_top_lft = { x: rect_back.min_x + back_pad_X, y: rect_back.min_y + back_pad_T };
    const back_top_rgt = { x: rect_back.max_x - back_pad_X, y: rect_back.min_y + back_pad_T };
    const back_dwn_lft = { x: rect_back.min_x + back_pad_X, y: rect_back.max_y - back_pad_D };
    const back_dwn_rgt = { x: rect_back.max_x - back_pad_X, y: rect_back.max_y - back_pad_D };
    let ftl = __calc_padding_xy(frot_top_lft, back_top_lft, ratio_X);
    let ftr = __calc_padding_xy(frot_top_rgt, back_top_rgt, ratio_X);
    let fdl = __calc_padding_xy(frot_dwn_lft, back_dwn_lft, ratio_X);
    let fdr = __calc_padding_xy(frot_dwn_rgt, back_dwn_rgt, ratio_X);
    let btl = __calc_padding_xy(back_top_lft, frot_top_lft, ratio_X);
    let btr = __calc_padding_xy(back_top_rgt, frot_top_rgt, ratio_X);
    let bdl = __calc_padding_xy(back_dwn_lft, frot_dwn_lft, ratio_X);
    let bdr = __calc_padding_xy(back_dwn_rgt, frot_dwn_rgt, ratio_X);
    return {
        ftl: ftl, ftr: ftr,
        fdl: fdl, fdr: fdr,
        btl: btl, btr: btr,
        bdl: bdl, bdr: bdr,
    };
}
function __calc_padding_xy(frot, back, ratio) {
    const A = (frot.y - back.y) / (frot.x - back.x);
    const B = frot.y - A * frot.x;
    const p_frot_x = frot.x + (back.x - frot.x) * ratio;
    const p_frot_y = A * p_frot_x + B;
    return { x: p_frot_x, y: p_frot_y };
}
function drow3D_cell_floor(rect_frot, rect_back, fill = '#6666ff', line = '#9999ff') {
    const rect = {
        tl: { x: rect_frot.min_x, y: rect_frot.max_y },
        tr: { x: rect_frot.max_x, y: rect_frot.max_y },
        dr: { x: rect_back.max_x, y: rect_back.max_y },
        dl: { x: rect_back.min_x, y: rect_back.max_y }
    };
    drow3D_cell(rect, fill, line);
}
function drow3D_cell_ceiling(rect_frot, rect_back, fill = '#aaaaaa', line = '#9999ff') {
    const rect = {
        tl: { x: rect_frot.min_x, y: rect_frot.min_y },
        tr: { x: rect_frot.max_x, y: rect_frot.min_y },
        dr: { x: rect_back.max_x, y: rect_back.min_y },
        dl: { x: rect_back.min_x, y: rect_back.min_y }
    };
    drow3D_cell(rect, fill, line);
}
function drow2D_cell(r, fill, line) {
    const con = C_MazeObjView.get_context2D();
    if (con === undefined)
        return;
    con.beginPath();
    con.moveTo(r.tl.x, r.tl.y);
    con.lineTo(r.tr.x, r.tr.y);
    con.lineTo(r.dr.x, r.dr.y);
    con.lineTo(r.dl.x, r.dl.y);
    con.closePath();
    if (fill != null) {
        con.fillStyle = fill;
        con.fill();
    }
    if (line !== null) {
        con.strokeStyle = line;
        con.lineWidth = 1;
        con.stroke();
    }
}
function drow3D_cell(r, fill, line) {
    const con = C_MazeObjView.get_context3D();
    if (con === undefined)
        return;
    con.beginPath();
    con.moveTo(r.tl.x, r.tl.y);
    con.lineTo(r.tr.x, r.tr.y);
    con.lineTo(r.dr.x, r.dr.y);
    con.lineTo(r.dl.x, r.dl.y);
    con.closePath();
    if (fill != null) {
        con.fillStyle = fill;
        con.fill();
    }
    if (line !== null) {
        con.strokeStyle = line;
        con.lineWidth = 1;
        con.stroke();
    }
}


/***/ }),

/***/ "./src/d_mdl/C_MazeObjView2X.ts":
/*!**************************************!*\
  !*** ./src/d_mdl/C_MazeObjView2X.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MazeObjView2X = void 0;
class C_MazeObjView2X {
    static newObj(j) {
        var _a;
        j !== null && j !== void 0 ? j : (j = {});
        (_a = j.clname) !== null && _a !== void 0 ? _a : (j.clname = 'C_MazeObjView2X');
        switch (j.clname) {
            case C_MazeObjView2X.constructor.name: return new C_MazeObjView2X(j);
        }
        return new C_MazeObjView2X(j);
    }
    newObj(j) {
        return C_MazeObjView2X.newObj(j);
    }
    constructor(j) {
        this.clname = 'C_MazeObjView2X';
        this.clname = 'C_MazeObjView2X';
        this.my_layer = -2;
        this.my_letter = null;
        this.my_show = true;
        this.my_col_2 = '#cccccc';
        this.my_col_L = '#9999ff';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        if (j === undefined)
            return this;
        if (j.clname !== undefined)
            this.clname = j.clname;
        if (j.layer !== undefined)
            this.my_layer = j.layer;
        if (j.letter !== undefined)
            this.my_letter = j.letter !== '' ? j.letter : null;
        if (j.show !== undefined)
            this.my_show = j.show !== '0' ? true : false;
        if (j.col_2 !== undefined)
            this.my_col_2 = j.col_2 !== '' ? j.col_2 : null;
        if (j.col_L !== undefined)
            this.my_col_L = j.col_L !== '' ? j.col_L : null;
        return this;
    }
    free() { }
    layer() { return this.my_layer; }
    set_layer(layer) { this.my_layer = layer; }
    letter(dir = 0) { return this.my_letter; }
    set_letter(letter) { return this.my_letter = letter; }
    canShow() { return this.my_show; }
    ;
    setShow(can_show) { return this.my_show = can_show; }
    ;
    col_2() { return this.my_col_2; }
    col_L() { return this.my_col_L; }
    set_col_2(col_2) { return this.my_col_2 = col_2; }
    set_col_L(col_L) { return this.my_col_L = col_L; }
    drow2X(ctx, rect, dir = 0) {
        var _a;
        if (ctx === undefined || ctx === null)
            return;
        drow2X_cell(ctx, rect, this.col_2(), (_a = this.col_L()) !== null && _a !== void 0 ? _a : '#9999ff');
    }
    encode() {
        var _a, _b, _c;
        return {
            clname: this.clname,
            layer: this.my_layer,
            letter: (_a = this.my_letter) !== null && _a !== void 0 ? _a : '',
            show: this.canShow() ? '1' : '0',
            col_2: (_b = this.my_col_2) !== null && _b !== void 0 ? _b : '',
            col_L: (_c = this.my_col_L) !== null && _c !== void 0 ? _c : '',
        };
    }
    decode(j) {
        return this.__init(j);
    }
    static decode(j) {
        return C_MazeObjView2X.newObj(j);
    }
}
exports.C_MazeObjView2X = C_MazeObjView2X;
function drow2X_cell(ctx, r, fill, line) {
    if (ctx === undefined || ctx === null)
        return;
    ctx.beginPath();
    ctx.moveTo(r.tl.x, r.tl.y);
    ctx.lineTo(r.tr.x, r.tr.y);
    ctx.lineTo(r.dr.x, r.dr.y);
    ctx.lineTo(r.dl.x, r.dl.y);
    ctx.closePath();
    if (fill != null) {
        ctx.fillStyle = fill;
        ctx.fill();
    }
    if (line !== null) {
        ctx.strokeStyle = line;
        ctx.lineWidth = 1;
        ctx.stroke();
    }
}


/***/ }),

/***/ "./src/d_mdl/C_MovablePoint.ts":
/*!*************************************!*\
  !*** ./src/d_mdl/C_MovablePoint.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_MovablePoint = void 0;
exports.alert_mvpt_info = alert_mvpt_info;
const C_Location_1 = __webpack_require__(/*! ./C_Location */ "./src/d_mdl/C_Location.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
function alert_mvpt_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    if (a === undefined)
        return;
    alert("MvPt Info:"
        + "\nuniq_id:  " + ((_a = a.uniq_id) !== null && _a !== void 0 ? _a : '?')
        + "\ncur_url:  " + ((_b = a.cur_url) !== null && _b !== void 0 ? _b : '?')
        + "\nteam_uid: " + ((_c = a.team_uid) !== null && _c !== void 0 ? _c : '?')
        + "\nlckd: " + ((_d = a.kind) !== null && _d !== void 0 ? _d : '?')
        + "\nlcnm: " + ((_e = a.name) !== null && _e !== void 0 ? _e : '?')
        + "\nlcid: " + ((_f = a.loc_uid) !== null && _f !== void 0 ? _f : '?')
        + "\ncur_x: " + ((_h = (_g = a.loc_pos) === null || _g === void 0 ? void 0 : _g.x) !== null && _h !== void 0 ? _h : '?')
        + "\ncur_y: " + ((_k = (_j = a.loc_pos) === null || _j === void 0 ? void 0 : _j.y) !== null && _k !== void 0 ? _k : '?')
        + "\ncur_z: " + ((_m = (_l = a.loc_pos) === null || _l === void 0 ? void 0 : _l.z) !== null && _m !== void 0 ? _m : '?')
        + "\ncur_d: " + ((_p = (_o = a.loc_pos) === null || _o === void 0 ? void 0 : _o.d) !== null && _p !== void 0 ? _p : '?')
        + "\n");
}
class C_MovablePoint extends C_Location_1.C_Location {
    constructor(json) {
        super(json);
        this.loc_kind = C_Location_1.T_Lckd.Maze;
        this.uniq_id = 'MvPoint#' + (0, F_Rand_1._get_uuid)();
        this.cur_url = '';
        this.team_uid = undefined;
        if (json !== undefined && json !== null)
            this.__init(json);
    }
    __init(j) {
        super.__init(j);
        if (j === undefined)
            return this;
        if (j.uniq_id !== undefined)
            this.uniq_id = j.uniq_id;
        if (j.cur_url !== undefined)
            this.cur_url = j.cur_url;
        if (j.team_uid !== undefined)
            this.team_uid = j.team_uid;
        if (this.team_uid === '')
            this.team_uid = undefined;
        return this;
    }
    uid() { return this.uniq_id; }
    url() { return this.cur_url; }
    tid() { return this.team_uid; }
    new_uid() { this.uniq_id = 'MvPoint#' + (0, F_Rand_1._get_uuid)(); }
    set_url(url) { this.cur_url = url; }
    set_tid(tid) { this.team_uid = tid; }
    clone() {
        const mvpt = new C_MovablePoint(this.encode());
        mvpt.new_uid();
        return mvpt;
    }
    fromJSON(txt) {
        try {
            const j = JSON.parse(txt);
            return this.decode(j);
        }
        catch (err) {
            return this;
        }
        // removed by dead control flow
{}
    }
    toJSON() {
        return JSON.stringify(this.encode(), null, "\t");
    }
    static from_obj_to_string(oa) {
        return JSON.stringify(oa.encode());
    }
    static from_objArray_to_string(oaa) {
        const oa = [];
        for (const ii in oaa)
            oa.push(oaa[ii].encode());
        return JSON.stringify(oa);
    }
    static from_string_to_obj(txt) {
        try {
            const j = JSON.parse(txt);
            return new C_MovablePoint().decode(j);
        }
        catch (err) {
            return new C_MovablePoint();
        }
        // removed by dead control flow
{}
    }
    static from_string_to_objArray(txt) {
        try {
            const j = JSON.parse(txt);
            const mpa = {};
            for (const jj of j) {
                const aaa = new C_MovablePoint().decode(jj);
                mpa[aaa.uid()] = aaa;
            }
            return mpa;
        }
        catch (err) {
            return {};
        }
        // removed by dead control flow
{}
    }
    encode() {
        var _a;
        const j = super.encode();
        j.uniq_id = this.uniq_id;
        j.cur_url = this.cur_url;
        j.team_uid = (_a = this.team_uid) !== null && _a !== void 0 ? _a : '';
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        alert("MvPt Info:"
            + "\nuniq_id:  " + ((_a = this.uniq_id) !== null && _a !== void 0 ? _a : '?')
            + "\ncur_url:  " + ((_b = this.cur_url) !== null && _b !== void 0 ? _b : '?')
            + "\nteam_uid: " + ((_c = this.team_uid) !== null && _c !== void 0 ? _c : '?')
            + "\nlckd: " + ((_d = this.loc_kind) !== null && _d !== void 0 ? _d : '?')
            + "\nlcnm: " + ((_e = this.loc_name) !== null && _e !== void 0 ? _e : '?')
            + "\nlcid: " + ((_f = this.loc_uid) !== null && _f !== void 0 ? _f : '?')
            + "\ncur_x: " + ((_h = (_g = this.loc_pos) === null || _g === void 0 ? void 0 : _g.x) !== null && _h !== void 0 ? _h : '?')
            + "\ncur_y: " + ((_k = (_j = this.loc_pos) === null || _j === void 0 ? void 0 : _j.y) !== null && _k !== void 0 ? _k : '?')
            + "\ncur_z: " + ((_m = (_l = this.loc_pos) === null || _l === void 0 ? void 0 : _l.z) !== null && _m !== void 0 ? _m : '?')
            + "\ncur_d: " + ((_p = (_o = this.loc_pos) === null || _o === void 0 ? void 0 : _o.d) !== null && _p !== void 0 ? _p : '?')
            + "\n");
    }
}
exports.C_MovablePoint = C_MovablePoint;


/***/ }),

/***/ "./src/d_mdl/C_Point.ts":
/*!******************************!*\
  !*** ./src/d_mdl/C_Point.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Point = void 0;
class C_Point {
    constructor(x, y, z) {
        this.x = this.y = this.z = -3;
        if (x === undefined) {
            this.x = 0;
            this.y = 0;
            this.z = 0;
            return;
        }
        if (typeof x === "number" && typeof y === "number" && typeof z === "number") {
            this.x = x;
            this.y = y;
            this.z = z;
            return;
        }
        if (typeof x === "object") {
            if (x instanceof C_Point) {
                this.x = x.x;
                this.y = x.y;
                this.z = x.z;
                return;
            }
            else {
                this.decode(x);
                return;
            }
        }
        this.x = this.y = this.z = -2;
        return;
    }
    get_p() { return new C_Point(this); }
    set_p(p) {
        this.x = p.x;
        this.y = p.y;
        this.z = p.z;
        return this;
    }
    is_exist(x, y, z) {
        return (x == this.x && y == this.y && z == this.z);
    }
    within(p) {
        return (p.x == this.x && p.y == this.y && p.z == this.z);
    }
    encode() {
        return { x: this.x, y: this.y, z: this.z };
    }
    decode(a) {
        if (a === undefined)
            return this;
        if (a.x === undefined || a.y === undefined || a.z === undefined)
            return this;
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        return this;
    }
}
exports.C_Point = C_Point;


/***/ }),

/***/ "./src/d_mdl/C_PointDir.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_PointDir.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_PointDir = exports.T_Direction = void 0;
exports.alert_PD_info = alert_PD_info;
const C_Point_1 = __webpack_require__(/*! ./C_Point */ "./src/d_mdl/C_Point.ts");
exports.T_Direction = {
    N: 0,
    E: 1,
    S: 2,
    W: 3,
    X: 99
};
function _dir_key(dir) {
    var _a;
    return (_a = Object.keys(exports.T_Direction).find(key => exports.T_Direction[key] === dir)) !== null && _a !== void 0 ? _a : "????";
}
function alert_PD_info(a) {
    var _a, _b, _c, _d;
    if (a === undefined)
        return;
    alert("PointData Info:"
        + "\nx: " + ((_a = a === null || a === void 0 ? void 0 : a.x) !== null && _a !== void 0 ? _a : '?')
        + "\ny: " + ((_b = a === null || a === void 0 ? void 0 : a.y) !== null && _b !== void 0 ? _b : '?')
        + "\nz: " + ((_c = a === null || a === void 0 ? void 0 : a.z) !== null && _c !== void 0 ? _c : '?')
        + "\nd: " + ((_d = a === null || a === void 0 ? void 0 : a.d) !== null && _d !== void 0 ? _d : '?')
        + "\n");
}
class C_PointDir extends C_Point_1.C_Point {
    constructor(d) {
        super(d);
        this.d = exports.T_Direction.X;
        if (d === undefined) {
            return;
        }
        if (typeof d === "number") {
            this.d = d;
            return;
        }
        if (typeof d === "object") {
            if (d instanceof C_PointDir) {
                this.d = d.d;
            }
            else {
                this.decode(d);
            }
            return;
        }
        this.d = exports.T_Direction.X;
        return;
    }
    get_d_mb_name() {
        switch (this.d) {
            case 0: return '北';
            case 1: return '東';
            case 2: return '南';
            case 3: return '西';
            default: return '謎';
        }
    }
    get_d() {
        return this.d;
    }
    set_d(d) {
        if (!(_dir_key(d) in exports.T_Direction))
            return undefined;
        this.d = d;
        return this;
    }
    get_pd() {
        return this;
    }
    set_pd(d) {
        if (d instanceof C_PointDir) {
            if (!(_dir_key(d.d) in exports.T_Direction))
                return undefined;
            super.set_p(d);
            this.d = d.d;
            return this;
        }
        if (!(_dir_key(d.d) in exports.T_Direction))
            return undefined;
        this.decode(d);
        return this;
    }
    encode() {
        const j = super.encode();
        j.d = this.d;
        return j;
    }
    decode(j) {
        if (j === undefined)
            return this;
        if (!(_dir_key(j.d) in exports.T_Direction))
            return this;
        super.decode(j);
        this.d = j.d;
        return this;
    }
    alert() {
        var _a, _b, _c, _d;
        alert("PointData Info:"
            + "\nx: " + ((_a = this.x) !== null && _a !== void 0 ? _a : '?')
            + "\ny: " + ((_b = this.y) !== null && _b !== void 0 ? _b : '?')
            + "\nz: " + ((_c = this.z) !== null && _c !== void 0 ? _c : '?')
            + "\nd: " + ((_d = this.d) !== null && _d !== void 0 ? _d : '?')
            + "\n");
    }
}
exports.C_PointDir = C_PointDir;


/***/ }),

/***/ "./src/d_mdl/C_PointSet2D.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_PointSet2D.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_PointSet2D = exports.C_PointLink2D = void 0;
class C_Point2D {
    constructor(x = 0, y = 0) {
        this.x = x;
        this.y = y;
    }
    is_exist(x, y) {
        return (this.x == x) && (this.y == y);
    }
}
class C_PointLink2D extends C_Point2D {
    constructor(x = 0, y = 0, di = -1) {
        super(x, y);
        this.di = di;
    }
    static cast(p) {
        if ((p === null || p === void 0 ? void 0 : p.x) === undefined)
            return undefined;
        if ((p === null || p === void 0 ? void 0 : p.y) === undefined)
            return undefined;
        return p instanceof C_PointLink2D ? p : new C_PointLink2D(p.x, p.y);
    }
}
exports.C_PointLink2D = C_PointLink2D;
class C_PointSet2D {
    constructor() {
        this.set = [];
    }
    push(p) {
        this.set.push(p);
        return;
    }
    get_point(x, y) {
        for (const p of this.set) {
            if (p === null || p === void 0 ? void 0 : p.is_exist(x, y))
                return p;
        }
        return undefined;
    }
    remove(p) {
        this.remove_xy(p.x, p.y);
        return;
    }
    remove_xy(x, y) {
        var _a;
        for (const i in this.set) {
            if ((_a = this.set[i]) === null || _a === void 0 ? void 0 : _a.is_exist(x, y)) {
                delete this.set[i];
                this.set = [...this.set];
                break;
            }
        }
        return;
    }
    is_exist(x, y) {
        for (const p of this.set)
            if (p === null || p === void 0 ? void 0 : p.is_exist(x, y))
                return true;
        return false;
    }
}
exports.C_PointSet2D = C_PointSet2D;


/***/ }),

/***/ "./src/d_mdl/C_Range.ts":
/*!******************************!*\
  !*** ./src/d_mdl/C_Range.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Range = void 0;
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const C_Point_1 = __webpack_require__(/*! ./C_Point */ "./src/d_mdl/C_Point.ts");
class C_Range {
    constructor(p1, p2) {
        this.min = new C_Point_1.C_Point(0, 0, 0);
        this.max = new C_Point_1.C_Point(0, 0, 0);
        this._init(p1, p2);
    }
    _init(p1, p2) {
        const min_x = (0, F_Math_1._min)([p1.x, p2.x]);
        const max_x = (0, F_Math_1._max)([p1.x, p2.x]);
        const min_y = (0, F_Math_1._min)([p1.y, p2.y]);
        const max_y = (0, F_Math_1._max)([p1.y, p2.y]);
        const min_z = (0, F_Math_1._min)([p1.z, p2.z]);
        const max_z = (0, F_Math_1._max)([p1.z, p2.z]);
        this.min = new C_Point_1.C_Point(min_x, min_y, min_z);
        this.max = new C_Point_1.C_Point(max_x, max_y, max_z);
        return this;
    }
    within(a, y, z) {
        if (typeof a === "number" && typeof y === "number" && typeof z === "number") {
            if (a < this.min.x || a > this.max.x)
                return false;
            if (y < this.min.y || y > this.max.y)
                return false;
            if (z < this.min.z || z > this.max.z)
                return false;
            return true;
        }
        if (typeof a === "object" && a instanceof C_Point_1.C_Point) {
            const p = a;
            if (p.x < this.min.x || p.x > this.max.x)
                return false;
            if (p.y < this.min.y || p.y > this.max.y)
                return false;
            if (p.z < this.min.z || p.z > this.max.z)
                return false;
            return true;
        }
        if (typeof a === "object" && a instanceof C_Range) {
            const p = a;
            if (p.min_x() < this.min.x || p.max_x() > this.max.x)
                return false;
            if (p.min_y() < this.min.y || p.max_y() > this.max.y)
                return false;
            if (p.min_z() < this.min.z || p.max_z() > this.max.z)
                return false;
            return true;
        }
        return false;
    }
    min_x() { return this.min.x; }
    max_x() { return this.max.x; }
    min_y() { return this.min.y; }
    max_y() { return this.max.y; }
    min_z() { return this.min.z; }
    max_z() { return this.max.z; }
    size_x() {
        return this.max.x - this.min.x + 1;
    }
    size_y() {
        return this.max.y - this.min.y + 1;
    }
    size_z() {
        return this.max.z - this.min.z + 1;
    }
    do_all_xyz(fn) {
        for (var z = this.min.z; z <= this.max.z; z++) {
            for (var y = this.min.y; y <= this.max.y; y++) {
                for (var x = this.min.x; y <= this.max.x; x++) {
                    if (!fn(x, y, z))
                        return false;
                }
            }
        }
        return true;
    }
    do_all_p(fn) {
        for (var z = this.min.z; z <= this.max.z; z++) {
            for (var y = this.min.y; y <= this.max.y; y++) {
                for (var x = this.min.x; y <= this.max.x; x++) {
                    if (!fn(new C_Point_1.C_Point(x, y, z)))
                        return false;
                }
            }
        }
        return true;
    }
    encode() {
        return {
            min: this.min.encode(),
            max: this.min.encode(),
        };
    }
    decode(j) {
        if (j === undefined)
            return this;
        if (j.min === undefined)
            return this;
        if (j.max === undefined)
            return this;
        const p1 = new C_Point_1.C_Point(j.min);
        const p2 = new C_Point_1.C_Point(j.max);
        return this._init(p1, p2);
    }
}
exports.C_Range = C_Range;


/***/ }),

/***/ "./src/d_mdl/C_SaveData.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_SaveData.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_SaveData = void 0;
exports.alert_save_info = alert_save_info;
exports.alert_save_detail = alert_save_detail;
const C_Maze_1 = __webpack_require__(/*! ./C_Maze */ "./src/d_mdl/C_Maze.ts");
const C_Guild_1 = __webpack_require__(/*! ./C_Guild */ "./src/d_mdl/C_Guild.ts");
const C_MovablePoint_1 = __webpack_require__(/*! ./C_MovablePoint */ "./src/d_mdl/C_MovablePoint.ts");
const C_Team_1 = __webpack_require__(/*! ./C_Team */ "./src/d_mdl/C_Team.ts");
const C_SaveInfo_1 = __webpack_require__(/*! ./C_SaveInfo */ "./src/d_mdl/C_SaveInfo.ts");
function alert_save_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    if (a === undefined)
        return;
    alert("Save Info:"
        + "\nsave_id:    " + ((_a = a.save_id) !== null && _a !== void 0 ? _a : '?')
        + "\nplayer_id:  " + ((_b = a.player_id) !== null && _b !== void 0 ? _b : '?')
        + "\nuniq_no:    " + ((_c = a.uniq_no) !== null && _c !== void 0 ? _c : '?')
        + "\ntitle:      " + ((_d = a.title) !== null && _d !== void 0 ? _d : '?')
        + "\ndetail:     " + ((_e = a.detail) !== null && _e !== void 0 ? _e : '?')
        + "\npoint:      " + ((_f = a.point) !== null && _f !== void 0 ? _f : '?')
        + "\nauto_mode:  " + ((_g = a.auto_mode) !== null && _g !== void 0 ? _g : '?')
        + "\nis_active:  " + ((_h = a.is_active) !== null && _h !== void 0 ? _h : '?')
        + "\nis_delete:  " + ((_j = a.is_delete) !== null && _j !== void 0 ? _j : '?')
        + "\nmvpt_count: " + ((_l = (_k = a.all_mvpt) === null || _k === void 0 ? void 0 : _k.length) !== null && _l !== void 0 ? _l : '?')
        + "\nmaze_count: " + ((_o = (_m = a.all_maze) === null || _m === void 0 ? void 0 : _m.length) !== null && _o !== void 0 ? _o : '?')
        + "\nguld_count: " + ((_q = (_p = a.all_guld) === null || _p === void 0 ? void 0 : _p.length) !== null && _q !== void 0 ? _q : '?')
        + "\nteam_count: " + ((_s = (_r = a.all_team) === null || _r === void 0 ? void 0 : _r.length) !== null && _s !== void 0 ? _s : '?')
        + "\n");
}
function alert_save_detail(a) {
    var _a, _b, _c, _d;
    if (a === undefined)
        return;
    try {
        for (const mvpt of (_a = a.all_mvpt) !== null && _a !== void 0 ? _a : [])
            (0, C_MovablePoint_1.alert_mvpt_info)(mvpt);
    }
    catch (err) {
        alert('alert mvpt error: ' + err);
    }
    try {
        for (const team of (_b = a.all_team) !== null && _b !== void 0 ? _b : [])
            (0, C_Team_1.alert_team_info)(team);
    }
    catch (err) {
        alert('alert team error: ' + err);
    }
    try {
        for (const maze of (_c = a.all_maze) !== null && _c !== void 0 ? _c : [])
            (0, C_Maze_1.alert_maze_info)(maze);
    }
    catch (err) {
        alert('alert maze error: ' + err);
    }
    try {
        for (const guld of (_d = a.all_guld) !== null && _d !== void 0 ? _d : [])
            (0, C_Guild_1.alert_guld_info)(guld);
    }
    catch (err) {
        alert('alert guld error: ' + err);
    }
}
class C_SaveData extends C_SaveInfo_1.C_SaveInfo {
    constructor(a) {
        super(a);
        this.all_mvpt = {};
        this.all_maze = {};
        this.all_team = {};
        this.all_guld = {};
        if (a !== undefined)
            this.__init(a);
    }
    __init(s) {
        super.__init(s);
        if (s.all_mvpt !== undefined) {
            this.all_mvpt = {};
            for (const json_mvpt of s.all_mvpt) {
                const mvpt = (new C_MovablePoint_1.C_MovablePoint()).decode(json_mvpt);
                this.all_mvpt[mvpt.uid()] = mvpt;
            }
        }
        if (s.all_maze !== undefined) {
            this.all_maze = {};
            for (const json_maze of s.all_maze) {
                const maze = (new C_Maze_1.C_Maze()).decode(json_maze);
                this.all_maze[maze.uid()] = maze;
            }
        }
        if (s.all_team !== undefined) {
            this.all_team = {};
            for (const json_team of s.all_team) {
                const team = (new C_Team_1.C_Team()).decode(json_team);
                this.all_team[team.uid()] = team;
            }
        }
        if (s.all_guld !== undefined) {
            this.all_guld = {};
            for (const json_guld of s.all_guld) {
                const guld = (new C_Guild_1.C_Guild()).decode(json_guld);
                this.all_guld[guld.uid()] = guld;
            }
        }
        return this;
    }
    static new(a) {
        return new C_SaveData(a);
    }
    encode() {
        let save_date;
        try {
            const save_data = super.encode();
            save_data.all_mvpt = this._encode_all_data(this.all_mvpt);
            save_data.all_maze = this._encode_all_data(this.all_maze);
            save_data.all_team = this._encode_all_data(this.all_team);
            save_data.all_guld = this._encode_all_data(this.all_guld);
            return save_data;
        }
        catch (err) {
            alert('SaveData Encode Error: ' + err);
            return {};
        }
    }
    _encode_all_data(all_data) {
        const all_JSON = [];
        for (let i in all_data)
            all_JSON.push(all_data[i].encode());
        return all_JSON;
    }
    decode(s) {
        return this.__init(s);
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        alert("Save Info:"
            + "\nsave_id:    " + ((_a = this.save_id) !== null && _a !== void 0 ? _a : '?')
            + "\nplayer_id:  " + ((_b = this.player_id) !== null && _b !== void 0 ? _b : '?')
            + "\nuniq_no:    " + ((_c = this.uniq_no) !== null && _c !== void 0 ? _c : '?')
            + "\ntitle:      " + ((_d = this.title) !== null && _d !== void 0 ? _d : '?')
            + "\ndetail:     " + ((_e = this.detail) !== null && _e !== void 0 ? _e : '?')
            + "\npoint:      " + ((_f = this.point) !== null && _f !== void 0 ? _f : '?')
            + "\nauto_mode:  " + (this.auto_mode ? 'Y' : 'N')
            + "\nis_active:  " + (this.is_active ? 'Y' : 'N')
            + "\nis_delete:  " + (this.is_delete ? 'Y' : 'N')
            + "\nmvpt_count: " + ((_h = (_g = this.all_mvpt) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : '?')
            + "\nmaze_count: " + ((_k = (_j = this.all_maze) === null || _j === void 0 ? void 0 : _j.length) !== null && _k !== void 0 ? _k : '?')
            + "\nguld_count: " + ((_m = (_l = this.all_guld) === null || _l === void 0 ? void 0 : _l.length) !== null && _m !== void 0 ? _m : '?')
            + "\nteam_count: " + ((_p = (_o = this.all_team) === null || _o === void 0 ? void 0 : _o.length) !== null && _p !== void 0 ? _p : '?')
            + "\n");
    }
    alert_detail() {
        try {
            for (const ii in this.all_mvpt)
                this.all_mvpt[ii].alert();
        }
        catch (err) {
            alert('alert mvpt error: ' + err);
        }
        try {
            for (const ii in this.all_team)
                this.all_team[ii].alert();
        }
        catch (err) {
            alert('alert team error: ' + err);
        }
        try {
            for (const ii in this.all_maze)
                this.all_maze[ii].alert();
        }
        catch (err) {
            alert('alert maze error: ' + err);
        }
        try {
            for (const ii in this.all_guld)
                this.all_guld[ii].alert();
        }
        catch (err) {
            alert('alert guld error: ' + err);
        }
    }
}
exports.C_SaveData = C_SaveData;


/***/ }),

/***/ "./src/d_mdl/C_SaveInfo.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_SaveInfo.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_SaveInfo = void 0;
exports.alert_saveinfo_info = alert_saveinfo_info;
const C_MovablePoint_1 = __webpack_require__(/*! ./C_MovablePoint */ "./src/d_mdl/C_MovablePoint.ts");
function alert_saveinfo_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
    if (a === undefined)
        return;
    alert("Save Info:"
        + "\nsave_id:    " + ((_a = a.save_id) !== null && _a !== void 0 ? _a : '?')
        + "\nplayer_id:  " + ((_b = a.player_id) !== null && _b !== void 0 ? _b : '?')
        + "\nuniq_no:    " + ((_c = a.uniq_no) !== null && _c !== void 0 ? _c : '?')
        + "\ntitle:      " + ((_d = a.title) !== null && _d !== void 0 ? _d : '?')
        + "\ndetail:     " + ((_e = a.detail) !== null && _e !== void 0 ? _e : '?')
        + "\npoint:      " + ((_f = a.point) !== null && _f !== void 0 ? _f : '?')
        + "\nauto_mode:  " + ((_g = a.auto_mode) !== null && _g !== void 0 ? _g : '?')
        + "\nis_active:  " + ((_h = a.is_active) !== null && _h !== void 0 ? _h : '?')
        + "\nis_delete:  " + ((_j = a.is_delete) !== null && _j !== void 0 ? _j : '?')
        + "\nsave_time:  " + ((_k = a.save_time) !== null && _k !== void 0 ? _k : '?')
        + "\nmyurl:      " + ((_m = (_l = a.mypos) === null || _l === void 0 ? void 0 : _l.cur_url) !== null && _m !== void 0 ? _m : '?')
        + "\nteam_uid:   " + ((_p = (_o = a.mypos) === null || _o === void 0 ? void 0 : _o.team_uid) !== null && _p !== void 0 ? _p : '?')
        + "\nloc_kind:   " + ((_r = (_q = a.mypos) === null || _q === void 0 ? void 0 : _q.kind) !== null && _r !== void 0 ? _r : '?')
        + "\nloc_name:   " + ((_t = (_s = a.mypos) === null || _s === void 0 ? void 0 : _s.name) !== null && _t !== void 0 ? _t : '?')
        + "\nloc_uid:    " + ((_v = (_u = a.mypos) === null || _u === void 0 ? void 0 : _u.loc_uid) !== null && _v !== void 0 ? _v : '?')
        + "\n");
}
class C_SaveInfo {
    constructor(a) {
        this.save_id = -1;
        this.player_id = -1;
        this.uniq_no = -1;
        this.title = '';
        this.detail = '';
        this.point = '';
        this.auto_mode = false;
        this.is_active = true;
        this.is_delete = false;
        this.save_time = new Date();
        this.mypos = new C_MovablePoint_1.C_MovablePoint();
        if (a !== undefined)
            this.__init(a);
    }
    __init(s) {
        var _a, _b, _c, _d, _e, _f;
        this.save_id = (_a = s.save_id) !== null && _a !== void 0 ? _a : this.save_id;
        this.player_id = (_b = s.player_id) !== null && _b !== void 0 ? _b : this.player_id;
        this.uniq_no = (_c = s.uniq_no) !== null && _c !== void 0 ? _c : this.uniq_no;
        this.title = (_d = s.title) !== null && _d !== void 0 ? _d : this.title;
        this.detail = (_e = s.detail) !== null && _e !== void 0 ? _e : this.detail;
        this.point = (_f = s.point) !== null && _f !== void 0 ? _f : this.point;
        if (s.auto_mode === undefined)
            this.auto_mode;
        else
            s.auto_mode !== '0' ? true : false;
        if (s.is_active === undefined)
            this.is_active;
        else
            s.is_active !== '0' ? true : false;
        if (s.is_delete === undefined)
            this.is_delete;
        else
            s.is_delete !== '0' ? true : false;
        if (s.save_time !== undefined)
            this.save_time = new Date(s.save_time);
        if (s.mypos !== undefined)
            this.mypos.decode(s.mypos);
        return this;
    }
    static new(a) {
        return new C_SaveInfo(a);
    }
    encode() {
        let save_date;
        try {
            save_date = this.save_time.toISOString();
        }
        catch (err) {
            save_date = new Date().toISOString();
        }
        try {
            return {
                save_id: this.save_id,
                player_id: this.player_id,
                uniq_no: this.uniq_no,
                title: this.title,
                detail: this.detail,
                point: this.point,
                auto_mode: this.auto_mode ? '1' : '0',
                is_active: this.is_active ? '1' : '0',
                is_delete: this.is_delete ? '1' : '0',
                save_time: save_date,
                mypos: this.mypos.encode(),
            };
        }
        catch (err) {
            alert('SaveData Encode Error: ' + err);
            return {};
        }
    }
    decode(s) {
        return this.__init(s);
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        alert("SaveInfo DATA:"
            + "\nsave_id:    " + ((_a = this.save_id) !== null && _a !== void 0 ? _a : '?')
            + "\nplayer_id:  " + ((_b = this.player_id) !== null && _b !== void 0 ? _b : '?')
            + "\nuniq_no:    " + ((_c = this.uniq_no) !== null && _c !== void 0 ? _c : '?')
            + "\ntitle:      " + ((_d = this.title) !== null && _d !== void 0 ? _d : '?')
            + "\ndetail:     " + ((_e = this.detail) !== null && _e !== void 0 ? _e : '?')
            + "\npoint:      " + ((_f = this.point) !== null && _f !== void 0 ? _f : '?')
            + "\nauto_mode:  " + (this.auto_mode ? 'Y' : 'N')
            + "\nis_active:  " + (this.is_active ? 'Y' : 'N')
            + "\nis_delete:  " + (this.is_delete ? 'Y' : 'N')
            + "\nmyurl:      " + ((_g = this.mypos.url()) !== null && _g !== void 0 ? _g : '?')
            + "\nteam_uid:   " + ((_h = this.mypos.tid()) !== null && _h !== void 0 ? _h : '?')
            + "\nloc_kind:   " + ((_j = this.mypos.get_lckd()) !== null && _j !== void 0 ? _j : '?')
            + "\nloc_name:   " + ((_k = this.mypos.get_name()) !== null && _k !== void 0 ? _k : '?')
            + "\nloc_uid:    " + ((_l = this.mypos.get_uid()) !== null && _l !== void 0 ? _l : '?')
            + "\n");
    }
}
exports.C_SaveInfo = C_SaveInfo;


/***/ }),

/***/ "./src/d_mdl/C_Team.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Team.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Team = void 0;
exports.alert_team_info = alert_team_info;
const C_Walker_1 = __webpack_require__(/*! ./C_Walker */ "./src/d_mdl/C_Walker.ts");
const C_Hero_1 = __webpack_require__(/*! ./C_Hero */ "./src/d_mdl/C_Hero.ts");
const C_TeamView_1 = __webpack_require__(/*! ./C_TeamView */ "./src/d_mdl/C_TeamView.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_TeamView2X_1 = __webpack_require__(/*! ./C_TeamView2X */ "./src/d_mdl/C_TeamView2X.ts");
function alert_team_info(a) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
    if (a === undefined)
        return;
    alert("Team Info:"
        + "\nid:    " + ((_a = a.id) !== null && _a !== void 0 ? _a : '?')
        + "\nuniq_id:  " + ((_b = a.uniq_id) !== null && _b !== void 0 ? _b : '?')
        + "\nname:  " + ((_c = a.name) !== null && _c !== void 0 ? _c : '?')
        + "\nsave_id: " + ((_d = a.save_id) !== null && _d !== void 0 ? _d : '?')
        + "\nurl:  " + ((_f = (_e = a.locate) === null || _e === void 0 ? void 0 : _e.cur_url) !== null && _f !== void 0 ? _f : '?')
        + "\nlckd: " + ((_h = (_g = a.locate) === null || _g === void 0 ? void 0 : _g.kind) !== null && _h !== void 0 ? _h : '?')
        + "\nlcnm: " + ((_k = (_j = a.locate) === null || _j === void 0 ? void 0 : _j.name) !== null && _k !== void 0 ? _k : '?')
        + "\nlcid: " + ((_m = (_l = a.locate) === null || _l === void 0 ? void 0 : _l.loc_uid) !== null && _m !== void 0 ? _m : '?')
        + "\ncur_x: " + ((_q = (_p = (_o = a.locate) === null || _o === void 0 ? void 0 : _o.loc_pos) === null || _p === void 0 ? void 0 : _p.x) !== null && _q !== void 0 ? _q : '?')
        + "\ncur_y: " + ((_t = (_s = (_r = a.locate) === null || _r === void 0 ? void 0 : _r.loc_pos) === null || _s === void 0 ? void 0 : _s.y) !== null && _t !== void 0 ? _t : '?')
        + "\ncur_z: " + ((_w = (_v = (_u = a.locate) === null || _u === void 0 ? void 0 : _u.loc_pos) === null || _v === void 0 ? void 0 : _v.z) !== null && _w !== void 0 ? _w : '?')
        + "\ncur_d: " + ((_z = (_y = (_x = a.locate) === null || _x === void 0 ? void 0 : _x.loc_pos) === null || _y === void 0 ? void 0 : _y.d) !== null && _z !== void 0 ? _z : '?')
        + "\ngold: " + ((_0 = a.gold) !== null && _0 !== void 0 ? _0 : 0)
        + "\nheroes: " + ((_2 = (_1 = a.heroes) === null || _1 === void 0 ? void 0 : _1.length) !== null && _2 !== void 0 ? _2 : '?')
        + "\n");
}
class C_Team {
    constructor(j) {
        this.my_id = 0;
        this.my_name = 'Neo Team?';
        this.uniq_id = 'mai_team#' + (0, F_Rand_1._get_uuid)();
        this.save_id = 0;
        this.myView = new C_TeamView_1.C_CurrentTeamView(this);
        this.myView2D = new C_TeamView2X_1.C_CurrentTeamView2X(this);
        this.myView2M = new C_TeamView2X_1.C_CurrentTeamView2X(this);
        this.myWalker = new C_Walker_1.C_Walker();
        this.myWalker.set_tid(this.uid());
        this.gold = 0;
        this.heroes = {};
        this.hope_motion = 'NOP';
        if (j !== undefined)
            this.decode(j);
    }
    free() { }
    ;
    set_prp(arg) {
        this.decode(arg);
    }
    uid() { return this.uniq_id; }
    within(p) {
        var _a, _b;
        const here = (_a = this.myWalker) === null || _a === void 0 ? void 0 : _a.get_p();
        return (_b = here === null || here === void 0 ? void 0 : here.within(p)) !== null && _b !== void 0 ? _b : false;
    }
    view() { return this.myView; }
    setView(view) { this.myView = view; }
    view2D() { return this.myView2D; }
    setView2D(view2D) { this.myView2D = view2D; }
    view2M() { return this.myView2M; }
    setView2M(view2M) { this.myView2M = view2M; }
    getWalker() {
        return this.myWalker;
    }
    walker() { return this.myWkWalker; }
    set_walker(wdwalker) { this.myWkWalker = wdwalker; }
    wres() { return undefined; }
    set_wres(wres) { return; }
    canThrough() { return true; }
    hitDamage() { return 0; }
    hres() {
        const hres = [];
        for (let ii in this.heroes)
            hres.push(this.heroes[ii]);
        return hres;
    }
    clear_hres() {
        this.heroes = {};
    }
    add_hero(hero) {
        this.heroes[hero.uid()] = hero;
    }
    rmv_hero(hero) {
        delete this.heroes[hero.uid()];
    }
    get_loc() {
        return this.myWalker;
    }
    set_loc(loc) {
        var _a;
        ((_a = this.myWalker) !== null && _a !== void 0 ? _a : (this.myWalker = new C_Walker_1.C_Walker())).decode(loc.encode());
    }
    get_pd() {
        return this.myWalker.get_pd();
    }
    set_pd(pd) {
        this.myWalker.set_pd(pd);
    }
    encode() {
        var _a, _b, _c, _d, _e, _f;
        this.get_loc();
        const json_heroes = [];
        for (let ii in this.heroes)
            json_heroes.push(this.heroes[ii].encode());
        return {
            id: this.my_id,
            name: this.my_name,
            uniq_id: this.uniq_id,
            save_id: this.save_id,
            locate: this.myWalker.encode(),
            gold: this.gold,
            heroes: json_heroes,
            motion: this.hope_motion,
            view: (_b = (_a = this.myView) === null || _a === void 0 ? void 0 : _a.encode()) !== null && _b !== void 0 ? _b : {},
            view2D: (_d = (_c = this.myView2D) === null || _c === void 0 ? void 0 : _c.encode()) !== null && _d !== void 0 ? _d : {},
            view2M: (_f = (_e = this.myView2M) === null || _e === void 0 ? void 0 : _e.encode()) !== null && _f !== void 0 ? _f : {},
        };
    }
    decode(a) {
        if (a === undefined)
            return this;
        if (a.id !== undefined)
            this.my_id = a.id;
        if (a.name !== undefined)
            this.my_name = a.name;
        if (a.uniq_id !== undefined)
            this.uniq_id = a.uniq_id;
        if (a.save_id !== undefined)
            this.save_id = a.save_id;
        if (a.motion !== undefined)
            this.hope_motion = a.motion;
        if (a.locate !== undefined)
            this.myWalker.decode(a.locate);
        if (a.gold !== undefined)
            this.gold = a.gold;
        if (a.heroes !== undefined) {
            this.heroes = {};
            for (const json_hero of a.heroes) {
                const hero = new C_Hero_1.C_Hero(json_hero);
                this.heroes[hero.uid()] = hero;
            }
        }
        return this;
    }
    static encode_all(all_team) {
        const all_team_data = [];
        for (let team of all_team) {
            all_team_data.push(team.encode());
        }
        return all_team_data;
    }
    static decode_all(all_team_data) {
        const all_team = [];
        for (let team_data of all_team_data) {
            all_team.push((new C_Team()).decode(team_data));
        }
        return all_team;
    }
    alert() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        alert("Team Info:"
            + "\nid:    " + ((_a = this.my_id) !== null && _a !== void 0 ? _a : '?')
            + "\nuniq_id:  " + ((_b = this.uniq_id) !== null && _b !== void 0 ? _b : '?')
            + "\nname:  " + ((_c = this.my_name) !== null && _c !== void 0 ? _c : '?')
            + "\nsave_id: " + ((_d = this.save_id) !== null && _d !== void 0 ? _d : '?')
            + "\nurl:  " + ((_e = this.myWalker.url()) !== null && _e !== void 0 ? _e : '?')
            + "\nlckd: " + ((_f = this.myWalker.get_lckd_str()) !== null && _f !== void 0 ? _f : '?')
            + "\nlcnm: " + ((_g = this.myWalker.get_name()) !== null && _g !== void 0 ? _g : '?')
            + "\nlcid: " + ((_h = this.myWalker.get_uid()) !== null && _h !== void 0 ? _h : '?')
            + "\ncur_x: " + ((_j = this.myWalker.get_p().x) !== null && _j !== void 0 ? _j : '?')
            + "\ncur_y: " + ((_k = this.myWalker.get_p().y) !== null && _k !== void 0 ? _k : '?')
            + "\ncur_z: " + ((_l = this.myWalker.get_p().z) !== null && _l !== void 0 ? _l : '?')
            + "\ncur_d: " + ((_m = this.myWalker.get_d()) !== null && _m !== void 0 ? _m : '?')
            + "\ngold: " + (Object.keys((_o = this.gold) !== null && _o !== void 0 ? _o : {}).length)
            + "\nheroes: " + ((_q = (_p = this.heroes) === null || _p === void 0 ? void 0 : _p.length) !== null && _q !== void 0 ? _q : '?')
            + "\n");
    }
    alert_hres() {
        for (const ii in this.heroes)
            this.heroes[ii].alert();
    }
}
exports.C_Team = C_Team;


/***/ }),

/***/ "./src/d_mdl/C_TeamView.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_TeamView.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_CurrentTeamView = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_MazeObjView_1 = __webpack_require__(/*! ./C_MazeObjView */ "./src/d_mdl/C_MazeObjView.ts");
class C_CurrentTeamView {
    constructor(team) {
        this.my_layer = 99;
        this.my_team = team;
    }
    free() { }
    layer() { return this.my_layer; }
    set_layer(layer) { this.my_layer = layer; }
    letter() {
        switch (this.my_team.getWalker().get_d()) {
            case C_PointDir_1.T_Direction.N: return '↑';
            case C_PointDir_1.T_Direction.E: return '→';
            case C_PointDir_1.T_Direction.S: return '↓';
            case C_PointDir_1.T_Direction.W: return '←';
            default: return '🌀';
        }
    }
    canShow() { return false; }
    pad_t() { return 0.0; }
    pad_d() { return 0.0; }
    pad_s() { return 0.0; }
    col_f() { return null; }
    col_b() { return null; }
    col_s() { return null; }
    col_t() { return null; }
    col_d() { return null; }
    col_l() { return null; }
    col_2() { return null; }
    col_L() { return null; }
    drow3D(frot, back) { }
    drow2D(r) {
        const con = C_MazeObjView_1.C_MazeObjView.get_context2D();
        if (con === undefined)
            return;
        switch (this.my_team.getWalker().get_d()) {
            case C_PointDir_1.T_Direction.N:
                this.drow2D_arrow({ x: (r.tl.x + r.tr.x) / 2, y: r.tl.y }, r.dl, r.dr);
                break;
            case C_PointDir_1.T_Direction.E:
                this.drow2D_arrow({ y: (r.tr.y + r.dr.y) / 2, x: r.tr.x }, r.tl, r.dl);
                break;
            case C_PointDir_1.T_Direction.S:
                this.drow2D_arrow({ x: (r.dl.x + r.dr.x) / 2, y: r.dl.y }, r.tr, r.tl);
                break;
            case C_PointDir_1.T_Direction.W:
                this.drow2D_arrow({ y: (r.tl.y + r.dl.y) / 2, x: r.tl.x }, r.dr, r.tr);
                break;
        }
    }
    drow2D_arrow(top, left, right) {
        const con = C_MazeObjView_1.C_MazeObjView.get_context2D();
        if (con === undefined)
            return;
        con.beginPath();
        con.moveTo(top.x, top.y);
        con.lineTo(right.x, right.y);
        con.lineTo(left.x, left.y);
        con.closePath();
        con.fillStyle = "#ff6666";
        con.fill();
        con.strokeStyle = "#ff3333";
        con.lineWidth = 2;
        con.stroke();
    }
    encode() { return { cname: 'CurrentTeamView' }; }
    decode(j) { return this; }
}
exports.C_CurrentTeamView = C_CurrentTeamView;


/***/ }),

/***/ "./src/d_mdl/C_TeamView2X.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_TeamView2X.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_CurrentTeamView2X = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_CurrentTeamView2X {
    constructor(team) {
        this.my_layer = 99;
        this.my_team = team;
    }
    free() { }
    layer() { return this.my_layer; }
    set_layer(layer) { this.my_layer = layer; }
    letter() {
        switch (this.my_team.getWalker().get_d()) {
            case C_PointDir_1.T_Direction.N: return '↑';
            case C_PointDir_1.T_Direction.E: return '→';
            case C_PointDir_1.T_Direction.S: return '↓';
            case C_PointDir_1.T_Direction.W: return '←';
            default: return '🌀';
        }
    }
    canShow() { return false; }
    col_2() { return null; }
    col_L() { return null; }
    drow2X(ctx, r, dir) {
        if (ctx === undefined)
            return;
        switch (this.my_team.getWalker().get_d()) {
            case C_PointDir_1.T_Direction.N:
                this.drow2X_arrow(ctx, { x: (r.tl.x + r.tr.x) / 2, y: r.tl.y }, r.dl, r.dr);
                break;
            case C_PointDir_1.T_Direction.E:
                this.drow2X_arrow(ctx, { y: (r.tr.y + r.dr.y) / 2, x: r.tr.x }, r.tl, r.dl);
                break;
            case C_PointDir_1.T_Direction.S:
                this.drow2X_arrow(ctx, { x: (r.dl.x + r.dr.x) / 2, y: r.dl.y }, r.tr, r.tl);
                break;
            case C_PointDir_1.T_Direction.W:
                this.drow2X_arrow(ctx, { y: (r.tl.y + r.dl.y) / 2, x: r.tl.x }, r.dr, r.tr);
                break;
        }
    }
    drow2X_arrow(ctx, top, left, right) {
        if (ctx === undefined || ctx === null)
            return;
        ctx.beginPath();
        ctx.moveTo(top.x, top.y);
        ctx.lineTo(right.x, right.y);
        ctx.lineTo(left.x, left.y);
        ctx.closePath();
        ctx.fillStyle = "#ff6666";
        ctx.fill();
        ctx.strokeStyle = "#ff3333";
        ctx.lineWidth = 2;
        ctx.stroke();
    }
    encode() { return { cname: 'CurrentTeamView' }; }
    decode(j) { return this; }
}
exports.C_CurrentTeamView2X = C_CurrentTeamView2X;


/***/ }),

/***/ "./src/d_mdl/C_Walker.ts":
/*!*******************************!*\
  !*** ./src/d_mdl/C_Walker.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Walker = void 0;
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_MovablePoint_1 = __webpack_require__(/*! ./C_MovablePoint */ "./src/d_mdl/C_MovablePoint.ts");
class C_Walker extends C_MovablePoint_1.C_MovablePoint {
    constructor(j) {
        super(j);
    }
    get_x() { return this.loc_pos.x; }
    get_y() { return this.loc_pos.y; }
    get_z() { return this.loc_pos.z; }
    set_x(x) { this.loc_pos.x = x; }
    set_y(y) { this.loc_pos.y = y; }
    set_z(z) { this.loc_pos.z = z; }
    set_place(place, url, pos) {
        this.set_uid(place.uid());
        this.set_lckd(place.get_lckd());
        this.set_name(place.get_name());
        if (url !== undefined)
            this.set_url(url);
        if (pos !== undefined) {
            this.set_pd(pos);
        }
    }
    hope_p_fwd() {
        return {
            has_hope: true,
            hope: "Move",
            subj: this.get_p_fwd(),
        };
    }
    hope_p_bak() {
        return {
            has_hope: true,
            hope: "Move",
            subj: this.get_p_bak(),
        };
    }
    hope_p_lft() {
        return {
            has_hope: true,
            hope: "Move",
            subj: this.get_p_lft(),
        };
    }
    hope_p_rgt() {
        return {
            has_hope: true,
            hope: "Move",
            subj: this.get_p_rgt(),
        };
    }
    hope_turn_r() {
        return {
            has_hope: true,
            hope: "Turn",
            subj: this.get_t_rgt(),
        };
    }
    hope_turn_l() {
        return {
            has_hope: true,
            hope: "Turn",
            subj: this.get_t_lft(),
        };
    }
    hope_p_up() {
        return {
            has_hope: true,
            hope: "Up",
            subj: this.get_p_up(),
        };
    }
    hope_p_down() {
        return {
            has_hope: true,
            hope: "Down",
            subj: this.get_p_down(),
        };
    }
    get_p_fwd() {
        return this.__get_p_move(1, 0);
    }
    get_p_bak() {
        return this.__get_p_move(-1, 0);
    }
    get_p_lft() {
        return this.__get_p_move(0, -1);
    }
    get_p_rgt() {
        return this.__get_p_move(0, 1);
    }
    get_t_rgt() {
        const pd = new C_PointDir_1.C_PointDir(this.loc_pos);
        switch (this.loc_pos.d) {
            case C_PointDir_1.T_Direction.N:
                pd.d = C_PointDir_1.T_Direction.E;
                break;
            case C_PointDir_1.T_Direction.E:
                pd.d = C_PointDir_1.T_Direction.S;
                break;
            case C_PointDir_1.T_Direction.S:
                pd.d = C_PointDir_1.T_Direction.W;
                break;
            case C_PointDir_1.T_Direction.W:
                pd.d = C_PointDir_1.T_Direction.N;
                break;
        }
        return pd;
    }
    get_t_lft() {
        const pd = new C_PointDir_1.C_PointDir(this.loc_pos);
        switch (this.loc_pos.d) {
            case C_PointDir_1.T_Direction.N:
                pd.d = C_PointDir_1.T_Direction.W;
                break;
            case C_PointDir_1.T_Direction.E:
                pd.d = C_PointDir_1.T_Direction.N;
                break;
            case C_PointDir_1.T_Direction.S:
                pd.d = C_PointDir_1.T_Direction.E;
                break;
            case C_PointDir_1.T_Direction.W:
                pd.d = C_PointDir_1.T_Direction.S;
                break;
        }
        return pd;
    }
    get_p_up() {
        const p = new C_PointDir_1.C_PointDir(this.loc_pos);
        p.z--;
        return p;
    }
    get_p_down() {
        const p = new C_PointDir_1.C_PointDir(this.loc_pos);
        p.z++;
        return p;
    }
    __get_p_move(offsetFB, offsetLR) {
        const p = new C_PointDir_1.C_PointDir(this.loc_pos);
        if (offsetFB !== 0) {
            switch (this.loc_pos.d) {
                case C_PointDir_1.T_Direction.N:
                    p.y -= offsetFB;
                    break;
                case C_PointDir_1.T_Direction.E:
                    p.x += offsetFB;
                    break;
                case C_PointDir_1.T_Direction.S:
                    p.y += offsetFB;
                    break;
                case C_PointDir_1.T_Direction.W:
                    p.x -= offsetFB;
                    break;
            }
        }
        if (offsetLR !== 0) {
            switch (this.loc_pos.d) {
                case C_PointDir_1.T_Direction.N:
                    p.x += offsetLR;
                    break;
                case C_PointDir_1.T_Direction.E:
                    p.y += offsetLR;
                    break;
                case C_PointDir_1.T_Direction.S:
                    p.x -= offsetLR;
                    break;
                case C_PointDir_1.T_Direction.W:
                    p.y -= offsetLR;
                    break;
            }
        }
        return p;
    }
    get_around(front, right, up = 0) {
        var target_x = this.loc_pos.x;
        var target_y = this.loc_pos.y;
        var target_z = this.loc_pos.z - up;
        switch (this.loc_pos.d) {
            case C_PointDir_1.T_Direction.N:
                target_x += right;
                target_y -= front;
                break;
            case C_PointDir_1.T_Direction.E:
                target_x += front;
                target_y += right;
                break;
            case C_PointDir_1.T_Direction.S:
                target_x -= right;
                target_y += front;
                break;
            case C_PointDir_1.T_Direction.W:
                target_x -= front;
                target_y -= right;
                break;
        }
        return new C_PointDir_1.C_PointDir({ x: target_x, y: target_y, z: target_z, d: this.loc_pos.d });
    }
    encode() {
        const j = super.encode();
        return j;
    }
    decode(a) {
        if (a === undefined)
            return this;
        super.decode(a);
        return this;
    }
}
exports.C_Walker = C_Walker;


/***/ }),

/***/ "./src/d_mdl/C_Wndr.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Wndr.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Wndr = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_Hero_1 = __webpack_require__(/*! ./C_Hero */ "./src/d_mdl/C_Hero.ts");
class C_Wndr extends C_Hero_1.C_Hero {
    constructor(j) {
        super(j);
        this.boss_level = 0;
        this.family = '放浪者';
        this.my_name = 'No Name Wonder';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        super.__init(j);
        if ((j === null || j === void 0 ? void 0 : j.boss_level) !== undefined)
            this.boss_level = j.boss_level;
        if ((j === null || j === void 0 ? void 0 : j.family) !== undefined)
            this.family = j.family;
        return this;
    }
    free() {
        super.free();
    }
    hero_bonus(n) {
        return n * (this.lv + this.boss_level + 1);
    }
    random_make(hero_level) {
        super.random_make(hero_level);
        this.my_name = this.family + (0, F_Rand_1._random_str)(5);
        return this;
    }
    encode() {
        const j = super.encode();
        j.boss_level = this.boss_level;
        j.family = this.family;
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_Wndr = C_Wndr;


/***/ }),

/***/ "./src/d_mdl/C_WndrObj.ts":
/*!********************************!*\
  !*** ./src/d_mdl/C_WndrObj.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrObj = void 0;
const C_MazeObj_1 = __webpack_require__(/*! ./C_MazeObj */ "./src/d_mdl/C_MazeObj.ts");
const C_WndrView_1 = __webpack_require__(/*! ./C_WndrView */ "./src/d_mdl/C_WndrView.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const C_WndrView2X_1 = __webpack_require__(/*! ./C_WndrView2X */ "./src/d_mdl/C_WndrView2X.ts");
const F_new_Walker_1 = __webpack_require__(/*! ./F_new_Walker */ "./src/d_mdl/F_new_Walker.ts");
const C_Wres_1 = __webpack_require__(/*! ./C_Wres */ "./src/d_mdl/C_Wres.ts");
class C_WndrObj extends C_MazeObj_1.C_MazeObj {
    constructor(j) {
        var _a, _b, _c, _d, _e;
        super(j);
        this.clname = 'C_WndrObj';
        this.dmy = 'ダミー';
        this.clname = 'C_WndrObj';
        this.can_thr = true;
        this.hit_dmg = 0;
        j !== null && j !== void 0 ? j : (j = {});
        if (j.pos === undefined)
            (_a = j.pos) !== null && _a !== void 0 ? _a : (j.pos = (_b = j.wowalk.loc_pos) !== null && _b !== void 0 ? _b : { x: 1, y: 1, z: 0, d: 0 });
        (_c = j.view) !== null && _c !== void 0 ? _c : (j.view = {
            layer: 0, letter: '漂',
            show3D: '1',
            pad_t: 0.2, pad_d: 0.0, pad_s: 0.38,
            col_f: '#ff99ff', col_b: '#dd88dd', col_s: '#dd88dd', col_t: '#dd88dd', col_d: '#dd88dd',
            col_l: '#9999ff', col_2: '', col_L: '#6666ff',
            col_2_arw: '#ffffff', col_2_tri: '#cc6666',
        });
        (_d = j.wowalk) !== null && _d !== void 0 ? _d : (j.wowalk = {});
        (_e = j.wres) !== null && _e !== void 0 ? _e : (j.wres = {});
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        var _a, _b, _c, _d, _e;
        var _f;
        super.__init(j);
        if (j === undefined)
            return this;
        if ((j === null || j === void 0 ? void 0 : j.clname) !== undefined)
            this.clname = j.clname;
        if ((j === null || j === void 0 ? void 0 : j.pos) === undefined && j.wowalk.loc_pos !== undefined)
            j.pos = j.wowalk.loc_pos;
        if ((j === null || j === void 0 ? void 0 : j.pos) !== undefined)
            this.set_pd(new C_PointDir_1.C_PointDir(j.pos));
        if ((j === null || j === void 0 ? void 0 : j.view) !== undefined) {
            this.setView(new C_WndrView_1.C_WndrView(j.view));
            this.setView2D(new C_WndrView2X_1.C_WndrView2X(j.view));
            this.setView2M(new C_WndrView2X_1.C_WndrView2X(j.view));
        }
        if ((j === null || j === void 0 ? void 0 : j.wowalk) !== undefined) {
            (_a = (_f = j.wowalk).loc_pos) !== null && _a !== void 0 ? _a : (_f.loc_pos = (_b = j === null || j === void 0 ? void 0 : j.pos) !== null && _b !== void 0 ? _b : { x: 1, y: 1, z: 0, d: 0 });
            this.wowalk = (0, F_new_Walker_1.new_walker)(j.wowalk);
            (_c = this.wowalk) === null || _c === void 0 ? void 0 : _c.set_mazeObj(this);
        }
        if ((j === null || j === void 0 ? void 0 : j.wres) !== undefined) {
            this.myWres = new C_Wres_1.C_Wres(j.wres);
            this.myWres.set_walker(this.wowalk);
        }
        if (((_d = j === null || j === void 0 ? void 0 : j.stat) === null || _d === void 0 ? void 0 : _d.wo) !== undefined) {
            this.dmy = (_e = j.stat.wo.dmy) !== null && _e !== void 0 ? _e : '';
        }
        return this;
    }
    free() {
        var _a, _b;
        (_a = this.wowalk) === null || _a === void 0 ? void 0 : _a.free();
        this.wowalk = undefined;
        (_b = this.myWres) === null || _b === void 0 ? void 0 : _b.free();
        this.myWres = undefined;
    }
    walker() { return this.wowalk; }
    set_walker(wowalk) { this.wowalk = wowalk; }
    wres() { var _a; return (_a = this.myWres) !== null && _a !== void 0 ? _a : undefined; }
    set_wres(wres) { this.myWres = wres; }
    encode() {
        var _a, _b, _c, _d, _e;
        const j = super.encode();
        j.clname = this.clname;
        j.wowalk = (_b = (_a = this.wowalk) === null || _a === void 0 ? void 0 : _a.encode()) !== null && _b !== void 0 ? _b : undefined;
        j.wres = (_d = (_c = this.myWres) === null || _c === void 0 ? void 0 : _c.encode()) !== null && _d !== void 0 ? _d : undefined;
        (_e = j.stat) !== null && _e !== void 0 ? _e : (j.stat = {});
        j.stat.wo = { dmy: this.dmy };
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_WndrObj = C_WndrObj;


/***/ }),

/***/ "./src/d_mdl/C_WndrView.ts":
/*!*********************************!*\
  !*** ./src/d_mdl/C_WndrView.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrView = void 0;
const C_MazeObjView_1 = __webpack_require__(/*! ./C_MazeObjView */ "./src/d_mdl/C_MazeObjView.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_WndrView extends C_MazeObjView_1.C_MazeObjView {
    constructor(j) {
        super(j);
        this.clname = 'WndrView';
        this.col_2_arw = null;
        this.col_2_tri = null;
        this.clname = 'WndrView';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        if (j === undefined)
            return this;
        super.__init(j);
        if ((j === null || j === void 0 ? void 0 : j.clname) !== undefined)
            this.clname = j.clname;
        if ((j === null || j === void 0 ? void 0 : j.col_2_arw) !== undefined)
            this.col_2_arw = j.col_2_arw;
        if ((j === null || j === void 0 ? void 0 : j.col_2_tri) !== undefined)
            this.col_2_tri = j.col_2_tri;
        return this;
    }
    free() { }
    letter(dir = 0) {
        switch (dir) {
            case C_PointDir_1.T_Direction.N: return '👆';
            case C_PointDir_1.T_Direction.E: return '👉';
            case C_PointDir_1.T_Direction.S: return '👇';
            case C_PointDir_1.T_Direction.W: return '👈';
            default: return '🌀';
        }
    }
    drow2D(r, dir = 0) {
        super.drow2D(r);
        const con = C_MazeObjView_1.C_MazeObjView.get_context2D();
        if (con === undefined)
            return;
        switch (dir) {
            case C_PointDir_1.T_Direction.N:
                this.drow2D_arrow({ x: (r.tl.x + r.tr.x) / 2, y: r.tl.y }, r.dl, r.dr);
                break;
            case C_PointDir_1.T_Direction.E:
                this.drow2D_arrow({ y: (r.tr.y + r.dr.y) / 2, x: r.tr.x }, r.tl, r.dl);
                break;
            case C_PointDir_1.T_Direction.S:
                this.drow2D_arrow({ x: (r.dl.x + r.dr.x) / 2, y: r.dl.y }, r.tr, r.tl);
                break;
            case C_PointDir_1.T_Direction.W:
                this.drow2D_arrow({ y: (r.tl.y + r.dl.y) / 2, x: r.tl.x }, r.dr, r.tr);
                break;
        }
    }
    drow2D_arrow(top, left, right) {
        var _a, _b;
        const con = C_MazeObjView_1.C_MazeObjView.get_context2D();
        if (con === undefined)
            return;
        con.beginPath();
        con.moveTo(top.x, top.y);
        con.lineTo(right.x, right.y);
        con.lineTo(left.x, left.y);
        con.closePath();
        con.fillStyle = (_a = this.col_2_arw) !== null && _a !== void 0 ? _a : "#ff3333";
        con.fill();
        con.strokeStyle = (_b = this.col_2_tri) !== null && _b !== void 0 ? _b : "#ff9999";
        con.lineWidth = 2;
        con.stroke();
    }
    encode() {
        var _a, _b;
        const j = super.encode();
        j.col_2_arw = (_a = this.col_2_arw) !== null && _a !== void 0 ? _a : null;
        j.col_2_tri = (_b = this.col_2_tri) !== null && _b !== void 0 ? _b : null;
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_WndrView = C_WndrView;


/***/ }),

/***/ "./src/d_mdl/C_WndrView2X.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_WndrView2X.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrView2X = void 0;
const C_MazeObjView2X_1 = __webpack_require__(/*! ./C_MazeObjView2X */ "./src/d_mdl/C_MazeObjView2X.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
class C_WndrView2X extends C_MazeObjView2X_1.C_MazeObjView2X {
    constructor(j) {
        super(j);
        this.clname = 'WndrView';
        this.col_2_arw = null;
        this.col_2_tri = null;
        this.clname = 'WndrView';
        if (j !== undefined)
            this.__init(j);
    }
    __init(j) {
        if (j === undefined)
            return this;
        super.__init(j);
        if ((j === null || j === void 0 ? void 0 : j.clname) !== undefined)
            this.clname = j.clname;
        if ((j === null || j === void 0 ? void 0 : j.col_2_arw) !== undefined)
            this.col_2_arw = j.col_2_arw;
        if ((j === null || j === void 0 ? void 0 : j.col_2_tri) !== undefined)
            this.col_2_tri = j.col_2_tri;
        return this;
    }
    free() { }
    letter(dir = 0) {
        switch (dir) {
            case C_PointDir_1.T_Direction.N: return '👆';
            case C_PointDir_1.T_Direction.E: return '👉';
            case C_PointDir_1.T_Direction.S: return '👈';
            case C_PointDir_1.T_Direction.W: return '👇';
            default: return '🌀';
        }
    }
    drow2X(ctx, r, dir = 0) {
        super.drow2X(ctx, r, dir);
        if (ctx === null)
            return;
        switch (dir) {
            case C_PointDir_1.T_Direction.N:
                this.drow2X_arrow(ctx, { x: (r.tl.x + r.tr.x) / 2, y: r.tl.y }, r.dl, r.dr);
                break;
            case C_PointDir_1.T_Direction.E:
                this.drow2X_arrow(ctx, { y: (r.tr.y + r.dr.y) / 2, x: r.tr.x }, r.tl, r.dl);
                break;
            case C_PointDir_1.T_Direction.S:
                this.drow2X_arrow(ctx, { x: (r.dl.x + r.dr.x) / 2, y: r.dl.y }, r.tr, r.tl);
                break;
            case C_PointDir_1.T_Direction.W:
                this.drow2X_arrow(ctx, { y: (r.tl.y + r.dl.y) / 2, x: r.tl.x }, r.dr, r.tr);
                break;
        }
    }
    drow2X_arrow(ctx, top, left, right) {
        var _a, _b;
        if (ctx === undefined || ctx === null)
            return;
        ctx.beginPath();
        ctx.moveTo(top.x, top.y);
        ctx.lineTo(right.x, right.y);
        ctx.lineTo(left.x, left.y);
        ctx.closePath();
        ctx.fillStyle = (_a = this.col_2_arw) !== null && _a !== void 0 ? _a : "#ff3333";
        ctx.fill();
        ctx.strokeStyle = (_b = this.col_2_tri) !== null && _b !== void 0 ? _b : "#ff9999";
        ctx.lineWidth = 2;
        ctx.stroke();
    }
    encode() {
        var _a, _b;
        const j = super.encode();
        j.col_2_arw = (_a = this.col_2_arw) !== null && _a !== void 0 ? _a : null;
        j.col_2_tri = (_b = this.col_2_tri) !== null && _b !== void 0 ? _b : null;
        return j;
    }
    decode(j) {
        return this.__init(j);
    }
}
exports.C_WndrView2X = C_WndrView2X;


/***/ }),

/***/ "./src/d_mdl/C_WndrWalker.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/C_WndrWalker.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_WndrWalker = void 0;
const C_Walker_1 = __webpack_require__(/*! ./C_Walker */ "./src/d_mdl/C_Walker.ts");
const C_Hope_1 = __webpack_require__(/*! ./C_Hope */ "./src/d_mdl/C_Hope.ts");
const C_PointDir_1 = __webpack_require__(/*! ./C_PointDir */ "./src/d_mdl/C_PointDir.ts");
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
class C_WndrWalker extends C_Walker_1.C_Walker {
    canMove() { return this.cond.canMove; }
    canTurn() { return this.cond.canTurn; }
    canSlid() { return this.cond.canSlid; }
    canUpDn() { return this.cond.canUpDn; }
    canThru() { return this.cond.canThru; }
    careWal() { return this.cond.careWal; }
    constructor(j) {
        super(j);
        this.clname = 'C_WndrWalker';
        this.action = [];
        this.wait = {};
        this.cond = {
            canMove: true,
            canTurn: true,
            canSlid: true,
            canUpDn: false,
            canThru: false,
            careWal: false,
        };
        this.wait = {
            'Wait_': 10,
            'MoveF': 10,
            'MoveB': 10,
            'TurnL': 10,
            'TurnR': 10,
            'SlidF': 10,
            'SlidB': 10,
            'SlidL': 10,
            'SlidR': 10,
            'FlorU': 10,
            'FlorD': 10,
        };
        if (j !== undefined)
            this.__init(j);
    }
    __init(a) {
        var _a, _b, _c, _d, _e, _f, _g;
        super.__init(a);
        if (a === undefined)
            return this;
        if (a.clname !== undefined)
            this.clname = a.clname;
        if (a.cond !== undefined) {
            (_a = this.cond) !== null && _a !== void 0 ? _a : (this.cond = {});
            if (((_b = a.cond) === null || _b === void 0 ? void 0 : _b.canMove) !== undefined)
                this.cond.canMove = a.cond.canMove !== '0' ? true : false;
            if (((_c = a.cond) === null || _c === void 0 ? void 0 : _c.canTurn) !== undefined)
                this.cond.canTurn = a.cond.canTurn !== '0' ? true : false;
            if (((_d = a.cond) === null || _d === void 0 ? void 0 : _d.canSlid) !== undefined)
                this.cond.canSlid = a.cond.canSlid !== '0' ? true : false;
            if (((_e = a.cond) === null || _e === void 0 ? void 0 : _e.canUpDn) !== undefined)
                this.cond.canUpDn = a.cond.canUpDn !== '0' ? true : false;
            if (((_f = a.cond) === null || _f === void 0 ? void 0 : _f.canThru) !== undefined)
                this.cond.canThru = a.cond.canThru !== '0' ? true : false;
            if (((_g = a.cond) === null || _g === void 0 ? void 0 : _g.careWal) !== undefined)
                this.cond.careWal = a.cond.careWal !== '0' ? true : false;
        }
        if (a.loc_pos !== undefined)
            this.set_pd(new C_PointDir_1.C_PointDir(a.loc_pos));
        return this;
    }
    free() { }
    get_mazeObj() {
        return this.mazeObj;
    }
    set_mazeObj(mo) {
        this.mazeObj = mo;
    }
    get_wait() { return Object.assign({}, this.wait); }
    set_wait(wait) { this.wait = Object.assign({}, wait); }
    set_pd(pd) {
        super.set_pd(pd);
        if (this.mazeObj !== undefined)
            this.mazeObj.set_pd(pd);
        return pd;
    }
    wonder() {
        const actions = this.selectable_action();
        if (actions.length <= 0)
            return this._wait();
        let items = [];
        for (const action of actions)
            items.push({ key: action, ratio: this.wait[action] });
        const selected_idx = (0, F_Rand_1._selectItem2)(items);
        const selected = selected_idx !== null && selected_idx !== void 0 ? selected_idx : 'TurnR';
        return this.return_hope_action(selected);
    }
    _wait() {
        return new C_Hope_1.C_HopeAction({});
    }
    selectable_action() {
        let selected = [];
        if (this.cond.canMove) {
            selected.push('MoveF');
            selected.push('MoveB');
        }
        if (this.cond.canTurn) {
            selected.push('TurnL');
            selected.push('TurnR');
        }
        if (this.cond.canSlid) {
            selected.push('SlidF');
            selected.push('SlidB');
            selected.push('SlidL');
            selected.push('SlidR');
        }
        if (this.cond.canUpDn) {
            selected.push('FlorU');
            selected.push('FlorD');
        }
        return selected;
    }
    return_hope_action(action) {
        switch (action) {
            case 'Wait_': return this._wait();
            case 'MoveF': return this.hope_p_fwd();
            case 'MoveB': return this.hope_p_bak();
            case 'TurnL': return this.hope_turn_l();
            case 'TurnR': return this.hope_turn_r();
            case 'SlidF': return this.hope_p_fwd();
            case 'SlidB': return this.hope_p_bak();
            case 'SlidL': return this.hope_p_lft();
            case 'SlidR': return this.hope_p_rgt();
            case 'FlorU': return this.hope_p_up();
            case 'FlorD': return this.hope_p_down();
        }
    }
    encode() {
        const j = super.encode();
        j.clname = this.clname;
        j.cond = {
            canMove: (this.cond.canMove) ? '1' : '0',
            canTurn: (this.cond.canTurn) ? '1' : '0',
            canSlid: (this.cond.canSlid) ? '1' : '0',
            canUpDn: (this.cond.canUpDn) ? '1' : '0',
            canThru: (this.cond.canThru) ? '1' : '0',
            careWal: (this.cond.careWal) ? '1' : '0',
        };
        return j;
    }
    decode(a) {
        return this.__init(a);
    }
}
exports.C_WndrWalker = C_WndrWalker;


/***/ }),

/***/ "./src/d_mdl/C_Wres.ts":
/*!*****************************!*\
  !*** ./src/d_mdl/C_Wres.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_Wres = void 0;
const F_Rand_1 = __webpack_require__(/*! ../d_utl/F_Rand */ "./src/d_utl/F_Rand.ts");
const C_Wndr_1 = __webpack_require__(/*! ./C_Wndr */ "./src/d_mdl/C_Wndr.ts");
class C_Wres {
    constructor(j) {
        this.uniq_id = 'mai_wres#' + (0, F_Rand_1._get_uuid)();
        j !== null && j !== void 0 ? j : (j = {});
        this.__init(j);
    }
    free() {
        var _a, _b;
        for (const wndr of (_a = this === null || this === void 0 ? void 0 : this.myWres) !== null && _a !== void 0 ? _a : []) {
            wndr === null || wndr === void 0 ? void 0 : wndr.free();
        }
        this.myWres = [];
        (_b = this.wowalk) === null || _b === void 0 ? void 0 : _b.free();
        this.wowalk = undefined;
    }
    uid() { return this.uniq_id; }
    wres() { var _a; return (_a = this.myWres) !== null && _a !== void 0 ? _a : []; }
    ;
    set_wres(wres) { if (wres !== undefined && wres.length > 0)
        this.myWres = wres; }
    clr_wres() { this.myWres = []; }
    add_wres(wndr) { var _a; if (wndr !== undefined)
        (_a = this.myWres) === null || _a === void 0 ? void 0 : _a.push(wndr); }
    walker() { return this.wowalk; }
    set_walker(wowalk) { this.wowalk = wowalk; }
    doAll(fnc, arg) {
        var _a;
        if (fnc === undefined)
            return false;
        let rsltAll = true;
        for (const wndr of (_a = this.myWres) !== null && _a !== void 0 ? _a : []) {
            const rslt = fnc(wndr, arg);
            if (typeof rslt === 'boolean')
                rsltAll && (rsltAll = rslt);
        }
        return rsltAll;
    }
    encode() {
        var _a;
        const wres = [];
        for (const wndr of (_a = this.myWres) !== null && _a !== void 0 ? _a : [])
            wres.push(wndr.encode());
        const j = {
            uniq_id: this.uniq_id,
            wres: wres,
        };
        return {};
    }
    __init(j) {
        var _a, _b;
        if (j === undefined)
            return this;
        if (j.uniq_id !== undefined)
            this.uniq_id = j.uniq_id;
        if (j.wres !== undefined && ((_b = (_a = j.wres) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : -1) > 0) {
            this.myWres = [];
            for (const wres of j.wres)
                this.myWres.push(new C_Wndr_1.C_Wndr(wres));
        }
        return this;
    }
    decode(j) {
        return this.__init(j);
    }
    ;
}
exports.C_Wres = C_Wres;


/***/ }),

/***/ "./src/d_mdl/F_new_MazeObj.ts":
/*!************************************!*\
  !*** ./src/d_mdl/F_new_MazeObj.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.new_mazeObj = new_mazeObj;
const C_MazeObj_1 = __webpack_require__(/*! ./C_MazeObj */ "./src/d_mdl/C_MazeObj.ts");
const C_MazeObjEtc_1 = __webpack_require__(/*! ./C_MazeObjEtc */ "./src/d_mdl/C_MazeObjEtc.ts");
const C_WndrObj_1 = __webpack_require__(/*! ./C_WndrObj */ "./src/d_mdl/C_WndrObj.ts");
function new_mazeObj(j) {
    if (j === undefined)
        return new C_MazeObj_1.C_MazeObj(j);
    switch (j.clname) {
        case 'C_MazeObj': return new C_MazeObj_1.C_MazeObj(j);
        case 'C_WndrObj': return new C_WndrObj_1.C_WndrObj(j);
        case 'C_MazeObjShadow': return new C_MazeObjEtc_1.C_MazeObjShadow(j);
        case 'C_MazeObjShogai': return new C_MazeObjEtc_1.C_MazeObjShogai(j);
        default: return new C_MazeObj_1.C_MazeObj(j);
    }
}


/***/ }),

/***/ "./src/d_mdl/F_new_Walker.ts":
/*!***********************************!*\
  !*** ./src/d_mdl/F_new_Walker.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.new_walker = new_walker;
const C_WndrWalker_1 = __webpack_require__(/*! ./C_WndrWalker */ "./src/d_mdl/C_WndrWalker.ts");
function new_walker(j) {
    var _a;
    if (j === undefined)
        return new C_WndrWalker_1.C_WndrWalker(j);
    switch ((_a = j === null || j === void 0 ? void 0 : j.clname) !== null && _a !== void 0 ? _a : '') {
        case C_WndrWalker_1.C_WndrWalker.constructor.name: new C_WndrWalker_1.C_WndrWalker(j);
    }
    return new C_WndrWalker_1.C_WndrWalker(j);
}


/***/ }),

/***/ "./src/d_mdl/T_Direction.ts":
/*!**********************************!*\
  !*** ./src/d_mdl/T_Direction.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.$DirectionName = exports.T_Direction = void 0;
exports.T_Direction = {
    N: 0,
    E: 1,
    S: 2,
    W: 3,
    X: 99,
    MAX: 3
};
exports.$DirectionName = {
    0: '北',
    1: '東',
    2: '南',
    3: '西',
    99: '謎'
};


/***/ }),

/***/ "./src/d_mdl/T_MzKind.ts":
/*!*******************************!*\
  !*** ./src/d_mdl/T_MzKind.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.T_RvMzKind = exports.T_MzKind = void 0;
exports.T_MzKind = {
    NoDef: 0,
    Floor: 1,
    Unexp: 2,
    Stone: 3,
    Unkwn: 4,
    StrUp: 5,
    StrDn: 6,
    StrUD: 7,
    Empty: 255,
};
exports.T_RvMzKind = {
    0: exports.T_MzKind.NoDef,
    1: exports.T_MzKind.Floor,
    2: exports.T_MzKind.Unexp,
    3: exports.T_MzKind.Stone,
    4: exports.T_MzKind.Unkwn,
    5: exports.T_MzKind.StrUp,
    6: exports.T_MzKind.StrDn,
    7: exports.T_MzKind.StrUD,
    255: exports.T_MzKind.Empty,
};


/***/ }),

/***/ "./src/d_utl/C_UrlOpt.ts":
/*!*******************************!*\
  !*** ./src/d_utl/C_UrlOpt.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_UrlOpt = void 0;
class C_UrlOpt {
    constructor(a) {
        if (typeof a === "undefined") {
            this.v = {};
            return;
        }
        if (typeof a === "string") {
            this.set_from_string(a);
        }
        if (typeof a === "object") {
            this.v = a;
            return;
        }
        this.v = {};
        return;
    }
    get_keys() {
        const key_list = new Array;
        for (var key in this.v) {
            key_list.push(key);
        }
        return key_list;
    }
    get(key) {
        if (key in this.v) {
            if (typeof this.v[key] === "number") {
                return this.v[key].toString();
            }
            if (typeof this.v[key] === "object") {
                return JSON.stringify(this.v[key]);
            }
            return this.v[key];
        }
        else {
            return "";
        }
    }
    set(ukn, val) {
        if (typeof ukn === "string") {
            if (typeof val === "undefined") {
                this.add_from_string(ukn);
                return;
            }
            else if (typeof val === "string") {
                this.v[ukn] = val;
                return;
            }
            else if (typeof val === "number") {
                this.v[ukn] = val;
                return;
            }
            else if (typeof val === "object") {
                this.v[ukn] = val;
                return;
            }
            else {
                this.v[ukn] = "";
                return;
            }
        }
        if (typeof ukn === "object") {
            const attr = ukn;
            for (const item in attr) {
                this.v[item] = attr[item];
            }
            return;
        }
        return;
    }
    isset(key) {
        return (key in this.v);
    }
    remove(key) {
        if (key in this.v) {
            delete this.v[key];
        }
    }
    clear() {
        this.v = {};
    }
    toString() {
        const len = Object.keys(this.v).length;
        if (len < 1)
            return "";
        var str_array = [];
        for (const key in this.v) {
            str_array.push(key + "=" + this.v[key]);
        }
        return str_array.join("&");
    }
    toJSON() {
        return JSON.stringify(this.v);
    }
    toFormData() {
        const len = Object.keys(this.v).length;
        if (len < 1)
            return undefined;
        var form_data = new FormData();
        for (const key in this.v) {
            const value = this.v[key];
            if (typeof value === "string")
                form_data.append(key, value);
            if (typeof value === "object")
                form_data.append(key, JSON.stringify(value));
            else
                form_data.append(key, value.toString());
        }
        return form_data;
    }
    set_from_string(s) {
        this.clear();
        this.add_from_string(s);
    }
    add_from_string(s) {
        const str = s.replace(/^(\??)(.*)$/, '$2');
        const str_array = str.split("&");
        str_array.forEach((item) => {
            const key_value = item.split("=");
            if (key_value.length < 2) {
                this.v[key_value[0]] = '';
            }
            else {
                this.v[key_value[0]] = key_value[1];
            }
        });
    }
}
exports.C_UrlOpt = C_UrlOpt;


/***/ }),

/***/ "./src/d_utl/F_Math.ts":
/*!*****************************!*\
  !*** ./src/d_utl/F_Math.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports._isNum = _isNum;
exports._getNum = _getNum;
exports._round = _round;
exports._ceil = _ceil;
exports._floor = _floor;
exports._min = _min;
exports._max = _max;
function _isNum(numVal) {
    const pattern = /^[-+]?([1-9]\d*|0)(\.\d+)?$/;
    return pattern.test(numVal);
}
function _getNum(numVal) {
    const pattern = /([^0-9])/g;
    const valstr = numVal.replace(pattern, '');
    return Number(valstr);
}
function _round(num, digit) {
    const multiplier = Math.pow(10, digit);
    return Math.round(num * multiplier) / multiplier;
}
function _ceil(num, digit) {
    const multiplier = Math.pow(10, digit);
    return Math.ceil(num * multiplier) / multiplier;
}
function _floor(num, digit) {
    const multiplier = Math.pow(10, digit);
    return Math.floor(num * multiplier) / multiplier;
}
function _min(a) {
    return a.reduce((n1, n2) => Math.min(n1, n2));
}
function _max(a) {
    return a.reduce((n1, n2) => Math.max(n1, n2));
}


/***/ }),

/***/ "./src/d_utl/F_Rand.ts":
/*!*****************************!*\
  !*** ./src/d_utl/F_Rand.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_SeededRand = void 0;
exports._irand = _irand;
exports._igrand = _igrand;
exports._grand = _grand;
exports._inrand = _inrand;
exports._nrand = _nrand;
exports._get_uuid = _get_uuid;
exports._selectItem = _selectItem;
exports._selectItem2 = _selectItem2;
exports._shuffleArray = _shuffleArray;
exports._random_str = _random_str;
exports._random_UpperStr = _random_UpperStr;
exports._random_LowerStr = _random_LowerStr;
exports._random_UpperChar = _random_UpperChar;
exports._random_LowerChar = _random_LowerChar;
exports._random_NumChar = _random_NumChar;
exports._random_Char = _random_Char;
const F_Math_1 = __webpack_require__(/*! ./F_Math */ "./src/d_utl/F_Math.ts");
const frand = () => { return Math.random(); };
function _irand(min = 0, max = 1, rand = frand) {
    const f_rand = Math.floor(rand() * (max - min + 1) + min);
    return (0, F_Math_1._round)(f_rand, 0);
}
function _igrand(min = 0, max = 1, rand = frand) {
    return _irand(min, max, () => { return _grand(0, 1, rand); });
}
function _grand(min = 0, max = 1, rand = frand) {
    return Math.floor(___gaussianRand(rand) * (max - min + 1) + min);
}
function ___gaussianRand(rand = frand) {
    let sum = 0;
    for (let i = 0; i < 6; i += 1) {
        sum += rand();
    }
    return sum / 6;
}
function _inrand(min = 0, max = 1, dd = 3.0, rand = frand) {
    return Math.floor(_nrand(min, max, dd, rand));
}
function _nrand(min = 0.0, max = 1.0, dd = 3.0, rand = frand) {
    const ave = 0.5;
    const a = rand();
    const b = rand();
    let x = ave + _fab(a, b) / (2.0 * dd);
    x = min + x * (max - min);
    x = (0, F_Math_1._max)([min, x]);
    x = (0, F_Math_1._min)([max, x]);
    return x;
}
function _fab(a, b) {
    return Math.sqrt(-2.0 * Math.log(a)) * Math.sin(2.0 * Math.PI * b);
}
function _gab(a, b) {
    return Math.sqrt(-2.0 * Math.log(a)) * Math.cos(2.0 * Math.PI * b);
}
class C_SeededRand {
    constructor(seed) {
        this.seed = seed;
        this.first_seed = seed;
    }
    reset() {
        this.seed = this.first_seed;
    }
    random() {
        this.seed = (this.seed * 9301 + 49297) % 233280;
        return this.seed / 233280.0;
    }
}
exports.C_SeededRand = C_SeededRand;
function _get_uuid(len = 20, rand = frand) {
    const lft = (new Date()).getTime().toString(16);
    const rgt_len = (0, F_Math_1._max)([len - lft.length, 1]);
    const rgt = Math.floor(Math.pow(10, rgt_len) * rand()).toString(16);
    return lft + rgt;
}
function _selectItem(items, rand = frand) {
    var ttl = 0;
    for (let item of items)
        ttl += item.ratio;
    const target = _irand(0, ttl, rand);
    var sum = 0;
    for (const item of items) {
        sum += item.ratio;
        if (target < sum) {
            return item;
        }
    }
    return undefined;
}
function _selectItem2(items, rand = frand) {
    var ttl = 0;
    for (let item of items)
        ttl += item.ratio;
    const target = _irand(0, ttl);
    var sum = 0;
    for (const item of items) {
        sum += item.ratio;
        if (target < sum) {
            return item.key;
        }
    }
    ;
    return items[items.length - 1].key;
}
function _shuffleArray(array, rand = frand) {
    let shuffledArray = [...array];
    for (let i = shuffledArray.length - 1; i > 0; i--) {
        const j = _irand(0, i, rand);
        [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];
    }
    return shuffledArray;
}
function _random_str(length) {
    let str = '';
    for (let i = 0; i < length; i++)
        str += _random_Char();
    return str;
}
function _random_UpperStr(length) {
    let str = '';
    for (let i = 0; i < length; i++)
        str += _random_UpperChar();
    return str;
}
function _random_LowerStr(length) {
    let str = '';
    for (let i = 0; i < length; i++)
        str += _random_LowerChar();
    return str;
}
function _random_UpperChar() {
    const val = _irand(0, 26);
    return String.fromCharCode(65 + val);
}
function _random_LowerChar() {
    const val = _irand(0, 26);
    return String.fromCharCode(95 + val);
}
function _random_NumChar() {
    const val = _irand(0, 9);
    return String.fromCharCode(48 + val);
}
function _random_Char() {
    const val = _irand(0, 61);
    if (val < 26)
        return String.fromCharCode(65 + val);
    if (val < 52)
        return String.fromCharCode(97 + val - 26);
    return String.fromCharCode(48 + val - 52);
}


/***/ }),

/***/ "./src/d_vie/C_DisplayMessage.ts":
/*!***************************************!*\
  !*** ./src/d_vie/C_DisplayMessage.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_DisplayMessage = void 0;
class C_DisplayMessage {
    constructor(con, id = 'client_message') {
        C_DisplayMessage.me = this;
        this.id = id;
        this.div = document.createElement('div');
        if (this.div === null)
            alert('Can not founnd Div#client_message!');
        this.div.setAttribute('id', this.id);
        con.insertBefore(this.div, con.firstChild);
        C_DisplayMessage.me.clear_message();
    }
    static getObj(con = null, id = 'client_message') {
        if (typeof this.me !== "object" || !(this.me instanceof C_DisplayMessage)) {
            if (con === null) {
                con = document.createElement('div');
                document.body.appendChild(con);
            }
            this.me = new C_DisplayMessage(con, id);
        }
        return this.me;
    }
    display_message(mes, fr_color = 'inherit', bg_color = 'inherit') {
        const p = document.createElement('p');
        p.style.setProperty('color', fr_color);
        p.style.setProperty('background-color', bg_color);
        p.innerHTML = mes;
        this.div.insertBefore(p, this.div.firstChild);
    }
    clear_message() {
        while (this.div.firstChild) {
            this.div.removeChild(this.div.firstChild);
        }
        ;
    }
    normal_message(mes) {
        this.display_message(mes);
    }
    notice_message(mes) {
        this.display_message(mes, '#006600', '#ccffcc');
    }
    warning_message(mes) {
        this.display_message(mes, '#ffffff', '#ff0000');
    }
}
exports.C_DisplayMessage = C_DisplayMessage;


/***/ }),

/***/ "./src/d_vie/C_OneLineViewMessage.ts":
/*!*******************************************!*\
  !*** ./src/d_vie/C_OneLineViewMessage.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_OneLineViewMessage = void 0;
class C_OneLineViewMessage {
    constructor(id, parent) {
        var _a;
        (_a = C_OneLineViewMessage.me) !== null && _a !== void 0 ? _a : (C_OneLineViewMessage.me = {});
        C_OneLineViewMessage.me[id] = this;
        try {
            this.p = document.getElementById(id);
        }
        catch (err) {
            this.p = document.createElement('p');
            this.p.id = id;
            parent !== null && parent !== void 0 ? parent : (parent = document.body);
            parent.appendChild(this.p);
        }
        C_OneLineViewMessage.me[id].clear_message();
    }
    static getObj(id, parent) {
        var _a, _b;
        var _c;
        (_a = C_OneLineViewMessage.me) !== null && _a !== void 0 ? _a : (C_OneLineViewMessage.me = {});
        (_b = (_c = this.me)[id]) !== null && _b !== void 0 ? _b : (_c[id] = new C_OneLineViewMessage(id, parent));
        return this.me[id];
    }
    display_message(mes, fr_color = 'inherit', bg_color = 'inherit') {
        this.p.style.setProperty('color', fr_color);
        this.p.style.setProperty('background-color', bg_color);
        this.p.innerHTML = mes;
    }
    clear_message() {
        this.display_message('　');
    }
    normal_message(mes) {
        this.display_message(mes);
    }
    notice_message(mes) {
        this.display_message(mes, '#006600', '#ccffcc');
    }
    warning_message(mes) {
        this.display_message(mes, '#ffffff', '#ff0000');
    }
}
exports.C_OneLineViewMessage = C_OneLineViewMessage;


/***/ }),

/***/ "./src/mai_guld/C_DefaultCtls.ts":
/*!***************************************!*\
  !*** ./src/mai_guld/C_DefaultCtls.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_DefaultCtls = void 0;
class C_DefaultCtls {
    constructor() {
        this.ctls = {};
        this.flgs = {};
        this.u_arr = document.getElementById('u_arr');
        this.d_arr = document.getElementById('d_arr');
        this.l_arr = document.getElementById('l_arr');
        this.r_arr = document.getElementById('r_arr');
        this.y_btn = document.getElementById('y_btn');
        this.n_btn = document.getElementById('n_btn');
        this.s_btn = document.getElementById('s_btn');
        this.r_btn = document.getElementById('r_btn');
        this.y_cp1 = document.getElementById('y_cp1');
        this.n_cp1 = document.getElementById('n_cp1');
        this.s_cp1 = document.getElementById('s_cp1');
        this.r_cp1 = document.getElementById('r_cp1');
        this.u_arr.style.display = 'none';
        this.d_arr.style.display = 'none';
        this.l_arr.style.display = 'none';
        this.r_arr.style.display = 'none';
        this.y_btn.style.display = 'none';
        this.n_btn.style.display = 'none';
        this.s_btn.style.display = 'none';
        this.r_btn.style.display = 'none';
        this.y_cp1.style.display = 'none';
        this.n_cp1.style.display = 'none';
        this.s_cp1.style.display = 'none';
        this.r_cp1.style.display = 'none';
    }
    static getObj() {
        var _a;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = new C_DefaultCtls());
        return this.me;
    }
    clr() {
        this.ctls = {};
        this.flgs = {};
        return true;
    }
    set(name, ctls) {
        try {
            if (typeof name === 'string' && ctls !== undefined) {
                this.ctls[name] = ctls;
                this.flgs[name] = false;
            }
            else {
                const c = name;
                this.ctls[c.name] = c;
                this.flgs[c.name] = false;
            }
            return true;
        }
        catch (err) {
            return false;
        }
    }
    rmv(ctls) {
        try {
            const name = typeof ctls === 'string' ? ctls : ctls.name;
            delete this.ctls[name];
            delete this.flgs[name];
            return true;
        }
        catch (err) {
            return false;
        }
    }
    deact() {
        for (const ii in this.ctls) {
            if (this.ctls[ii].name === undefined)
                continue;
            if (!this._rmv_default_ctls(this.ctls[ii].name))
                return false;
        }
        return true;
    }
    act(ctls) {
        try {
            if (!this.deact())
                return false;
            const name = typeof ctls === 'string' ? ctls : ctls.name;
            return this._add_default_ctls(name);
        }
        catch (err) {
            return false;
        }
    }
    is_act(ctls) {
        var _a;
        try {
            const name = typeof ctls === 'string' ? ctls : ctls.name;
            return (_a = this.flgs[name]) !== null && _a !== void 0 ? _a : false;
        }
        catch (err) {
            return false;
        }
    }
    keys_of_add() {
        const key_list = [];
        for (const name in this.ctls)
            key_list.push(name);
        return key_list;
    }
    keys_of_act() {
        const key_list = [];
        for (const name in this.flgs)
            if (this.flgs[name])
                key_list.push(name);
        return key_list;
    }
    _rmv_default_ctls(name) {
        var _a;
        var _b;
        (_a = (_b = this.flgs)[name]) !== null && _a !== void 0 ? _a : (_b[name] = false);
        if (!this.flgs[name])
            return true;
        this.flgs[name] = false;
        const c = this.ctls[name];
        try {
            if (_c(c === null || c === void 0 ? void 0 : c.do_U))
                this.u_arr.removeEventListener("click", c.do_U, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_D))
                this.d_arr.removeEventListener("click", c.do_D, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_L))
                this.l_arr.removeEventListener("click", c.do_L, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_R))
                this.r_arr.removeEventListener("click", c.do_R, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isOK))
                this.y_btn.removeEventListener("click", c.isOK, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isNG))
                this.n_btn.removeEventListener("click", c.isNG, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isSL))
                this.s_btn.removeEventListener("click", c.isSL, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isRT))
                this.r_btn.removeEventListener("click", c.isRT, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpOK))
                this.y_cp1.removeEventListener("click", c.cpOK, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpNG))
                this.n_cp1.removeEventListener("click", c.cpNG, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpSL))
                this.s_cp1.removeEventListener("click", c.cpSL, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpRT))
                this.r_cp1.removeEventListener("click", c.cpRT, false);
            if ((c === null || c === void 0 ? void 0 : c.keyEvent) !== undefined) {
                window.removeEventListener('keydown', c.keyEvent);
            }
            else {
                window.removeEventListener('keydown', key_press_function);
            }
            this.u_arr.style.display = 'none';
            this.d_arr.style.display = 'none';
            this.l_arr.style.display = 'none';
            this.r_arr.style.display = 'none';
            this.y_btn.style.display = 'none';
            this.n_btn.style.display = 'none';
            this.s_btn.style.display = 'none';
            this.r_btn.style.display = 'none';
            this.y_cp1.style.display = 'none';
            this.n_cp1.style.display = 'none';
            this.s_cp1.style.display = 'none';
            this.r_cp1.style.display = 'none';
        }
        catch (err) {
            alert('Error Occuerd at Remove Default Ctls.');
            alert('' + err);
            return false;
        }
        return true;
    }
    _add_default_ctls(name) {
        var _a;
        var _b;
        (_a = (_b = this.flgs)[name]) !== null && _a !== void 0 ? _a : (_b[name] = false);
        if (this.flgs[name])
            return true;
        this.flgs[name] = true;
        const c = this.ctls[name];
        try {
            if (_c(c === null || c === void 0 ? void 0 : c.do_U))
                this.u_arr.addEventListener("click", c.do_U, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_D))
                this.d_arr.addEventListener("click", c.do_D, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_L))
                this.l_arr.addEventListener("click", c.do_L, false);
            if (_c(c === null || c === void 0 ? void 0 : c.do_R))
                this.r_arr.addEventListener("click", c.do_R, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isOK))
                this.y_btn.addEventListener("click", c.isOK, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isNG))
                this.n_btn.addEventListener("click", c.isNG, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isSL))
                this.s_btn.addEventListener("click", c.isSL, false);
            if (_c(c === null || c === void 0 ? void 0 : c.isRT))
                this.r_btn.addEventListener("click", c.isRT, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpOK))
                this.y_cp1.addEventListener("click", c.cpOK, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpNG))
                this.n_cp1.addEventListener("click", c.cpNG, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpSL))
                this.s_cp1.addEventListener("click", c.cpSL, false);
            if (_c(c === null || c === void 0 ? void 0 : c.cpRT))
                this.r_cp1.addEventListener("click", c.cpRT, false);
            if ((c === null || c === void 0 ? void 0 : c.keyEvent) !== undefined) {
                window.addEventListener('keydown', c.keyEvent);
            }
            else {
                window.addEventListener('keydown', key_press_function);
            }
            this.u_arr.style.display = _c(c === null || c === void 0 ? void 0 : c.do_U) ? 'block' : 'none';
            this.d_arr.style.display = _c(c === null || c === void 0 ? void 0 : c.do_D) ? 'block' : 'none';
            this.l_arr.style.display = _c(c === null || c === void 0 ? void 0 : c.do_L) ? 'block' : 'none';
            this.r_arr.style.display = _c(c === null || c === void 0 ? void 0 : c.do_R) ? 'block' : 'none';
            this.y_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.isOK) ? 'block' : 'none';
            this.n_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.isNG) ? 'block' : 'none';
            this.s_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.isSL) ? 'block' : 'none';
            this.r_btn.style.display = _c(c === null || c === void 0 ? void 0 : c.isRT) ? 'block' : 'none';
            this.y_cp1.style.display = _c(c === null || c === void 0 ? void 0 : c.cpOK) ? 'block' : 'none';
            this.n_cp1.style.display = _c(c === null || c === void 0 ? void 0 : c.cpNG) ? 'block' : 'none';
            this.s_cp1.style.display = _c(c === null || c === void 0 ? void 0 : c.cpSL) ? 'block' : 'none';
            this.r_cp1.style.display = _c(c === null || c === void 0 ? void 0 : c.cpRT) ? 'block' : 'none';
        }
        catch (err) {
            alert('Error Occuerd at Append Default Ctls.');
            alert('' + err);
            return false;
        }
        return true;
    }
}
exports.C_DefaultCtls = C_DefaultCtls;
function _c(c) {
    if (c === undefined)
        return false;
    if (c === null)
        return false;
    return true;
}
function key_press_function(e) {
    var _a, _b, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    const ne = ((_a = e.target) === null || _a === void 0 ? void 0 : _a.value) === undefined;
    switch (e.code) {
        case 'ArrowUp':
        case 'Numpad5':
            e.preventDefault();
            (_b = document.getElementById('u_arr')) === null || _b === void 0 ? void 0 : _b.click();
            break;
        case 'KeyO':
            if (ne)
                (_d = document.getElementById('u_arr')) === null || _d === void 0 ? void 0 : _d.click();
            break;
        case 'ArrowDown':
        case 'Numpad2':
            e.preventDefault();
            (_e = document.getElementById('d_arr')) === null || _e === void 0 ? void 0 : _e.click();
            break;
        case 'KeyL':
            if (ne)
                (_f = document.getElementById('d_arr')) === null || _f === void 0 ? void 0 : _f.click();
            break;
        case 'ArrowLeft':
        case 'Numpad1':
            e.preventDefault();
            (_g = document.getElementById('l_arr')) === null || _g === void 0 ? void 0 : _g.click();
            break;
        case 'KeyK':
            if (ne)
                (_h = document.getElementById('l_arr')) === null || _h === void 0 ? void 0 : _h.click();
            break;
        case 'ArrowRight':
        case 'Numpad3':
            e.preventDefault();
            (_j = document.getElementById('r_arr')) === null || _j === void 0 ? void 0 : _j.click();
            break;
        case 'Semicolon':
            if (ne)
                (_k = document.getElementById('r_arr')) === null || _k === void 0 ? void 0 : _k.click();
            break;
        case 'Enter':
        case 'NumpadEnter':
        case 'F10':
            e.preventDefault();
            if (e.shiftKey)
                (_l = document.getElementById('n_btn')) === null || _l === void 0 ? void 0 : _l.click();
            else
                (_m = document.getElementById('y_btn')) === null || _m === void 0 ? void 0 : _m.click();
            break;
        case 'KeyY':
        case 'KeyP':
        case 'Digit0':
            if (ne)
                (_o = document.getElementById('y_btn')) === null || _o === void 0 ? void 0 : _o.click();
            break;
        case 'F1':
        case 'Numpad0':
        case 'NumpadAdd':
            e.preventDefault();
            (_p = document.getElementById('n_btn')) === null || _p === void 0 ? void 0 : _p.click();
            break;
        case 'KeyN':
        case 'KeyI':
        case 'Digit8':
            if (ne)
                (_q = document.getElementById('n_btn')) === null || _q === void 0 ? void 0 : _q.click();
            break;
        case 'F7':
        case 'Numpad7':
            e.preventDefault();
            (_r = document.getElementById('s_btn')) === null || _r === void 0 ? void 0 : _r.click();
            break;
        case 'Comma':
        case 'KeyS':
            if (ne)
                (_s = document.getElementById('s_btn')) === null || _s === void 0 ? void 0 : _s.click();
            break;
        case 'F3':
        case 'Numpad8':
            e.preventDefault();
            (_t = document.getElementById('r_btn')) === null || _t === void 0 ? void 0 : _t.click();
            break;
        case 'KeyR':
        case 'Period':
            if (ne)
                (_u = document.getElementById('r_btn')) === null || _u === void 0 ? void 0 : _u.click();
            break;
    }
}


/***/ }),

/***/ "./src/mai_guld/C_SwitchView.ts":
/*!**************************************!*\
  !*** ./src/mai_guld/C_SwitchView.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.C_SwitchView = exports.T_ViewMode = void 0;
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
exports.T_ViewMode = {
    Menu: 'menu',
    Hres: 'hres',
    Tmpl: 'tmpl',
    Shop: 'shop',
    LdSv: 'ldsv',
    ToMz: 'tomz',
};
class C_SwitchView {
    Menu() { return exports.T_ViewMode.Menu; }
    Hres() { return exports.T_ViewMode.Hres; }
    Tmpl() { return exports.T_ViewMode.Tmpl; }
    Shop() { return exports.T_ViewMode.Shop; }
    LdSv() { return exports.T_ViewMode.LdSv; }
    ToMz() { return exports.T_ViewMode.ToMz; }
    constructor() {
        C_SwitchView.all_class = Object.values(exports.T_ViewMode);
        C_SwitchView.article = {};
        try {
            C_SwitchView.body = document.body;
            C_SwitchView.article.mn_l = document.getElementById('guld_menu_list_pane');
            C_SwitchView.article.hr_l = document.getElementById('guld_hres_list_pane');
            C_SwitchView.article.hr_d = document.getElementById('guld_hres_data_pane');
            C_SwitchView.article.tm_l = document.getElementById('guld_tmpl_list_pane');
            C_SwitchView.article.tm_d = document.getElementById('guld_tmpl_data_pane');
            C_SwitchView.article.sp_l = document.getElementById('guld_shop_list_pane');
            C_SwitchView.article.sp_d = document.getElementById('guld_shop_data_pane');
            C_SwitchView.article.ls_l = document.getElementById('guld_ldsv_list_pane');
            C_SwitchView.article.ls_d = document.getElementById('guld_ldsv_data_pane');
            C_SwitchView.article.mz_l = document.getElementById('guld_tomz_maze_pane');
            C_SwitchView.article.mp_l = document.getElementById('guld_tomz_mvpt_pane');
            C_SwitchView.article.ctls = document.getElementById('guld_ctls_pane');
            C_SwitchView.article.mssg = document.getElementById('sytm_logs_pane');
        }
        catch (err) {
            (0, global_1._alert)('Layout Get Error: ' + err);
        }
        this.view(this.Menu());
    }
    static getObj() {
        var _a;
        (_a = this.me) !== null && _a !== void 0 ? _a : (this.me = new C_SwitchView());
        return this.me;
    }
    view(mode) {
        this.__set_class(mode);
        return true;
    }
    __set_class(c) {
        var _a, _b, _c, _d;
        try {
            (_a = C_SwitchView.body) === null || _a === void 0 ? void 0 : _a.classList.remove(...C_SwitchView.all_class);
            (_b = C_SwitchView.body) === null || _b === void 0 ? void 0 : _b.classList.add(c);
            for (const ii in C_SwitchView.article) {
                if (C_SwitchView.article[ii] === null)
                    continue;
                (_c = C_SwitchView.article[ii]) === null || _c === void 0 ? void 0 : _c.classList.remove(...C_SwitchView.all_class);
                (_d = C_SwitchView.article[ii]) === null || _d === void 0 ? void 0 : _d.classList.add(c);
            }
        }
        catch (err) {
            (0, global_1._alert)('Layout Set Error: ' + err);
        }
    }
}
exports.C_SwitchView = C_SwitchView;


/***/ }),

/***/ "./src/mai_guld/F_default_menu.ts":
/*!****************************************!*\
  !*** ./src/mai_guld/F_default_menu.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hide_all_menu = hide_all_menu;
exports.init_menu = init_menu;
const F_guild_menu_1 = __webpack_require__(/*! ./F_guild_menu */ "./src/mai_guld/F_guild_menu.ts");
const F_hres_menu_1 = __webpack_require__(/*! ./F_hres_menu */ "./src/mai_guld/F_hres_menu.ts");
const F_save_menu_1 = __webpack_require__(/*! ./F_save_menu */ "./src/mai_guld/F_save_menu.ts");
const F_tmpl_menu_1 = __webpack_require__(/*! ./F_tmpl_menu */ "./src/mai_guld/F_tmpl_menu.ts");
const F_tomz_menu_1 = __webpack_require__(/*! ./F_tomz_menu */ "./src/mai_guld/F_tomz_menu.ts");
const global_for_guild_1 = __webpack_require__(/*! ./global_for_guild */ "./src/mai_guld/global_for_guild.ts");
function hide_all_menu() {
    let div;
    try {
        div = document.getElementById('gld_view_switch');
    }
    catch (err) {
        return;
    }
    if (div === null)
        return;
    const menues = div.children;
    try {
        for (var i = 0; i < menues.length; i++) {
            menues.item(i).style.display = 'none';
        }
        global_for_guild_1.g_ctls.deact();
        return;
    }
    catch (err) { }
}
function init_menu() {
    global_for_guild_1.g_ctls.deact();
    (0, F_guild_menu_1.init_guld_menu)();
    (0, F_hres_menu_1.init_hres_menu)();
    (0, F_tmpl_menu_1.init_tmpl_menu)();
    (0, F_save_menu_1.init_load_menu)();
    (0, F_save_menu_1.init_save_menu)();
    (0, F_tomz_menu_1.init_tomz_menu)();
    (0, F_guild_menu_1.act_guld_menu)();
}


/***/ }),

/***/ "./src/mai_guld/F_guild_menu.ts":
/*!**************************************!*\
  !*** ./src/mai_guld/F_guild_menu.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_guld_menu = init_guld_menu;
exports.act_guld_menu = act_guld_menu;
const C_CtlCursor_1 = __webpack_require__(/*! ../d_ctl/C_CtlCursor */ "./src/d_ctl/C_CtlCursor.ts");
const F_save_menu_1 = __webpack_require__(/*! ./F_save_menu */ "./src/mai_guld/F_save_menu.ts");
const F_hres_menu_1 = __webpack_require__(/*! ./F_hres_menu */ "./src/mai_guld/F_hres_menu.ts");
const F_tomz_menu_1 = __webpack_require__(/*! ./F_tomz_menu */ "./src/mai_guld/F_tomz_menu.ts");
const global_for_guild_1 = __webpack_require__(/*! ./global_for_guild */ "./src/mai_guld/global_for_guild.ts");
const F_tmpl_menu_1 = __webpack_require__(/*! ./F_tmpl_menu */ "./src/mai_guld/F_tmpl_menu.ts");
let menu_list;
let menu_crsr;
let idx_guld = 0;
let menu_fnc;
function init_guld_menu() { }
function act_guld_menu() {
    if (!init_all())
        return;
    update_all();
    global_for_guild_1.g_vsw.view(global_for_guild_1.g_vsw.Menu());
}
function init_all() {
    if (!init_data_list())
        return false;
    if (!init_view())
        return false;
    if (!init_ctls())
        return false;
    return true;
}
function update_all() {
    update_data_list();
    update_view(idx_guld);
}
function init_data_list() { return true; }
function update_data_list() { }
function exist_data() {
    return (idx_guld >= 0) && (idx_guld < menu_list.children.length);
}
function init_view() {
    if (!init_DOM())
        return false;
    if (!init_menu())
        return false;
    return true;
}
function init_DOM() {
    try {
        menu_list = document.getElementById('guld_menu_list');
    }
    catch (err) {
        alert('Guild Menu Get Element Error. ' + err);
        return false;
    }
    if (menu_list === null)
        return false;
    return true;
}
function init_menu() {
    clear_view();
    menu_fnc = {};
    for (let ii = 0; ii < menu_list.children.length; ii++) {
        const menu_item = menu_list.children.item(ii);
        if (menu_item === null)
            continue;
        menu_fnc[menu_item.id] = ii;
        menu_item.addEventListener("click", _OK_Fnc, false);
    }
    menu_crsr = C_CtlCursor_1.C_CtlCursor.getObj(menu_list);
    idx_guld = 0;
    menu_crsr.set_pos(idx_guld);
    return menu_crsr.leng() > 0;
}
function _OK_Fnc(e) {
    idx_guld = menu_fnc[this.id];
    isOK();
}
function update_view(idx) {
}
function clear_view() {
    idx_guld = 0;
}
function init_ctls() {
    if (!init_default_ctls())
        return false;
    return true;
}
function init_default_ctls() {
    try {
        global_for_guild_1.g_ctls.deact();
        if (!global_for_guild_1.g_ctls.set(guld_ctls_nor))
            return false;
        if (!global_for_guild_1.g_ctls.act(guld_ctls_nor))
            return false;
        return true;
    }
    catch (err) {
        return false;
    }
}
const guld_ctls_nor = {
    name: 'guld_nor',
    do_U: do_U,
    do_D: do_D,
    isOK: isOK,
};
function do_U() {
    display_default_message();
    idx_guld = menu_crsr.pos_U();
}
function do_D() {
    display_default_message();
    idx_guld = menu_crsr.pos_D();
}
function isOK() {
    if (!exist_data())
        return;
    display_default_message();
    switch (menu_list.children.item(idx_guld).id) {
        case 'guld_hres':
            global_for_guild_1.g_ctls.deact();
            (0, F_hres_menu_1.act_hres_menu)();
            break;
        case 'guld_tmpl':
            global_for_guild_1.g_ctls.deact();
            (0, F_tmpl_menu_1.act_tmpl_menu)();
            break;
        case 'guld_shop':
            break;
        case 'guld_load':
            global_for_guild_1.g_ctls.deact();
            (0, F_save_menu_1.act_load_menu)();
            break;
        case 'guld_save':
            global_for_guild_1.g_ctls.deact();
            (0, F_save_menu_1.act_save_menu)();
            break;
        case 'guld_tomz':
            global_for_guild_1.g_ctls.deact();
            (0, F_tomz_menu_1.act_tomz_menu)();
            break;
    }
}
function display_default_message() {
    global_for_guild_1.g_mvm.clear_message();
}


/***/ }),

/***/ "./src/mai_guld/F_hero_menu.ts":
/*!*************************************!*\
  !*** ./src/mai_guld/F_hero_menu.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hero_info_create = hero_info_create;
exports.hero_info_clear = hero_info_clear;
exports.hero_info_form_set = hero_info_form_set;
function hero_info_create(form) {
    var detail = {};
    hero_info_clear(form);
    detail = create_info_li(form, detail, 'name');
    detail = create_info_li(form, detail, 'sex');
    detail = create_info_li(form, detail, 'age');
    detail = create_info_li(form, detail, 'gold');
    detail = create_info_li(form, detail, 'state');
    detail = create_info_li(form, detail, 'lv');
    detail = create_info_li(form, detail, 'exp');
    detail = create_info_li(form, detail, 'skp');
    detail = create_info_li(form, detail, 'hp');
    detail = create_info_li(form, detail, 'mp');
    detail = create_info_li(form, detail, 'atk_p');
    detail = create_info_li(form, detail, 'def_p');
    detail = create_info_li(form, detail, 'quc_p');
    detail = create_info_li(form, detail, 'cnc_p');
    detail = create_info_li(form, detail, 'str_p');
    detail = create_info_li(form, detail, 'pwr_p');
    detail = create_info_li(form, detail, 'vit_p');
    detail = create_info_li(form, detail, 'dex_p');
    detail = create_info_li(form, detail, 'agi_p');
    detail = create_info_li(form, detail, 'tec_p');
    detail = create_info_li(form, detail, 'luk_p');
    detail = create_info_li(form, detail, 'atk_m');
    detail = create_info_li(form, detail, 'def_m');
    detail = create_info_li(form, detail, 'quc_m');
    detail = create_info_li(form, detail, 'cnc_m');
    detail = create_info_li(form, detail, 'str_m');
    detail = create_info_li(form, detail, 'pwr_m');
    detail = create_info_li(form, detail, 'vit_m');
    detail = create_info_li(form, detail, 'dex_m');
    detail = create_info_li(form, detail, 'agi_m');
    detail = create_info_li(form, detail, 'tec_m');
    detail = create_info_li(form, detail, 'luk_m');
    return detail;
}
function hero_info_clear(form) {
    while (form.firstChild !== null)
        form.removeChild(form.firstChild);
}
function create_info_li(form, detail, key) {
    const id = '_hr_' + key;
    const li = document.createElement('li');
    li.id = id;
    if (li !== undefined) {
        form.appendChild(li);
        detail[key] = li;
    }
    return detail;
}
function hero_info_form_clr(detail) {
    for (let key in detail)
        detail[key].innerText = '';
}
function hero_info_form_set(hres, detail, idx) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128, _129, _130, _131, _132, _133, _134, _135, _136;
    hero_info_form_clr(detail);
    const hero = hres[idx].encode();
    detail['name'].innerHTML = '名　前:<br />' + ((_a = hero['name']) !== null && _a !== void 0 ? _a : '???');
    detail['sex'].innerHTML = '性　別:<br />' + ((hero['sex'] != 0) ? '♂' : '♀');
    detail['age'].innerHTML = '年　齢:<br />' + (((_c = (_b = hero['age']) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : '???')) + ' 歳';
    detail['state'].innerHTML = '状　態:<br />' + ((hero['state'] == 0) ? '正常' : '異常');
    detail['lv'].innerHTML = 'レベル:<br />' + ((_e = (_d = hero['lv']) === null || _d === void 0 ? void 0 : _d.toString()) !== null && _e !== void 0 ? _e : '???');
    detail['gold'].innerHTML = '所持金:<br />' + ((_g = (_f = hero['gold']) === null || _f === void 0 ? void 0 : _f.toString()) !== null && _g !== void 0 ? _g : '???') + ' Gold';
    detail['exp'].innerHTML = '経験値:<br />' + ((_l = (_k = (_j = (_h = hero.val) === null || _h === void 0 ? void 0 : _h['exp']) === null || _j === void 0 ? void 0 : _j.now) === null || _k === void 0 ? void 0 : _k.toString()) !== null && _l !== void 0 ? _l : '???');
    detail['skp'].innerHTML = 'ｽｷﾙ値 :<br />' + ((_q = (_p = (_o = (_m = hero.val) === null || _m === void 0 ? void 0 : _m['skp']) === null || _o === void 0 ? void 0 : _o.now) === null || _p === void 0 ? void 0 : _p.toString()) !== null && _q !== void 0 ? _q : '???');
    detail['hp'].innerHTML = 'Ｈ　Ｐ:<br />' + (((_s = (_r = hero.abi_p_now) === null || _r === void 0 ? void 0 : _r['xp']) !== null && _s !== void 0 ? _s : 0) - ((_u = (_t = hero.abi_p_now) === null || _t === void 0 ? void 0 : _t['xd']) !== null && _u !== void 0 ? _u : 0)).toString() + ' / ' + ((_x = (_w = (_v = hero.abi_p_now) === null || _v === void 0 ? void 0 : _v['xp']) === null || _w === void 0 ? void 0 : _w.toString()) !== null && _x !== void 0 ? _x : '???');
    detail['mp'].innerHTML = 'Ｍ　Ｐ:<br />' + (((_z = (_y = hero.abi_m_now) === null || _y === void 0 ? void 0 : _y['xp']) !== null && _z !== void 0 ? _z : 0) - ((_1 = (_0 = hero.abi_m_now) === null || _0 === void 0 ? void 0 : _0['xd']) !== null && _1 !== void 0 ? _1 : 0)).toString() + ' / ' + ((_4 = (_3 = (_2 = hero.abi_m_now) === null || _2 === void 0 ? void 0 : _2['xp']) === null || _3 === void 0 ? void 0 : _3.toString()) !== null && _4 !== void 0 ? _4 : '???');
    detail['atk_p'].innerHTML = '攻撃力(物理):<br />' + ((_7 = (_6 = (_5 = hero.abi_p_now) === null || _5 === void 0 ? void 0 : _5['atk']) === null || _6 === void 0 ? void 0 : _6.toString()) !== null && _7 !== void 0 ? _7 : '???') + ' / ' + ((_10 = (_9 = (_8 = hero.abi_p_ttl) === null || _8 === void 0 ? void 0 : _8['atk']) === null || _9 === void 0 ? void 0 : _9.toString()) !== null && _10 !== void 0 ? _10 : '???');
    detail['def_p'].innerHTML = '防御力(物理):<br />' + ((_13 = (_12 = (_11 = hero.abi_p_now) === null || _11 === void 0 ? void 0 : _11['def']) === null || _12 === void 0 ? void 0 : _12.toString()) !== null && _13 !== void 0 ? _13 : '???') + ' / ' + ((_16 = (_15 = (_14 = hero.abi_p_ttl) === null || _14 === void 0 ? void 0 : _14['def']) === null || _15 === void 0 ? void 0 : _15.toString()) !== null && _16 !== void 0 ? _16 : '???');
    detail['quc_p'].innerHTML = '俊敏力(物理):<br />' + ((_19 = (_18 = (_17 = hero.abi_p_now) === null || _17 === void 0 ? void 0 : _17['quc']) === null || _18 === void 0 ? void 0 : _18.toString()) !== null && _19 !== void 0 ? _19 : '???') + ' / ' + ((_22 = (_21 = (_20 = hero.abi_p_ttl) === null || _20 === void 0 ? void 0 : _20['quc']) === null || _21 === void 0 ? void 0 : _21.toString()) !== null && _22 !== void 0 ? _22 : '???');
    detail['cnc_p'].innerHTML = '目敏さ(物理):<br />' + ((_25 = (_24 = (_23 = hero.abi_p_now) === null || _23 === void 0 ? void 0 : _23['cnc']) === null || _24 === void 0 ? void 0 : _24.toString()) !== null && _25 !== void 0 ? _25 : '???') + ' / ' + ((_28 = (_27 = (_26 = hero.abi_p_ttl) === null || _26 === void 0 ? void 0 : _26['cnc']) === null || _27 === void 0 ? void 0 : _27.toString()) !== null && _28 !== void 0 ? _28 : '???');
    detail['str_p'].innerHTML = 'ＳＴＲ(物理):<br />' + ((_31 = (_30 = (_29 = hero.abi_p_now) === null || _29 === void 0 ? void 0 : _29['str']) === null || _30 === void 0 ? void 0 : _30.toString()) !== null && _31 !== void 0 ? _31 : '???') + ' / ' + ((_34 = (_33 = (_32 = hero.abi_p_ttl) === null || _32 === void 0 ? void 0 : _32['str']) === null || _33 === void 0 ? void 0 : _33.toString()) !== null && _34 !== void 0 ? _34 : '???');
    detail['pwr_p'].innerHTML = 'ＰＷＲ(物理):<br />' + ((_37 = (_36 = (_35 = hero.abi_p_now) === null || _35 === void 0 ? void 0 : _35['pwr']) === null || _36 === void 0 ? void 0 : _36.toString()) !== null && _37 !== void 0 ? _37 : '???') + ' / ' + ((_40 = (_39 = (_38 = hero.abi_p_ttl) === null || _38 === void 0 ? void 0 : _38['pwr']) === null || _39 === void 0 ? void 0 : _39.toString()) !== null && _40 !== void 0 ? _40 : '???');
    detail['vit_p'].innerHTML = 'ＶＩＴ(物理):<br />' + ((_43 = (_42 = (_41 = hero.abi_p_now) === null || _41 === void 0 ? void 0 : _41['vit']) === null || _42 === void 0 ? void 0 : _42.toString()) !== null && _43 !== void 0 ? _43 : '???') + ' / ' + ((_46 = (_45 = (_44 = hero.abi_p_ttl) === null || _44 === void 0 ? void 0 : _44['vit']) === null || _45 === void 0 ? void 0 : _45.toString()) !== null && _46 !== void 0 ? _46 : '???');
    detail['dex_p'].innerHTML = 'ＤＥＸ(物理):<br />' + ((_49 = (_48 = (_47 = hero.abi_p_now) === null || _47 === void 0 ? void 0 : _47['dex']) === null || _48 === void 0 ? void 0 : _48.toString()) !== null && _49 !== void 0 ? _49 : '???') + ' / ' + ((_52 = (_51 = (_50 = hero.abi_p_ttl) === null || _50 === void 0 ? void 0 : _50['dex']) === null || _51 === void 0 ? void 0 : _51.toString()) !== null && _52 !== void 0 ? _52 : '???');
    detail['agi_p'].innerHTML = 'ＡＧＩ(物理):<br />' + ((_55 = (_54 = (_53 = hero.abi_p_now) === null || _53 === void 0 ? void 0 : _53['agi']) === null || _54 === void 0 ? void 0 : _54.toString()) !== null && _55 !== void 0 ? _55 : '???') + ' / ' + ((_58 = (_57 = (_56 = hero.abi_p_ttl) === null || _56 === void 0 ? void 0 : _56['agi']) === null || _57 === void 0 ? void 0 : _57.toString()) !== null && _58 !== void 0 ? _58 : '???');
    detail['tec_p'].innerHTML = 'ＴＥＣ(物理):<br />' + ((_61 = (_60 = (_59 = hero.abi_p_now) === null || _59 === void 0 ? void 0 : _59['tec']) === null || _60 === void 0 ? void 0 : _60.toString()) !== null && _61 !== void 0 ? _61 : '???') + ' / ' + ((_64 = (_63 = (_62 = hero.abi_p_ttl) === null || _62 === void 0 ? void 0 : _62['tec']) === null || _63 === void 0 ? void 0 : _63.toString()) !== null && _64 !== void 0 ? _64 : '???');
    detail['luk_p'].innerHTML = 'ＬＵＫ(物理):<br />' + ((_67 = (_66 = (_65 = hero.abi_p_now) === null || _65 === void 0 ? void 0 : _65['luk']) === null || _66 === void 0 ? void 0 : _66.toString()) !== null && _67 !== void 0 ? _67 : '???') + ' / ' + ((_70 = (_69 = (_68 = hero.abi_p_ttl) === null || _68 === void 0 ? void 0 : _68['luk']) === null || _69 === void 0 ? void 0 : _69.toString()) !== null && _70 !== void 0 ? _70 : '???');
    detail['atk_m'].innerHTML = '攻撃力(魔法):<br />' + ((_73 = (_72 = (_71 = hero.abi_m_now) === null || _71 === void 0 ? void 0 : _71['atk']) === null || _72 === void 0 ? void 0 : _72.toString()) !== null && _73 !== void 0 ? _73 : '???') + ' / ' + ((_76 = (_75 = (_74 = hero.abi_m_ttl) === null || _74 === void 0 ? void 0 : _74['atk']) === null || _75 === void 0 ? void 0 : _75.toString()) !== null && _76 !== void 0 ? _76 : '???');
    detail['def_m'].innerHTML = '防御力(魔法):<br />' + ((_79 = (_78 = (_77 = hero.abi_m_now) === null || _77 === void 0 ? void 0 : _77['def']) === null || _78 === void 0 ? void 0 : _78.toString()) !== null && _79 !== void 0 ? _79 : '???') + ' / ' + ((_82 = (_81 = (_80 = hero.abi_m_ttl) === null || _80 === void 0 ? void 0 : _80['def']) === null || _81 === void 0 ? void 0 : _81.toString()) !== null && _82 !== void 0 ? _82 : '???');
    detail['quc_m'].innerHTML = '俊敏力(魔法):<br />' + ((_85 = (_84 = (_83 = hero.abi_m_now) === null || _83 === void 0 ? void 0 : _83['quc']) === null || _84 === void 0 ? void 0 : _84.toString()) !== null && _85 !== void 0 ? _85 : '???') + ' / ' + ((_88 = (_87 = (_86 = hero.abi_m_ttl) === null || _86 === void 0 ? void 0 : _86['quc']) === null || _87 === void 0 ? void 0 : _87.toString()) !== null && _88 !== void 0 ? _88 : '???');
    detail['cnc_m'].innerHTML = '目敏さ(魔法):<br />' + ((_91 = (_90 = (_89 = hero.abi_m_now) === null || _89 === void 0 ? void 0 : _89['cnc']) === null || _90 === void 0 ? void 0 : _90.toString()) !== null && _91 !== void 0 ? _91 : '???') + ' / ' + ((_94 = (_93 = (_92 = hero.abi_m_ttl) === null || _92 === void 0 ? void 0 : _92['cnc']) === null || _93 === void 0 ? void 0 : _93.toString()) !== null && _94 !== void 0 ? _94 : '???');
    detail['str_m'].innerHTML = 'ＳＴＲ(魔法):<br />' + ((_97 = (_96 = (_95 = hero.abi_m_now) === null || _95 === void 0 ? void 0 : _95['str']) === null || _96 === void 0 ? void 0 : _96.toString()) !== null && _97 !== void 0 ? _97 : '???') + ' / ' + ((_100 = (_99 = (_98 = hero.abi_m_ttl) === null || _98 === void 0 ? void 0 : _98['str']) === null || _99 === void 0 ? void 0 : _99.toString()) !== null && _100 !== void 0 ? _100 : '???');
    detail['pwr_m'].innerHTML = 'ＰＷＲ(魔法):<br />' + ((_103 = (_102 = (_101 = hero.abi_m_now) === null || _101 === void 0 ? void 0 : _101['pwr']) === null || _102 === void 0 ? void 0 : _102.toString()) !== null && _103 !== void 0 ? _103 : '???') + ' / ' + ((_106 = (_105 = (_104 = hero.abi_m_ttl) === null || _104 === void 0 ? void 0 : _104['pwr']) === null || _105 === void 0 ? void 0 : _105.toString()) !== null && _106 !== void 0 ? _106 : '???');
    detail['vit_m'].innerHTML = 'ＶＩＴ(魔法):<br />' + ((_109 = (_108 = (_107 = hero.abi_m_now) === null || _107 === void 0 ? void 0 : _107['vit']) === null || _108 === void 0 ? void 0 : _108.toString()) !== null && _109 !== void 0 ? _109 : '???') + ' / ' + ((_112 = (_111 = (_110 = hero.abi_m_ttl) === null || _110 === void 0 ? void 0 : _110['vit']) === null || _111 === void 0 ? void 0 : _111.toString()) !== null && _112 !== void 0 ? _112 : '???');
    detail['dex_m'].innerHTML = 'ＤＥＸ(魔法):<br />' + ((_115 = (_114 = (_113 = hero.abi_m_now) === null || _113 === void 0 ? void 0 : _113['dex']) === null || _114 === void 0 ? void 0 : _114.toString()) !== null && _115 !== void 0 ? _115 : '???') + ' / ' + ((_118 = (_117 = (_116 = hero.abi_m_ttl) === null || _116 === void 0 ? void 0 : _116['dex']) === null || _117 === void 0 ? void 0 : _117.toString()) !== null && _118 !== void 0 ? _118 : '???');
    detail['agi_m'].innerHTML = 'ＡＧＩ(魔法):<br />' + ((_121 = (_120 = (_119 = hero.abi_m_now) === null || _119 === void 0 ? void 0 : _119['agi']) === null || _120 === void 0 ? void 0 : _120.toString()) !== null && _121 !== void 0 ? _121 : '???') + ' / ' + ((_124 = (_123 = (_122 = hero.abi_m_ttl) === null || _122 === void 0 ? void 0 : _122['agi']) === null || _123 === void 0 ? void 0 : _123.toString()) !== null && _124 !== void 0 ? _124 : '???');
    detail['tec_m'].innerHTML = 'ＴＥＣ(魔法):<br />' + ((_127 = (_126 = (_125 = hero.abi_m_now) === null || _125 === void 0 ? void 0 : _125['tec']) === null || _126 === void 0 ? void 0 : _126.toString()) !== null && _127 !== void 0 ? _127 : '???') + ' / ' + ((_130 = (_129 = (_128 = hero.abi_m_ttl) === null || _128 === void 0 ? void 0 : _128['tec']) === null || _129 === void 0 ? void 0 : _129.toString()) !== null && _130 !== void 0 ? _130 : '???');
    detail['luk_m'].innerHTML = 'ＬＵＫ(魔法):<br />' + ((_133 = (_132 = (_131 = hero.abi_m_now) === null || _131 === void 0 ? void 0 : _131['luk']) === null || _132 === void 0 ? void 0 : _132.toString()) !== null && _133 !== void 0 ? _133 : '???') + ' / ' + ((_136 = (_135 = (_134 = hero.abi_m_ttl) === null || _134 === void 0 ? void 0 : _134['luk']) === null || _135 === void 0 ? void 0 : _135.toString()) !== null && _136 !== void 0 ? _136 : '???');
}


/***/ }),

/***/ "./src/mai_guld/F_hres_menu.ts":
/*!*************************************!*\
  !*** ./src/mai_guld/F_hres_menu.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_hres_menu = init_hres_menu;
exports.act_hres_menu = act_hres_menu;
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const C_Hero_1 = __webpack_require__(/*! ../d_mdl/C_Hero */ "./src/d_mdl/C_Hero.ts");
const C_CtlCursor_1 = __webpack_require__(/*! ../d_ctl/C_CtlCursor */ "./src/d_ctl/C_CtlCursor.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_guild_menu_1 = __webpack_require__(/*! ./F_guild_menu */ "./src/mai_guld/F_guild_menu.ts");
const F_hero_menu_1 = __webpack_require__(/*! ./F_hero_menu */ "./src/mai_guld/F_hero_menu.ts");
const global_for_guild_1 = __webpack_require__(/*! ./global_for_guild */ "./src/mai_guld/global_for_guild.ts");
let dom_team_fields;
let dom_team_list;
let dom_guld_fields;
let dom_guld_list;
let dom_appd_fields;
let dom_appd_list;
let dom_menu_fields;
let dom_menu_list;
let dom_inpt_fields;
let dom_inpt_list;
let dom_hero_fields;
let dom_hero_detail;
let team_list;
let guld_list;
let appd_list;
let hero_detail;
let new_hres = [];
let menu_list_for_team;
let menu_list_for_guld;
let menu_list_for_appd;
let inpt_name_list;
const T_TGA_mode = {
    Hide: 0,
    Team: 1,
    Guld: 2,
    Appd: 3,
};
let TGA_mode;
const T_SubView = {
    Hide: 0,
    Team: 1,
    Guld: 2,
    Appd: 3,
    Menu: 5,
    MnCk: 6,
    IpNm: 7,
    IpCk: 8,
};
let cursor;
let cursor_Hide;
let cursor_Team;
let cursor_Guld;
let cursor_Appd;
let cursor_Menu;
let mode = 'view';
function init_hres_menu() {
    init_all();
    return;
}
function act_hres_menu() {
    mode = 'view';
    update_all().then(() => {
        if (exist_data()) {
            global_for_guild_1.g_ctls.act(ctls_hres_nor);
            global_for_guild_1.g_vsw.view(global_for_guild_1.g_vsw.Hres());
            display_default_message();
        }
        else {
            (0, F_guild_menu_1.act_guld_menu)();
        }
    });
    return;
}
function exist_data() {
    return exist_team() || exist_guld() || exist_appd();
}
function init_all() {
    return __awaiter(this, void 0, void 0, function* () {
        mode = 'view';
        if (!init_data())
            return false;
        if (!init_view())
            return false;
        if (!init_ctls())
            return false;
        return true;
    });
}
function update_all() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield update_data_list().then(() => {
            start_TGA();
            update_view();
            update_ctls();
        });
    });
}
function start_TGA() {
    if (exist_team()) {
        TGA_mode = T_TGA_mode.Team;
    }
    else if (exist_guld()) {
        TGA_mode = T_TGA_mode.Guld;
    }
    else if (exist_appd()) {
        TGA_mode = T_TGA_mode.Appd;
    }
    else {
        TGA_mode = T_TGA_mode.Hide;
    }
    return true;
}
function init_data() {
    if (!init_team_list())
        return false;
    if (!init_guld_list())
        return false;
    if (!init_appd_list())
        return false;
    if (!init_menu_list())
        return false;
    return true;
}
function init_team_list() {
    team_list = [];
    return true;
}
function init_guld_list() {
    guld_list = [];
    return true;
}
function init_appd_list() {
    appd_list = [];
    return true;
}
function init_menu_list() {
    menu_list_for_team = [
        { id: 'name', fnc: _go_ipnm, title: '名前を変える' },
        { id: 'leav', fnc: _go_leav, title: 'チームから外す' },
    ];
    menu_list_for_guld = [
        { id: 'name', fnc: _go_ipnm, title: '名前を変える' },
        { id: 'join', fnc: _go_join, title: 'チームに入れる' },
        { id: 'fire', fnc: _go_fire, title: 'ギルドをクビにする' },
    ];
    menu_list_for_appd = [
        { id: 'name', fnc: _go_ipnm, title: '名前を変える' },
        { id: 'adpt', fnc: _go_adpt, title: 'ギルドに採用する' },
        { id: 'away', fnc: _go_away, title: '追い返す！' },
    ];
    return true;
}
function _go_ipnm() {
    subview_act(T_SubView.IpNm);
    mode = 'ipnm';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_hres_ipnm);
    inpt_name_list['hres_name_li'].input.focus({ preventScroll: false });
}
function _go_leav() {
    if (!exist_team())
        return;
    if (max_of_guld()) {
        global_for_guild_1.g_mvm.notice_message('ギルドが満員です。誰かクビにしてください');
        return;
    }
    subview_act(T_SubView.MnCk);
    mode = 'leav';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_hres_leav);
}
function _go_join() {
    if (!exist_guld())
        return;
    if (max_of_team()) {
        global_for_guild_1.g_mvm.notice_message('チームが満員です。誰か外してください');
        return;
    }
    subview_act(T_SubView.MnCk);
    mode = 'join';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_hres_join);
}
function _go_fire() {
    if (!exist_guld())
        return;
    subview_act(T_SubView.MnCk);
    mode = 'fire';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_hres_fire);
}
function _go_adpt() {
    if (!exist_appd())
        return;
    if (max_of_guld()) {
        global_for_guild_1.g_mvm.notice_message('ギルドが満員です。誰かクビにしてください');
        return;
    }
    subview_act(T_SubView.MnCk);
    mode = 'adpt';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_hres_adpt);
}
function _go_away() {
    if (!exist_appd())
        return;
    subview_act(T_SubView.MnCk);
    mode = 'away';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_hres_away);
}
function update_data_list() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield update_appd_list().then(() => {
            update_team_list();
            update_guld_list();
            update_menu_list();
        });
    });
}
function update_team_list() {
    team_list = [];
    for (let hero of global_for_guild_1.g_team.hres())
        team_list.push(hero);
}
function exist_team() {
    return team_list.length > 0;
}
function max_of_team() {
    return team_list.length > 3;
}
function update_guld_list() {
    guld_list = [];
    for (let hero of global_for_guild_1.g_guld.hres())
        guld_list.push(hero);
}
function exist_guld() {
    return guld_list.length > 0;
}
function max_of_guld() {
    return guld_list.length > 99;
}
function update_appd_list() {
    return __awaiter(this, void 0, void 0, function* () {
        if (appd_list.length < 1)
            return yield _get_appd_list();
        return;
    });
}
function _get_appd_list() {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        return (_a = (0, F_load_and_save_1.get_new_hero)(8)) === null || _a === void 0 ? void 0 : _a.then((jsonObj) => {
            if (jsonObj.hres === undefined) {
                global_1.g_mes.warning_message('不正なデータを受信しました' + jsonObj.emsg);
                (0, global_1._alert)(jsonObj.emsg);
                return;
            }
            for (let hero_data of jsonObj.hres) {
                appd_list.push(new C_Hero_1.C_Hero(hero_data));
            }
        });
    });
}
function exist_appd() {
    return appd_list.length > 0;
}
function max_of_appd() {
    return appd_list.length > 99;
}
function update_menu_list() { }
function exist_menu() {
    return (0, F_Math_1._min)([menu_list_for_team.length, menu_list_for_guld.length, menu_list_for_appd.length]) > 0;
}
function init_view() {
    if (!init_dom_team_list())
        return false;
    if (!init_dom_guld_list())
        return false;
    if (!init_dom_appd_list())
        return false;
    if (!init_dom_menu_list())
        return false;
    if (!init_dom_inpt_list())
        return false;
    if (!init_cursor())
        return false;
    if (!init_dom_hero_detail())
        return false;
    return true;
}
function update_view() {
    update_dom_team_list();
    update_dom_guld_list();
    update_dom_appd_list();
    update_dom_menu_list();
    update_cursor();
    update_dom_hero_detail();
}
function clear_view() {
    clear_dom_team_list();
    clear_dom_guld_list();
    clear_dom_appd_list();
    clear_dom_menu_list();
    clear_dom_inpt_list();
    clear_dom_hero_detail();
}
function init_dom_team_list() {
    try {
        dom_team_fields = document.getElementById('hres_team_fields');
        dom_team_list = document.getElementById('team_list');
    }
    catch (err) {
        return false;
    }
    if (dom_team_fields === null)
        return false;
    if (dom_team_list === null)
        return false;
    dom_team_fields.style.display = 'none';
    return true;
}
function update_dom_team_list() {
    clear_dom_team_list();
    for (let ii in team_list) {
        const li = document.createElement('li');
        li.innerHTML = `${team_list[ii].name()}<p></p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_team_Fnc, false);
        dom_team_list.appendChild(li);
    }
}
function _OK_team_Fnc(e) {
    subview_act(T_SubView.Team);
    cursor.crsr.set_pos(Number(this.id));
    update_dom_hero_detail();
    isOK();
}
function clear_dom_team_list() {
    while (dom_team_list.firstChild !== null) {
        dom_team_list.removeChild(dom_team_list.firstChild);
    }
}
function init_dom_guld_list() {
    try {
        dom_guld_fields = document.getElementById('hres_guld_fields');
        dom_guld_list = document.getElementById('guld_list');
    }
    catch (err) {
        return false;
    }
    if (dom_guld_fields === null)
        return false;
    if (dom_guld_list === null)
        return false;
    dom_guld_fields.style.display = 'none';
    return true;
}
function update_dom_guld_list() {
    clear_dom_guld_list();
    for (let ii in guld_list) {
        const li = document.createElement('li');
        li.innerHTML = `${guld_list[ii].name()}<p></p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_guld_Fnc, false);
        dom_guld_list.appendChild(li);
    }
}
function _OK_guld_Fnc(e) {
    subview_act(T_SubView.Guld);
    cursor.crsr.set_pos(Number(this.id));
    update_dom_hero_detail();
    isOK();
}
function clear_dom_guld_list() {
    while (dom_guld_list.firstChild !== null) {
        dom_guld_list.removeChild(dom_guld_list.firstChild);
    }
}
function init_dom_appd_list() {
    try {
        dom_appd_fields = document.getElementById('hres_appd_fields');
        dom_appd_list = document.getElementById('appd_list');
    }
    catch (err) {
        return false;
    }
    if (dom_appd_fields === null)
        return false;
    if (dom_appd_list === null)
        return false;
    dom_appd_fields.style.display = 'none';
    return true;
}
function update_dom_appd_list() {
    clear_dom_appd_list();
    for (let ii in appd_list) {
        const li = document.createElement('li');
        li.innerHTML = `${appd_list[ii].name()}<p></p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_appd_Fnc, false);
        dom_appd_list.appendChild(li);
    }
}
function _OK_appd_Fnc(e) {
    subview_act(T_SubView.Appd);
    cursor.crsr.set_pos(Number(this.id));
    update_dom_hero_detail();
    isOK();
}
function clear_dom_appd_list() {
    while (dom_appd_list.firstChild !== null) {
        dom_appd_list.removeChild(dom_appd_list.firstChild);
    }
}
function init_dom_menu_list() {
    try {
        dom_menu_fields = document.getElementById('hres_menu_fields');
        dom_menu_list = document.getElementById('menu_list');
    }
    catch (err) {
        return false;
    }
    if (dom_menu_fields === null)
        return false;
    if (dom_menu_list === null)
        return false;
    dom_menu_fields.style.display = 'none';
    return true;
}
function update_dom_menu_list() {
    clear_dom_menu_list();
    let menu_list;
    switch (TGA_mode) {
        case T_TGA_mode.Team:
            menu_list = menu_list_for_team;
            break;
        case T_TGA_mode.Guld:
            menu_list = menu_list_for_guld;
            break;
        case T_TGA_mode.Appd:
            menu_list = menu_list_for_appd;
            break;
        default: return;
    }
    for (let ii in menu_list) {
        const li = document.createElement('li');
        li.innerHTML = `${menu_list[ii].title}<p></p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_menu_Fnc, false);
        dom_menu_list.appendChild(li);
    }
}
function _OK_menu_Fnc(e) {
    cursor = cursor_Menu;
    subview_act(T_SubView.Menu);
    cursor.crsr.set_pos(Number(this.id));
    do_menu();
}
function clear_dom_menu_list() {
    while (dom_menu_list.firstChild !== null) {
        dom_menu_list.removeChild(dom_menu_list.firstChild);
    }
}
function init_dom_inpt_list() {
    try {
        dom_inpt_fields = document.getElementById('hres_inpt_fields');
        dom_inpt_list = document.getElementById('inpt_list');
    }
    catch (err) {
        return false;
    }
    if (dom_inpt_fields === null)
        return false;
    if (dom_inpt_list === null)
        return false;
    if (!_init_dom_ipnm())
        return false;
    dom_inpt_fields.style.display = 'none';
    return true;
}
function _init_dom_ipnm() {
    inpt_name_list = {};
    const name_input = document.createElement('input');
    name_input.id = 'hres_name_inpt';
    name_input.type = 'text';
    name_input.name = 'name';
    name_input.value = '';
    name_input.minLength = 3;
    name_input.maxLength = 30;
    name_input.size = name_input.maxLength;
    const name_label = document.createElement('label');
    name_label.id = 'hres_name_label';
    name_label.htmlFor = name_input.id;
    name_label.innerHTML = '新しい名前: ';
    const li = { id: 'hres_name_li', label: name_label, input: name_input };
    inpt_name_list[li.id] = li;
    return true;
}
function update_dom_inpt_list() {
    clear_dom_inpt_list();
    update_dom_ipnm();
}
function update_dom_ipnm() {
    const name_label = inpt_name_list['hres_name_li'].label;
    const name_input = inpt_name_list['hres_name_li'].input;
    switch (TGA_mode) {
        case T_TGA_mode.Team:
            name_input.value = team_list[cursor_Team.crsr.pos()].name();
            break;
        case T_TGA_mode.Guld:
            name_input.value = guld_list[cursor_Guld.crsr.pos()].name();
            break;
        case T_TGA_mode.Appd:
            name_input.value = appd_list[cursor_Appd.crsr.pos()].name();
            break;
        default: return;
    }
    const li = document.createElement('li');
    li.appendChild(name_label);
    li.appendChild(name_input);
    dom_inpt_list.appendChild(li);
    name_input.setAttribute('autocomplete', 'name');
    name_input.focus({ preventScroll: false });
}
function clear_dom_inpt_list() {
    while (dom_inpt_list.firstChild !== null) {
        dom_inpt_list.removeChild(dom_inpt_list.firstChild);
    }
}
function init_dom_hero_detail() {
    try {
        dom_hero_fields = document.getElementById('hres_hero_fields');
        dom_hero_detail = document.getElementById('hres_hero_info');
    }
    catch (err) {
        return false;
    }
    if (dom_hero_fields === null)
        return false;
    if (dom_hero_detail === null)
        return false;
    return true;
}
function update_dom_hero_detail() {
    hero_detail = (0, F_hero_menu_1.hero_info_create)(dom_hero_detail);
    switch (TGA_mode) {
        case T_TGA_mode.Team:
            (0, F_hero_menu_1.hero_info_form_set)(team_list, hero_detail, cursor_Team.crsr.pos());
            break;
        case T_TGA_mode.Guld:
            (0, F_hero_menu_1.hero_info_form_set)(guld_list, hero_detail, cursor_Guld.crsr.pos());
            break;
        case T_TGA_mode.Appd:
            (0, F_hero_menu_1.hero_info_form_set)(appd_list, hero_detail, cursor_Appd.crsr.pos());
            break;
    }
}
function clear_dom_hero_detail() {
    (0, F_hero_menu_1.hero_info_clear)(dom_hero_detail);
}
function init_cursor() {
    cursor_Hide = { kind: T_SubView.Hide, crsr: C_CtlCursor_1.C_CtlCursor.getObj(undefined) };
    cursor_Team = { kind: T_SubView.Team, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_team_list) };
    cursor_Guld = { kind: T_SubView.Guld, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_guld_list) };
    cursor_Appd = { kind: T_SubView.Appd, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_appd_list) };
    cursor_Menu = { kind: T_SubView.Menu, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_menu_list) };
    return true;
}
function update_cursor() {
    if (!reset_cursor())
        return false;
    if (!start_cursor())
        return false;
    return true;
}
function reset_cursor() {
    cursor_Team.crsr.set(dom_team_list);
    cursor_Guld.crsr.set(dom_guld_list);
    cursor_Appd.crsr.set(dom_appd_list);
    cursor_Menu.crsr.set(dom_menu_list);
    return true;
}
function start_cursor() {
    switch (TGA_mode) {
        case T_TGA_mode.Team:
            cursor = cursor_Team;
            break;
        case T_TGA_mode.Guld:
            cursor = cursor_Guld;
            break;
        case T_TGA_mode.Appd:
            cursor = cursor_Appd;
            break;
        default:
            cursor = cursor_Hide;
            return false;
    }
    return true;
}
function init_ctls() {
    if (!init_default_ctls())
        return false;
    return true;
}
function init_default_ctls() {
    try {
        if (!global_for_guild_1.g_ctls.set(ctls_hres_nor))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_hres_rtn))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_hres_ipnm))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_hres_cknm))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_hres_leav))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_hres_join))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_hres_fire))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_hres_adpt))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_hres_away))
            return false;
    }
    catch (err) {
        return false;
    }
    return true;
}
const ctls_hres_rtn = {
    name: 'hres_rtn',
    isOK: isRT,
    isNG: isRT,
    cpOK: isRT,
    cpNG: isRT,
    isRT: isRT,
    cpRT: isRT,
};
const ctls_hres_nor = {
    name: 'hres_nor',
    do_U: do_U,
    do_D: do_D,
    do_L: do_L,
    do_R: do_R,
    isOK: isOK,
    isNG: isNG,
    isSL: isSL,
    isRT: isRT,
    cpOK: isOK,
    cpNG: isNG,
    cpSL: isSL,
    cpRT: isRT,
};
const ctls_hres_ipnm = {
    name: 'hres_ipnm',
    isOK: isOK_ipnm,
    isNG: isNG_chek,
    cpOK: isOK_ipnm,
    cpNG: isNG_chek,
};
const ctls_hres_cknm = {
    name: 'hres_cknm',
    isOK: isOK_cknm,
    isNG: isNG_cknm,
    cpOK: isOK_cknm,
    cpNG: isNG_cknm,
};
const ctls_hres_leav = {
    name: 'hres_leav',
    isOK: isOK_leav,
    isNG: isNG_chek,
    cpOK: isOK_leav,
    cpNG: isNG_chek,
};
const ctls_hres_join = {
    name: 'hres_join',
    isOK: isOK_join,
    isNG: isNG_chek,
    cpOK: isOK_join,
    cpNG: isNG_chek,
};
const ctls_hres_fire = {
    name: 'hres_fire',
    isOK: isOK_fire,
    isNG: isNG_chek,
    cpOK: isOK_fire,
    cpNG: isNG_chek,
};
const ctls_hres_adpt = {
    name: 'hres_adpt',
    isOK: isOK_adpt,
    isNG: isNG_chek,
    cpOK: isOK_adpt,
    cpNG: isNG_chek,
};
const ctls_hres_away = {
    name: 'hres_away',
    isOK: isOK_away,
    isNG: isNG_chek,
    cpOK: isOK_away,
    cpNG: isNG_chek,
};
function update_ctls() {
    if (!subview_hide_all())
        return false;
    if (!subview_act(cursor.kind))
        return false;
    return true;
}
function subview_hide_all() {
    dom_team_fields.style.display = 'none';
    dom_guld_fields.style.display = 'none';
    dom_appd_fields.style.display = 'none';
    dom_menu_fields.style.display = 'none';
    dom_inpt_fields.style.display = 'none';
    return true;
}
function subview_act(sview) {
    switch (sview) {
        case T_SubView.Team:
            subview_act_team();
            break;
        case T_SubView.Guld:
            subview_act_guld();
            break;
        case T_SubView.Appd:
            subview_act_appd();
            break;
        case T_SubView.Menu:
            subview_act_menu();
            break;
        case T_SubView.MnCk:
            subview_act_mnck();
            break;
        case T_SubView.IpNm:
            subview_act_ipnm();
            break;
        case T_SubView.IpCk:
            subview_act_ipck();
            break;
        case T_SubView.Hide:
            subview_hide_all();
            break;
        default:
            subview_hide_all();
            return false;
    }
    cursor.crsr.high_light_on();
    return true;
}
function subview_act_team() {
    subview_hide_all();
    cursor = cursor_Team;
    update_view();
    dom_team_fields.style.display = 'block';
}
function subview_act_guld() {
    subview_hide_all();
    cursor = cursor_Guld;
    update_view();
    dom_guld_fields.style.display = 'block';
}
function subview_act_appd() {
    subview_hide_all();
    cursor = cursor_Appd;
    update_view();
    dom_appd_fields.style.display = 'block';
}
function subview_act_menu() {
    clear_dom_inpt_list();
    dom_inpt_fields.style.display = 'none';
    cursor = cursor_Menu;
    cursor.crsr.set_pos(0);
    update_dom_menu_list();
    dom_menu_fields.style.display = 'block';
}
function subview_act_mnck() {
    dom_inpt_fields.style.display = 'none';
}
function subview_act_ipnm() {
    update_dom_inpt_list();
    dom_inpt_fields.style.display = 'block';
}
function subview_act_ipck() {
    update_dom_inpt_list();
    dom_inpt_fields.style.display = 'block';
}
function do_U() {
    cursor.crsr.pos_U();
    update_dom_hero_detail();
    display_default_message();
}
function do_D() {
    cursor.crsr.pos_D();
    update_dom_hero_detail();
    display_default_message();
}
function do_L() {
    cursor.crsr.pos_L();
    update_dom_hero_detail();
    display_default_message();
}
function do_R() {
    cursor.crsr.pos_R();
    update_dom_hero_detail();
    display_default_message();
}
function isOK() {
    switch (cursor.kind) {
        case T_SubView.Team:
            mode = 'menu';
            subview_act(T_SubView.Menu);
            display_default_message();
            break;
        case T_SubView.Guld:
            mode = 'menu';
            subview_act(T_SubView.Menu);
            display_default_message();
            break;
        case T_SubView.Appd:
            mode = 'menu';
            subview_act(T_SubView.Menu);
            display_default_message();
            break;
        case T_SubView.Menu:
            do_menu();
            break;
    }
}
function do_menu() {
    let menu_list;
    switch (TGA_mode) {
        case T_TGA_mode.Team:
            menu_list = menu_list_for_team;
            break;
        case T_TGA_mode.Guld:
            menu_list = menu_list_for_guld;
            break;
        case T_TGA_mode.Appd:
            menu_list = menu_list_for_appd;
            break;
        default: return;
    }
    menu_list[cursor_Menu.crsr.pos()].fnc();
}
function isOK_ipnm() {
    mode = 'cknm';
    global_for_guild_1.g_ctls.act(ctls_hres_cknm);
    display_default_message();
}
function isOK_cknm() {
    switch (TGA_mode) {
        case T_TGA_mode.Team:
            change_hero_name(team_list[cursor_Team.crsr.pos()]);
            subview_act(T_SubView.Team);
            break;
        case T_TGA_mode.Guld:
            change_hero_name(guld_list[cursor_Guld.crsr.pos()]);
            subview_act(T_SubView.Guld);
            break;
        case T_TGA_mode.Appd:
            change_hero_name(appd_list[cursor_Appd.crsr.pos()]);
            subview_act(T_SubView.Appd);
            break;
    }
    ;
    clear_dom_inpt_list();
    go_back_view_mode('改名しました');
}
function isOK_leav() {
    const hero = team_list[cursor_Team.crsr.pos()];
    global_for_guild_1.g_guld.add_hero(hero);
    global_for_guild_1.g_team.rmv_hero(hero);
    update_data_list().then(() => {
        if (!exist_team())
            isSL();
        cursor_Team.crsr.set_pos(0);
        go_back_view_mode('チームから外しました');
    });
}
function isOK_join() {
    const hero = guld_list[cursor_Guld.crsr.pos()];
    global_for_guild_1.g_team.add_hero(hero);
    global_for_guild_1.g_guld.rmv_hero(hero);
    update_data_list().then(() => {
        if (!exist_guld())
            isSL();
        cursor_Guld.crsr.set_pos(0);
        go_back_view_mode('チームに入れました');
    });
}
function isOK_fire() {
    global_for_guild_1.g_guld.rmv_hero(guld_list[cursor_Guld.crsr.pos()]);
    update_data_list().then(() => {
        if (!exist_guld())
            isSL();
        cursor_Guld.crsr.set_pos(0);
        go_back_view_mode('クビにしました。。。');
    });
}
function isOK_adpt() {
    const hero = appd_list[cursor_Appd.crsr.pos()];
    global_for_guild_1.g_guld.add_hero(hero);
    appd_list.splice(cursor_Appd.crsr.pos(), 1);
    update_data_list().then(() => {
        cursor_Appd.crsr.set_pos(0);
        go_back_view_mode('ギルドに採用しました');
    });
}
function isOK_away() {
    const hero = appd_list[cursor_Appd.crsr.pos()];
    appd_list.splice(cursor_Appd.crsr.pos(), 1);
    update_data_list().then(() => {
        cursor_Appd.crsr.set_pos(0);
        go_back_view_mode('叩き出しました。。。');
    });
}
function go_back_view_mode(msg) {
    mode = 'view';
    switch (TGA_mode) {
        case T_TGA_mode.Team:
            subview_act(T_SubView.Team);
            break;
        case T_TGA_mode.Guld:
            subview_act(T_SubView.Guld);
            break;
        case T_TGA_mode.Appd:
            subview_act(T_SubView.Appd);
            break;
    }
    global_for_guild_1.g_ctls.act(ctls_hres_nor);
    global_for_guild_1.g_mvm.normal_message(msg);
}
function change_hero_name(hero) {
    let inpt_name;
    try {
        inpt_name = document.getElementById('hres_name_inpt');
    }
    catch (err) {
        return;
    }
    if (inpt_name == null)
        return;
    hero.set_name(inpt_name.value);
}
function isNG() {
    switch (cursor.kind) {
        case T_SubView.Team:
            isRT();
            break;
        case T_SubView.Guld:
            isRT();
            break;
        case T_SubView.Appd:
            isRT();
            break;
        case T_SubView.Menu:
            mode = 'view';
            switch (TGA_mode) {
                case T_TGA_mode.Team:
                    subview_act(T_SubView.Team);
                    break;
                case T_TGA_mode.Guld:
                    subview_act(T_SubView.Guld);
                    break;
                case T_TGA_mode.Appd:
                    subview_act(T_SubView.Appd);
                    break;
            }
            clear_dom_menu_list();
            display_default_message();
            break;
    }
}
function isNG_chek() {
    mode = 'menu';
    subview_act(T_SubView.Menu);
    global_for_guild_1.g_ctls.act(ctls_hres_nor);
    display_default_message();
}
function isNG_cknm() {
    isNG_chek();
    clear_dom_inpt_list();
}
function isSL() {
    global_for_guild_1.g_mvm.clear_message();
    switch (TGA_mode) {
        case T_TGA_mode.Team:
            if (exist_guld()) {
                TGA_mode = T_TGA_mode.Guld;
                break;
            }
            TGA_mode = T_TGA_mode.Appd;
            break;
        case T_TGA_mode.Guld:
            TGA_mode = T_TGA_mode.Appd;
            break;
        case T_TGA_mode.Appd:
            if (exist_team()) {
                TGA_mode = T_TGA_mode.Team;
                break;
            }
            if (exist_guld()) {
                TGA_mode = T_TGA_mode.Guld;
                break;
            }
            break;
    }
    subview_act(TGA_mode);
    display_default_message();
}
function isRT() {
    global_for_guild_1.g_mvm.clear_message();
    go_back_guld_menu();
}
function display_default_message() {
    switch (mode) {
        case 'view':
            global_for_guild_1.g_mvm.normal_message('冒険者を指名してください');
            break;
        case 'menu':
            global_for_guild_1.g_mvm.normal_message('どうしますか？');
            break;
        case 'ipnm':
            global_for_guild_1.g_mvm.normal_message('新しい名前を入力してください');
            break;
        case 'cknm':
            global_for_guild_1.g_mvm.normal_message('この名前でよろしいですか？');
            break;
        case 'join':
            global_for_guild_1.g_mvm.normal_message('チームに加えますか？');
            break;
        case 'leav':
            global_for_guild_1.g_mvm.normal_message('チームから外しますか？');
            break;
        case 'fire':
            global_for_guild_1.g_mvm.notice_message('ギルドをクビにしますか？クビにしたメンバーは復帰できません');
            break;
        case 'adpt':
            global_for_guild_1.g_mvm.notice_message('ギルドに採用しますか？');
            break;
        case 'away':
            global_for_guild_1.g_mvm.notice_message('応募者を追い返しますか？追い返したメンバーは復帰できません');
            break;
        default:
            global_for_guild_1.g_mvm.clear_message();
            break;
    }
}
function go_back_guld_menu() {
    clear_view();
    global_for_guild_1.g_ctls.deact();
    (0, F_guild_menu_1.act_guld_menu)();
}


/***/ }),

/***/ "./src/mai_guld/F_save_menu.ts":
/*!*************************************!*\
  !*** ./src/mai_guld/F_save_menu.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_load_menu = init_load_menu;
exports.init_save_menu = init_save_menu;
exports.act_load_menu = act_load_menu;
exports.act_save_menu = act_save_menu;
exports.post_load_function = post_load_function;
const C_UrlOpt_1 = __webpack_require__(/*! ../d_utl/C_UrlOpt */ "./src/d_utl/C_UrlOpt.ts");
const C_MovablePoint_1 = __webpack_require__(/*! ../d_mdl/C_MovablePoint */ "./src/d_mdl/C_MovablePoint.ts");
const C_SaveData_1 = __webpack_require__(/*! ../d_mdl/C_SaveData */ "./src/d_mdl/C_SaveData.ts");
const C_CtlCursor_1 = __webpack_require__(/*! ../d_ctl/C_CtlCursor */ "./src/d_ctl/C_CtlCursor.ts");
const F_POST_1 = __webpack_require__(/*! ../d_cmn/F_POST */ "./src/d_cmn/F_POST.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_guild_menu_1 = __webpack_require__(/*! ./F_guild_menu */ "./src/mai_guld/F_guild_menu.ts");
const global_for_guild_1 = __webpack_require__(/*! ./global_for_guild */ "./src/mai_guld/global_for_guild.ts");
const C_Guild_1 = __webpack_require__(/*! ../d_mdl/C_Guild */ "./src/d_mdl/C_Guild.ts");
let data_list;
let info_list;
let info_crsr;
let dom_idx = 0;
let info_detail;
let mode = 'view';
let is_save;
let dom_to_uno;
let dom_info_fields;
let dom_info_detail;
function init_load_menu() {
    if (!_init_dom())
        return;
    _init_all();
}
function init_save_menu() {
    if (!_init_dom())
        return;
    _init_all();
}
function _init_dom() {
    try {
        dom_info_detail = document.getElementById('ldsv_info_detail');
        dom_info_fields = document.getElementById('ldsv_info_fields');
        info_list = document.getElementById('ldsv_list');
        if (dom_info_detail === null) {
            return false;
        }
        if (dom_info_fields === null) {
            return false;
        }
        if (info_list === null) {
            return false;
        }
        return true;
    }
    catch (err) {
        return false;
    }
}
function _init_all() {
    mode = 'view';
    init_data();
    init_view();
    init_ctls();
}
function act_load_menu() {
    is_save = false;
    _act_SL_menu();
}
function act_save_menu() {
    is_save = true;
    _act_SL_menu();
}
function _act_SL_menu() {
    return __awaiter(this, void 0, void 0, function* () {
        if (dom_info_detail === null) {
            (0, F_guild_menu_1.act_guld_menu)();
            return;
        }
        if (dom_info_fields === null) {
            (0, F_guild_menu_1.act_guld_menu)();
            return;
        }
        if (info_list === null) {
            (0, F_guild_menu_1.act_guld_menu)();
            return;
        }
        mode = 'view';
        yield update_all();
        if (!is_save && Object.keys(data_list).length < 1) {
            info_list.style.display = 'none';
            dom_info_fields.style.display = 'none';
            global_for_guild_1.g_mvm.notice_message('現在、冒険の記録は有りません。戻る＝＞✖');
            global_for_guild_1.g_ctls.act(ctls_svld_rtn);
        }
        else {
            info_list.style.display = 'block';
            dom_info_fields.style.display = 'block';
            global_for_guild_1.g_ctls.act(ctls_svld_nor);
        }
        global_for_guild_1.g_vsw.view(global_for_guild_1.g_vsw.LdSv());
        display_default_message();
    });
}
function update_all() {
    return __awaiter(this, void 0, void 0, function* () {
        dom_idx = 0;
        yield update_data_list().then(() => {
            update_view();
            update_ctls();
        });
    });
}
function init_data() {
    return __awaiter(this, void 0, void 0, function* () { });
}
function update_data_list() {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, F_load_and_save_1.get_save_info)().then((jsonObj) => {
            try {
                if (jsonObj.save_info !== undefined) {
                    data_list = {};
                    for (let save_info of jsonObj.save_info) {
                        const s = new C_SaveData_1.C_SaveData();
                        s.decode(save_info);
                        data_list[s.uniq_no] = s;
                    }
                    return;
                }
                global_1.g_mes.warning_message('save_infoプロパティが返ってきませんでした');
                return;
            }
            catch (err) {
                global_1.g_mes.warning_message('不正なデータを受信しました');
                return;
            }
        });
        return;
    });
}
function init_view() {
    init_info_list();
}
function update_view() {
    update_info_list();
    append_info_detail();
    update_info_detail();
}
function clear_view() {
    clear_info_list();
    clear_info_detail();
}
function init_info_list() {
    clear_info_list();
}
function update_info_list() {
    clear_info_list();
    dom_to_uno = {};
    if (!is_save) {
        let _DOM_idx = 0;
        for (let key in data_list) {
            const uno = Number(key);
            let title;
            const li = document.createElement('li');
            switch (uno) {
                case 100:
                    title = '自動保存分';
                    break;
                case 101:
                    title = 'デバッグ用';
                    break;
                case 102:
                    title = '階段直前分';
                    break;
                case 103:
                    title = 'ｲﾍﾞﾝﾄ直前分';
                    break;
                default:
                    title = data_list[uno].title;
                    break;
            }
            li.innerHTML = `${title}<p></p>`;
            li.id = _DOM_idx.toString();
            li.addEventListener("click", _OK_Fnc, false);
            info_list.appendChild(li);
            dom_to_uno[_DOM_idx++] = uno;
        }
    }
    else {
        for (let uno = 0; uno < 20; uno++) {
            const li = document.createElement('li');
            if (uno in data_list) {
                li.innerHTML = `${data_list[uno].title}<p></p>`;
            }
            else {
                li.innerHTML = `新規保存 #${uno.toString().padStart(2, '0')}<p></p>`;
            }
            li.id = uno.toString();
            li.addEventListener("click", _OK_Fnc, false);
            info_list.appendChild(li);
            dom_to_uno[uno] = uno;
        }
    }
    return;
}
let old_dom_idx;
function _OK_Fnc(e) {
    dom_idx = Number(this.id);
    info_crsr.set_pos(dom_idx);
    update_info_detail();
    if (dom_idx === old_dom_idx) {
        isOK();
    }
    else {
        old_dom_idx = dom_idx;
    }
    display_default_message();
}
function clear_info_list() {
    while (info_list.firstChild !== null) {
        info_list.removeChild(info_list.firstChild);
    }
    dom_idx = 0;
    old_dom_idx = 999;
}
function append_info_detail() {
    info_detail = {};
    clear_info_detail();
    _append_elm('title');
    _append_elm('point');
    _append_elm('detail');
    _append_elm('save_time');
    return;
}
function _append_elm(id) {
    const li = document.createElement('li');
    li.id = 'SL_detail' + id;
    info_detail[id] = li;
    dom_info_detail.appendChild(li);
}
function update_info_detail() {
    const uno = dom_to_uno[dom_idx];
    if (uno in data_list) {
        info_detail['title'].innerHTML = data_list[uno].title;
        info_detail['detail'].innerHTML = data_list[uno].detail;
        info_detail['point'].innerHTML = data_list[uno].point;
        info_detail['save_time'].innerHTML = data_list[uno].save_time.toLocaleString();
    }
    else {
        info_detail['title'].innerHTML = `新規保存: #${dom_idx.toString().padStart(2, '0')}`;
        info_detail['detail'].innerHTML = ' ';
        info_detail['point'].innerHTML = ' --- ';
        info_detail['save_time'].innerHTML = ' --- ';
    }
}
function clear_info_detail() {
    for (let elm in info_detail) {
        delete info_detail[elm];
    }
    while (dom_info_detail.firstChild !== null) {
        dom_info_detail.removeChild(dom_info_detail.firstChild);
    }
}
function init_ctls() {
    init_default_ctls();
    init_cursor();
}
function init_default_ctls() {
    try {
        if (!global_for_guild_1.g_ctls.set(ctls_svld_rtn))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_svld_nor))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_svld_chk))
            return false;
    }
    catch (err) {
        return false;
    }
    return true;
}
const ctls_svld_nor = {
    name: 'svld_nor',
    do_U: do_U,
    do_D: do_D,
    do_L: do_L,
    do_R: do_R,
    isOK: isOK,
    isNG: isNG,
    isRT: isRT,
    cpRT: isRT,
};
const ctls_svld_chk = {
    name: 'svld_chk',
    isOK: isOK,
    isNG: isNG,
    isRT: isRT,
    cpOK: isOK,
    cpNG: isNG,
    cpRT: isRT,
};
const ctls_svld_rtn = {
    name: 'svld_rtn',
    isNG: go_back_guld_menu_for_first,
    isRT: go_back_guld_menu_for_first,
    cpRT: go_back_guld_menu_for_first,
};
function init_cursor() {
    info_crsr = C_CtlCursor_1.C_CtlCursor.getObj(info_list);
    info_crsr.set_pos(0);
    dom_idx = 0;
}
function update_ctls() {
    reset_cursor();
}
function reset_cursor() {
    info_crsr.set(info_list);
    info_crsr.set_pos(0);
    dom_idx = 0;
}
function do_U() {
    dom_idx = info_crsr.pos_U();
    update_info_detail();
    display_default_message();
}
function do_D() {
    dom_idx = info_crsr.pos_D();
    update_info_detail();
    display_default_message();
}
function do_L() {
    dom_idx = info_crsr.pos_L();
    update_info_detail();
    display_default_message();
}
function do_R() {
    dom_idx = info_crsr.pos_R();
    update_info_detail();
    display_default_message();
}
function isOK() {
    is_save ? _isOK_for_save() : _isOK_for_load();
}
function _isOK_for_load() {
    return __awaiter(this, void 0, void 0, function* () {
        switch (mode) {
            case 'view':
                yield post_load_data().then(result => {
                    if (result) {
                        global_for_guild_1.g_mvm.notice_message('読み込みました!!');
                    }
                    else {
                        global_for_guild_1.g_mvm.notice_message('ページを移動しました。あるいは読み込みに失敗しました');
                    }
                    go_back_guld_menu();
                });
                break;
            default:
                alert('Load mode error: ' + mode);
                break;
        }
    });
}
function _isOK_for_save() {
    return __awaiter(this, void 0, void 0, function* () {
        switch (mode) {
            case 'view':
                if (dom_to_uno[dom_idx] in data_list) {
                    mode = 'rewrite_OK';
                    display_default_message();
                    global_for_guild_1.g_ctls.act(ctls_svld_chk);
                    break;
                }
                try {
                    yield post_save_data().then(result => {
                        try {
                            if (result) {
                                global_for_guild_1.g_mvm.notice_message('新規保存しました!!');
                                update_all();
                            }
                            else {
                                global_for_guild_1.g_mvm.warning_message('新規保存に失敗しました');
                            }
                            ;
                            mode = 'view';
                            global_for_guild_1.g_ctls.act(ctls_svld_nor);
                            go_back_guld_menu();
                        }
                        catch (err) {
                            (0, global_1._alert)('write_OK6: ' + err);
                        }
                    });
                }
                catch (err) {
                    alert('write_OK7: ' + err);
                }
                break;
            case 'rewrite_OK':
                yield post_save_data().then(result => {
                    if (result) {
                        global_for_guild_1.g_mvm.notice_message('上書き保存しました！');
                        update_all();
                    }
                    else {
                        global_for_guild_1.g_mvm.warning_message('上書き保存に失敗しました');
                    }
                    go_back_guld_menu();
                });
                break;
            default:
                alert('Load mode error: ' + mode);
                break;
        }
    });
}
function post_load_data() {
    return __awaiter(this, void 0, void 0, function* () {
        const uno = dom_to_uno[dom_idx];
        if (data_list[uno].mypos.url() !== '' && data_list[uno].mypos.url() != global_1.g_my_url) {
            return _post_load_data_other();
        }
        return yield _post_load_data_here();
    });
}
function _post_load_data_other() {
    return __awaiter(this, void 0, void 0, function* () {
        const uno = dom_to_uno[dom_idx];
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'load');
        opt.set('pid', global_1.g_start_env.pid);
        opt.set('opt', uno.toString());
        (0, F_POST_1.POST_and_move_page)(data_list[uno].mypos.url(), opt);
        return true;
    });
}
function _post_load_data_here() {
    return __awaiter(this, void 0, void 0, function* () {
        const uno = dom_to_uno[dom_idx];
        return yield (0, F_load_and_save_1.general_load)(uno).then((jsonObj) => {
            return post_load_function(jsonObj);
        });
    });
}
function post_load_function(jsonObj) {
    if (jsonObj.ecode !== 0)
        return false;
    global_1.g_save.decode(jsonObj.save);
    set_from_save_to_all_data(global_for_guild_1.g_all_team, global_1.g_save.all_team);
    set_from_save_to_all_data(global_for_guild_1.g_all_maze, global_1.g_save.all_maze);
    set_from_save_to_all_data(global_for_guild_1.g_all_guld, global_1.g_save.all_guld);
    set_from_save_to_all_data(global_for_guild_1.g_all_mvpt, global_1.g_save.all_mvpt);
    global_for_guild_1.g_team.decode(global_1.g_save.all_team[global_1.g_save.mypos.tid()].encode());
    for (let uid in global_for_guild_1.g_all_guld) {
        if (global_for_guild_1.g_all_guld[uid] instanceof C_Guild_1.C_Guild) {
            global_for_guild_1.g_guld.decode(global_for_guild_1.g_all_guld[uid].encode());
            break;
        }
    }
    return true;
}
function set_from_save_to_all_data(glob, save) {
    for (let ii in glob)
        delete glob[ii];
    for (let ii in save)
        glob[save[ii].uid()] = save[ii];
}
function post_save_data() {
    return __awaiter(this, void 0, void 0, function* () {
        const loc = new C_MovablePoint_1.C_MovablePoint({
            cur_url: global_1.g_my_url,
            team_uid: global_for_guild_1.g_team.uid(),
            kind: 'Guld',
            name: global_for_guild_1.g_guld.get_name(),
            loc_uid: global_for_guild_1.g_guld.uid(),
        });
        global_for_guild_1.g_team.set_loc(loc);
        const uno = dom_to_uno[dom_idx];
        global_1.g_save.decode({
            player_id: global_1.g_start_env.pid,
            uniq_no: uno,
            title: `保存済: #${uno.toString().padStart(2, '0')}`,
            detail: '冒険者ギルド情報',
            point: '冒険者ギルド',
            auto_mode: '0',
            is_active: '1',
            is_delete: '0',
        });
        global_1.g_save.all_guld[global_for_guild_1.g_guld.uid()] = global_for_guild_1.g_guld;
        global_1.g_save.all_team[global_for_guild_1.g_team.uid()] = global_for_guild_1.g_team;
        global_1.g_save.mypos = loc;
        return yield (0, F_load_and_save_1.general_save)().then((jsonObj) => { return (jsonObj === null || jsonObj === void 0 ? void 0 : jsonObj.ecode) === 0; });
    });
}
function isNG() {
    is_save ? _isNG_for_save() : _isNG_for_load();
}
function _isNG_for_load() {
    switch (mode) {
        case 'view':
            isRT();
            break;
        case 'read_OK':
            mode = 'view';
            display_default_message();
            global_for_guild_1.g_ctls.act(ctls_svld_nor);
            break;
    }
}
function _isNG_for_save() {
    switch (mode) {
        case 'view':
            isRT();
            break;
        case 'write_OK':
        case 'rewrite_OK':
            mode = 'view';
            display_default_message();
            global_for_guild_1.g_ctls.act(ctls_svld_nor);
            break;
    }
}
function isRT() {
    global_for_guild_1.g_mvm.clear_message();
    go_back_guld_menu();
}
function display_default_message() {
    is_save ? _display_default_message_for_save() : _display_default_message_for_load();
}
function _display_default_message_for_load() {
    switch (mode) {
        case 'view':
            global_for_guild_1.g_mvm.normal_message('どれを読み込みますか？読込＝＞〇');
            break;
    }
}
function _display_default_message_for_save() {
    switch (mode) {
        case 'view':
            global_for_guild_1.g_mvm.normal_message('どれに保存しますか？保存＝＞〇');
            break;
        case 'rewrite_OK':
            global_for_guild_1.g_mvm.notice_message('過去のデータが消えます。上書きしますか？ＯＫ＝＞〇　やめる＝＞✖');
            break;
    }
}
function go_back_guld_menu_for_first() {
    global_for_guild_1.g_ctls.deact();
    (0, F_guild_menu_1.act_guld_menu)();
}
function go_back_guld_menu() {
    clear_view();
    go_back_guld_menu_for_first();
}
function _do_check() {
    global_for_guild_1.g_mvm.clear_message();
    global_for_guild_1.g_ctls.act(ctls_svld_nor);
}


/***/ }),

/***/ "./src/mai_guld/F_tmpl_menu.ts":
/*!*************************************!*\
  !*** ./src/mai_guld/F_tmpl_menu.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_tmpl_menu = init_tmpl_menu;
exports.act_tmpl_menu = act_tmpl_menu;
const F_Math_1 = __webpack_require__(/*! ../d_utl/F_Math */ "./src/d_utl/F_Math.ts");
const C_CtlCursor_1 = __webpack_require__(/*! ../d_ctl/C_CtlCursor */ "./src/d_ctl/C_CtlCursor.ts");
const F_guild_menu_1 = __webpack_require__(/*! ./F_guild_menu */ "./src/mai_guld/F_guild_menu.ts");
const F_hero_menu_1 = __webpack_require__(/*! ./F_hero_menu */ "./src/mai_guld/F_hero_menu.ts");
const global_for_guild_1 = __webpack_require__(/*! ./global_for_guild */ "./src/mai_guld/global_for_guild.ts");
let dom_team_fields2;
let dom_team_list2;
let dom_guld_fields2;
let dom_guld_list2;
let dom_menu_fields2;
let dom_menu_list2;
let dom_hero_fields2;
let dom_hero_detail2;
let a_team_list2;
let a_guld_list2;
let a_hero_detail2;
let menu_list_for_team2;
let menu_list_for_guld2;
const T_TG_mode2 = {
    Hide: 0,
    Team: 1,
    Guld: 2,
};
let TG_mode2;
const T_SubView2 = {
    Hide: 0,
    Team: 1,
    Guld: 2,
    Menu: 5,
    MnCk: 6,
    IpNm: 7,
    IpCk: 8,
};
let cursor2;
let cursor2_Hide;
let cursor2_Team;
let cursor2_Guld;
let cursor2_Menu;
let mode = 'view';
function init_tmpl_menu() {
    init_all();
    return;
}
function act_tmpl_menu() {
    mode = 'view';
    update_all();
    if (exist_data()) {
        global_for_guild_1.g_ctls.act(ctls_tmpl_nor);
        global_for_guild_1.g_vsw.view(global_for_guild_1.g_vsw.Tmpl());
        display_default_message();
    }
    else {
        (0, F_guild_menu_1.act_guld_menu)();
    }
    return;
}
function exist_data() {
    return exist_team() || exist_guld();
}
function init_all() {
    return __awaiter(this, void 0, void 0, function* () {
        mode = 'view';
        if (!init_data())
            return false;
        if (!init_view())
            return false;
        if (!init_ctls())
            return false;
        return true;
    });
}
function update_all() {
    update_data_list();
    start_TGA();
    update_view();
    update_ctls();
}
function start_TGA() {
    if (exist_team()) {
        TG_mode2 = T_TG_mode2.Team;
    }
    else if (exist_guld()) {
        TG_mode2 = T_TG_mode2.Guld;
    }
    else {
        TG_mode2 = T_TG_mode2.Hide;
    }
    return true;
}
function init_data() {
    if (!init_team_list())
        return false;
    if (!init_guld_list())
        return false;
    if (!init_menu_list())
        return false;
    return true;
}
function init_team_list() {
    a_team_list2 = [];
    return true;
}
function init_guld_list() {
    a_guld_list2 = [];
    return true;
}
function init_menu_list() {
    menu_list_for_team2 = [
        { id: 'hprc', fnc: _go_hprc, title: 'ＨＰを回復' },
        { id: 'mprc', fnc: _go_mprc, title: 'ＭＰを回復' },
        { id: 'sick', fnc: _go_sick, title: '異常を回復' },
    ];
    menu_list_for_guld2 = [
        { id: 'hprc', fnc: _go_hprc, title: 'ＨＰを回復' },
        { id: 'mprc', fnc: _go_mprc, title: 'ＭＰを回復' },
        { id: 'sick', fnc: _go_sick, title: '異常を回復' },
    ];
    return true;
}
function _go_hprc() {
    subview_act(T_SubView2.HpRc);
    mode = 'hprc';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_tmpl_hprc);
}
function _go_mprc() {
    subview_act(T_SubView2.MpRc);
    mode = 'mprc';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_tmpl_mprc);
}
function _go_sick() {
    subview_act(T_SubView2.Sick);
    mode = 'sick';
    display_default_message();
    global_for_guild_1.g_ctls.act(ctls_tmpl_sick);
}
function update_data_list() {
    update_team_list();
    update_guld_list();
    update_menu_list();
}
function update_team_list() {
    a_team_list2 = [];
    for (let hero of global_for_guild_1.g_team.hres())
        a_team_list2.push(hero);
}
function exist_team() {
    return a_team_list2.length > 0;
}
function max_of_team() {
    return a_team_list2.length > 3;
}
function update_guld_list() {
    a_guld_list2 = [];
    for (let hero of global_for_guild_1.g_guld.hres())
        a_guld_list2.push(hero);
}
function exist_guld() {
    return a_guld_list2.length > 0;
}
function update_menu_list() { }
function exist_menu() {
    return (0, F_Math_1._min)([menu_list_for_team2.length, menu_list_for_guld2.length]) > 0;
}
function init_view() {
    if (!init_dom_team_list2())
        return false;
    if (!init_dom_guld_list2())
        return false;
    if (!init_dom_menu_list2())
        return false;
    if (!init_cursor2())
        return false;
    if (!init_dom_hero_detail2())
        return false;
    return true;
}
function update_view() {
    update_dom_team_list2();
    update_dom_guld_list2();
    update_dom_menu_list2();
    update_cursor2();
    update_dom_hero_detail2();
}
function clear_view() {
    clear_dom_team_list2();
    clear_dom_guld_list2();
    clear_dom_menu_list2();
    clear_dom_hero_detail2();
}
function init_dom_team_list2() {
    try {
        dom_team_fields2 = document.getElementById('tmpl_team_fields');
        dom_team_list2 = document.getElementById('tmpl_list');
    }
    catch (err) {
        return false;
    }
    if (dom_team_fields2 === null)
        return false;
    if (dom_team_list2 === null)
        return false;
    dom_team_fields2.style.display = 'none';
    return true;
}
function update_dom_team_list2() {
    clear_dom_team_list2();
    for (let ii in a_team_list2) {
        const li = document.createElement('li');
        li.innerHTML = `${a_team_list2[ii].name()}<p></p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_team_Fnc, false);
        dom_team_list2.appendChild(li);
    }
}
function _OK_team_Fnc(e) {
    subview_act(T_SubView2.Team);
    cursor2.crsr.set_pos(Number(this.id));
    update_dom_hero_detail2();
    isOK();
}
function clear_dom_team_list2() {
    dom_team_list2.innerHTML = '';
}
function init_dom_guld_list2() {
    try {
        dom_guld_fields2 = document.getElementById('tmpl_guld_fields');
        dom_guld_list2 = document.getElementById('tmpl_list');
    }
    catch (err) {
        return false;
    }
    if (dom_guld_fields2 === null)
        return false;
    if (dom_guld_list2 === null)
        return false;
    dom_guld_fields2.style.display = 'none';
    return true;
}
function update_dom_guld_list2() {
    clear_dom_guld_list2();
    for (let ii in a_guld_list2) {
        const li = document.createElement('li');
        li.innerHTML = `${a_guld_list2[ii].name()}<p></p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_guld_Fnc, false);
        dom_guld_list2.appendChild(li);
    }
}
function _OK_guld_Fnc(e) {
    subview_act(T_SubView2.Guld);
    cursor2.crsr.set_pos(Number(this.id));
    update_dom_hero_detail2();
    isOK();
}
function clear_dom_guld_list2() {
    while (dom_guld_list2.firstChild !== null) {
        dom_guld_list2.removeChild(dom_guld_list2.firstChild);
    }
}
function init_dom_menu_list2() {
    try {
        dom_menu_fields2 = document.getElementById('tmpl_menu_fields');
        dom_menu_list2 = document.getElementById('tmpl_menu_list');
    }
    catch (err) {
        return false;
    }
    if (dom_menu_fields2 === null)
        return false;
    if (dom_menu_list2 === null)
        return false;
    dom_menu_fields2.style.display = 'none';
    return true;
}
function update_dom_menu_list2() {
    clear_dom_menu_list2();
    let menu_list;
    switch (TG_mode2) {
        case T_TG_mode2.Team:
            menu_list = menu_list_for_team2;
            break;
        case T_TG_mode2.Guld:
            menu_list = menu_list_for_guld2;
            break;
        default: return;
    }
    for (let ii in menu_list) {
        const li = document.createElement('li');
        li.innerHTML = `${menu_list[ii].title}<p></p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_menu_Fnc, false);
        dom_menu_list2.appendChild(li);
    }
}
function _OK_menu_Fnc(e) {
    cursor2 = cursor2_Menu;
    subview_act(T_SubView2.Menu);
    cursor2.crsr.set_pos(Number(this.id));
    do_menu();
}
function clear_dom_menu_list2() {
    while (dom_menu_list2.firstChild !== null) {
        dom_menu_list2.removeChild(dom_menu_list2.firstChild);
    }
}
function init_dom_hero_detail2() {
    try {
        dom_hero_fields2 = document.getElementById('tmpl_hero_fields');
        dom_hero_detail2 = document.getElementById('tmpl_hero_info');
    }
    catch (err) {
        return false;
    }
    if (dom_hero_fields2 === null)
        return false;
    if (dom_hero_detail2 === null)
        return false;
    return true;
}
function update_dom_hero_detail2() {
    a_hero_detail2 = (0, F_hero_menu_1.hero_info_create)(dom_hero_detail2);
    switch (TG_mode2) {
        case T_TG_mode2.Team:
            (0, F_hero_menu_1.hero_info_form_set)(a_team_list2, a_hero_detail2, cursor2_Team.crsr.pos());
            break;
        case T_TG_mode2.Guld:
            (0, F_hero_menu_1.hero_info_form_set)(a_guld_list2, a_hero_detail2, cursor2_Guld.crsr.pos());
            break;
    }
}
function clear_dom_hero_detail2() {
    (0, F_hero_menu_1.hero_info_clear)(dom_hero_detail2);
}
function init_cursor2() {
    cursor2_Hide = { kind: T_SubView2.Hide, crsr: C_CtlCursor_1.C_CtlCursor.getObj(undefined) };
    cursor2_Team = { kind: T_SubView2.Team, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_team_list2) };
    cursor2_Guld = { kind: T_SubView2.Guld, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_guld_list2) };
    cursor2_Menu = { kind: T_SubView2.Menu, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_menu_list2) };
    return true;
}
function update_cursor2() {
    if (!reset_cursor2())
        return false;
    if (!start_cursor2())
        return false;
    return true;
}
function reset_cursor2() {
    cursor2_Team.crsr.set(dom_team_list2);
    cursor2_Guld.crsr.set(dom_guld_list2);
    cursor2_Menu.crsr.set(dom_menu_list2);
    return true;
}
function start_cursor2() {
    switch (TG_mode2) {
        case T_TG_mode2.Team:
            cursor2 = cursor2_Team;
            break;
        case T_TG_mode2.Guld:
            cursor2 = cursor2_Guld;
            break;
        default:
            cursor2 = cursor2_Hide;
            return false;
    }
    return true;
}
function init_ctls() {
    if (!init_default_ctls())
        return false;
    return true;
}
function init_default_ctls() {
    try {
        if (!global_for_guild_1.g_ctls.set(ctls_tmpl_nor))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_tmpl_rtn))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_tmpl_hprc))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_tmpl_mprc))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_tmpl_sick))
            return false;
    }
    catch (err) {
        return false;
    }
    return true;
}
const ctls_tmpl_rtn = {
    name: 'hres_rtn',
    isOK: isRT,
    isNG: isRT,
    cpOK: isRT,
    cpNG: isRT,
    isRT: isRT,
    cpRT: isRT,
};
const ctls_tmpl_nor = {
    name: 'hres_nor',
    do_U: do_U,
    do_D: do_D,
    do_L: do_L,
    do_R: do_R,
    isOK: isOK,
    isNG: isNG,
    isSL: isSL,
    isRT: isRT,
    cpOK: isOK,
    cpNG: isNG,
    cpSL: isSL,
    cpRT: isRT,
};
const ctls_tmpl_hprc = {
    name: 'tmpl_hprc',
    isOK: isOK_hprc,
    isNG: isNG_chek,
    cpOK: isOK_hprc,
    cpNG: isNG_chek,
};
const ctls_tmpl_mprc = {
    name: 'tmpl_mprc',
    isOK: isOK_mprc,
    isNG: isNG_chek,
    cpOK: isOK_mprc,
    cpNG: isNG_chek,
};
const ctls_tmpl_sick = {
    name: 'tmpl_sick',
    isOK: isOK_sick,
    isNG: isNG_chek,
    cpOK: isOK_sick,
    cpNG: isNG_chek,
};
function update_ctls() {
    if (!subview_hide_all())
        return false;
    if (!subview_act(cursor2.kind))
        return false;
    return true;
}
function subview_hide_all() {
    dom_team_fields2.style.display = 'none';
    dom_guld_fields2.style.display = 'none';
    dom_menu_fields2.style.display = 'none';
    return true;
}
function subview_act(sview) {
    switch (sview) {
        case T_SubView2.Team:
            subview_act_team();
            break;
        case T_SubView2.Guld:
            subview_act_guld();
            break;
        case T_SubView2.Menu:
            subview_act_menu();
            break;
        case T_SubView2.MnCk:
            subview_act_mnck();
            break;
        case T_SubView2.Hide:
            subview_hide_all();
            break;
        default:
            subview_hide_all();
            return false;
    }
    cursor2.crsr.high_light_on();
    return true;
}
function subview_act_team() {
    subview_hide_all();
    cursor2 = cursor2_Team;
    update_view();
    dom_team_fields2.style.display = 'block';
}
function subview_act_guld() {
    subview_hide_all();
    cursor2 = cursor2_Guld;
    update_view();
    dom_guld_fields2.style.display = 'block';
}
function subview_act_menu() {
    cursor2 = cursor2_Menu;
    cursor2.crsr.set_pos(0);
    update_dom_menu_list2();
    dom_menu_fields2.style.display = 'block';
}
function subview_act_mnck() {
}
function do_U() {
    cursor2.crsr.pos_U();
    update_dom_hero_detail2();
    display_default_message();
}
function do_D() {
    cursor2.crsr.pos_D();
    update_dom_hero_detail2();
    display_default_message();
}
function do_L() {
    cursor2.crsr.pos_L();
    update_dom_hero_detail2();
    display_default_message();
}
function do_R() {
    cursor2.crsr.pos_R();
    update_dom_hero_detail2();
    display_default_message();
}
function isOK() {
    switch (cursor2.kind) {
        case T_SubView2.Team:
            mode = 'menu';
            subview_act(T_SubView2.Menu);
            display_default_message();
            break;
        case T_SubView2.Guld:
            mode = 'menu';
            subview_act(T_SubView2.Menu);
            display_default_message();
            break;
        case T_SubView2.Menu:
            do_menu();
            break;
    }
}
function do_menu() {
    let menu_list;
    switch (TG_mode2) {
        case T_TG_mode2.Team:
            menu_list = menu_list_for_team2;
            break;
        case T_TG_mode2.Guld:
            menu_list = menu_list_for_guld2;
            break;
        default: return;
    }
    menu_list[cursor2_Menu.crsr.pos()].fnc();
}
function isOK_hprc() {
    const hero = a_team_list2[cursor2_Team.crsr.pos()];
    hero.set_abi_p_all('xd', 0);
    cursor2_Team.crsr.set_pos(0);
    go_back_view_mode('ＨＰが回復しました');
}
function isOK_mprc() {
    const hero = a_team_list2[cursor2_Team.crsr.pos()];
    hero.set_abi_m_all('xd', 0);
    cursor2_Team.crsr.set_pos(0);
    go_back_view_mode('ＭＰが回復しました');
}
function isOK_sick() {
    const hero = a_team_list2[cursor2_Team.crsr.pos()];
    cursor2_Team.crsr.set_pos(0);
    go_back_view_mode('状態が正常に戻りました');
}
function go_back_view_mode(msg) {
    mode = 'view';
    switch (TG_mode2) {
        case T_TG_mode2.Team:
            subview_act(T_SubView2.Team);
            break;
        case T_TG_mode2.Guld:
            subview_act(T_SubView2.Guld);
            break;
    }
    global_for_guild_1.g_ctls.act(ctls_tmpl_nor);
    global_for_guild_1.g_mvm.normal_message(msg);
}
function isNG() {
    switch (cursor2.kind) {
        case T_SubView2.Team:
            isRT();
            break;
        case T_SubView2.Guld:
            isRT();
            break;
        case T_SubView2.Menu:
            mode = 'view';
            switch (TG_mode2) {
                case T_TG_mode2.Team:
                    subview_act(T_SubView2.Team);
                    break;
                case T_TG_mode2.Guld:
                    subview_act(T_SubView2.Guld);
                    break;
            }
            clear_dom_menu_list2();
            display_default_message();
            break;
    }
}
function isNG_chek() {
    mode = 'menu';
    subview_act(T_SubView2.Menu);
    global_for_guild_1.g_ctls.act(ctls_tmpl_nor);
    display_default_message();
}
function isNG_cknm() {
    isNG_chek();
}
function isSL() {
    global_for_guild_1.g_mvm.clear_message();
    switch (TG_mode2) {
        case T_TG_mode2.Team:
            if (exist_guld()) {
                TG_mode2 = T_TG_mode2.Guld;
                break;
            }
            break;
        case T_TG_mode2.Guld:
            if (exist_team()) {
                TG_mode2 = T_TG_mode2.Team;
            }
            break;
    }
    subview_act(TG_mode2);
    display_default_message();
}
function isRT() {
    global_for_guild_1.g_mvm.clear_message();
    go_back_guld_menu();
}
function display_default_message() {
    switch (mode) {
        case 'view':
            global_for_guild_1.g_mvm.normal_message('冒険者を指名してください');
            break;
        case 'menu':
            global_for_guild_1.g_mvm.normal_message('どうしますか？');
            break;
        case 'hprc':
            global_for_guild_1.g_mvm.normal_message('この人のＨＰを回復しますか？');
            break;
        case 'mprc':
            global_for_guild_1.g_mvm.normal_message('この人のＭＰを回復しますか？');
            break;
        case 'sick':
            global_for_guild_1.g_mvm.normal_message('この人の状態異常を治しますか？');
            break;
        default:
            global_for_guild_1.g_mvm.clear_message();
            break;
    }
}
function go_back_guld_menu() {
    clear_view();
    global_for_guild_1.g_ctls.deact();
    (0, F_guild_menu_1.act_guld_menu)();
}


/***/ }),

/***/ "./src/mai_guld/F_tomz_menu.ts":
/*!*************************************!*\
  !*** ./src/mai_guld/F_tomz_menu.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.init_tomz_menu = init_tomz_menu;
exports.act_tomz_menu = act_tomz_menu;
const C_UrlOpt_1 = __webpack_require__(/*! ../d_utl/C_UrlOpt */ "./src/d_utl/C_UrlOpt.ts");
const C_MazeInfo_1 = __webpack_require__(/*! ../d_mdl/C_MazeInfo */ "./src/d_mdl/C_MazeInfo.ts");
const C_CtlCursor_1 = __webpack_require__(/*! ../d_ctl/C_CtlCursor */ "./src/d_ctl/C_CtlCursor.ts");
const F_POST_1 = __webpack_require__(/*! ../d_cmn/F_POST */ "./src/d_cmn/F_POST.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_guild_menu_1 = __webpack_require__(/*! ./F_guild_menu */ "./src/mai_guld/F_guild_menu.ts");
const global_for_guild_1 = __webpack_require__(/*! ./global_for_guild */ "./src/mai_guld/global_for_guild.ts");
let dom_maze_fields;
let dom_maze_list;
let dom_mvpt_fields;
let dom_mvpt_list;
let maze_list;
let mvpt_list;
const T_List_mode = {
    Hide: 0,
    Maze: 1,
    MvPt: 2,
};
let list_mode;
let cursor;
let cursor_hide;
let cursor_maze;
let cursor_mvpt;
let old_idx;
let mode = 'view';
function init_tomz_menu() {
    init_all();
}
function act_tomz_menu() {
    update_all().then(() => {
        if (!exist_hero()) {
            hide_view_all();
            global_for_guild_1.g_mvm.notice_message('出発の前にチームを編成してください');
            global_for_guild_1.g_ctls.act(ctls_tomz_rtn);
            return;
        }
        global_for_guild_1.g_vsw.view(global_for_guild_1.g_vsw.ToMz());
        display_default_message();
        return;
    });
    return;
}
function exist_hero() { return global_for_guild_1.g_team.hres().length > 0; }
function init_all() {
    init_data();
    init_view();
    init_ctls();
}
function update_all() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield update_data().then(() => {
            update_view();
            update_ctls();
        });
    });
}
function init_data() {
    init_maze_list();
    init_mvpt_list();
}
function update_data() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield update_maze_list().then(() => {
            update_mvpt_list();
        });
    });
}
function init_maze_list() { }
function update_maze_list() {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0, F_load_and_save_1.get_maze_info)().then((jsonObj) => {
            maze_list = [];
            for (const json_mazeinfo of jsonObj) {
                maze_list.push(new C_MazeInfo_1.C_MazeInfo(json_mazeinfo));
            }
        });
    });
}
function exist_maze_list() {
    return maze_list.length > 0;
}
function init_mvpt_list() { }
function update_mvpt_list() {
    mvpt_list = [];
    for (const ii in global_1.g_save.all_mvpt)
        mvpt_list.push(global_1.g_save.all_mvpt[ii]);
}
function exist_mvpt_list() {
    return mvpt_list.length > 0;
}
function init_view() {
    init_DOM_maze_list();
    init_DOM_mvpt_list();
}
function update_view() {
    update_DOM_maze_list();
    update_DOM_mvpt_list();
    show_view_all();
}
function clear_view() {
    hide_view_all();
    clear_DOM_maze_list();
    clear_DOM_mvpt_list();
}
function show_view_all() {
    hide_view_all();
    if (exist_maze_list())
        dom_maze_fields.style.display = 'block';
    if (exist_mvpt_list())
        dom_mvpt_fields.style.display = 'block';
    return true;
}
function hide_view_all() {
    dom_maze_fields.style.display = 'none';
    dom_mvpt_fields.style.display = 'none';
    return true;
}
function init_DOM_maze_list() {
    try {
        dom_maze_fields = document.getElementById('tomz_maze_fields');
        dom_maze_list = document.getElementById('maze_list');
    }
    catch (err) {
        (0, global_1._alert)('ID in not found; ' + err);
        return;
    }
    if (dom_maze_fields === null)
        return;
    if (dom_maze_list === null)
        return;
    dom_maze_fields.style.display = 'none';
    return;
}
function update_DOM_maze_list() {
    clear_DOM_maze_list();
    if (!exist_maze_list()) {
        dom_maze_fields.style.display = 'none';
        return;
    }
    for (let ii in maze_list) {
        const li = document.createElement('li');
        li.innerHTML = `${maze_list[ii].mbname}<p>　💎レベル: ${maze_list[ii].lv} 「${maze_list[ii].size_x} × ${maze_list[ii].size_y}」${maze_list[ii].size_z}階層</p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_maze_Fnc, false);
        dom_maze_list.appendChild(li);
    }
}
function _OK_maze_Fnc(e) {
    cursor.crsr.set_pos(Number(this.id));
    switch (mode) {
        case 'tomz_nor_maze':
            isCK_maze();
            old_idx = cursor.crsr.pos();
            break;
        case 'tomz_jmp_maze':
            if (cursor.crsr.pos() === old_idx)
                isGO_maze();
            else {
                isCK_maze();
                old_idx = cursor.crsr.pos();
            }
            break;
        default:
            cursor.crsr.set_pos(Number(this.id));
            isSL_mvpt();
            isCK_maze();
            old_idx = cursor.crsr.pos();
            break;
    }
}
function clear_DOM_maze_list() {
    while (dom_maze_list.firstChild !== null) {
        dom_maze_list.removeChild(dom_maze_list.firstChild);
    }
}
function init_DOM_mvpt_list() {
    try {
        dom_mvpt_fields = document.getElementById('tomz_mvpt_fields');
        dom_mvpt_list = document.getElementById('mvpt_list');
    }
    catch (err) {
        (0, global_1._alert)('ID in not found; ' + err);
        return;
    }
    if (dom_mvpt_fields === null)
        return;
    if (dom_mvpt_list === null)
        return;
    dom_mvpt_fields.style.display = 'none';
}
function update_DOM_mvpt_list() {
    clear_DOM_mvpt_list();
    if (!exist_mvpt_list()) {
        dom_mvpt_fields.style.display = 'none';
        return;
    }
    for (let ii in mvpt_list) {
        const li = document.createElement('li');
        const pos = mvpt_list[ii].get_pd();
        li.innerHTML = `${mvpt_list[ii].get_name()}<p>　💎「${pos.x} , ${pos.y}」${pos.z + 1}階</p>`;
        li.id = ii.toString();
        li.addEventListener("click", _OK_mvpt_Fnc, false);
        dom_mvpt_list.appendChild(li);
    }
}
function _OK_mvpt_Fnc(e) {
    cursor.crsr.set_pos(Number(this.id));
    switch (mode) {
        case 'tomz_nor_mvpt':
            isCK_mvpt();
            old_idx = cursor.crsr.pos();
            break;
        case 'tomz_jmp_mvpt':
            if (cursor.crsr.pos() === old_idx)
                isGO_mvpt();
            else {
                isCK_mvpt();
                old_idx = cursor.crsr.pos();
            }
            break;
        default:
            cursor.crsr.set_pos(Number(this.id));
            isSL_maze();
            isCK_mvpt();
            old_idx = cursor.crsr.pos();
    }
}
function clear_DOM_mvpt_list() {
    while (dom_mvpt_list.firstChild !== null) {
        dom_mvpt_list.removeChild(dom_mvpt_list.firstChild);
    }
}
function init_ctls() {
    init_default_ctls();
    init_cursor();
}
function init_default_ctls() {
    try {
        if (!global_for_guild_1.g_ctls.set(ctls_tomz_nor_maze))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_tomz_nor_mvpt))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_tomz_jmp_maze))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_tomz_jmp_mvpt))
            return false;
        if (!global_for_guild_1.g_ctls.set(ctls_tomz_rtn))
            return false;
    }
    catch (err) {
        return false;
    }
    return true;
}
const ctls_tomz_rtn = {
    name: 'tomz_rtn',
    isOK: isRT,
    isNG: isRT,
    isRT: isRT,
    cpRT: isRT,
};
const ctls_tomz_nor_maze = {
    name: 'tomz_nor_maze',
    do_U: do_U,
    do_D: do_D,
    do_R: isSL_maze,
    isOK: isCK_maze,
    isNG: isRT,
    isSL: isSL_maze,
    isRT: isRT,
    cpSL: isSL_maze,
    cpRT: isRT,
};
const ctls_tomz_nor_mvpt = {
    name: 'tomz_nor_mvpt',
    do_U: do_U,
    do_D: do_D,
    do_L: isSL_mvpt,
    isOK: isCK_mvpt,
    isNG: isRT,
    isSL: isSL_mvpt,
    isRT: isRT,
    cpSL: isSL_mvpt,
    cpRT: isRT,
};
const ctls_tomz_jmp_maze = {
    name: 'tomz_jmp_maze',
    isOK: isGO_maze,
    isNG: isNG_maze,
    isRT: isRT,
    cpOK: isGO_maze,
    cpNG: isNG_maze,
};
const ctls_tomz_jmp_mvpt = {
    name: 'tomz_jmp_mvpt',
    isOK: isGO_mvpt,
    isNG: isNG_mvpt,
    isRT: isRT,
    cpOK: isGO_mvpt,
    cpNG: isNG_mvpt,
};
function init_cursor() {
    cursor_hide = { mode: T_List_mode.Hide, crsr: C_CtlCursor_1.C_CtlCursor.getObj(undefined) };
    cursor_maze = { mode: T_List_mode.Maze, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_maze_list) };
    cursor_mvpt = { mode: T_List_mode.MvPt, crsr: C_CtlCursor_1.C_CtlCursor.getObj(dom_mvpt_list) };
    old_idx = 999;
    return true;
}
function update_ctls() {
    reset_cursor();
    start_cursor();
    switch_cursor(cursor.mode);
}
function reset_cursor() {
    reset_cursor_maze();
    reset_cursor_mvpt();
}
function reset_cursor_maze() {
    const pos = cursor_maze.crsr.pos();
    cursor_maze.crsr.set(dom_maze_list).set_pos(pos).high_light_off();
}
function reset_cursor_mvpt() {
    const pos = cursor_mvpt.crsr.pos();
    cursor_mvpt.crsr.set(dom_mvpt_list).set_pos(pos).high_light_off();
}
function start_cursor() {
    if (exist_maze_list()) {
        mode = 'tomz_nor_maze';
        list_mode = T_List_mode.Maze;
        cursor = cursor_maze;
    }
    else if (exist_mvpt_list()) {
        mode = 'tomz_nor_mvpt';
        list_mode = T_List_mode.MvPt;
        cursor = cursor_mvpt;
    }
    else {
        mode = 'nop';
        list_mode = T_List_mode.Hide;
        cursor = cursor_hide;
    }
    cursor.crsr.set_pos(0).high_light_on();
    return true;
}
function switch_cursor(sview) {
    switch (sview) {
        case T_List_mode.Maze:
            switch_cursor_to_maze();
            return true;
        case T_List_mode.MvPt:
            switch_cursor_to_mvpt();
            return true;
    }
    return false;
}
function switch_cursor_to_maze() {
    if (!exist_maze_list())
        return;
    cursor_maze.crsr.high_light_on();
    cursor_mvpt.crsr.high_light_off();
    cursor = cursor_maze;
    global_for_guild_1.g_ctls.act(ctls_tomz_nor_maze);
    dom_maze_fields.style.display = 'block';
}
function switch_cursor_to_mvpt() {
    if (!exist_mvpt_list())
        return;
    cursor_maze.crsr.high_light_off();
    cursor_mvpt.crsr.high_light_on();
    cursor = cursor_mvpt;
    global_for_guild_1.g_ctls.act(ctls_tomz_nor_mvpt);
    dom_mvpt_fields.style.display = 'block';
}
function do_U() {
    display_default_message();
    cursor.crsr.pos_U();
}
function do_D() {
    display_default_message();
    cursor.crsr.pos_D();
}
function isCK_maze() {
    mode = 'tomz_jmp_maze';
    global_for_guild_1.g_ctls.act(ctls_tomz_jmp_maze);
    display_default_message();
}
function isCK_mvpt() {
    mode = 'tomz_jmp_mvpt';
    global_for_guild_1.g_ctls.act(ctls_tomz_jmp_mvpt);
    display_default_message();
}
function isGO_maze() {
    (0, F_load_and_save_1.tmp_save)().then(() => {
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'start');
        opt.set('pid', global_1.g_start_env.pid);
        opt.set('opt', maze_list[cursor.crsr.pos()].name);
        (0, F_POST_1.POST_and_move_page)(global_1.g_url[global_1.g_url_mai_maze], opt);
    });
}
function isGO_mvpt() {
    const loc = mvpt_list[cursor.crsr.pos()];
    global_for_guild_1.g_team.set_loc(loc);
    global_1.g_save.mypos = loc;
    delete global_1.g_save.all_mvpt[loc.uid()];
    (0, F_load_and_save_1.tmp_save)().then(() => {
        const opt = new C_UrlOpt_1.C_UrlOpt();
        opt.set('mode', 'mvpt');
        opt.set('pid', global_1.g_start_env.pid);
        opt.set('opt', '');
        (0, F_POST_1.POST_and_move_page)(mvpt_list[cursor.crsr.pos()].url(), opt);
    });
}
function isNG_maze() {
    mode = 'tomz_nor_maze';
    global_for_guild_1.g_ctls.act(ctls_tomz_nor_maze);
    list_mode = T_List_mode.Maze;
    switch_cursor(list_mode);
    display_default_message();
}
function isNG_mvpt() {
    mode = 'tomz_nor_mvpt';
    global_for_guild_1.g_ctls.act(ctls_tomz_nor_mvpt);
    list_mode = T_List_mode.MvPt;
    switch_cursor(list_mode);
    display_default_message();
}
function isSL_maze() {
    if (!exist_mvpt_list())
        return;
    mode = 'tomz_nor_mvpt';
    global_for_guild_1.g_ctls.act(ctls_tomz_nor_mvpt);
    list_mode = T_List_mode.MvPt;
    switch_cursor(list_mode);
    display_default_message();
}
function isSL_mvpt() {
    if (!exist_maze_list())
        return;
    mode = 'tomz_nor_maze';
    global_for_guild_1.g_ctls.act(ctls_tomz_nor_maze);
    list_mode = T_List_mode.Maze;
    switch_cursor(list_mode);
    display_default_message();
}
function isRT() {
    global_for_guild_1.g_mvm.clear_message();
    go_back_guld_menu();
}
function go_back_guld_menu() {
    clear_view();
    global_for_guild_1.g_ctls.deact();
    (0, F_guild_menu_1.act_guld_menu)();
}
function display_default_message() {
    switch (mode) {
        case 'tomz_nor_maze':
            global_for_guild_1.g_mvm.normal_message('どの迷宮に潜りますか？　切替キー: ジャンプ・ポイント');
            break;
        case 'tomz_jmp_maze':
            global_for_guild_1.g_mvm.notice_message('この迷宮に潜ります');
            break;
        case 'tomz_nor_mvpt':
            global_for_guild_1.g_mvm.normal_message('どのポイントにジャンプしますか？　切替キー: 迷宮入り口');
            break;
        case 'tomz_jmp_mvpt':
            global_for_guild_1.g_mvm.notice_message('このポイントにジャンプします');
            break;
        default:
            global_for_guild_1.g_mvm.normal_message('');
            break;
    }
}


/***/ }),

/***/ "./src/mai_guld/global_for_guild.ts":
/*!******************************************!*\
  !*** ./src/mai_guld/global_for_guild.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.g_dialog = exports.g_vsw = exports.g_ctls = exports.g_mvm = exports.g_guld = exports.g_team = exports.g_maze_inf = exports.g_all_mvpt = exports.g_all_guld = exports.g_all_team = exports.g_all_maze = void 0;
exports.init_before_games = init_before_games;
exports.init_after_loaded_DOM = init_after_loaded_DOM;
exports.init_debug_mode = init_debug_mode;
const global_1 = __webpack_require__(/*! ../d_cmn/global */ "./src/d_cmn/global.ts");
const F_load_and_save_1 = __webpack_require__(/*! ../d_cmn/F_load_and_save */ "./src/d_cmn/F_load_and_save.ts");
const C_Team_1 = __webpack_require__(/*! ../d_mdl/C_Team */ "./src/d_mdl/C_Team.ts");
const C_Guild_1 = __webpack_require__(/*! ../d_mdl/C_Guild */ "./src/d_mdl/C_Guild.ts");
exports.g_all_maze = {};
exports.g_all_team = {};
exports.g_all_guld = {};
exports.g_all_mvpt = {};
exports.g_maze_inf = {};
exports.g_team = new C_Team_1.C_Team();
exports.g_guld = new C_Guild_1.C_Guild();
const C_OneLineViewMessage_1 = __webpack_require__(/*! ../d_vie/C_OneLineViewMessage */ "./src/d_vie/C_OneLineViewMessage.ts");
const C_DefaultCtls_1 = __webpack_require__(/*! ./C_DefaultCtls */ "./src/mai_guld/C_DefaultCtls.ts");
const C_SwitchView_1 = __webpack_require__(/*! ./C_SwitchView */ "./src/mai_guld/C_SwitchView.ts");
const F_default_menu_1 = __webpack_require__(/*! ./F_default_menu */ "./src/mai_guld/F_default_menu.ts");
const F_save_menu_1 = __webpack_require__(/*! ./F_save_menu */ "./src/mai_guld/F_save_menu.ts");
function init_before_games() {
    switch (global_1.g_start_env.mode) {
        case 'new':
            init_before_new_games();
            return;
        case 'load':
            init_before_load_games();
            return;
    }
}
function init_before_new_games() {
    (0, F_load_and_save_1.get_mai_guld)().then((jsonObj) => {
        if (jsonObj.save === undefined) {
            (0, global_1._alert)('不正なデータを受信しました(New Game)' + jsonObj.emsg);
            return;
        }
        (0, F_save_menu_1.post_load_function)(jsonObj);
        global_1.g_save.mypos.set_url(global_1.g_my_url);
        exports.g_team.set_loc(global_1.g_save.mypos);
    });
    return;
}
function init_before_load_games() {
    const uno = Number(global_1.g_start_env.opt);
    (0, F_load_and_save_1.general_load)(uno).then((jsonObj) => {
        (0, F_save_menu_1.post_load_function)(jsonObj);
    });
}
function init_after_loaded_DOM() {
    (0, global_1.init_after_loaded_DOM_in_common)('debug_mode', 'sytm_logs_pane');
    exports.g_mvm = C_OneLineViewMessage_1.C_OneLineViewMessage.getObj('guld_head_message');
    exports.g_ctls = C_DefaultCtls_1.C_DefaultCtls.getObj();
    exports.g_vsw = C_SwitchView_1.C_SwitchView.getObj();
    init_debug_mode();
    (0, F_default_menu_1.init_menu)();
    stop_double_click();
    global_1.g_ready_games.setFunction(init_before_games);
    global_1.g_ready_games.setLoadedDOM();
}
function init_debug_mode() {
    try {
        const alert = document.getElementById('alert_mode');
        alert === null || alert === void 0 ? void 0 : alert.style.setProperty('display', 'none');
        alert === null || alert === void 0 ? void 0 : alert.addEventListener("click", (event) => {
            try {
                global_1.g_alert.show();
            }
            catch (err) { }
            ;
        });
        global_1.g_debug.setObj({
            yn: false,
            onName: 'DEBUG',
            offName: '通常',
            onClass: 'debug',
            offClass: 'normal',
        });
        global_1.g_debug.addFnc(toggle_debug_mode);
        const btn = document.getElementById('debug_mode');
        window.addEventListener("keydown", (event) => {
            switch (event.code) {
                case "NumpadMultiply":
                case "Escape":
                    btn.click();
                    break;
            }
        });
        return;
    }
    catch (err) {
        return;
    }
    // removed by dead control flow
{}
}
function stop_double_click() {
    window.addEventListener('dblclick', (evt) => { evt.preventDefault(); });
}
function toggle_debug_mode(yn) {
    const alert = document.getElementById('alert_mode');
    const display = yn ? 'block' : 'none';
    alert === null || alert === void 0 ? void 0 : alert.style.setProperty('display', display);
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**********************************!*\
  !*** ./src/mai_guld/mai_guld.ts ***!
  \**********************************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const global_for_guild_1 = __webpack_require__(/*! ./global_for_guild */ "./src/mai_guld/global_for_guild.ts");
window.addEventListener('DOMContentLoaded', function () {
    (0, global_for_guild_1.init_after_loaded_DOM)();
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,