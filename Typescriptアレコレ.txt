とほほのTypescript入門
https://www.tohoho-web.com/ex/typescript.html


TypeScriptで連想配列を定義する
// 連想配列
let list1: { str: string; flag: boolean } = {
    str: 'string',
    flag: true
};

// 配列内連想配列
let list2: { key: string; index: boolean }[] = [
    {
      key: 'string',
      index: true
    },
    {
      key: 'hogehoge',
      index: false
    }
];

// interface
interface list3 {
    id: number,
    season: 'spring' | 'summer' | 'autumn' | 'winter'
}

let obj: list3 = {
    id: 1,
    season: 'spring'
};


オブジェクト(Object)の値(value)からキー(key)を検索して取得する方法は、３つあります。

find()

type Numbers = {
    [key: string]: number
}

const nums: Numbers = { 
    "one": 1, 
    "two": 2,
    "three": 3,
    "four": 4,
    "five": 5,
}

//3のキーを検索して取得
let result = Object.keys(nums).find(key => nums[key] === 3);

console.log(result);


filter()

type Numbers = {
    [key: string]: number
}

const nums: Numbers = { 
    "one": 1, 
    "two": 2,
    "three": 3,
    "four": 4,
    "five": 5,
}

//3のキーを検索して取得
let result = Object.keys(nums).filter(key => nums[key] === 3);
console.log(result);


ループ

//obj=対象のオブジェクト, value=検索対象の値
let result = '';
for (const key in obj) {
    if (obj[key] === value) { //検索対象の値を検索
        result = key; //値からキーを取得
    }
}




文字列の配列化
//forEach()を使う場合
Object.keys(obj).forEach(function(key){
    if (obj[key] === value) {
        result = key;
    }
});


//[...文字列]という形がスプレット演算子です。
const str = "konnitiwa";
const array = [...str];
console.log(array);

// split()でも変換できます。
const array2 = str.split("");
console.log(array2);



区切り文字
１つ目は、区切り文字で分割する方法です。

//text=対象の文字列, sep=区切り文字
const result = text.split(sep);


文字数
２つ目は、文字数で分割する方法です。

//text=対象の文字列, n=文字数
const result = text.match(/.{1,n}/g);

正規表現
３つ目は、正規表現で分割する方法です。

const result = text.split(/正規表現/オプション);
使用例

const text = "A0BC1DEF2GH3IJK";
const result = text.split(/[0-9]/);
console.log(result);

出力：
[ 'A', 'BC', 'DEF', 'GH', 'IJK' ]



配列(array)の要素同士を結合して文字列に変換するには？

//array=対象の配列, sep=区切り文字
const result = array.join(sep)






配列に値を追加する(先頭・末尾・位置指定)

先頭に追加する方法
配列オブジェクト.unshift(追加する値);

末尾に追加する方法
配列オブジェクト.push(追加する値);

位置を指定して追加する方法
配列オブジェクト.splice(追加する位置, 0, 追加する値);


オブジェクト型を配列にする
type Data = {
    a: string,
    b: string,
};
const data: Data = {
    a: 'A',
    b: 'B',
};

Object.entries(data).map(([key, value]) => ({key, value}));

console.log(Object.entries(data)); // [["a", "A"], ["b", "B"]] 
// mapメソッドは配列の全要素を呼び出して新たな配列を作る
// ([key, value])で、data[0]の場合は"a"をkey、"A"をvalueとして呼び出し
// ({key, value})で、{'key': key, 'value': value}として配列に格納する
console.log(Object.entries(data).map(([key, value]) => ({key, value})));
// [{
//  "key": "a",
//  "value": "A"
// }, {
//  "key": "b",
//  "value": "B"
// }] 


Object.entries(data).map(([key, value]) => ({[key], value}));
とかは？


JavaScriptのモジュールを理解する
https://qiita.com/kandalog/items/d8de000101f438e66077


【JavaScript入門】onloadイベントの使い方とハマりやすい注意点とは
https://www.sejuku.net/blog/19754

DOMの読み込み待ちとか
imgの読み込み待ちとかとか


XMLHttpRequestのsend関数の仕様
https://developer.mozilla.org/ja/docs/Web/API/XMLHttpRequest/send




//正規表現でカンマ区切りにする
var num = 1234567;
var result = String(num).replace(/(d)(?=(d{3})+(?!d))/g, "$1,");




DOMの型いろいろ
https://www.s-gakuenblog.com/programming/typescript/ts3/

const js_p_1:HTMLElement  | null = document.getElementById("js-p-1");





const js_div_selector:HTMLDivElement | null = document.querySelector("div");
console.log(js_div_selector);
const js_div_selector_all:NodeListOf<HTMLDivElement> = document.querySelectorAll("div");
console.log(js_div_selector_all);
const js_p_1:HTMLElement  | null = document.getElementById("js-p-1");

const js_label:NodeListOf<HTMLLabelElement> = document.querySelectorAll("label");
const js_btn_1:HTMLElement  | null= document.getElementById("js-btn-1");
const btn2:HTMLElement | null = document.getElementById("js-btn-2");
const colorAry:string[] = ["#FFD489","#FFB64D","#FFE543","#C3FF43","#82FF43","#43FFAA","#5FFAFF","#5FBDFF","#5F6DFF"];
const bg:HTMLElement | null = document.getElementById("js-submit-2");

const randomColor = ():string =>{
    let i:number = Math.floor(Math.random()*(colorAry.length+1));
    return colorAry[i];
}
const changeBgCol = ():void => {
    bg.style.backgroundColor = randomColor();
}

btn2.addEventListener("click",changeBgCol);


TypeScriptはJavaScriptを100％カバーしていますので、もちろんDOMの型も用意されています。

HTMLElement
NodeListOf
HTMLLabelElement
HTMLDivElement
HTMLParagraphElement
また、VScodeを使っている方で、TSファイルを編集している時、マウスカーソルを変数や関数にホバーさせると、型を推論してくれます。それを参考にして型を宣言するということも一つの手です。
この他にも様々な型があります。それだけ、多くの型があるということになります。



JavaScriptのボタン作成とクリックイベント処理
https://dev-k.hatenablog.com/entry/js-button-creation-and-click-event-processing-dev-k

// ボタン要素を作成
let btn = document.createElement("button");

// ボタンのテキストを設定
btn.innerHTML = "Click Me";

// ボタンを追加する場所を選択
let target = document.getElementById("target");

// ボタンを追加
target.appendChild(btn);


ボタン オブジェクトのプロパティは下記となります。

Property	概要
autofocus	ページロード時に
ボタンに自動的にフォーカスが当たるようにするかどうかを設定または返します
disabled	ボタンが無効であるかどうかの設定または返します。
form	ボタンを含むフォームへの参照を返します。
formAction	ボタンのformaction属性の値を設定または返します。
formEnctype	ボタンの formenctype 属性の値を設定または返します。
formMethod	ボタンのformmethod属性の値を設定または返します。
formNoValidate	送信時にフォームデータの検証を行うか否かを設定または返します。
formTarget	ボタンのformtarget属性の値を設定または返します。
name	ボタンのname属性の値を設定または返します。
type	ボタンの種類を設定または返します。
value	ボタンのvalue属性の値を設定または返します。


// ボタンオブジェクトの作成
let btn = document.createElement("button");

// ボタンのテキストを設定
btn.innerHTML = "送信";

// ボタンのタイプを設定
btn.type = "submit";

// ボタンのname属性を設定
btn.name = "submitBtn";

// ボタンをドキュメントに追加
document.body.appendChild(btn);


// 新しいボタン要素を作成
let btn = document.createElement("button");

// ボタンのテキストを設定
btn.innerHTML = "Click me";

// ボタンにクリックイベントのリスナーを追加
btn.addEventListener("click",
function () {
    alert("最初のクリック動作");
  },
  false
);

btn.addEventListener("click",
  function () {
 alert("addEventListenerで2回目のクリック動作を行う。");
  },
  false
);

// ボタンをbody要素に追加
document.body.appendChild(btn);


function clickHandler() {
  alert("Clicked!");
  removeClickEvent();
}

クリックイベントハンドラを定義し、削除する方法を示しています。
const btn = document.createElement("button");
document.body.appendChild(btn);
btn.innerHTML = "Click me";
btn.addEventListener("click", clickHandler);

function removeClickEvent() {
  setTimeout(() => {
    const buttonClicked = clickHandler;
    btn.removeEventListener("click", buttonClicked);
    alert("イベントリスナーが削除されました");
  }, 2000);
}






